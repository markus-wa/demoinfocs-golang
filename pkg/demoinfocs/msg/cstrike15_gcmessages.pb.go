// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cstrike15_gcmessages.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ECsgoGCMsg int32

const (
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Base                                   ECsgoGCMsg = 9100
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingStart                       ECsgoGCMsg = 9101
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingStop                        ECsgoGCMsg = 9102
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing           ECsgoGCMsg = 9103
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate             ECsgoGCMsg = 9104
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve            ECsgoGCMsg = 9105
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse   ECsgoGCMsg = 9106
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve            ECsgoGCMsg = 9107
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats            ECsgoGCMsg = 9108
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello              ECsgoGCMsg = 9109
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello              ECsgoGCMsg = 9110
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd              ECsgoGCMsg = 9111
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon            ECsgoGCMsg = 9112
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick               ECsgoGCMsg = 9113
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm            ECsgoGCMsg = 9114
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats          ECsgoGCMsg = 9115
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate         ECsgoGCMsg = 9116
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate       ECsgoGCMsg = 9117
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty       ECsgoGCMsg = 9118
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportPlayer                     ECsgoGCMsg = 9119
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportServer                     ECsgoGCMsg = 9120
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayer                    ECsgoGCMsg = 9121
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportResponse                   ECsgoGCMsg = 9122
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery               ECsgoGCMsg = 9123
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse       ECsgoGCMsg = 9124
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_WatchInfoUsers                         ECsgoGCMsg = 9126
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile            ECsgoGCMsg = 9127
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayersProfile                         ECsgoGCMsg = 9128
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate              ECsgoGCMsg = 9131
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment          ECsgoGCMsg = 9132
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus              ECsgoGCMsg = 9133
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientTextMsg                       ECsgoGCMsg = 9134
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCTextMsg                       ECsgoGCMsg = 9135
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops                 ECsgoGCMsg = 9136
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification        ECsgoGCMsg = 9137
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2         ECsgoGCMsg = 9138
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchList                              ECsgoGCMsg = 9139
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames       ECsgoGCMsg = 9140
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames        ECsgoGCMsg = 9141
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate             ECsgoGCMsg = 9142
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo         ECsgoGCMsg = 9144
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ECsgoGCMsg = 9145
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames        ECsgoGCMsg = 9146
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo           ECsgoGCMsg = 9147
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest                ECsgoGCMsg = 9148
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse               ECsgoGCMsg = 9149
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo         ECsgoGCMsg = 9150
	ECsgoGCMsg_k_EMsgGCToGCReloadVersions                                  ECsgoGCMsg = 9151
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote                 ECsgoGCMsg = 9152
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Server2GCClientValidate                ECsgoGCMsg = 9153
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser        ECsgoGCMsg = 9154
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure   ECsgoGCMsg = 9155
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest   ECsgoGCMsg = 9156
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse  ECsgoGCMsg = 9157
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_AccountPrivacySettings                 ECsgoGCMsg = 9158
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_SetMyActivityInfo                      ECsgoGCMsg = 9159
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions  ECsgoGCMsg = 9160
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions   ECsgoGCMsg = 9161
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_DraftSummary                           ECsgoGCMsg = 9162
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData            ECsgoGCMsg = 9163
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestJoinServerData            ECsgoGCMsg = 9164
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestNewMission                ECsgoGCMsg = 9165
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded              ECsgoGCMsg = 9166
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo                ECsgoGCMsg = 9167
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Subscribe                               ECsgoGCMsg = 9168
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Unsubscribe                             ECsgoGCMsg = 9169
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Play                                    ECsgoGCMsg = 9170
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_AcknowledgePenalty                     ECsgoGCMsg = 9171
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin           ECsgoGCMsg = 9172
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientGlobalStats                   ECsgoGCMsg = 9173
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCStreamUnlock                  ECsgoGCMsg = 9174
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_FantasyRequestClientData               ECsgoGCMsg = 9175
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_FantasyUpdateClientData                ECsgoGCMsg = 9176
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket          ECsgoGCMsg = 9177
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientToGCRequestTicket                ECsgoGCMsg = 9178
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientToGCRequestElevate               ECsgoGCMsg = 9179
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat                             ECsgoGCMsg = 9180
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat_Subscribe                   ECsgoGCMsg = 9181
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe                 ECsgoGCMsg = 9182
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientAuthKeyCode                      ECsgoGCMsg = 9183
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GotvSyncPacket                         ECsgoGCMsg = 9184
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPlayerDecalSign                  ECsgoGCMsg = 9185
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientLogonFatalError                  ECsgoGCMsg = 9187
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPollState                        ECsgoGCMsg = 9188
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Register                         ECsgoGCMsg = 9189
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Unregister                       ECsgoGCMsg = 9190
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Search                           ECsgoGCMsg = 9191
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Invite                           ECsgoGCMsg = 9192
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Account_RequestCoPlays                 ECsgoGCMsg = 9193
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientGCRankUpdate                     ECsgoGCMsg = 9194
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestOffers                    ECsgoGCMsg = 9195
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientAccountBalance                   ECsgoGCMsg = 9196
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPartyJoinRelay                   ECsgoGCMsg = 9197
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPartyWarning                     ECsgoGCMsg = 9198
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial       ECsgoGCMsg = 9199
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_SetEventFavorite                       ECsgoGCMsg = 9200
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GetEventFavorites_Request              ECsgoGCMsg = 9201
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPerfReport                       ECsgoGCMsg = 9202
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GetEventFavorites_Response             ECsgoGCMsg = 9203
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestSouvenir                  ECsgoGCMsg = 9204
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportValidation                 ECsgoGCMsg = 9205
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode              ECsgoGCMsg = 9206
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientRequestValidation             ECsgoGCMsg = 9207
)

var ECsgoGCMsg_name = map[int32]string{
	9100: "k_EMsgGCCStrike15_v2_Base",
	9101: "k_EMsgGCCStrike15_v2_MatchmakingStart",
	9102: "k_EMsgGCCStrike15_v2_MatchmakingStop",
	9103: "k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing",
	9104: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate",
	9105: "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve",
	9106: "k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse",
	9107: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve",
	9108: "k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats",
	9109: "k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello",
	9110: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello",
	9111: "k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd",
	9112: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon",
	9113: "k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick",
	9114: "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm",
	9115: "k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats",
	9116: "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate",
	9117: "k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate",
	9118: "k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty",
	9119: "k_EMsgGCCStrike15_v2_ClientReportPlayer",
	9120: "k_EMsgGCCStrike15_v2_ClientReportServer",
	9121: "k_EMsgGCCStrike15_v2_ClientCommendPlayer",
	9122: "k_EMsgGCCStrike15_v2_ClientReportResponse",
	9123: "k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery",
	9124: "k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse",
	9126: "k_EMsgGCCStrike15_v2_WatchInfoUsers",
	9127: "k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile",
	9128: "k_EMsgGCCStrike15_v2_PlayersProfile",
	9131: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate",
	9132: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment",
	9133: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus",
	9134: "k_EMsgGCCStrike15_v2_GC2ClientTextMsg",
	9135: "k_EMsgGCCStrike15_v2_Client2GCTextMsg",
	9136: "k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops",
	9137: "k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification",
	9138: "k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2",
	9139: "k_EMsgGCCStrike15_v2_MatchList",
	9140: "k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames",
	9141: "k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames",
	9142: "k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate",
	9144: "k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo",
	9145: "k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification",
	9146: "k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames",
	9147: "k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo",
	9148: "k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest",
	9149: "k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse",
	9150: "k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo",
	9151: "k_EMsgGCToGCReloadVersions",
	9152: "k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote",
	9153: "k_EMsgGCCStrike15_v2_Server2GCClientValidate",
	9154: "k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser",
	9155: "k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure",
	9156: "k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest",
	9157: "k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse",
	9158: "k_EMsgGCCStrike15_v2_AccountPrivacySettings",
	9159: "k_EMsgGCCStrike15_v2_SetMyActivityInfo",
	9160: "k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions",
	9161: "k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions",
	9162: "k_EMsgGCCStrike15_v2_DraftSummary",
	9163: "k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData",
	9164: "k_EMsgGCCStrike15_v2_ClientRequestJoinServerData",
	9165: "k_EMsgGCCStrike15_v2_ClientRequestNewMission",
	9166: "k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded",
	9167: "k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo",
	9168: "k_EMsgGC_GlobalGame_Subscribe",
	9169: "k_EMsgGC_GlobalGame_Unsubscribe",
	9170: "k_EMsgGC_GlobalGame_Play",
	9171: "k_EMsgGCCStrike15_v2_AcknowledgePenalty",
	9172: "k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin",
	9173: "k_EMsgGCCStrike15_v2_GC2ClientGlobalStats",
	9174: "k_EMsgGCCStrike15_v2_Client2GCStreamUnlock",
	9175: "k_EMsgGCCStrike15_v2_FantasyRequestClientData",
	9176: "k_EMsgGCCStrike15_v2_FantasyUpdateClientData",
	9177: "k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket",
	9178: "k_EMsgGCCStrike15_v2_ClientToGCRequestTicket",
	9179: "k_EMsgGCCStrike15_v2_ClientToGCRequestElevate",
	9180: "k_EMsgGCCStrike15_v2_GlobalChat",
	9181: "k_EMsgGCCStrike15_v2_GlobalChat_Subscribe",
	9182: "k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe",
	9183: "k_EMsgGCCStrike15_v2_ClientAuthKeyCode",
	9184: "k_EMsgGCCStrike15_v2_GotvSyncPacket",
	9185: "k_EMsgGCCStrike15_v2_ClientPlayerDecalSign",
	9187: "k_EMsgGCCStrike15_v2_ClientLogonFatalError",
	9188: "k_EMsgGCCStrike15_v2_ClientPollState",
	9189: "k_EMsgGCCStrike15_v2_Party_Register",
	9190: "k_EMsgGCCStrike15_v2_Party_Unregister",
	9191: "k_EMsgGCCStrike15_v2_Party_Search",
	9192: "k_EMsgGCCStrike15_v2_Party_Invite",
	9193: "k_EMsgGCCStrike15_v2_Account_RequestCoPlays",
	9194: "k_EMsgGCCStrike15_v2_ClientGCRankUpdate",
	9195: "k_EMsgGCCStrike15_v2_ClientRequestOffers",
	9196: "k_EMsgGCCStrike15_v2_ClientAccountBalance",
	9197: "k_EMsgGCCStrike15_v2_ClientPartyJoinRelay",
	9198: "k_EMsgGCCStrike15_v2_ClientPartyWarning",
	9199: "k_EMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial",
	9200: "k_EMsgGCCStrike15_v2_SetEventFavorite",
	9201: "k_EMsgGCCStrike15_v2_GetEventFavorites_Request",
	9202: "k_EMsgGCCStrike15_v2_ClientPerfReport",
	9203: "k_EMsgGCCStrike15_v2_GetEventFavorites_Response",
	9204: "k_EMsgGCCStrike15_v2_ClientRequestSouvenir",
	9205: "k_EMsgGCCStrike15_v2_ClientReportValidation",
	9206: "k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode",
	9207: "k_EMsgGCCStrike15_v2_GC2ClientRequestValidation",
}

var ECsgoGCMsg_value = map[string]int32{
	"k_EMsgGCCStrike15_v2_Base":                                   9100,
	"k_EMsgGCCStrike15_v2_MatchmakingStart":                       9101,
	"k_EMsgGCCStrike15_v2_MatchmakingStop":                        9102,
	"k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing":           9103,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate":             9104,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve":            9105,
	"k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse":   9106,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve":            9107,
	"k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats":            9108,
	"k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello":              9109,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello":              9110,
	"k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd":              9111,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon":            9112,
	"k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick":               9113,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm":            9114,
	"k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats":          9115,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate":         9116,
	"k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate":       9117,
	"k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty":       9118,
	"k_EMsgGCCStrike15_v2_ClientReportPlayer":                     9119,
	"k_EMsgGCCStrike15_v2_ClientReportServer":                     9120,
	"k_EMsgGCCStrike15_v2_ClientCommendPlayer":                    9121,
	"k_EMsgGCCStrike15_v2_ClientReportResponse":                   9122,
	"k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery":               9123,
	"k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse":       9124,
	"k_EMsgGCCStrike15_v2_WatchInfoUsers":                         9126,
	"k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile":            9127,
	"k_EMsgGCCStrike15_v2_PlayersProfile":                         9128,
	"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate":              9131,
	"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment":          9132,
	"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus":              9133,
	"k_EMsgGCCStrike15_v2_GC2ClientTextMsg":                       9134,
	"k_EMsgGCCStrike15_v2_Client2GCTextMsg":                       9135,
	"k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops":                 9136,
	"k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification":        9137,
	"k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2":         9138,
	"k_EMsgGCCStrike15_v2_MatchList":                              9139,
	"k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames":       9140,
	"k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames":        9141,
	"k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate":             9142,
	"k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo":         9144,
	"k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification": 9145,
	"k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames":        9146,
	"k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo":           9147,
	"k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest":                9148,
	"k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse":               9149,
	"k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo":         9150,
	"k_EMsgGCToGCReloadVersions":                                  9151,
	"k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote":                 9152,
	"k_EMsgGCCStrike15_v2_Server2GCClientValidate":                9153,
	"k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser":        9154,
	"k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure":   9155,
	"k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest":   9156,
	"k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse":  9157,
	"k_EMsgGCCStrike15_v2_AccountPrivacySettings":                 9158,
	"k_EMsgGCCStrike15_v2_SetMyActivityInfo":                      9159,
	"k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions":  9160,
	"k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions":   9161,
	"k_EMsgGCCStrike15_v2_DraftSummary":                           9162,
	"k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData":            9163,
	"k_EMsgGCCStrike15_v2_ClientRequestJoinServerData":            9164,
	"k_EMsgGCCStrike15_v2_ClientRequestNewMission":                9165,
	"k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded":              9166,
	"k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo":                9167,
	"k_EMsgGC_GlobalGame_Subscribe":                               9168,
	"k_EMsgGC_GlobalGame_Unsubscribe":                             9169,
	"k_EMsgGC_GlobalGame_Play":                                    9170,
	"k_EMsgGCCStrike15_v2_AcknowledgePenalty":                     9171,
	"k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin":           9172,
	"k_EMsgGCCStrike15_v2_GC2ClientGlobalStats":                   9173,
	"k_EMsgGCCStrike15_v2_Client2GCStreamUnlock":                  9174,
	"k_EMsgGCCStrike15_v2_FantasyRequestClientData":               9175,
	"k_EMsgGCCStrike15_v2_FantasyUpdateClientData":                9176,
	"k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket":          9177,
	"k_EMsgGCCStrike15_v2_ClientToGCRequestTicket":                9178,
	"k_EMsgGCCStrike15_v2_ClientToGCRequestElevate":               9179,
	"k_EMsgGCCStrike15_v2_GlobalChat":                             9180,
	"k_EMsgGCCStrike15_v2_GlobalChat_Subscribe":                   9181,
	"k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe":                 9182,
	"k_EMsgGCCStrike15_v2_ClientAuthKeyCode":                      9183,
	"k_EMsgGCCStrike15_v2_GotvSyncPacket":                         9184,
	"k_EMsgGCCStrike15_v2_ClientPlayerDecalSign":                  9185,
	"k_EMsgGCCStrike15_v2_ClientLogonFatalError":                  9187,
	"k_EMsgGCCStrike15_v2_ClientPollState":                        9188,
	"k_EMsgGCCStrike15_v2_Party_Register":                         9189,
	"k_EMsgGCCStrike15_v2_Party_Unregister":                       9190,
	"k_EMsgGCCStrike15_v2_Party_Search":                           9191,
	"k_EMsgGCCStrike15_v2_Party_Invite":                           9192,
	"k_EMsgGCCStrike15_v2_Account_RequestCoPlays":                 9193,
	"k_EMsgGCCStrike15_v2_ClientGCRankUpdate":                     9194,
	"k_EMsgGCCStrike15_v2_ClientRequestOffers":                    9195,
	"k_EMsgGCCStrike15_v2_ClientAccountBalance":                   9196,
	"k_EMsgGCCStrike15_v2_ClientPartyJoinRelay":                   9197,
	"k_EMsgGCCStrike15_v2_ClientPartyWarning":                     9198,
	"k_EMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial":       9199,
	"k_EMsgGCCStrike15_v2_SetEventFavorite":                       9200,
	"k_EMsgGCCStrike15_v2_GetEventFavorites_Request":              9201,
	"k_EMsgGCCStrike15_v2_ClientPerfReport":                       9202,
	"k_EMsgGCCStrike15_v2_GetEventFavorites_Response":             9203,
	"k_EMsgGCCStrike15_v2_ClientRequestSouvenir":                  9204,
	"k_EMsgGCCStrike15_v2_ClientReportValidation":                 9205,
	"k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode":              9206,
	"k_EMsgGCCStrike15_v2_GC2ClientRequestValidation":             9207,
}

func (x ECsgoGCMsg) Enum() *ECsgoGCMsg {
	p := new(ECsgoGCMsg)
	*p = x
	return p
}

func (x ECsgoGCMsg) String() string {
	return proto.EnumName(ECsgoGCMsg_name, int32(x))
}

func (x *ECsgoGCMsg) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ECsgoGCMsg_value, data, "ECsgoGCMsg")
	if err != nil {
		return err
	}
	*x = ECsgoGCMsg(value)
	return nil
}

func (ECsgoGCMsg) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{0}
}

type ECsgoSteamUserStat int32

const (
	ECsgoSteamUserStat_k_ECsgoSteamUserStat_XpEarnedGames        ECsgoSteamUserStat = 1
	ECsgoSteamUserStat_k_ECsgoSteamUserStat_MatchWinsCompetitive ECsgoSteamUserStat = 2
	ECsgoSteamUserStat_k_ECsgoSteamUserStat_SurvivedDangerZone   ECsgoSteamUserStat = 3
)

var ECsgoSteamUserStat_name = map[int32]string{
	1: "k_ECsgoSteamUserStat_XpEarnedGames",
	2: "k_ECsgoSteamUserStat_MatchWinsCompetitive",
	3: "k_ECsgoSteamUserStat_SurvivedDangerZone",
}

var ECsgoSteamUserStat_value = map[string]int32{
	"k_ECsgoSteamUserStat_XpEarnedGames":        1,
	"k_ECsgoSteamUserStat_MatchWinsCompetitive": 2,
	"k_ECsgoSteamUserStat_SurvivedDangerZone":   3,
}

func (x ECsgoSteamUserStat) Enum() *ECsgoSteamUserStat {
	p := new(ECsgoSteamUserStat)
	*p = x
	return p
}

func (x ECsgoSteamUserStat) String() string {
	return proto.EnumName(ECsgoSteamUserStat_name, int32(x))
}

func (x *ECsgoSteamUserStat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ECsgoSteamUserStat_value, data, "ECsgoSteamUserStat")
	if err != nil {
		return err
	}
	*x = ECsgoSteamUserStat(value)
	return nil
}

func (ECsgoSteamUserStat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{1}
}

type EClientReportingVersion int32

const (
	EClientReportingVersion_k_EClientReportingVersion_OldVersion         EClientReportingVersion = 0
	EClientReportingVersion_k_EClientReportingVersion_SupportsSecureMode EClientReportingVersion = 1
)

var EClientReportingVersion_name = map[int32]string{
	0: "k_EClientReportingVersion_OldVersion",
	1: "k_EClientReportingVersion_SupportsSecureMode",
}

var EClientReportingVersion_value = map[string]int32{
	"k_EClientReportingVersion_OldVersion":         0,
	"k_EClientReportingVersion_SupportsSecureMode": 1,
}

func (x EClientReportingVersion) Enum() *EClientReportingVersion {
	p := new(EClientReportingVersion)
	*p = x
	return p
}

func (x EClientReportingVersion) String() string {
	return proto.EnumName(EClientReportingVersion_name, int32(x))
}

func (x *EClientReportingVersion) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EClientReportingVersion_value, data, "EClientReportingVersion")
	if err != nil {
		return err
	}
	*x = EClientReportingVersion(value)
	return nil
}

func (EClientReportingVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{2}
}

type GameServerPing struct {
	Ping      int32  `protobuf:"varint,2,opt,name=ping" json:"ping"`
	Ip        uint32 `protobuf:"varint,3,opt,name=ip" json:"ip"`
	Instances uint32 `protobuf:"varint,5,opt,name=instances" json:"instances"`
}

func (m *GameServerPing) Reset()         { *m = GameServerPing{} }
func (m *GameServerPing) String() string { return proto.CompactTextString(m) }
func (*GameServerPing) ProtoMessage()    {}
func (*GameServerPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{0}
}
func (m *GameServerPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameServerPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameServerPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameServerPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameServerPing.Merge(m, src)
}
func (m *GameServerPing) XXX_Size() int {
	return m.Size()
}
func (m *GameServerPing) XXX_DiscardUnknown() {
	xxx_messageInfo_GameServerPing.DiscardUnknown(m)
}

var xxx_messageInfo_GameServerPing proto.InternalMessageInfo

func (m *GameServerPing) GetPing() int32 {
	if m != nil {
		return m.Ping
	}
	return 0
}

func (m *GameServerPing) GetIp() uint32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *GameServerPing) GetInstances() uint32 {
	if m != nil {
		return m.Instances
	}
	return 0
}

type DataCenterPing struct {
	DataCenterId uint32 `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id"`
	Ping         int32  `protobuf:"zigzag32,2,opt,name=ping" json:"ping"`
}

func (m *DataCenterPing) Reset()         { *m = DataCenterPing{} }
func (m *DataCenterPing) String() string { return proto.CompactTextString(m) }
func (*DataCenterPing) ProtoMessage()    {}
func (*DataCenterPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{1}
}
func (m *DataCenterPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataCenterPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataCenterPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataCenterPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCenterPing.Merge(m, src)
}
func (m *DataCenterPing) XXX_Size() int {
	return m.Size()
}
func (m *DataCenterPing) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCenterPing.DiscardUnknown(m)
}

var xxx_messageInfo_DataCenterPing proto.InternalMessageInfo

func (m *DataCenterPing) GetDataCenterId() uint32 {
	if m != nil {
		return m.DataCenterId
	}
	return 0
}

func (m *DataCenterPing) GetPing() int32 {
	if m != nil {
		return m.Ping
	}
	return 0
}

type DetailedSearchStatistic struct {
	GameType         uint32 `protobuf:"varint,1,opt,name=game_type,json=gameType" json:"game_type"`
	SearchTimeAvg    uint32 `protobuf:"varint,2,opt,name=search_time_avg,json=searchTimeAvg" json:"search_time_avg"`
	PlayersSearching uint32 `protobuf:"varint,4,opt,name=players_searching,json=playersSearching" json:"players_searching"`
}

func (m *DetailedSearchStatistic) Reset()         { *m = DetailedSearchStatistic{} }
func (m *DetailedSearchStatistic) String() string { return proto.CompactTextString(m) }
func (*DetailedSearchStatistic) ProtoMessage()    {}
func (*DetailedSearchStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{2}
}
func (m *DetailedSearchStatistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetailedSearchStatistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetailedSearchStatistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetailedSearchStatistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetailedSearchStatistic.Merge(m, src)
}
func (m *DetailedSearchStatistic) XXX_Size() int {
	return m.Size()
}
func (m *DetailedSearchStatistic) XXX_DiscardUnknown() {
	xxx_messageInfo_DetailedSearchStatistic.DiscardUnknown(m)
}

var xxx_messageInfo_DetailedSearchStatistic proto.InternalMessageInfo

func (m *DetailedSearchStatistic) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *DetailedSearchStatistic) GetSearchTimeAvg() uint32 {
	if m != nil {
		return m.SearchTimeAvg
	}
	return 0
}

func (m *DetailedSearchStatistic) GetPlayersSearching() uint32 {
	if m != nil {
		return m.PlayersSearching
	}
	return 0
}

type TournamentPlayer struct {
	AccountId      uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	PlayerNick     string `protobuf:"bytes,2,opt,name=player_nick,json=playerNick" json:"player_nick"`
	PlayerName     string `protobuf:"bytes,3,opt,name=player_name,json=playerName" json:"player_name"`
	PlayerDob      uint32 `protobuf:"varint,4,opt,name=player_dob,json=playerDob" json:"player_dob"`
	PlayerFlag     string `protobuf:"bytes,5,opt,name=player_flag,json=playerFlag" json:"player_flag"`
	PlayerLocation string `protobuf:"bytes,6,opt,name=player_location,json=playerLocation" json:"player_location"`
	PlayerDesc     string `protobuf:"bytes,7,opt,name=player_desc,json=playerDesc" json:"player_desc"`
}

func (m *TournamentPlayer) Reset()         { *m = TournamentPlayer{} }
func (m *TournamentPlayer) String() string { return proto.CompactTextString(m) }
func (*TournamentPlayer) ProtoMessage()    {}
func (*TournamentPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{3}
}
func (m *TournamentPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TournamentPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TournamentPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TournamentPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TournamentPlayer.Merge(m, src)
}
func (m *TournamentPlayer) XXX_Size() int {
	return m.Size()
}
func (m *TournamentPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_TournamentPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_TournamentPlayer proto.InternalMessageInfo

func (m *TournamentPlayer) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *TournamentPlayer) GetPlayerNick() string {
	if m != nil {
		return m.PlayerNick
	}
	return ""
}

func (m *TournamentPlayer) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *TournamentPlayer) GetPlayerDob() uint32 {
	if m != nil {
		return m.PlayerDob
	}
	return 0
}

func (m *TournamentPlayer) GetPlayerFlag() string {
	if m != nil {
		return m.PlayerFlag
	}
	return ""
}

func (m *TournamentPlayer) GetPlayerLocation() string {
	if m != nil {
		return m.PlayerLocation
	}
	return ""
}

func (m *TournamentPlayer) GetPlayerDesc() string {
	if m != nil {
		return m.PlayerDesc
	}
	return ""
}

type TournamentTeam struct {
	TeamId   int32               `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id"`
	TeamTag  string              `protobuf:"bytes,2,opt,name=team_tag,json=teamTag" json:"team_tag"`
	TeamFlag string              `protobuf:"bytes,3,opt,name=team_flag,json=teamFlag" json:"team_flag"`
	TeamName string              `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name"`
	Players  []*TournamentPlayer `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
}

func (m *TournamentTeam) Reset()         { *m = TournamentTeam{} }
func (m *TournamentTeam) String() string { return proto.CompactTextString(m) }
func (*TournamentTeam) ProtoMessage()    {}
func (*TournamentTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{4}
}
func (m *TournamentTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TournamentTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TournamentTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TournamentTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TournamentTeam.Merge(m, src)
}
func (m *TournamentTeam) XXX_Size() int {
	return m.Size()
}
func (m *TournamentTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_TournamentTeam.DiscardUnknown(m)
}

var xxx_messageInfo_TournamentTeam proto.InternalMessageInfo

func (m *TournamentTeam) GetTeamId() int32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *TournamentTeam) GetTeamTag() string {
	if m != nil {
		return m.TeamTag
	}
	return ""
}

func (m *TournamentTeam) GetTeamFlag() string {
	if m != nil {
		return m.TeamFlag
	}
	return ""
}

func (m *TournamentTeam) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *TournamentTeam) GetPlayers() []*TournamentPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

type TournamentEvent struct {
	EventId         int32  `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id"`
	EventTag        string `protobuf:"bytes,2,opt,name=event_tag,json=eventTag" json:"event_tag"`
	EventName       string `protobuf:"bytes,3,opt,name=event_name,json=eventName" json:"event_name"`
	EventTimeStart  uint32 `protobuf:"varint,4,opt,name=event_time_start,json=eventTimeStart" json:"event_time_start"`
	EventTimeEnd    uint32 `protobuf:"varint,5,opt,name=event_time_end,json=eventTimeEnd" json:"event_time_end"`
	EventPublic     int32  `protobuf:"varint,6,opt,name=event_public,json=eventPublic" json:"event_public"`
	EventStageId    int32  `protobuf:"varint,7,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id"`
	EventStageName  string `protobuf:"bytes,8,opt,name=event_stage_name,json=eventStageName" json:"event_stage_name"`
	ActiveSectionId uint32 `protobuf:"varint,9,opt,name=active_section_id,json=activeSectionId" json:"active_section_id"`
}

func (m *TournamentEvent) Reset()         { *m = TournamentEvent{} }
func (m *TournamentEvent) String() string { return proto.CompactTextString(m) }
func (*TournamentEvent) ProtoMessage()    {}
func (*TournamentEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{5}
}
func (m *TournamentEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TournamentEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TournamentEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TournamentEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TournamentEvent.Merge(m, src)
}
func (m *TournamentEvent) XXX_Size() int {
	return m.Size()
}
func (m *TournamentEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TournamentEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TournamentEvent proto.InternalMessageInfo

func (m *TournamentEvent) GetEventId() int32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *TournamentEvent) GetEventTag() string {
	if m != nil {
		return m.EventTag
	}
	return ""
}

func (m *TournamentEvent) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *TournamentEvent) GetEventTimeStart() uint32 {
	if m != nil {
		return m.EventTimeStart
	}
	return 0
}

func (m *TournamentEvent) GetEventTimeEnd() uint32 {
	if m != nil {
		return m.EventTimeEnd
	}
	return 0
}

func (m *TournamentEvent) GetEventPublic() int32 {
	if m != nil {
		return m.EventPublic
	}
	return 0
}

func (m *TournamentEvent) GetEventStageId() int32 {
	if m != nil {
		return m.EventStageId
	}
	return 0
}

func (m *TournamentEvent) GetEventStageName() string {
	if m != nil {
		return m.EventStageName
	}
	return ""
}

func (m *TournamentEvent) GetActiveSectionId() uint32 {
	if m != nil {
		return m.ActiveSectionId
	}
	return 0
}

type GlobalStatistics struct {
	PlayersOnline           uint32                     `protobuf:"varint,1,opt,name=players_online,json=playersOnline" json:"players_online"`
	ServersOnline           uint32                     `protobuf:"varint,2,opt,name=servers_online,json=serversOnline" json:"servers_online"`
	PlayersSearching        uint32                     `protobuf:"varint,3,opt,name=players_searching,json=playersSearching" json:"players_searching"`
	ServersAvailable        uint32                     `protobuf:"varint,4,opt,name=servers_available,json=serversAvailable" json:"servers_available"`
	OngoingMatches          uint32                     `protobuf:"varint,5,opt,name=ongoing_matches,json=ongoingMatches" json:"ongoing_matches"`
	SearchTimeAvg           uint32                     `protobuf:"varint,6,opt,name=search_time_avg,json=searchTimeAvg" json:"search_time_avg"`
	SearchStatistics        []*DetailedSearchStatistic `protobuf:"bytes,7,rep,name=search_statistics,json=searchStatistics" json:"search_statistics,omitempty"`
	MainPostUrl             string                     `protobuf:"bytes,8,opt,name=main_post_url,json=mainPostUrl" json:"main_post_url"`
	RequiredAppidVersion    uint32                     `protobuf:"varint,9,opt,name=required_appid_version,json=requiredAppidVersion" json:"required_appid_version"`
	PricesheetVersion       uint32                     `protobuf:"varint,10,opt,name=pricesheet_version,json=pricesheetVersion" json:"pricesheet_version"`
	TwitchStreamsVersion    uint32                     `protobuf:"varint,11,opt,name=twitch_streams_version,json=twitchStreamsVersion" json:"twitch_streams_version"`
	ActiveTournamentEventid uint32                     `protobuf:"varint,12,opt,name=active_tournament_eventid,json=activeTournamentEventid" json:"active_tournament_eventid"`
	ActiveSurveyId          uint32                     `protobuf:"varint,13,opt,name=active_survey_id,json=activeSurveyId" json:"active_survey_id"`
	Rtime32Cur              uint32                     `protobuf:"varint,14,opt,name=rtime32_cur,json=rtime32Cur" json:"rtime32_cur"`
	Rtime32EventStart       uint32                     `protobuf:"varint,15,opt,name=rtime32_event_start,json=rtime32EventStart" json:"rtime32_event_start"`
}

func (m *GlobalStatistics) Reset()         { *m = GlobalStatistics{} }
func (m *GlobalStatistics) String() string { return proto.CompactTextString(m) }
func (*GlobalStatistics) ProtoMessage()    {}
func (*GlobalStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{6}
}
func (m *GlobalStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalStatistics.Merge(m, src)
}
func (m *GlobalStatistics) XXX_Size() int {
	return m.Size()
}
func (m *GlobalStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalStatistics proto.InternalMessageInfo

func (m *GlobalStatistics) GetPlayersOnline() uint32 {
	if m != nil {
		return m.PlayersOnline
	}
	return 0
}

func (m *GlobalStatistics) GetServersOnline() uint32 {
	if m != nil {
		return m.ServersOnline
	}
	return 0
}

func (m *GlobalStatistics) GetPlayersSearching() uint32 {
	if m != nil {
		return m.PlayersSearching
	}
	return 0
}

func (m *GlobalStatistics) GetServersAvailable() uint32 {
	if m != nil {
		return m.ServersAvailable
	}
	return 0
}

func (m *GlobalStatistics) GetOngoingMatches() uint32 {
	if m != nil {
		return m.OngoingMatches
	}
	return 0
}

func (m *GlobalStatistics) GetSearchTimeAvg() uint32 {
	if m != nil {
		return m.SearchTimeAvg
	}
	return 0
}

func (m *GlobalStatistics) GetSearchStatistics() []*DetailedSearchStatistic {
	if m != nil {
		return m.SearchStatistics
	}
	return nil
}

func (m *GlobalStatistics) GetMainPostUrl() string {
	if m != nil {
		return m.MainPostUrl
	}
	return ""
}

func (m *GlobalStatistics) GetRequiredAppidVersion() uint32 {
	if m != nil {
		return m.RequiredAppidVersion
	}
	return 0
}

func (m *GlobalStatistics) GetPricesheetVersion() uint32 {
	if m != nil {
		return m.PricesheetVersion
	}
	return 0
}

func (m *GlobalStatistics) GetTwitchStreamsVersion() uint32 {
	if m != nil {
		return m.TwitchStreamsVersion
	}
	return 0
}

func (m *GlobalStatistics) GetActiveTournamentEventid() uint32 {
	if m != nil {
		return m.ActiveTournamentEventid
	}
	return 0
}

func (m *GlobalStatistics) GetActiveSurveyId() uint32 {
	if m != nil {
		return m.ActiveSurveyId
	}
	return 0
}

func (m *GlobalStatistics) GetRtime32Cur() uint32 {
	if m != nil {
		return m.Rtime32Cur
	}
	return 0
}

func (m *GlobalStatistics) GetRtime32EventStart() uint32 {
	if m != nil {
		return m.Rtime32EventStart
	}
	return 0
}

type OperationalStatisticDescription struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Idkey uint32 `protobuf:"varint,2,opt,name=idkey" json:"idkey"`
}

func (m *OperationalStatisticDescription) Reset()         { *m = OperationalStatisticDescription{} }
func (m *OperationalStatisticDescription) String() string { return proto.CompactTextString(m) }
func (*OperationalStatisticDescription) ProtoMessage()    {}
func (*OperationalStatisticDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{7}
}
func (m *OperationalStatisticDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationalStatisticDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationalStatisticDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationalStatisticDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationalStatisticDescription.Merge(m, src)
}
func (m *OperationalStatisticDescription) XXX_Size() int {
	return m.Size()
}
func (m *OperationalStatisticDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationalStatisticDescription.DiscardUnknown(m)
}

var xxx_messageInfo_OperationalStatisticDescription proto.InternalMessageInfo

func (m *OperationalStatisticDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OperationalStatisticDescription) GetIdkey() uint32 {
	if m != nil {
		return m.Idkey
	}
	return 0
}

type OperationalStatisticElement struct {
	Idkey  uint32  `protobuf:"varint,1,opt,name=idkey" json:"idkey"`
	Values []int32 `protobuf:"varint,2,rep,name=values" json:"values,omitempty"`
}

func (m *OperationalStatisticElement) Reset()         { *m = OperationalStatisticElement{} }
func (m *OperationalStatisticElement) String() string { return proto.CompactTextString(m) }
func (*OperationalStatisticElement) ProtoMessage()    {}
func (*OperationalStatisticElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{8}
}
func (m *OperationalStatisticElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationalStatisticElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationalStatisticElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationalStatisticElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationalStatisticElement.Merge(m, src)
}
func (m *OperationalStatisticElement) XXX_Size() int {
	return m.Size()
}
func (m *OperationalStatisticElement) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationalStatisticElement.DiscardUnknown(m)
}

var xxx_messageInfo_OperationalStatisticElement proto.InternalMessageInfo

func (m *OperationalStatisticElement) GetIdkey() uint32 {
	if m != nil {
		return m.Idkey
	}
	return 0
}

func (m *OperationalStatisticElement) GetValues() []int32 {
	if m != nil {
		return m.Values
	}
	return nil
}

type OperationalStatisticsPacket struct {
	Packetid    int32                          `protobuf:"varint,1,opt,name=packetid" json:"packetid"`
	Mstimestamp int32                          `protobuf:"varint,2,opt,name=mstimestamp" json:"mstimestamp"`
	Values      []*OperationalStatisticElement `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *OperationalStatisticsPacket) Reset()         { *m = OperationalStatisticsPacket{} }
func (m *OperationalStatisticsPacket) String() string { return proto.CompactTextString(m) }
func (*OperationalStatisticsPacket) ProtoMessage()    {}
func (*OperationalStatisticsPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{9}
}
func (m *OperationalStatisticsPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationalStatisticsPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationalStatisticsPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationalStatisticsPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationalStatisticsPacket.Merge(m, src)
}
func (m *OperationalStatisticsPacket) XXX_Size() int {
	return m.Size()
}
func (m *OperationalStatisticsPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationalStatisticsPacket.DiscardUnknown(m)
}

var xxx_messageInfo_OperationalStatisticsPacket proto.InternalMessageInfo

func (m *OperationalStatisticsPacket) GetPacketid() int32 {
	if m != nil {
		return m.Packetid
	}
	return 0
}

func (m *OperationalStatisticsPacket) GetMstimestamp() int32 {
	if m != nil {
		return m.Mstimestamp
	}
	return 0
}

func (m *OperationalStatisticsPacket) GetValues() []*OperationalStatisticElement {
	if m != nil {
		return m.Values
	}
	return nil
}

type PlayerRankingInfo struct {
	AccountId  uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	RankId     uint32  `protobuf:"varint,2,opt,name=rank_id,json=rankId" json:"rank_id"`
	Wins       uint32  `protobuf:"varint,3,opt,name=wins" json:"wins"`
	RankChange float32 `protobuf:"fixed32,4,opt,name=rank_change,json=rankChange" json:"rank_change"`
	RankTypeId uint32  `protobuf:"varint,6,opt,name=rank_type_id,json=rankTypeId" json:"rank_type_id"`
}

func (m *PlayerRankingInfo) Reset()         { *m = PlayerRankingInfo{} }
func (m *PlayerRankingInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerRankingInfo) ProtoMessage()    {}
func (*PlayerRankingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{10}
}
func (m *PlayerRankingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerRankingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerRankingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerRankingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRankingInfo.Merge(m, src)
}
func (m *PlayerRankingInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerRankingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRankingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRankingInfo proto.InternalMessageInfo

func (m *PlayerRankingInfo) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *PlayerRankingInfo) GetRankId() uint32 {
	if m != nil {
		return m.RankId
	}
	return 0
}

func (m *PlayerRankingInfo) GetWins() uint32 {
	if m != nil {
		return m.Wins
	}
	return 0
}

func (m *PlayerRankingInfo) GetRankChange() float32 {
	if m != nil {
		return m.RankChange
	}
	return 0
}

func (m *PlayerRankingInfo) GetRankTypeId() uint32 {
	if m != nil {
		return m.RankTypeId
	}
	return 0
}

type PlayerCommendationInfo struct {
	CmdFriendly uint32 `protobuf:"varint,1,opt,name=cmd_friendly,json=cmdFriendly" json:"cmd_friendly"`
	CmdTeaching uint32 `protobuf:"varint,2,opt,name=cmd_teaching,json=cmdTeaching" json:"cmd_teaching"`
	CmdLeader   uint32 `protobuf:"varint,4,opt,name=cmd_leader,json=cmdLeader" json:"cmd_leader"`
}

func (m *PlayerCommendationInfo) Reset()         { *m = PlayerCommendationInfo{} }
func (m *PlayerCommendationInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerCommendationInfo) ProtoMessage()    {}
func (*PlayerCommendationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{11}
}
func (m *PlayerCommendationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerCommendationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerCommendationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerCommendationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerCommendationInfo.Merge(m, src)
}
func (m *PlayerCommendationInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerCommendationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerCommendationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerCommendationInfo proto.InternalMessageInfo

func (m *PlayerCommendationInfo) GetCmdFriendly() uint32 {
	if m != nil {
		return m.CmdFriendly
	}
	return 0
}

func (m *PlayerCommendationInfo) GetCmdTeaching() uint32 {
	if m != nil {
		return m.CmdTeaching
	}
	return 0
}

func (m *PlayerCommendationInfo) GetCmdLeader() uint32 {
	if m != nil {
		return m.CmdLeader
	}
	return 0
}

type PlayerMedalsInfo struct {
	DisplayItemsDefidx        []uint32 `protobuf:"varint,7,rep,name=display_items_defidx,json=displayItemsDefidx" json:"display_items_defidx,omitempty"`
	FeaturedDisplayItemDefidx uint32   `protobuf:"varint,8,opt,name=featured_display_item_defidx,json=featuredDisplayItemDefidx" json:"featured_display_item_defidx"`
}

func (m *PlayerMedalsInfo) Reset()         { *m = PlayerMedalsInfo{} }
func (m *PlayerMedalsInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerMedalsInfo) ProtoMessage()    {}
func (*PlayerMedalsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{12}
}
func (m *PlayerMedalsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerMedalsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerMedalsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerMedalsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerMedalsInfo.Merge(m, src)
}
func (m *PlayerMedalsInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerMedalsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerMedalsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerMedalsInfo proto.InternalMessageInfo

func (m *PlayerMedalsInfo) GetDisplayItemsDefidx() []uint32 {
	if m != nil {
		return m.DisplayItemsDefidx
	}
	return nil
}

func (m *PlayerMedalsInfo) GetFeaturedDisplayItemDefidx() uint32 {
	if m != nil {
		return m.FeaturedDisplayItemDefidx
	}
	return 0
}

type AccountActivity struct {
	Activity uint32 `protobuf:"varint,1,opt,name=activity" json:"activity"`
	Mode     uint32 `protobuf:"varint,2,opt,name=mode" json:"mode"`
	Map      uint32 `protobuf:"varint,3,opt,name=map" json:"map"`
	Matchid  uint64 `protobuf:"varint,4,opt,name=matchid" json:"matchid"`
}

func (m *AccountActivity) Reset()         { *m = AccountActivity{} }
func (m *AccountActivity) String() string { return proto.CompactTextString(m) }
func (*AccountActivity) ProtoMessage()    {}
func (*AccountActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{13}
}
func (m *AccountActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountActivity.Merge(m, src)
}
func (m *AccountActivity) XXX_Size() int {
	return m.Size()
}
func (m *AccountActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountActivity.DiscardUnknown(m)
}

var xxx_messageInfo_AccountActivity proto.InternalMessageInfo

func (m *AccountActivity) GetActivity() uint32 {
	if m != nil {
		return m.Activity
	}
	return 0
}

func (m *AccountActivity) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *AccountActivity) GetMap() uint32 {
	if m != nil {
		return m.Map
	}
	return 0
}

func (m *AccountActivity) GetMatchid() uint64 {
	if m != nil {
		return m.Matchid
	}
	return 0
}

type TournamentMatchSetup struct {
	EventId      int32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id"`
	TeamIdCt     int32 `protobuf:"varint,2,opt,name=team_id_ct,json=teamIdCt" json:"team_id_ct"`
	TeamIdT      int32 `protobuf:"varint,3,opt,name=team_id_t,json=teamIdT" json:"team_id_t"`
	EventStageId int32 `protobuf:"varint,4,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id"`
}

func (m *TournamentMatchSetup) Reset()         { *m = TournamentMatchSetup{} }
func (m *TournamentMatchSetup) String() string { return proto.CompactTextString(m) }
func (*TournamentMatchSetup) ProtoMessage()    {}
func (*TournamentMatchSetup) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{14}
}
func (m *TournamentMatchSetup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TournamentMatchSetup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TournamentMatchSetup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TournamentMatchSetup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TournamentMatchSetup.Merge(m, src)
}
func (m *TournamentMatchSetup) XXX_Size() int {
	return m.Size()
}
func (m *TournamentMatchSetup) XXX_DiscardUnknown() {
	xxx_messageInfo_TournamentMatchSetup.DiscardUnknown(m)
}

var xxx_messageInfo_TournamentMatchSetup proto.InternalMessageInfo

func (m *TournamentMatchSetup) GetEventId() int32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *TournamentMatchSetup) GetTeamIdCt() int32 {
	if m != nil {
		return m.TeamIdCt
	}
	return 0
}

func (m *TournamentMatchSetup) GetTeamIdT() int32 {
	if m != nil {
		return m.TeamIdT
	}
	return 0
}

func (m *TournamentMatchSetup) GetEventStageId() int32 {
	if m != nil {
		return m.EventStageId
	}
	return 0
}

type ServerHltvInfo struct {
	TvUdpPort       uint32 `protobuf:"varint,1,opt,name=tv_udp_port,json=tvUdpPort" json:"tv_udp_port"`
	TvWatchKey      uint64 `protobuf:"varint,2,opt,name=tv_watch_key,json=tvWatchKey" json:"tv_watch_key"`
	TvSlots         uint32 `protobuf:"varint,3,opt,name=tv_slots,json=tvSlots" json:"tv_slots"`
	TvClients       uint32 `protobuf:"varint,4,opt,name=tv_clients,json=tvClients" json:"tv_clients"`
	TvProxies       uint32 `protobuf:"varint,5,opt,name=tv_proxies,json=tvProxies" json:"tv_proxies"`
	TvTime          uint32 `protobuf:"varint,6,opt,name=tv_time,json=tvTime" json:"tv_time"`
	GameType        uint32 `protobuf:"varint,8,opt,name=game_type,json=gameType" json:"game_type"`
	GameMapgroup    string `protobuf:"bytes,9,opt,name=game_mapgroup,json=gameMapgroup" json:"game_mapgroup"`
	GameMap         string `protobuf:"bytes,10,opt,name=game_map,json=gameMap" json:"game_map"`
	TvMasterSteamid uint64 `protobuf:"varint,11,opt,name=tv_master_steamid,json=tvMasterSteamid" json:"tv_master_steamid"`
	TvLocalSlots    uint32 `protobuf:"varint,12,opt,name=tv_local_slots,json=tvLocalSlots" json:"tv_local_slots"`
	TvLocalClients  uint32 `protobuf:"varint,13,opt,name=tv_local_clients,json=tvLocalClients" json:"tv_local_clients"`
	TvLocalProxies  uint32 `protobuf:"varint,14,opt,name=tv_local_proxies,json=tvLocalProxies" json:"tv_local_proxies"`
	TvRelaySlots    uint32 `protobuf:"varint,15,opt,name=tv_relay_slots,json=tvRelaySlots" json:"tv_relay_slots"`
	TvRelayClients  uint32 `protobuf:"varint,16,opt,name=tv_relay_clients,json=tvRelayClients" json:"tv_relay_clients"`
	TvRelayProxies  uint32 `protobuf:"varint,17,opt,name=tv_relay_proxies,json=tvRelayProxies" json:"tv_relay_proxies"`
	TvRelayAddress  uint32 `protobuf:"varint,18,opt,name=tv_relay_address,json=tvRelayAddress" json:"tv_relay_address"`
	TvRelayPort     uint32 `protobuf:"varint,19,opt,name=tv_relay_port,json=tvRelayPort" json:"tv_relay_port"`
	TvRelaySteamid  uint64 `protobuf:"varint,20,opt,name=tv_relay_steamid,json=tvRelaySteamid" json:"tv_relay_steamid"`
	Flags           uint32 `protobuf:"varint,21,opt,name=flags" json:"flags"`
}

func (m *ServerHltvInfo) Reset()         { *m = ServerHltvInfo{} }
func (m *ServerHltvInfo) String() string { return proto.CompactTextString(m) }
func (*ServerHltvInfo) ProtoMessage()    {}
func (*ServerHltvInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{15}
}
func (m *ServerHltvInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerHltvInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerHltvInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerHltvInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerHltvInfo.Merge(m, src)
}
func (m *ServerHltvInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServerHltvInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerHltvInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerHltvInfo proto.InternalMessageInfo

func (m *ServerHltvInfo) GetTvUdpPort() uint32 {
	if m != nil {
		return m.TvUdpPort
	}
	return 0
}

func (m *ServerHltvInfo) GetTvWatchKey() uint64 {
	if m != nil {
		return m.TvWatchKey
	}
	return 0
}

func (m *ServerHltvInfo) GetTvSlots() uint32 {
	if m != nil {
		return m.TvSlots
	}
	return 0
}

func (m *ServerHltvInfo) GetTvClients() uint32 {
	if m != nil {
		return m.TvClients
	}
	return 0
}

func (m *ServerHltvInfo) GetTvProxies() uint32 {
	if m != nil {
		return m.TvProxies
	}
	return 0
}

func (m *ServerHltvInfo) GetTvTime() uint32 {
	if m != nil {
		return m.TvTime
	}
	return 0
}

func (m *ServerHltvInfo) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *ServerHltvInfo) GetGameMapgroup() string {
	if m != nil {
		return m.GameMapgroup
	}
	return ""
}

func (m *ServerHltvInfo) GetGameMap() string {
	if m != nil {
		return m.GameMap
	}
	return ""
}

func (m *ServerHltvInfo) GetTvMasterSteamid() uint64 {
	if m != nil {
		return m.TvMasterSteamid
	}
	return 0
}

func (m *ServerHltvInfo) GetTvLocalSlots() uint32 {
	if m != nil {
		return m.TvLocalSlots
	}
	return 0
}

func (m *ServerHltvInfo) GetTvLocalClients() uint32 {
	if m != nil {
		return m.TvLocalClients
	}
	return 0
}

func (m *ServerHltvInfo) GetTvLocalProxies() uint32 {
	if m != nil {
		return m.TvLocalProxies
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelaySlots() uint32 {
	if m != nil {
		return m.TvRelaySlots
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelayClients() uint32 {
	if m != nil {
		return m.TvRelayClients
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelayProxies() uint32 {
	if m != nil {
		return m.TvRelayProxies
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelayAddress() uint32 {
	if m != nil {
		return m.TvRelayAddress
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelayPort() uint32 {
	if m != nil {
		return m.TvRelayPort
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelaySteamid() uint64 {
	if m != nil {
		return m.TvRelaySteamid
	}
	return 0
}

func (m *ServerHltvInfo) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type IpAddressMask struct {
	A     uint32 `protobuf:"varint,1,opt,name=a" json:"a"`
	B     uint32 `protobuf:"varint,2,opt,name=b" json:"b"`
	C     uint32 `protobuf:"varint,3,opt,name=c" json:"c"`
	D     uint32 `protobuf:"varint,4,opt,name=d" json:"d"`
	Bits  uint32 `protobuf:"varint,5,opt,name=bits" json:"bits"`
	Token uint32 `protobuf:"varint,6,opt,name=token" json:"token"`
}

func (m *IpAddressMask) Reset()         { *m = IpAddressMask{} }
func (m *IpAddressMask) String() string { return proto.CompactTextString(m) }
func (*IpAddressMask) ProtoMessage()    {}
func (*IpAddressMask) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{16}
}
func (m *IpAddressMask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpAddressMask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IpAddressMask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IpAddressMask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpAddressMask.Merge(m, src)
}
func (m *IpAddressMask) XXX_Size() int {
	return m.Size()
}
func (m *IpAddressMask) XXX_DiscardUnknown() {
	xxx_messageInfo_IpAddressMask.DiscardUnknown(m)
}

var xxx_messageInfo_IpAddressMask proto.InternalMessageInfo

func (m *IpAddressMask) GetA() uint32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *IpAddressMask) GetB() uint32 {
	if m != nil {
		return m.B
	}
	return 0
}

func (m *IpAddressMask) GetC() uint32 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *IpAddressMask) GetD() uint32 {
	if m != nil {
		return m.D
	}
	return 0
}

func (m *IpAddressMask) GetBits() uint32 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *IpAddressMask) GetToken() uint32 {
	if m != nil {
		return m.Token
	}
	return 0
}

type CMsgCsgoSteamUserStatChange struct {
	Ecsgosteamuserstat int32 `protobuf:"varint,1,opt,name=ecsgosteamuserstat" json:"ecsgosteamuserstat"`
	Delta              int32 `protobuf:"varint,2,opt,name=delta" json:"delta"`
	Absolute           bool  `protobuf:"varint,3,opt,name=absolute" json:"absolute"`
}

func (m *CMsgCsgoSteamUserStatChange) Reset()         { *m = CMsgCsgoSteamUserStatChange{} }
func (m *CMsgCsgoSteamUserStatChange) String() string { return proto.CompactTextString(m) }
func (*CMsgCsgoSteamUserStatChange) ProtoMessage()    {}
func (*CMsgCsgoSteamUserStatChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{17}
}
func (m *CMsgCsgoSteamUserStatChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgCsgoSteamUserStatChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgCsgoSteamUserStatChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgCsgoSteamUserStatChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgCsgoSteamUserStatChange.Merge(m, src)
}
func (m *CMsgCsgoSteamUserStatChange) XXX_Size() int {
	return m.Size()
}
func (m *CMsgCsgoSteamUserStatChange) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgCsgoSteamUserStatChange.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgCsgoSteamUserStatChange proto.InternalMessageInfo

func (m *CMsgCsgoSteamUserStatChange) GetEcsgosteamuserstat() int32 {
	if m != nil {
		return m.Ecsgosteamuserstat
	}
	return 0
}

func (m *CMsgCsgoSteamUserStatChange) GetDelta() int32 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *CMsgCsgoSteamUserStatChange) GetAbsolute() bool {
	if m != nil {
		return m.Absolute
	}
	return false
}

type XpProgressData struct {
	XpPoints   uint32 `protobuf:"varint,1,opt,name=xp_points,json=xpPoints" json:"xp_points"`
	XpCategory int32  `protobuf:"varint,2,opt,name=xp_category,json=xpCategory" json:"xp_category"`
}

func (m *XpProgressData) Reset()         { *m = XpProgressData{} }
func (m *XpProgressData) String() string { return proto.CompactTextString(m) }
func (*XpProgressData) ProtoMessage()    {}
func (*XpProgressData) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{18}
}
func (m *XpProgressData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XpProgressData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XpProgressData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XpProgressData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XpProgressData.Merge(m, src)
}
func (m *XpProgressData) XXX_Size() int {
	return m.Size()
}
func (m *XpProgressData) XXX_DiscardUnknown() {
	xxx_messageInfo_XpProgressData.DiscardUnknown(m)
}

var xxx_messageInfo_XpProgressData proto.InternalMessageInfo

func (m *XpProgressData) GetXpPoints() uint32 {
	if m != nil {
		return m.XpPoints
	}
	return 0
}

func (m *XpProgressData) GetXpCategory() int32 {
	if m != nil {
		return m.XpCategory
	}
	return 0
}

type MatchEndItemUpdates struct {
	ItemId             uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id"`
	ItemAttrDefidx     uint32 `protobuf:"varint,2,opt,name=item_attr_defidx,json=itemAttrDefidx" json:"item_attr_defidx"`
	ItemAttrDeltaValue uint32 `protobuf:"varint,3,opt,name=item_attr_delta_value,json=itemAttrDeltaValue" json:"item_attr_delta_value"`
}

func (m *MatchEndItemUpdates) Reset()         { *m = MatchEndItemUpdates{} }
func (m *MatchEndItemUpdates) String() string { return proto.CompactTextString(m) }
func (*MatchEndItemUpdates) ProtoMessage()    {}
func (*MatchEndItemUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{19}
}
func (m *MatchEndItemUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchEndItemUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchEndItemUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchEndItemUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchEndItemUpdates.Merge(m, src)
}
func (m *MatchEndItemUpdates) XXX_Size() int {
	return m.Size()
}
func (m *MatchEndItemUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchEndItemUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_MatchEndItemUpdates proto.InternalMessageInfo

func (m *MatchEndItemUpdates) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *MatchEndItemUpdates) GetItemAttrDefidx() uint32 {
	if m != nil {
		return m.ItemAttrDefidx
	}
	return 0
}

func (m *MatchEndItemUpdates) GetItemAttrDeltaValue() uint32 {
	if m != nil {
		return m.ItemAttrDeltaValue
	}
	return 0
}

type ScoreLeaderboardData struct {
	QuestId        uint64                                 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id"`
	Score          uint32                                 `protobuf:"varint,2,opt,name=score" json:"score"`
	Accountentries []*ScoreLeaderboardData_AccountEntries `protobuf:"bytes,3,rep,name=accountentries" json:"accountentries,omitempty"`
	Matchentries   []*ScoreLeaderboardData_Entry          `protobuf:"bytes,5,rep,name=matchentries" json:"matchentries,omitempty"`
}

func (m *ScoreLeaderboardData) Reset()         { *m = ScoreLeaderboardData{} }
func (m *ScoreLeaderboardData) String() string { return proto.CompactTextString(m) }
func (*ScoreLeaderboardData) ProtoMessage()    {}
func (*ScoreLeaderboardData) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{20}
}
func (m *ScoreLeaderboardData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScoreLeaderboardData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScoreLeaderboardData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScoreLeaderboardData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreLeaderboardData.Merge(m, src)
}
func (m *ScoreLeaderboardData) XXX_Size() int {
	return m.Size()
}
func (m *ScoreLeaderboardData) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreLeaderboardData.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreLeaderboardData proto.InternalMessageInfo

func (m *ScoreLeaderboardData) GetQuestId() uint64 {
	if m != nil {
		return m.QuestId
	}
	return 0
}

func (m *ScoreLeaderboardData) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ScoreLeaderboardData) GetAccountentries() []*ScoreLeaderboardData_AccountEntries {
	if m != nil {
		return m.Accountentries
	}
	return nil
}

func (m *ScoreLeaderboardData) GetMatchentries() []*ScoreLeaderboardData_Entry {
	if m != nil {
		return m.Matchentries
	}
	return nil
}

type ScoreLeaderboardData_Entry struct {
	Tag uint32 `protobuf:"varint,1,opt,name=tag" json:"tag"`
	Val uint32 `protobuf:"varint,2,opt,name=val" json:"val"`
}

func (m *ScoreLeaderboardData_Entry) Reset()         { *m = ScoreLeaderboardData_Entry{} }
func (m *ScoreLeaderboardData_Entry) String() string { return proto.CompactTextString(m) }
func (*ScoreLeaderboardData_Entry) ProtoMessage()    {}
func (*ScoreLeaderboardData_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{20, 0}
}
func (m *ScoreLeaderboardData_Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScoreLeaderboardData_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScoreLeaderboardData_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScoreLeaderboardData_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreLeaderboardData_Entry.Merge(m, src)
}
func (m *ScoreLeaderboardData_Entry) XXX_Size() int {
	return m.Size()
}
func (m *ScoreLeaderboardData_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreLeaderboardData_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreLeaderboardData_Entry proto.InternalMessageInfo

func (m *ScoreLeaderboardData_Entry) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *ScoreLeaderboardData_Entry) GetVal() uint32 {
	if m != nil {
		return m.Val
	}
	return 0
}

type ScoreLeaderboardData_AccountEntries struct {
	Accountid uint32                        `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Entries   []*ScoreLeaderboardData_Entry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (m *ScoreLeaderboardData_AccountEntries) Reset()         { *m = ScoreLeaderboardData_AccountEntries{} }
func (m *ScoreLeaderboardData_AccountEntries) String() string { return proto.CompactTextString(m) }
func (*ScoreLeaderboardData_AccountEntries) ProtoMessage()    {}
func (*ScoreLeaderboardData_AccountEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{20, 1}
}
func (m *ScoreLeaderboardData_AccountEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScoreLeaderboardData_AccountEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScoreLeaderboardData_AccountEntries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScoreLeaderboardData_AccountEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreLeaderboardData_AccountEntries.Merge(m, src)
}
func (m *ScoreLeaderboardData_AccountEntries) XXX_Size() int {
	return m.Size()
}
func (m *ScoreLeaderboardData_AccountEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreLeaderboardData_AccountEntries.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreLeaderboardData_AccountEntries proto.InternalMessageInfo

func (m *ScoreLeaderboardData_AccountEntries) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *ScoreLeaderboardData_AccountEntries) GetEntries() []*ScoreLeaderboardData_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type PlayerQuestData struct {
	QuesterAccountId        uint32                           `protobuf:"varint,1,opt,name=quester_account_id,json=questerAccountId" json:"quester_account_id"`
	QuestItemData           []*PlayerQuestData_QuestItemData `protobuf:"bytes,2,rep,name=quest_item_data,json=questItemData" json:"quest_item_data,omitempty"`
	XpProgressData          []*XpProgressData                `protobuf:"bytes,3,rep,name=xp_progress_data,json=xpProgressData" json:"xp_progress_data,omitempty"`
	TimePlayed              uint32                           `protobuf:"varint,4,opt,name=time_played,json=timePlayed" json:"time_played"`
	MmGameMode              uint32                           `protobuf:"varint,5,opt,name=mm_game_mode,json=mmGameMode" json:"mm_game_mode"`
	ItemUpdates             []*MatchEndItemUpdates           `protobuf:"bytes,6,rep,name=item_updates,json=itemUpdates" json:"item_updates,omitempty"`
	OperationPointsEligible bool                             `protobuf:"varint,7,opt,name=operation_points_eligible,json=operationPointsEligible" json:"operation_points_eligible"`
	Userstatchanges         []*CMsgCsgoSteamUserStatChange   `protobuf:"bytes,8,rep,name=userstatchanges" json:"userstatchanges,omitempty"`
}

func (m *PlayerQuestData) Reset()         { *m = PlayerQuestData{} }
func (m *PlayerQuestData) String() string { return proto.CompactTextString(m) }
func (*PlayerQuestData) ProtoMessage()    {}
func (*PlayerQuestData) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{21}
}
func (m *PlayerQuestData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerQuestData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerQuestData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerQuestData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerQuestData.Merge(m, src)
}
func (m *PlayerQuestData) XXX_Size() int {
	return m.Size()
}
func (m *PlayerQuestData) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerQuestData.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerQuestData proto.InternalMessageInfo

func (m *PlayerQuestData) GetQuesterAccountId() uint32 {
	if m != nil {
		return m.QuesterAccountId
	}
	return 0
}

func (m *PlayerQuestData) GetQuestItemData() []*PlayerQuestData_QuestItemData {
	if m != nil {
		return m.QuestItemData
	}
	return nil
}

func (m *PlayerQuestData) GetXpProgressData() []*XpProgressData {
	if m != nil {
		return m.XpProgressData
	}
	return nil
}

func (m *PlayerQuestData) GetTimePlayed() uint32 {
	if m != nil {
		return m.TimePlayed
	}
	return 0
}

func (m *PlayerQuestData) GetMmGameMode() uint32 {
	if m != nil {
		return m.MmGameMode
	}
	return 0
}

func (m *PlayerQuestData) GetItemUpdates() []*MatchEndItemUpdates {
	if m != nil {
		return m.ItemUpdates
	}
	return nil
}

func (m *PlayerQuestData) GetOperationPointsEligible() bool {
	if m != nil {
		return m.OperationPointsEligible
	}
	return false
}

func (m *PlayerQuestData) GetUserstatchanges() []*CMsgCsgoSteamUserStatChange {
	if m != nil {
		return m.Userstatchanges
	}
	return nil
}

type PlayerQuestData_QuestItemData struct {
	QuestId                 uint64 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id"`
	QuestNormalPointsEarned int32  `protobuf:"varint,2,opt,name=quest_normal_points_earned,json=questNormalPointsEarned" json:"quest_normal_points_earned"`
	QuestBonusPointsEarned  int32  `protobuf:"varint,3,opt,name=quest_bonus_points_earned,json=questBonusPointsEarned" json:"quest_bonus_points_earned"`
}

func (m *PlayerQuestData_QuestItemData) Reset()         { *m = PlayerQuestData_QuestItemData{} }
func (m *PlayerQuestData_QuestItemData) String() string { return proto.CompactTextString(m) }
func (*PlayerQuestData_QuestItemData) ProtoMessage()    {}
func (*PlayerQuestData_QuestItemData) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{21, 0}
}
func (m *PlayerQuestData_QuestItemData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerQuestData_QuestItemData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerQuestData_QuestItemData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerQuestData_QuestItemData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerQuestData_QuestItemData.Merge(m, src)
}
func (m *PlayerQuestData_QuestItemData) XXX_Size() int {
	return m.Size()
}
func (m *PlayerQuestData_QuestItemData) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerQuestData_QuestItemData.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerQuestData_QuestItemData proto.InternalMessageInfo

func (m *PlayerQuestData_QuestItemData) GetQuestId() uint64 {
	if m != nil {
		return m.QuestId
	}
	return 0
}

func (m *PlayerQuestData_QuestItemData) GetQuestNormalPointsEarned() int32 {
	if m != nil {
		return m.QuestNormalPointsEarned
	}
	return 0
}

func (m *PlayerQuestData_QuestItemData) GetQuestBonusPointsEarned() int32 {
	if m != nil {
		return m.QuestBonusPointsEarned
	}
	return 0
}

type CMsgGC_ServerQuestUpdateData struct {
	PlayerQuestData []*PlayerQuestData    `protobuf:"bytes,1,rep,name=player_quest_data,json=playerQuestData" json:"player_quest_data,omitempty"`
	BinaryData      []byte                `protobuf:"bytes,2,opt,name=binary_data,json=binaryData" json:"binary_data"`
	MmGameMode      uint32                `protobuf:"varint,3,opt,name=mm_game_mode,json=mmGameMode" json:"mm_game_mode"`
	Missionlbsdata  *ScoreLeaderboardData `protobuf:"bytes,4,opt,name=missionlbsdata" json:"missionlbsdata,omitempty"`
}

func (m *CMsgGC_ServerQuestUpdateData) Reset()         { *m = CMsgGC_ServerQuestUpdateData{} }
func (m *CMsgGC_ServerQuestUpdateData) String() string { return proto.CompactTextString(m) }
func (*CMsgGC_ServerQuestUpdateData) ProtoMessage()    {}
func (*CMsgGC_ServerQuestUpdateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{22}
}
func (m *CMsgGC_ServerQuestUpdateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGC_ServerQuestUpdateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGC_ServerQuestUpdateData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGC_ServerQuestUpdateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGC_ServerQuestUpdateData.Merge(m, src)
}
func (m *CMsgGC_ServerQuestUpdateData) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGC_ServerQuestUpdateData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGC_ServerQuestUpdateData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGC_ServerQuestUpdateData proto.InternalMessageInfo

func (m *CMsgGC_ServerQuestUpdateData) GetPlayerQuestData() []*PlayerQuestData {
	if m != nil {
		return m.PlayerQuestData
	}
	return nil
}

func (m *CMsgGC_ServerQuestUpdateData) GetBinaryData() []byte {
	if m != nil {
		return m.BinaryData
	}
	return nil
}

func (m *CMsgGC_ServerQuestUpdateData) GetMmGameMode() uint32 {
	if m != nil {
		return m.MmGameMode
	}
	return 0
}

func (m *CMsgGC_ServerQuestUpdateData) GetMissionlbsdata() *ScoreLeaderboardData {
	if m != nil {
		return m.Missionlbsdata
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGCOperationalStats struct {
	Packetid int32                              `protobuf:"varint,1,opt,name=packetid" json:"packetid"`
	Namekeys []*OperationalStatisticDescription `protobuf:"bytes,2,rep,name=namekeys" json:"namekeys,omitempty"`
	Packets  []*OperationalStatisticsPacket     `protobuf:"bytes,3,rep,name=packets" json:"packets,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGCOperationalStats{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGCOperationalStats) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{23}
}
func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGCOperationalStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGCOperationalStats.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGCOperationalStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGCOperationalStats proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) GetPacketid() int32 {
	if m != nil {
		return m.Packetid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) GetNamekeys() []*OperationalStatisticDescription {
	if m != nil {
		return m.Namekeys
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) GetPackets() []*OperationalStatisticsPacket {
	if m != nil {
		return m.Packets
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm struct {
	Token    uint32 `protobuf:"varint,1,opt,name=token" json:"token"`
	Stamp    uint32 `protobuf:"varint,2,opt,name=stamp" json:"stamp"`
	Exchange uint64 `protobuf:"varint,3,opt,name=exchange" json:"exchange"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{24}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetToken() uint32 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetStamp() uint32 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetExchange() uint64 {
	if m != nil {
		return m.Exchange
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ServerReservationUpdate struct {
	ViewersExternalTotal uint32 `protobuf:"varint,1,opt,name=viewers_external_total,json=viewersExternalTotal" json:"viewers_external_total"`
	ViewersExternalSteam uint32 `protobuf:"varint,2,opt,name=viewers_external_steam,json=viewersExternalSteam" json:"viewers_external_steam"`
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) Reset() {
	*m = CMsgGCCStrike15V2_GC2ServerReservationUpdate{}
}
func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GC2ServerReservationUpdate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GC2ServerReservationUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{25}
}
func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_GC2ServerReservationUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_GC2ServerReservationUpdate.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_GC2ServerReservationUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_GC2ServerReservationUpdate proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) GetViewersExternalTotal() uint32 {
	if m != nil {
		return m.ViewersExternalTotal
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) GetViewersExternalSteam() uint32 {
	if m != nil {
		return m.ViewersExternalSteam
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingStart struct {
	AccountIds      []uint32              `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	GameType        uint32                `protobuf:"varint,2,opt,name=game_type,json=gameType" json:"game_type"`
	TicketData      string                `protobuf:"bytes,3,opt,name=ticket_data,json=ticketData" json:"ticket_data"`
	ClientVersion   uint32                `protobuf:"varint,4,opt,name=client_version,json=clientVersion" json:"client_version"`
	TournamentMatch *TournamentMatchSetup `protobuf:"bytes,5,opt,name=tournament_match,json=tournamentMatch" json:"tournament_match,omitempty"`
	PrimeOnly       bool                  `protobuf:"varint,6,opt,name=prime_only,json=primeOnly" json:"prime_only"`
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) Reset()         { *m = CMsgGCCStrike15V2_MatchmakingStart{} }
func (m *CMsgGCCStrike15V2_MatchmakingStart) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_MatchmakingStart) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_MatchmakingStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{26}
}
func (m *CMsgGCCStrike15V2_MatchmakingStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingStart.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingStart) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingStart) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingStart.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingStart proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingStart) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) GetTicketData() string {
	if m != nil {
		return m.TicketData
	}
	return ""
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) GetClientVersion() uint32 {
	if m != nil {
		return m.ClientVersion
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) GetTournamentMatch() *TournamentMatchSetup {
	if m != nil {
		return m.TournamentMatch
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) GetPrimeOnly() bool {
	if m != nil {
		return m.PrimeOnly
	}
	return false
}

type CMsgGCCStrike15V2_MatchmakingStop struct {
	Abandon int32 `protobuf:"varint,1,opt,name=abandon" json:"abandon"`
}

func (m *CMsgGCCStrike15V2_MatchmakingStop) Reset()         { *m = CMsgGCCStrike15V2_MatchmakingStop{} }
func (m *CMsgGCCStrike15V2_MatchmakingStop) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_MatchmakingStop) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_MatchmakingStop) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{27}
}
func (m *CMsgGCCStrike15V2_MatchmakingStop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingStop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingStop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingStop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingStop.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingStop) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingStop) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingStop.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingStop proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingStop) GetAbandon() int32 {
	if m != nil {
		return m.Abandon
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingClient2ServerPing struct {
	Gameserverpings []*GameServerPing `protobuf:"bytes,1,rep,name=gameserverpings" json:"gameserverpings,omitempty"`
	OffsetIndex     int32             `protobuf:"varint,2,opt,name=offset_index,json=offsetIndex" json:"offset_index"`
	FinalBatch      int32             `protobuf:"varint,3,opt,name=final_batch,json=finalBatch" json:"final_batch"`
	DataCenterPings []*DataCenterPing `protobuf:"bytes,4,rep,name=data_center_pings,json=dataCenterPings" json:"data_center_pings,omitempty"`
	MaxPing         uint32            `protobuf:"varint,5,opt,name=max_ping,json=maxPing" json:"max_ping"`
	TestToken       uint32            `protobuf:"fixed32,6,opt,name=test_token,json=testToken" json:"test_token"`
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingClient2ServerPing{}
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingClient2ServerPing) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{28}
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingClient2ServerPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingClient2ServerPing.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingClient2ServerPing.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingClient2ServerPing proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetGameserverpings() []*GameServerPing {
	if m != nil {
		return m.Gameserverpings
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetOffsetIndex() int32 {
	if m != nil {
		return m.OffsetIndex
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetFinalBatch() int32 {
	if m != nil {
		return m.FinalBatch
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetDataCenterPings() []*DataCenterPing {
	if m != nil {
		return m.DataCenterPings
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetMaxPing() uint32 {
	if m != nil {
		return m.MaxPing
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetTestToken() uint32 {
	if m != nil {
		return m.TestToken
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate struct {
	Matchmaking                   int32                                                `protobuf:"varint,1,opt,name=matchmaking" json:"matchmaking"`
	WaitingAccountIdSessions      []uint32                                             `protobuf:"varint,2,rep,name=waiting_account_id_sessions,json=waitingAccountIdSessions" json:"waiting_account_id_sessions,omitempty"`
	Error                         string                                               `protobuf:"bytes,3,opt,name=error" json:"error"`
	OngoingmatchAccountIdSessions []uint32                                             `protobuf:"varint,6,rep,name=ongoingmatch_account_id_sessions,json=ongoingmatchAccountIdSessions" json:"ongoingmatch_account_id_sessions,omitempty"`
	GlobalStats                   *GlobalStatistics                                    `protobuf:"bytes,7,opt,name=global_stats,json=globalStats" json:"global_stats,omitempty"`
	FailpingAccountIdSessions     []uint32                                             `protobuf:"varint,8,rep,name=failping_account_id_sessions,json=failpingAccountIdSessions" json:"failping_account_id_sessions,omitempty"`
	PenaltyAccountIdSessions      []uint32                                             `protobuf:"varint,9,rep,name=penalty_account_id_sessions,json=penaltyAccountIdSessions" json:"penalty_account_id_sessions,omitempty"`
	FailreadyAccountIdSessions    []uint32                                             `protobuf:"varint,10,rep,name=failready_account_id_sessions,json=failreadyAccountIdSessions" json:"failready_account_id_sessions,omitempty"`
	VacbannedAccountIdSessions    []uint32                                             `protobuf:"varint,11,rep,name=vacbanned_account_id_sessions,json=vacbannedAccountIdSessions" json:"vacbanned_account_id_sessions,omitempty"`
	ServerIpaddressMask           *IpAddressMask                                       `protobuf:"bytes,12,opt,name=server_ipaddress_mask,json=serverIpaddressMask" json:"server_ipaddress_mask,omitempty"`
	Notes                         []*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note `protobuf:"bytes,13,rep,name=notes" json:"notes,omitempty"`
	PenaltyAccountIdSessionsGreen []uint32                                             `protobuf:"varint,14,rep,name=penalty_account_id_sessions_green,json=penaltyAccountIdSessionsGreen" json:"penalty_account_id_sessions_green,omitempty"`
	InsufficientlevelSessions     []uint32                                             `protobuf:"varint,15,rep,name=insufficientlevel_sessions,json=insufficientlevelSessions" json:"insufficientlevel_sessions,omitempty"`
	VsncheckAccountIdSessions     []uint32                                             `protobuf:"varint,16,rep,name=vsncheck_account_id_sessions,json=vsncheckAccountIdSessions" json:"vsncheck_account_id_sessions,omitempty"`
	LauncherMismatchSessions      []uint32                                             `protobuf:"varint,17,rep,name=launcher_mismatch_sessions,json=launcherMismatchSessions" json:"launcher_mismatch_sessions,omitempty"`
	InsecureAccountIdSessions     []uint32                                             `protobuf:"varint,18,rep,name=insecure_account_id_sessions,json=insecureAccountIdSessions" json:"insecure_account_id_sessions,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{29}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetMatchmaking() int32 {
	if m != nil {
		return m.Matchmaking
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetWaitingAccountIdSessions() []uint32 {
	if m != nil {
		return m.WaitingAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetOngoingmatchAccountIdSessions() []uint32 {
	if m != nil {
		return m.OngoingmatchAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetGlobalStats() *GlobalStatistics {
	if m != nil {
		return m.GlobalStats
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetFailpingAccountIdSessions() []uint32 {
	if m != nil {
		return m.FailpingAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetPenaltyAccountIdSessions() []uint32 {
	if m != nil {
		return m.PenaltyAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetFailreadyAccountIdSessions() []uint32 {
	if m != nil {
		return m.FailreadyAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetVacbannedAccountIdSessions() []uint32 {
	if m != nil {
		return m.VacbannedAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetServerIpaddressMask() *IpAddressMask {
	if m != nil {
		return m.ServerIpaddressMask
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetNotes() []*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetPenaltyAccountIdSessionsGreen() []uint32 {
	if m != nil {
		return m.PenaltyAccountIdSessionsGreen
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetInsufficientlevelSessions() []uint32 {
	if m != nil {
		return m.InsufficientlevelSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetVsncheckAccountIdSessions() []uint32 {
	if m != nil {
		return m.VsncheckAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetLauncherMismatchSessions() []uint32 {
	if m != nil {
		return m.LauncherMismatchSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetInsecureAccountIdSessions() []uint32 {
	if m != nil {
		return m.InsecureAccountIdSessions
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note struct {
	Type     int32   `protobuf:"varint,1,opt,name=type" json:"type"`
	RegionId int32   `protobuf:"varint,2,opt,name=region_id,json=regionId" json:"region_id"`
	RegionR  float32 `protobuf:"fixed32,3,opt,name=region_r,json=regionR" json:"region_r"`
	Distance float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{29, 0}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetRegionId() int32 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetRegionR() float32 {
	if m != nil {
		return m.RegionR
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

type CDataGCCStrike15V2_TournamentMatchDraft struct {
	EventId      int32                                            `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id"`
	EventStageId int32                                            `protobuf:"varint,2,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id"`
	TeamId_0     int32                                            `protobuf:"varint,3,opt,name=team_id_0,json=teamId0" json:"team_id_0"`
	TeamId_1     int32                                            `protobuf:"varint,4,opt,name=team_id_1,json=teamId1" json:"team_id_1"`
	MapsCount    int32                                            `protobuf:"varint,5,opt,name=maps_count,json=mapsCount" json:"maps_count"`
	MapsCurrent  int32                                            `protobuf:"varint,6,opt,name=maps_current,json=mapsCurrent" json:"maps_current"`
	TeamIdStart  int32                                            `protobuf:"varint,7,opt,name=team_id_start,json=teamIdStart" json:"team_id_start"`
	TeamIdVeto1  int32                                            `protobuf:"varint,8,opt,name=team_id_veto1,json=teamIdVeto1" json:"team_id_veto1"`
	TeamIdPickn  int32                                            `protobuf:"varint,9,opt,name=team_id_pickn,json=teamIdPickn" json:"team_id_pickn"`
	Drafts       []*CDataGCCStrike15V2_TournamentMatchDraft_Entry `protobuf:"bytes,10,rep,name=drafts" json:"drafts,omitempty"`
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) Reset() {
	*m = CDataGCCStrike15V2_TournamentMatchDraft{}
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentMatchDraft) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentMatchDraft) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{30}
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDataGCCStrike15V2_TournamentMatchDraft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentMatchDraft.Merge(m, src)
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft) XXX_Size() int {
	return m.Size()
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft) XXX_DiscardUnknown() {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentMatchDraft.DiscardUnknown(m)
}

var xxx_messageInfo_CDataGCCStrike15V2_TournamentMatchDraft proto.InternalMessageInfo

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetEventId() int32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetEventStageId() int32 {
	if m != nil {
		return m.EventStageId
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamId_0() int32 {
	if m != nil {
		return m.TeamId_0
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamId_1() int32 {
	if m != nil {
		return m.TeamId_1
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetMapsCount() int32 {
	if m != nil {
		return m.MapsCount
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetMapsCurrent() int32 {
	if m != nil {
		return m.MapsCurrent
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdStart() int32 {
	if m != nil {
		return m.TeamIdStart
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdVeto1() int32 {
	if m != nil {
		return m.TeamIdVeto1
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdPickn() int32 {
	if m != nil {
		return m.TeamIdPickn
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetDrafts() []*CDataGCCStrike15V2_TournamentMatchDraft_Entry {
	if m != nil {
		return m.Drafts
	}
	return nil
}

type CDataGCCStrike15V2_TournamentMatchDraft_Entry struct {
	Mapid    int32 `protobuf:"varint,1,opt,name=mapid" json:"mapid"`
	TeamIdCt int32 `protobuf:"varint,2,opt,name=team_id_ct,json=teamIdCt" json:"team_id_ct"`
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) Reset() {
	*m = CDataGCCStrike15V2_TournamentMatchDraft_Entry{}
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) String() string {
	return proto.CompactTextString(m)
}
func (*CDataGCCStrike15V2_TournamentMatchDraft_Entry) ProtoMessage() {}
func (*CDataGCCStrike15V2_TournamentMatchDraft_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{30, 0}
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDataGCCStrike15V2_TournamentMatchDraft_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentMatchDraft_Entry.Merge(m, src)
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) XXX_Size() int {
	return m.Size()
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentMatchDraft_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_CDataGCCStrike15V2_TournamentMatchDraft_Entry proto.InternalMessageInfo

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) GetMapid() int32 {
	if m != nil {
		return m.Mapid
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) GetTeamIdCt() int32 {
	if m != nil {
		return m.TeamIdCt
	}
	return 0
}

type CPreMatchInfoData struct {
	PredictionsPct int32                                    `protobuf:"varint,1,opt,name=predictions_pct,json=predictionsPct" json:"predictions_pct"`
	Draft          *CDataGCCStrike15V2_TournamentMatchDraft `protobuf:"bytes,4,opt,name=draft" json:"draft,omitempty"`
	Stats          []*CPreMatchInfoData_TeamStats           `protobuf:"bytes,5,rep,name=stats" json:"stats,omitempty"`
	Wins           []int32                                  `protobuf:"varint,6,rep,name=wins" json:"wins,omitempty"`
}

func (m *CPreMatchInfoData) Reset()         { *m = CPreMatchInfoData{} }
func (m *CPreMatchInfoData) String() string { return proto.CompactTextString(m) }
func (*CPreMatchInfoData) ProtoMessage()    {}
func (*CPreMatchInfoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{31}
}
func (m *CPreMatchInfoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPreMatchInfoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPreMatchInfoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPreMatchInfoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPreMatchInfoData.Merge(m, src)
}
func (m *CPreMatchInfoData) XXX_Size() int {
	return m.Size()
}
func (m *CPreMatchInfoData) XXX_DiscardUnknown() {
	xxx_messageInfo_CPreMatchInfoData.DiscardUnknown(m)
}

var xxx_messageInfo_CPreMatchInfoData proto.InternalMessageInfo

func (m *CPreMatchInfoData) GetPredictionsPct() int32 {
	if m != nil {
		return m.PredictionsPct
	}
	return 0
}

func (m *CPreMatchInfoData) GetDraft() *CDataGCCStrike15V2_TournamentMatchDraft {
	if m != nil {
		return m.Draft
	}
	return nil
}

func (m *CPreMatchInfoData) GetStats() []*CPreMatchInfoData_TeamStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *CPreMatchInfoData) GetWins() []int32 {
	if m != nil {
		return m.Wins
	}
	return nil
}

type CPreMatchInfoData_TeamStats struct {
	MatchInfoIdxtxt int32    `protobuf:"varint,1,opt,name=match_info_idxtxt,json=matchInfoIdxtxt" json:"match_info_idxtxt"`
	MatchInfoTxt    string   `protobuf:"bytes,2,opt,name=match_info_txt,json=matchInfoTxt" json:"match_info_txt"`
	MatchInfoTeams  []string `protobuf:"bytes,3,rep,name=match_info_teams,json=matchInfoTeams" json:"match_info_teams,omitempty"`
}

func (m *CPreMatchInfoData_TeamStats) Reset()         { *m = CPreMatchInfoData_TeamStats{} }
func (m *CPreMatchInfoData_TeamStats) String() string { return proto.CompactTextString(m) }
func (*CPreMatchInfoData_TeamStats) ProtoMessage()    {}
func (*CPreMatchInfoData_TeamStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{31, 0}
}
func (m *CPreMatchInfoData_TeamStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPreMatchInfoData_TeamStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPreMatchInfoData_TeamStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPreMatchInfoData_TeamStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPreMatchInfoData_TeamStats.Merge(m, src)
}
func (m *CPreMatchInfoData_TeamStats) XXX_Size() int {
	return m.Size()
}
func (m *CPreMatchInfoData_TeamStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CPreMatchInfoData_TeamStats.DiscardUnknown(m)
}

var xxx_messageInfo_CPreMatchInfoData_TeamStats proto.InternalMessageInfo

func (m *CPreMatchInfoData_TeamStats) GetMatchInfoIdxtxt() int32 {
	if m != nil {
		return m.MatchInfoIdxtxt
	}
	return 0
}

func (m *CPreMatchInfoData_TeamStats) GetMatchInfoTxt() string {
	if m != nil {
		return m.MatchInfoTxt
	}
	return ""
}

func (m *CPreMatchInfoData_TeamStats) GetMatchInfoTeams() []string {
	if m != nil {
		return m.MatchInfoTeams
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ServerReserve struct {
	AccountIds                  []uint32             `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	GameType                    uint32               `protobuf:"varint,2,opt,name=game_type,json=gameType" json:"game_type"`
	MatchId                     uint64               `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id"`
	ServerVersion               uint32               `protobuf:"varint,4,opt,name=server_version,json=serverVersion" json:"server_version"`
	Flags                       uint32               `protobuf:"varint,18,opt,name=flags" json:"flags"`
	Rankings                    []*PlayerRankingInfo `protobuf:"bytes,5,rep,name=rankings" json:"rankings,omitempty"`
	EncryptionKey               uint64               `protobuf:"varint,6,opt,name=encryption_key,json=encryptionKey" json:"encryption_key"`
	EncryptionKeyPub            uint64               `protobuf:"varint,7,opt,name=encryption_key_pub,json=encryptionKeyPub" json:"encryption_key_pub"`
	PartyIds                    []uint32             `protobuf:"varint,8,rep,name=party_ids,json=partyIds" json:"party_ids,omitempty"`
	Whitelist                   []*IpAddressMask     `protobuf:"bytes,9,rep,name=whitelist" json:"whitelist,omitempty"`
	TvMasterSteamid             uint64               `protobuf:"varint,10,opt,name=tv_master_steamid,json=tvMasterSteamid" json:"tv_master_steamid"`
	TournamentEvent             *TournamentEvent     `protobuf:"bytes,11,opt,name=tournament_event,json=tournamentEvent" json:"tournament_event,omitempty"`
	TournamentTeams             []*TournamentTeam    `protobuf:"bytes,12,rep,name=tournament_teams,json=tournamentTeams" json:"tournament_teams,omitempty"`
	TournamentCastersAccountIds []uint32             `protobuf:"varint,13,rep,name=tournament_casters_account_ids,json=tournamentCastersAccountIds" json:"tournament_casters_account_ids,omitempty"`
	TvRelaySteamid              uint64               `protobuf:"varint,14,opt,name=tv_relay_steamid,json=tvRelaySteamid" json:"tv_relay_steamid"`
	PreMatchData                *CPreMatchInfoData   `protobuf:"bytes,15,opt,name=pre_match_data,json=preMatchData" json:"pre_match_data,omitempty"`
	Rtime32EventStart           uint32               `protobuf:"varint,16,opt,name=rtime32_event_start,json=rtime32EventStart" json:"rtime32_event_start"`
	TvControl                   uint32               `protobuf:"varint,17,opt,name=tv_control,json=tvControl" json:"tv_control"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{32}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerReserve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerReserve.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerReserve.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerReserve proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetServerVersion() uint32 {
	if m != nil {
		return m.ServerVersion
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetRankings() []*PlayerRankingInfo {
	if m != nil {
		return m.Rankings
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetEncryptionKey() uint64 {
	if m != nil {
		return m.EncryptionKey
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetEncryptionKeyPub() uint64 {
	if m != nil {
		return m.EncryptionKeyPub
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetPartyIds() []uint32 {
	if m != nil {
		return m.PartyIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetWhitelist() []*IpAddressMask {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTvMasterSteamid() uint64 {
	if m != nil {
		return m.TvMasterSteamid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentEvent() *TournamentEvent {
	if m != nil {
		return m.TournamentEvent
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentTeams() []*TournamentTeam {
	if m != nil {
		return m.TournamentTeams
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentCastersAccountIds() []uint32 {
	if m != nil {
		return m.TournamentCastersAccountIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTvRelaySteamid() uint64 {
	if m != nil {
		return m.TvRelaySteamid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetPreMatchData() *CPreMatchInfoData {
	if m != nil {
		return m.PreMatchData
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetRtime32EventStart() uint32 {
	if m != nil {
		return m.Rtime32EventStart
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTvControl() uint32 {
	if m != nil {
		return m.TvControl
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingServerReservationResponse struct {
	Reservationid           uint64                                         `protobuf:"varint,1,opt,name=reservationid" json:"reservationid"`
	Reservation             *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Map                     string                                         `protobuf:"bytes,3,opt,name=map" json:"map"`
	GcReservationSent       uint64                                         `protobuf:"varint,4,opt,name=gc_reservation_sent,json=gcReservationSent" json:"gc_reservation_sent"`
	ServerVersion           uint32                                         `protobuf:"varint,5,opt,name=server_version,json=serverVersion" json:"server_version"`
	TvInfo                  *ServerHltvInfo                                `protobuf:"bytes,6,opt,name=tv_info,json=tvInfo" json:"tv_info,omitempty"`
	RewardPlayerAccounts    []uint32                                       `protobuf:"varint,7,rep,name=reward_player_accounts,json=rewardPlayerAccounts" json:"reward_player_accounts,omitempty"`
	IdlePlayerAccounts      []uint32                                       `protobuf:"varint,8,rep,name=idle_player_accounts,json=idlePlayerAccounts" json:"idle_player_accounts,omitempty"`
	RewardItemAttrDefIdx    uint32                                         `protobuf:"varint,9,opt,name=reward_item_attr_def_idx,json=rewardItemAttrDefIdx" json:"reward_item_attr_def_idx"`
	RewardItemAttrValue     uint32                                         `protobuf:"varint,10,opt,name=reward_item_attr_value,json=rewardItemAttrValue" json:"reward_item_attr_value"`
	RewardItemAttrRewardIdx uint32                                         `protobuf:"varint,11,opt,name=reward_item_attr_reward_idx,json=rewardItemAttrRewardIdx" json:"reward_item_attr_reward_idx"`
	RewardDropList          uint32                                         `protobuf:"varint,12,opt,name=reward_drop_list,json=rewardDropList" json:"reward_drop_list"`
	TournamentTag           string                                         `protobuf:"bytes,13,opt,name=tournament_tag,json=tournamentTag" json:"tournament_tag"`
	LegacySteamdatagramPort uint32                                         `protobuf:"varint,14,opt,name=legacy_steamdatagram_port,json=legacySteamdatagramPort" json:"legacy_steamdatagram_port"`
	SteamdatagramRouting    uint32                                         `protobuf:"varint,17,opt,name=steamdatagram_routing,json=steamdatagramRouting" json:"steamdatagram_routing"`
	TestToken               uint32                                         `protobuf:"fixed32,15,opt,name=test_token,json=testToken" json:"test_token"`
	Flags                   uint32                                         `protobuf:"varint,16,opt,name=flags" json:"flags"`
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingServerReservationResponse{}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingServerReservationResponse) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{33}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerReservationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerReservationResponse.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerReservationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerReservationResponse proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetReservationid() uint64 {
	if m != nil {
		return m.Reservationid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetGcReservationSent() uint64 {
	if m != nil {
		return m.GcReservationSent
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetServerVersion() uint32 {
	if m != nil {
		return m.ServerVersion
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetTvInfo() *ServerHltvInfo {
	if m != nil {
		return m.TvInfo
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardPlayerAccounts() []uint32 {
	if m != nil {
		return m.RewardPlayerAccounts
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetIdlePlayerAccounts() []uint32 {
	if m != nil {
		return m.IdlePlayerAccounts
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrDefIdx() uint32 {
	if m != nil {
		return m.RewardItemAttrDefIdx
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrValue() uint32 {
	if m != nil {
		return m.RewardItemAttrValue
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrRewardIdx() uint32 {
	if m != nil {
		return m.RewardItemAttrRewardIdx
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardDropList() uint32 {
	if m != nil {
		return m.RewardDropList
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetTournamentTag() string {
	if m != nil {
		return m.TournamentTag
	}
	return ""
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetLegacySteamdatagramPort() uint32 {
	if m != nil {
		return m.LegacySteamdatagramPort
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetSteamdatagramRouting() uint32 {
	if m != nil {
		return m.SteamdatagramRouting
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetTestToken() uint32 {
	if m != nil {
		return m.TestToken
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientReserve struct {
	Serverid      uint64                                         `protobuf:"varint,1,opt,name=serverid" json:"serverid"`
	DirectUdpIp   uint32                                         `protobuf:"varint,2,opt,name=direct_udp_ip,json=directUdpIp" json:"direct_udp_ip"`
	DirectUdpPort uint32                                         `protobuf:"varint,3,opt,name=direct_udp_port,json=directUdpPort" json:"direct_udp_port"`
	Reservationid uint64                                         `protobuf:"varint,4,opt,name=reservationid" json:"reservationid"`
	Reservation   *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,5,opt,name=reservation" json:"reservation,omitempty"`
	Map           string                                         `protobuf:"bytes,6,opt,name=map" json:"map"`
	ServerAddress string                                         `protobuf:"bytes,7,opt,name=server_address,json=serverAddress" json:"server_address"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{34}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientReserve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientReserve.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientReserve.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientReserve proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetServerid() uint64 {
	if m != nil {
		return m.Serverid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetDirectUdpIp() uint32 {
	if m != nil {
		return m.DirectUdpIp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetDirectUdpPort() uint32 {
	if m != nil {
		return m.DirectUdpPort
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetReservationid() uint64 {
	if m != nil {
		return m.Reservationid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

type CMsgGCCStrike15V2_MatchmakingServerRoundStats struct {
	Reservationid      uint64                                                  `protobuf:"varint,1,opt,name=reservationid" json:"reservationid"`
	Reservation        *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve          `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Map                string                                                  `protobuf:"bytes,3,opt,name=map" json:"map"`
	Round              int32                                                   `protobuf:"varint,4,opt,name=round" json:"round"`
	Kills              []int32                                                 `protobuf:"varint,5,rep,name=kills" json:"kills,omitempty"`
	Assists            []int32                                                 `protobuf:"varint,6,rep,name=assists" json:"assists,omitempty"`
	Deaths             []int32                                                 `protobuf:"varint,7,rep,name=deaths" json:"deaths,omitempty"`
	Scores             []int32                                                 `protobuf:"varint,8,rep,name=scores" json:"scores,omitempty"`
	Pings              []int32                                                 `protobuf:"varint,9,rep,name=pings" json:"pings,omitempty"`
	RoundResult        int32                                                   `protobuf:"varint,10,opt,name=round_result,json=roundResult" json:"round_result"`
	MatchResult        int32                                                   `protobuf:"varint,11,opt,name=match_result,json=matchResult" json:"match_result"`
	TeamScores         []int32                                                 `protobuf:"varint,12,rep,name=team_scores,json=teamScores" json:"team_scores,omitempty"`
	Confirm            *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm          `protobuf:"bytes,13,opt,name=confirm" json:"confirm,omitempty"`
	ReservationStage   int32                                                   `protobuf:"varint,14,opt,name=reservation_stage,json=reservationStage" json:"reservation_stage"`
	MatchDuration      int32                                                   `protobuf:"varint,15,opt,name=match_duration,json=matchDuration" json:"match_duration"`
	EnemyKills         []int32                                                 `protobuf:"varint,16,rep,name=enemy_kills,json=enemyKills" json:"enemy_kills,omitempty"`
	EnemyHeadshots     []int32                                                 `protobuf:"varint,17,rep,name=enemy_headshots,json=enemyHeadshots" json:"enemy_headshots,omitempty"`
	Enemy_3Ks          []int32                                                 `protobuf:"varint,18,rep,name=enemy_3ks,json=enemy3ks" json:"enemy_3ks,omitempty"`
	Enemy_4Ks          []int32                                                 `protobuf:"varint,19,rep,name=enemy_4ks,json=enemy4ks" json:"enemy_4ks,omitempty"`
	Enemy_5Ks          []int32                                                 `protobuf:"varint,20,rep,name=enemy_5ks,json=enemy5ks" json:"enemy_5ks,omitempty"`
	Mvps               []int32                                                 `protobuf:"varint,21,rep,name=mvps" json:"mvps,omitempty"`
	SpectatorsCount    uint32                                                  `protobuf:"varint,22,opt,name=spectators_count,json=spectatorsCount" json:"spectators_count"`
	SpectatorsCountTv  uint32                                                  `protobuf:"varint,23,opt,name=spectators_count_tv,json=spectatorsCountTv" json:"spectators_count_tv"`
	SpectatorsCountLnk uint32                                                  `protobuf:"varint,24,opt,name=spectators_count_lnk,json=spectatorsCountLnk" json:"spectators_count_lnk"`
	EnemyKillsAgg      []int32                                                 `protobuf:"varint,25,rep,name=enemy_kills_agg,json=enemyKillsAgg" json:"enemy_kills_agg,omitempty"`
	DropInfo           *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo `protobuf:"bytes,26,opt,name=drop_info,json=dropInfo" json:"drop_info,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingServerRoundStats{}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{35}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerRoundStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerRoundStats.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerRoundStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerRoundStats proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservationid() uint64 {
	if m != nil {
		return m.Reservationid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetKills() []int32 {
	if m != nil {
		return m.Kills
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetAssists() []int32 {
	if m != nil {
		return m.Assists
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetDeaths() []int32 {
	if m != nil {
		return m.Deaths
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetScores() []int32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetPings() []int32 {
	if m != nil {
		return m.Pings
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetRoundResult() int32 {
	if m != nil {
		return m.RoundResult
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMatchResult() int32 {
	if m != nil {
		return m.MatchResult
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetTeamScores() []int32 {
	if m != nil {
		return m.TeamScores
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetConfirm() *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservationStage() int32 {
	if m != nil {
		return m.ReservationStage
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMatchDuration() int32 {
	if m != nil {
		return m.MatchDuration
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyKills() []int32 {
	if m != nil {
		return m.EnemyKills
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyHeadshots() []int32 {
	if m != nil {
		return m.EnemyHeadshots
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_3Ks() []int32 {
	if m != nil {
		return m.Enemy_3Ks
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_4Ks() []int32 {
	if m != nil {
		return m.Enemy_4Ks
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_5Ks() []int32 {
	if m != nil {
		return m.Enemy_5Ks
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMvps() []int32 {
	if m != nil {
		return m.Mvps
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCount() uint32 {
	if m != nil {
		return m.SpectatorsCount
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCountTv() uint32 {
	if m != nil {
		return m.SpectatorsCountTv
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCountLnk() uint32 {
	if m != nil {
		return m.SpectatorsCountLnk
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyKillsAgg() []int32 {
	if m != nil {
		return m.EnemyKillsAgg
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetDropInfo() *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo {
	if m != nil {
		return m.DropInfo
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo struct {
	AccountMvp uint32 `protobuf:"varint,1,opt,name=account_mvp,json=accountMvp" json:"account_mvp"`
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo{}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{35, 0}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) GetAccountMvp() uint32 {
	if m != nil {
		return m.AccountMvp
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingServerMatchEnd struct {
	Stats             *CMsgGCCStrike15V2_MatchmakingServerRoundStats `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
	Confirm           *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm `protobuf:"bytes,3,opt,name=confirm" json:"confirm,omitempty"`
	Rematch           uint64                                         `protobuf:"varint,4,opt,name=rematch" json:"rematch"`
	ReplayToken       uint32                                         `protobuf:"varint,5,opt,name=replay_token,json=replayToken" json:"replay_token"`
	ReplayClusterId   uint32                                         `protobuf:"varint,6,opt,name=replay_cluster_id,json=replayClusterId" json:"replay_cluster_id"`
	AbortedMatch      bool                                           `protobuf:"varint,7,opt,name=aborted_match,json=abortedMatch" json:"aborted_match"`
	MatchEndQuestData *CMsgGC_ServerQuestUpdateData                  `protobuf:"bytes,8,opt,name=match_end_quest_data,json=matchEndQuestData" json:"match_end_quest_data,omitempty"`
	ServerVersion     uint32                                         `protobuf:"varint,9,opt,name=server_version,json=serverVersion" json:"server_version"`
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingServerMatchEnd{}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingServerMatchEnd) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{36}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerMatchEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerMatchEnd.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerMatchEnd.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerMatchEnd proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetStats() *CMsgGCCStrike15V2_MatchmakingServerRoundStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetConfirm() *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetRematch() uint64 {
	if m != nil {
		return m.Rematch
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetReplayToken() uint32 {
	if m != nil {
		return m.ReplayToken
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetReplayClusterId() uint32 {
	if m != nil {
		return m.ReplayClusterId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetAbortedMatch() bool {
	if m != nil {
		return m.AbortedMatch
	}
	return false
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetMatchEndQuestData() *CMsgGC_ServerQuestUpdateData {
	if m != nil {
		return m.MatchEndQuestData
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetServerVersion() uint32 {
	if m != nil {
		return m.ServerVersion
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial struct {
	Reservationid            uint64                                         `protobuf:"varint,1,opt,name=reservationid" json:"reservationid"`
	Reservation              *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Confirm                  *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm `protobuf:"bytes,3,opt,name=confirm" json:"confirm,omitempty"`
	CompletedPlayerQuestData *CMsgGC_ServerQuestUpdateData                  `protobuf:"bytes,4,opt,name=completed_player_quest_data,json=completedPlayerQuestData" json:"completed_player_quest_data,omitempty"`
	ServerVersion            uint32                                         `protobuf:"varint,5,opt,name=server_version,json=serverVersion" json:"server_version"`
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial{}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{37}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) GetReservationid() uint64 {
	if m != nil {
		return m.Reservationid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) GetConfirm() *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) GetCompletedPlayerQuestData() *CMsgGC_ServerQuestUpdateData {
	if m != nil {
		return m.CompletedPlayerQuestData
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) GetServerVersion() uint32 {
	if m != nil {
		return m.ServerVersion
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingClient2GCHello struct {
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingClient2GCHello{}
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingClient2GCHello) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingClient2GCHello) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{38}
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingClient2GCHello.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingClient2GCHello.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingClient2GCHello.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingClient2GCHello proto.InternalMessageInfo

type CMsgGCCStrike15V2_MatchmakingGC2ClientHello struct {
	AccountId            uint32                                         `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	Ongoingmatch         *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,2,opt,name=ongoingmatch" json:"ongoingmatch,omitempty"`
	GlobalStats          *GlobalStatistics                              `protobuf:"bytes,3,opt,name=global_stats,json=globalStats" json:"global_stats,omitempty"`
	PenaltySeconds       uint32                                         `protobuf:"varint,4,opt,name=penalty_seconds,json=penaltySeconds" json:"penalty_seconds"`
	PenaltyReason        uint32                                         `protobuf:"varint,5,opt,name=penalty_reason,json=penaltyReason" json:"penalty_reason"`
	VacBanned            int32                                          `protobuf:"varint,6,opt,name=vac_banned,json=vacBanned" json:"vac_banned"`
	Ranking              *PlayerRankingInfo                             `protobuf:"bytes,7,opt,name=ranking" json:"ranking,omitempty"`
	Commendation         *PlayerCommendationInfo                        `protobuf:"bytes,8,opt,name=commendation" json:"commendation,omitempty"`
	Medals               *PlayerMedalsInfo                              `protobuf:"bytes,9,opt,name=medals" json:"medals,omitempty"`
	MyCurrentEvent       *TournamentEvent                               `protobuf:"bytes,10,opt,name=my_current_event,json=myCurrentEvent" json:"my_current_event,omitempty"`
	MyCurrentEventTeams  []*TournamentTeam                              `protobuf:"bytes,11,rep,name=my_current_event_teams,json=myCurrentEventTeams" json:"my_current_event_teams,omitempty"`
	MyCurrentTeam        *TournamentTeam                                `protobuf:"bytes,12,opt,name=my_current_team,json=myCurrentTeam" json:"my_current_team,omitempty"`
	MyCurrentEventStages []*TournamentEvent                             `protobuf:"bytes,13,rep,name=my_current_event_stages,json=myCurrentEventStages" json:"my_current_event_stages,omitempty"`
	SurveyVote           uint32                                         `protobuf:"varint,14,opt,name=survey_vote,json=surveyVote" json:"survey_vote"`
	Activity             *AccountActivity                               `protobuf:"bytes,15,opt,name=activity" json:"activity,omitempty"`
	PlayerLevel          int32                                          `protobuf:"varint,17,opt,name=player_level,json=playerLevel" json:"player_level"`
	PlayerCurXp          int32                                          `protobuf:"varint,18,opt,name=player_cur_xp,json=playerCurXp" json:"player_cur_xp"`
	PlayerXpBonusFlags   int32                                          `protobuf:"varint,19,opt,name=player_xp_bonus_flags,json=playerXpBonusFlags" json:"player_xp_bonus_flags"`
	Rankings             []*PlayerRankingInfo                           `protobuf:"bytes,20,rep,name=rankings" json:"rankings,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ClientHello{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientHello) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{39}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientHello.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientHello.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientHello.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientHello proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetOngoingmatch() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if m != nil {
		return m.Ongoingmatch
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetGlobalStats() *GlobalStatistics {
	if m != nil {
		return m.GlobalStats
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPenaltySeconds() uint32 {
	if m != nil {
		return m.PenaltySeconds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPenaltyReason() uint32 {
	if m != nil {
		return m.PenaltyReason
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetVacBanned() int32 {
	if m != nil {
		return m.VacBanned
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetRanking() *PlayerRankingInfo {
	if m != nil {
		return m.Ranking
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetCommendation() *PlayerCommendationInfo {
	if m != nil {
		return m.Commendation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMedals() *PlayerMedalsInfo {
	if m != nil {
		return m.Medals
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEvent() *TournamentEvent {
	if m != nil {
		return m.MyCurrentEvent
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEventTeams() []*TournamentTeam {
	if m != nil {
		return m.MyCurrentEventTeams
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentTeam() *TournamentTeam {
	if m != nil {
		return m.MyCurrentTeam
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEventStages() []*TournamentEvent {
	if m != nil {
		return m.MyCurrentEventStages
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetSurveyVote() uint32 {
	if m != nil {
		return m.SurveyVote
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetActivity() *AccountActivity {
	if m != nil {
		return m.Activity
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerLevel() int32 {
	if m != nil {
		return m.PlayerLevel
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerCurXp() int32 {
	if m != nil {
		return m.PlayerCurXp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerXpBonusFlags() int32 {
	if m != nil {
		return m.PlayerXpBonusFlags
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetRankings() []*PlayerRankingInfo {
	if m != nil {
		return m.Rankings
	}
	return nil
}

type CMsgGCCStrike15V2_AccountPrivacySettings struct {
	Settings []*CMsgGCCStrike15V2_AccountPrivacySettings_Setting `protobuf:"bytes,1,rep,name=settings" json:"settings,omitempty"`
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings) Reset() {
	*m = CMsgGCCStrike15V2_AccountPrivacySettings{}
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_AccountPrivacySettings) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_AccountPrivacySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{40}
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_AccountPrivacySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_AccountPrivacySettings.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_AccountPrivacySettings.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_AccountPrivacySettings proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_AccountPrivacySettings) GetSettings() []*CMsgGCCStrike15V2_AccountPrivacySettings_Setting {
	if m != nil {
		return m.Settings
	}
	return nil
}

type CMsgGCCStrike15V2_AccountPrivacySettings_Setting struct {
	SettingType  uint32 `protobuf:"varint,1,opt,name=setting_type,json=settingType" json:"setting_type"`
	SettingValue uint32 `protobuf:"varint,2,opt,name=setting_value,json=settingValue" json:"setting_value"`
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Reset() {
	*m = CMsgGCCStrike15V2_AccountPrivacySettings_Setting{}
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_AccountPrivacySettings_Setting) ProtoMessage() {}
func (*CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{40, 0}
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_AccountPrivacySettings_Setting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_AccountPrivacySettings_Setting.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_AccountPrivacySettings_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_AccountPrivacySettings_Setting proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) GetSettingType() uint32 {
	if m != nil {
		return m.SettingType
	}
	return 0
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) GetSettingValue() uint32 {
	if m != nil {
		return m.SettingValue
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon struct {
	AccountId      uint32                                         `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	AbandonedMatch *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,2,opt,name=abandoned_match,json=abandonedMatch" json:"abandoned_match,omitempty"`
	PenaltySeconds uint32                                         `protobuf:"varint,3,opt,name=penalty_seconds,json=penaltySeconds" json:"penalty_seconds"`
	PenaltyReason  uint32                                         `protobuf:"varint,4,opt,name=penalty_reason,json=penaltyReason" json:"penalty_reason"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{41}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetAbandonedMatch() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if m != nil {
		return m.AbandonedMatch
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetPenaltySeconds() uint32 {
	if m != nil {
		return m.PenaltySeconds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetPenaltyReason() uint32 {
	if m != nil {
		return m.PenaltyReason
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingServer2GCKick struct {
	AccountId   uint32                                         `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	Reservation *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Reason      uint32                                         `protobuf:"varint,3,opt,name=reason" json:"reason"`
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingServer2GCKick{}
}
func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingServer2GCKick) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingServer2GCKick) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{42}
}
func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServer2GCKick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServer2GCKick.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServer2GCKick.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingServer2GCKick proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate struct {
	Rankings []*PlayerRankingInfo `protobuf:"bytes,1,rep,name=rankings" json:"rankings,omitempty"`
	MatchId  uint64               `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{43}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) GetRankings() []*PlayerRankingInfo {
	if m != nil {
		return m.Rankings
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientGCRankUpdate struct {
	Rankings []*PlayerRankingInfo `protobuf:"bytes,1,rep,name=rankings" json:"rankings,omitempty"`
}

func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) Reset()         { *m = CMsgGCCStrike15V2_ClientGCRankUpdate{} }
func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientGCRankUpdate) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientGCRankUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{44}
}
func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientGCRankUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientGCRankUpdate.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientGCRankUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientGCRankUpdate proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) GetRankings() []*PlayerRankingInfo {
	if m != nil {
		return m.Rankings
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate struct {
	MainPostUrl string `protobuf:"bytes,1,opt,name=main_post_url,json=mainPostUrl" json:"main_post_url"`
}

func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate{}
}
func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{45}
}
func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) GetMainPostUrl() string {
	if m != nil {
		return m.MainPostUrl
	}
	return ""
}

type CMsgGCCStrike15V2_ServerNotificationForUserPenalty struct {
	AccountId             uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	Reason                uint32 `protobuf:"varint,2,opt,name=reason" json:"reason"`
	Seconds               uint32 `protobuf:"varint,3,opt,name=seconds" json:"seconds"`
	CommunicationCooldown bool   `protobuf:"varint,4,opt,name=communication_cooldown,json=communicationCooldown" json:"communication_cooldown"`
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Reset() {
	*m = CMsgGCCStrike15V2_ServerNotificationForUserPenalty{}
}
func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ServerNotificationForUserPenalty) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{46}
}
func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ServerNotificationForUserPenalty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ServerNotificationForUserPenalty.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ServerNotificationForUserPenalty.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ServerNotificationForUserPenalty proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetCommunicationCooldown() bool {
	if m != nil {
		return m.CommunicationCooldown
	}
	return false
}

type CMsgGCCStrike15V2_ClientReportPlayer struct {
	AccountId      uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	RptAimbot      uint32 `protobuf:"varint,2,opt,name=rpt_aimbot,json=rptAimbot" json:"rpt_aimbot"`
	RptWallhack    uint32 `protobuf:"varint,3,opt,name=rpt_wallhack,json=rptWallhack" json:"rpt_wallhack"`
	RptSpeedhack   uint32 `protobuf:"varint,4,opt,name=rpt_speedhack,json=rptSpeedhack" json:"rpt_speedhack"`
	RptTeamharm    uint32 `protobuf:"varint,5,opt,name=rpt_teamharm,json=rptTeamharm" json:"rpt_teamharm"`
	RptTextabuse   uint32 `protobuf:"varint,6,opt,name=rpt_textabuse,json=rptTextabuse" json:"rpt_textabuse"`
	RptVoiceabuse  uint32 `protobuf:"varint,7,opt,name=rpt_voiceabuse,json=rptVoiceabuse" json:"rpt_voiceabuse"`
	MatchId        uint64 `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id"`
	ReportFromDemo bool   `protobuf:"varint,9,opt,name=report_from_demo,json=reportFromDemo" json:"report_from_demo"`
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) Reset()         { *m = CMsgGCCStrike15V2_ClientReportPlayer{} }
func (m *CMsgGCCStrike15V2_ClientReportPlayer) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientReportPlayer) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientReportPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{47}
}
func (m *CMsgGCCStrike15V2_ClientReportPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientReportPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientReportPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientReportPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientReportPlayer.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientReportPlayer) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientReportPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientReportPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientReportPlayer proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptAimbot() uint32 {
	if m != nil {
		return m.RptAimbot
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptWallhack() uint32 {
	if m != nil {
		return m.RptWallhack
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptSpeedhack() uint32 {
	if m != nil {
		return m.RptSpeedhack
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptTeamharm() uint32 {
	if m != nil {
		return m.RptTeamharm
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptTextabuse() uint32 {
	if m != nil {
		return m.RptTextabuse
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptVoiceabuse() uint32 {
	if m != nil {
		return m.RptVoiceabuse
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetReportFromDemo() bool {
	if m != nil {
		return m.ReportFromDemo
	}
	return false
}

type CMsgGCCStrike15V2_ClientCommendPlayer struct {
	AccountId    uint32                  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	MatchId      uint64                  `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id"`
	Commendation *PlayerCommendationInfo `protobuf:"bytes,9,opt,name=commendation" json:"commendation,omitempty"`
	Tokens       uint32                  `protobuf:"varint,10,opt,name=tokens" json:"tokens"`
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) Reset()         { *m = CMsgGCCStrike15V2_ClientCommendPlayer{} }
func (m *CMsgGCCStrike15V2_ClientCommendPlayer) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientCommendPlayer) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientCommendPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{48}
}
func (m *CMsgGCCStrike15V2_ClientCommendPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientCommendPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientCommendPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientCommendPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientCommendPlayer.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientCommendPlayer) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientCommendPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientCommendPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientCommendPlayer proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) GetCommendation() *PlayerCommendationInfo {
	if m != nil {
		return m.Commendation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) GetTokens() uint32 {
	if m != nil {
		return m.Tokens
	}
	return 0
}

type CMsgGCCStrike15V2_ClientReportServer struct {
	RptPoorperf       uint32 `protobuf:"varint,1,opt,name=rpt_poorperf,json=rptPoorperf" json:"rpt_poorperf"`
	RptAbusivemodels  uint32 `protobuf:"varint,2,opt,name=rpt_abusivemodels,json=rptAbusivemodels" json:"rpt_abusivemodels"`
	RptBadmotd        uint32 `protobuf:"varint,3,opt,name=rpt_badmotd,json=rptBadmotd" json:"rpt_badmotd"`
	RptListingabuse   uint32 `protobuf:"varint,4,opt,name=rpt_listingabuse,json=rptListingabuse" json:"rpt_listingabuse"`
	RptInventoryabuse uint32 `protobuf:"varint,5,opt,name=rpt_inventoryabuse,json=rptInventoryabuse" json:"rpt_inventoryabuse"`
	MatchId           uint64 `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id"`
}

func (m *CMsgGCCStrike15V2_ClientReportServer) Reset()         { *m = CMsgGCCStrike15V2_ClientReportServer{} }
func (m *CMsgGCCStrike15V2_ClientReportServer) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientReportServer) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientReportServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{49}
}
func (m *CMsgGCCStrike15V2_ClientReportServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientReportServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientReportServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientReportServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientReportServer.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientReportServer) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientReportServer) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientReportServer.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientReportServer proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientReportServer) GetRptPoorperf() uint32 {
	if m != nil {
		return m.RptPoorperf
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportServer) GetRptAbusivemodels() uint32 {
	if m != nil {
		return m.RptAbusivemodels
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportServer) GetRptBadmotd() uint32 {
	if m != nil {
		return m.RptBadmotd
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportServer) GetRptListingabuse() uint32 {
	if m != nil {
		return m.RptListingabuse
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportServer) GetRptInventoryabuse() uint32 {
	if m != nil {
		return m.RptInventoryabuse
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportServer) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientReportResponse struct {
	ConfirmationId uint64 `protobuf:"varint,1,opt,name=confirmation_id,json=confirmationId" json:"confirmation_id"`
	AccountId      uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id"`
	ServerIp       uint32 `protobuf:"varint,3,opt,name=server_ip,json=serverIp" json:"server_ip"`
	ResponseType   uint32 `protobuf:"varint,4,opt,name=response_type,json=responseType" json:"response_type"`
	ResponseResult uint32 `protobuf:"varint,5,opt,name=response_result,json=responseResult" json:"response_result"`
	Tokens         uint32 `protobuf:"varint,6,opt,name=tokens" json:"tokens"`
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) Reset() {
	*m = CMsgGCCStrike15V2_ClientReportResponse{}
}
func (m *CMsgGCCStrike15V2_ClientReportResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientReportResponse) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{50}
}
func (m *CMsgGCCStrike15V2_ClientReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientReportResponse.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientReportResponse proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetConfirmationId() uint64 {
	if m != nil {
		return m.ConfirmationId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetServerIp() uint32 {
	if m != nil {
		return m.ServerIp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetResponseType() uint32 {
	if m != nil {
		return m.ResponseType
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetResponseResult() uint32 {
	if m != nil {
		return m.ResponseResult
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetTokens() uint32 {
	if m != nil {
		return m.Tokens
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestWatchInfoFriends struct {
	RequestId       uint32            `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id"`
	AccountIds      []uint32          `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	Serverid        uint64            `protobuf:"varint,3,opt,name=serverid" json:"serverid"`
	Matchid         uint64            `protobuf:"varint,4,opt,name=matchid" json:"matchid"`
	ClientLauncher  uint32            `protobuf:"varint,5,opt,name=client_launcher,json=clientLauncher" json:"client_launcher"`
	DataCenterPings []*DataCenterPing `protobuf:"bytes,6,rep,name=data_center_pings,json=dataCenterPings" json:"data_center_pings,omitempty"`
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Reset() {
	*m = CMsgGCCStrike15V2_ClientRequestWatchInfoFriends{}
}
func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{51}
}
func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestWatchInfoFriends.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestWatchInfoFriends.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestWatchInfoFriends.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestWatchInfoFriends proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetServerid() uint64 {
	if m != nil {
		return m.Serverid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetMatchid() uint64 {
	if m != nil {
		return m.Matchid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetClientLauncher() uint32 {
	if m != nil {
		return m.ClientLauncher
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetDataCenterPings() []*DataCenterPing {
	if m != nil {
		return m.DataCenterPings
	}
	return nil
}

type WatchableMatchInfo struct {
	ServerIp            uint32 `protobuf:"varint,1,opt,name=server_ip,json=serverIp" json:"server_ip"`
	TvPort              uint32 `protobuf:"varint,2,opt,name=tv_port,json=tvPort" json:"tv_port"`
	TvSpectators        uint32 `protobuf:"varint,3,opt,name=tv_spectators,json=tvSpectators" json:"tv_spectators"`
	TvTime              uint32 `protobuf:"varint,4,opt,name=tv_time,json=tvTime" json:"tv_time"`
	TvWatchPassword     []byte `protobuf:"bytes,5,opt,name=tv_watch_password,json=tvWatchPassword" json:"tv_watch_password"`
	ClDecryptdataKey    uint64 `protobuf:"varint,6,opt,name=cl_decryptdata_key,json=clDecryptdataKey" json:"cl_decryptdata_key"`
	ClDecryptdataKeyPub uint64 `protobuf:"varint,7,opt,name=cl_decryptdata_key_pub,json=clDecryptdataKeyPub" json:"cl_decryptdata_key_pub"`
	GameType            uint32 `protobuf:"varint,8,opt,name=game_type,json=gameType" json:"game_type"`
	GameMapgroup        string `protobuf:"bytes,9,opt,name=game_mapgroup,json=gameMapgroup" json:"game_mapgroup"`
	GameMap             string `protobuf:"bytes,10,opt,name=game_map,json=gameMap" json:"game_map"`
	ServerId            uint64 `protobuf:"varint,11,opt,name=server_id,json=serverId" json:"server_id"`
	MatchId             uint64 `protobuf:"varint,12,opt,name=match_id,json=matchId" json:"match_id"`
	ReservationId       uint64 `protobuf:"varint,13,opt,name=reservation_id,json=reservationId" json:"reservation_id"`
}

func (m *WatchableMatchInfo) Reset()         { *m = WatchableMatchInfo{} }
func (m *WatchableMatchInfo) String() string { return proto.CompactTextString(m) }
func (*WatchableMatchInfo) ProtoMessage()    {}
func (*WatchableMatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{52}
}
func (m *WatchableMatchInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchableMatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchableMatchInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchableMatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchableMatchInfo.Merge(m, src)
}
func (m *WatchableMatchInfo) XXX_Size() int {
	return m.Size()
}
func (m *WatchableMatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchableMatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WatchableMatchInfo proto.InternalMessageInfo

func (m *WatchableMatchInfo) GetServerIp() uint32 {
	if m != nil {
		return m.ServerIp
	}
	return 0
}

func (m *WatchableMatchInfo) GetTvPort() uint32 {
	if m != nil {
		return m.TvPort
	}
	return 0
}

func (m *WatchableMatchInfo) GetTvSpectators() uint32 {
	if m != nil {
		return m.TvSpectators
	}
	return 0
}

func (m *WatchableMatchInfo) GetTvTime() uint32 {
	if m != nil {
		return m.TvTime
	}
	return 0
}

func (m *WatchableMatchInfo) GetTvWatchPassword() []byte {
	if m != nil {
		return m.TvWatchPassword
	}
	return nil
}

func (m *WatchableMatchInfo) GetClDecryptdataKey() uint64 {
	if m != nil {
		return m.ClDecryptdataKey
	}
	return 0
}

func (m *WatchableMatchInfo) GetClDecryptdataKeyPub() uint64 {
	if m != nil {
		return m.ClDecryptdataKeyPub
	}
	return 0
}

func (m *WatchableMatchInfo) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *WatchableMatchInfo) GetGameMapgroup() string {
	if m != nil {
		return m.GameMapgroup
	}
	return ""
}

func (m *WatchableMatchInfo) GetGameMap() string {
	if m != nil {
		return m.GameMap
	}
	return ""
}

func (m *WatchableMatchInfo) GetServerId() uint64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *WatchableMatchInfo) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *WatchableMatchInfo) GetReservationId() uint64 {
	if m != nil {
		return m.ReservationId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestJoinFriendData struct {
	Version   uint32                                         `protobuf:"varint,1,opt,name=version" json:"version"`
	AccountId uint32                                         `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id"`
	JoinToken uint32                                         `protobuf:"varint,3,opt,name=join_token,json=joinToken" json:"join_token"`
	JoinIpp   uint32                                         `protobuf:"varint,4,opt,name=join_ipp,json=joinIpp" json:"join_ipp"`
	Res       *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,5,opt,name=res" json:"res,omitempty"`
	Errormsg  string                                         `protobuf:"bytes,6,opt,name=errormsg" json:"errormsg"`
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) Reset() {
	*m = CMsgGCCStrike15V2_ClientRequestJoinFriendData{}
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientRequestJoinFriendData) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientRequestJoinFriendData) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{53}
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestJoinFriendData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestJoinFriendData.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestJoinFriendData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestJoinFriendData proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetJoinToken() uint32 {
	if m != nil {
		return m.JoinToken
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetJoinIpp() uint32 {
	if m != nil {
		return m.JoinIpp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetRes() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if m != nil {
		return m.Res
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetErrormsg() string {
	if m != nil {
		return m.Errormsg
	}
	return ""
}

type CMsgGCCStrike15V2_ClientRequestJoinServerData struct {
	Version    uint32                                         `protobuf:"varint,1,opt,name=version" json:"version"`
	AccountId  uint32                                         `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id"`
	Serverid   uint64                                         `protobuf:"varint,3,opt,name=serverid" json:"serverid"`
	ServerIp   uint32                                         `protobuf:"varint,4,opt,name=server_ip,json=serverIp" json:"server_ip"`
	ServerPort uint32                                         `protobuf:"varint,5,opt,name=server_port,json=serverPort" json:"server_port"`
	Res        *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,6,opt,name=res" json:"res,omitempty"`
	Errormsg   string                                         `protobuf:"bytes,7,opt,name=errormsg" json:"errormsg"`
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) Reset() {
	*m = CMsgGCCStrike15V2_ClientRequestJoinServerData{}
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientRequestJoinServerData) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientRequestJoinServerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{54}
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestJoinServerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestJoinServerData.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestJoinServerData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestJoinServerData proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerid() uint64 {
	if m != nil {
		return m.Serverid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerIp() uint32 {
	if m != nil {
		return m.ServerIp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetRes() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if m != nil {
		return m.Res
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetErrormsg() string {
	if m != nil {
		return m.Errormsg
	}
	return ""
}

type CMsgGCCstrike15V2_ClientRequestNewMission struct {
	MissionId  uint32 `protobuf:"varint,2,opt,name=mission_id,json=missionId" json:"mission_id"`
	CampaignId uint32 `protobuf:"varint,3,opt,name=campaign_id,json=campaignId" json:"campaign_id"`
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) Reset() {
	*m = CMsgGCCstrike15V2_ClientRequestNewMission{}
}
func (m *CMsgGCCstrike15V2_ClientRequestNewMission) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCstrike15V2_ClientRequestNewMission) ProtoMessage() {}
func (*CMsgGCCstrike15V2_ClientRequestNewMission) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{55}
}
func (m *CMsgGCCstrike15V2_ClientRequestNewMission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCstrike15V2_ClientRequestNewMission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCstrike15V2_ClientRequestNewMission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCstrike15V2_ClientRequestNewMission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCstrike15V2_ClientRequestNewMission.Merge(m, src)
}
func (m *CMsgGCCstrike15V2_ClientRequestNewMission) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCstrike15V2_ClientRequestNewMission) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCstrike15V2_ClientRequestNewMission.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCstrike15V2_ClientRequestNewMission proto.InternalMessageInfo

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) GetMissionId() uint32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) GetCampaignId() uint32 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

type CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded struct {
	XpProgressData         []*XpProgressData `protobuf:"bytes,1,rep,name=xp_progress_data,json=xpProgressData" json:"xp_progress_data,omitempty"`
	AccountId              uint32            `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id"`
	CurrentXp              uint32            `protobuf:"varint,3,opt,name=current_xp,json=currentXp" json:"current_xp"`
	CurrentLevel           uint32            `protobuf:"varint,4,opt,name=current_level,json=currentLevel" json:"current_level"`
	UpgradedDefidx         uint32            `protobuf:"varint,5,opt,name=upgraded_defidx,json=upgradedDefidx" json:"upgraded_defidx"`
	OperationPointsAwarded uint32            `protobuf:"varint,6,opt,name=operation_points_awarded,json=operationPointsAwarded" json:"operation_points_awarded"`
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Reset() {
	*m = CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded{}
}
func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) ProtoMessage() {}
func (*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{56}
}
func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded.Merge(m, src)
}
func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded proto.InternalMessageInfo

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetXpProgressData() []*XpProgressData {
	if m != nil {
		return m.XpProgressData
	}
	return nil
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetCurrentXp() uint32 {
	if m != nil {
		return m.CurrentXp
	}
	return 0
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetCurrentLevel() uint32 {
	if m != nil {
		return m.CurrentLevel
	}
	return 0
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetUpgradedDefidx() uint32 {
	if m != nil {
		return m.UpgradedDefidx
	}
	return 0
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetOperationPointsAwarded() uint32 {
	if m != nil {
		return m.OperationPointsAwarded
	}
	return 0
}

type CMsgGCCStrike15V2_WatchInfoUsers struct {
	RequestId           uint32                `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id"`
	AccountIds          []uint32              `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	WatchableMatchInfos []*WatchableMatchInfo `protobuf:"bytes,3,rep,name=watchable_match_infos,json=watchableMatchInfos" json:"watchable_match_infos,omitempty"`
	ExtendedTimeout     uint32                `protobuf:"varint,5,opt,name=extended_timeout,json=extendedTimeout" json:"extended_timeout"`
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) Reset()         { *m = CMsgGCCStrike15V2_WatchInfoUsers{} }
func (m *CMsgGCCStrike15V2_WatchInfoUsers) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_WatchInfoUsers) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_WatchInfoUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{57}
}
func (m *CMsgGCCStrike15V2_WatchInfoUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_WatchInfoUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_WatchInfoUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_WatchInfoUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_WatchInfoUsers.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_WatchInfoUsers) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_WatchInfoUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_WatchInfoUsers.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_WatchInfoUsers proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_WatchInfoUsers) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) GetWatchableMatchInfos() []*WatchableMatchInfo {
	if m != nil {
		return m.WatchableMatchInfos
	}
	return nil
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) GetExtendedTimeout() uint32 {
	if m != nil {
		return m.ExtendedTimeout
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestPlayersProfile struct {
	RequestId_Deprecated  uint32   `protobuf:"varint,1,opt,name=request_id__deprecated,json=requestIdDeprecated" json:"request_id__deprecated"`
	AccountIds_Deprecated []uint32 `protobuf:"varint,2,rep,name=account_ids__deprecated,json=accountIdsDeprecated" json:"account_ids__deprecated,omitempty"`
	AccountId             uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id"`
	RequestLevel          uint32   `protobuf:"varint,4,opt,name=request_level,json=requestLevel" json:"request_level"`
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) Reset() {
	*m = CMsgGCCStrike15V2_ClientRequestPlayersProfile{}
}
func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientRequestPlayersProfile) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientRequestPlayersProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{58}
}
func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestPlayersProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestPlayersProfile.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestPlayersProfile.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestPlayersProfile proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetRequestId_Deprecated() uint32 {
	if m != nil {
		return m.RequestId_Deprecated
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetAccountIds_Deprecated() []uint32 {
	if m != nil {
		return m.AccountIds_Deprecated
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetRequestLevel() uint32 {
	if m != nil {
		return m.RequestLevel
	}
	return 0
}

type CMsgGCCStrike15V2_PlayersProfile struct {
	RequestId       uint32                                         `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id"`
	AccountProfiles []*CMsgGCCStrike15V2_MatchmakingGC2ClientHello `protobuf:"bytes,2,rep,name=account_profiles,json=accountProfiles" json:"account_profiles,omitempty"`
}

func (m *CMsgGCCStrike15V2_PlayersProfile) Reset()         { *m = CMsgGCCStrike15V2_PlayersProfile{} }
func (m *CMsgGCCStrike15V2_PlayersProfile) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_PlayersProfile) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_PlayersProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{59}
}
func (m *CMsgGCCStrike15V2_PlayersProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_PlayersProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_PlayersProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_PlayersProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_PlayersProfile.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_PlayersProfile) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_PlayersProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_PlayersProfile.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_PlayersProfile proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_PlayersProfile) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayersProfile) GetAccountProfiles() []*CMsgGCCStrike15V2_MatchmakingGC2ClientHello {
	if m != nil {
		return m.AccountProfiles
	}
	return nil
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate struct {
	Caseid       uint64 `protobuf:"varint,1,opt,name=caseid" json:"caseid"`
	Suspectid    uint32 `protobuf:"varint,3,opt,name=suspectid" json:"suspectid"`
	Fractionid   uint32 `protobuf:"varint,4,opt,name=fractionid" json:"fractionid"`
	RptAimbot    uint32 `protobuf:"varint,5,opt,name=rpt_aimbot,json=rptAimbot" json:"rpt_aimbot"`
	RptWallhack  uint32 `protobuf:"varint,6,opt,name=rpt_wallhack,json=rptWallhack" json:"rpt_wallhack"`
	RptSpeedhack uint32 `protobuf:"varint,7,opt,name=rpt_speedhack,json=rptSpeedhack" json:"rpt_speedhack"`
	RptTeamharm  uint32 `protobuf:"varint,8,opt,name=rpt_teamharm,json=rptTeamharm" json:"rpt_teamharm"`
	Reason       uint32 `protobuf:"varint,9,opt,name=reason" json:"reason"`
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Reset() {
	*m = CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate{}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{60}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetCaseid() uint64 {
	if m != nil {
		return m.Caseid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetSuspectid() uint32 {
	if m != nil {
		return m.Suspectid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetFractionid() uint32 {
	if m != nil {
		return m.Fractionid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptAimbot() uint32 {
	if m != nil {
		return m.RptAimbot
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptWallhack() uint32 {
	if m != nil {
		return m.RptWallhack
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptSpeedhack() uint32 {
	if m != nil {
		return m.RptSpeedhack
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptTeamharm() uint32 {
	if m != nil {
		return m.RptTeamharm
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment struct {
	Caseid            uint64 `protobuf:"varint,1,opt,name=caseid" json:"caseid"`
	Caseurl           string `protobuf:"bytes,2,opt,name=caseurl" json:"caseurl"`
	Verdict           uint32 `protobuf:"varint,3,opt,name=verdict" json:"verdict"`
	Timestamp         uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp"`
	Throttleseconds   uint32 `protobuf:"varint,5,opt,name=throttleseconds" json:"throttleseconds"`
	Suspectid         uint32 `protobuf:"varint,6,opt,name=suspectid" json:"suspectid"`
	Fractionid        uint32 `protobuf:"varint,7,opt,name=fractionid" json:"fractionid"`
	Numrounds         uint32 `protobuf:"varint,8,opt,name=numrounds" json:"numrounds"`
	Fractionrounds    uint32 `protobuf:"varint,9,opt,name=fractionrounds" json:"fractionrounds"`
	Streakconvictions int32  `protobuf:"varint,10,opt,name=streakconvictions" json:"streakconvictions"`
	Reason            uint32 `protobuf:"varint,11,opt,name=reason" json:"reason"`
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Reset() {
	*m = CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment{}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) ProtoMessage() {}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{61}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetCaseid() uint64 {
	if m != nil {
		return m.Caseid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetCaseurl() string {
	if m != nil {
		return m.Caseurl
	}
	return ""
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetVerdict() uint32 {
	if m != nil {
		return m.Verdict
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetThrottleseconds() uint32 {
	if m != nil {
		return m.Throttleseconds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetSuspectid() uint32 {
	if m != nil {
		return m.Suspectid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetFractionid() uint32 {
	if m != nil {
		return m.Fractionid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetNumrounds() uint32 {
	if m != nil {
		return m.Numrounds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetFractionrounds() uint32 {
	if m != nil {
		return m.Fractionrounds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetStreakconvictions() int32 {
	if m != nil {
		return m.Streakconvictions
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseStatus struct {
	Caseid   uint64 `protobuf:"varint,1,opt,name=caseid" json:"caseid"`
	Statusid uint32 `protobuf:"varint,2,opt,name=statusid" json:"statusid"`
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Reset() {
	*m = CMsgGCCStrike15V2_PlayerOverwatchCaseStatus{}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) ProtoMessage() {}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{62}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseStatus.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_PlayerOverwatchCaseStatus proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) GetCaseid() uint64 {
	if m != nil {
		return m.Caseid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) GetStatusid() uint32 {
	if m != nil {
		return m.Statusid
	}
	return 0
}

type CClientHeaderOverwatchEvidence struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Caseid    uint64 `protobuf:"varint,2,opt,name=caseid" json:"caseid"`
}

func (m *CClientHeaderOverwatchEvidence) Reset()         { *m = CClientHeaderOverwatchEvidence{} }
func (m *CClientHeaderOverwatchEvidence) String() string { return proto.CompactTextString(m) }
func (*CClientHeaderOverwatchEvidence) ProtoMessage()    {}
func (*CClientHeaderOverwatchEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{63}
}
func (m *CClientHeaderOverwatchEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CClientHeaderOverwatchEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CClientHeaderOverwatchEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CClientHeaderOverwatchEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CClientHeaderOverwatchEvidence.Merge(m, src)
}
func (m *CClientHeaderOverwatchEvidence) XXX_Size() int {
	return m.Size()
}
func (m *CClientHeaderOverwatchEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_CClientHeaderOverwatchEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_CClientHeaderOverwatchEvidence proto.InternalMessageInfo

func (m *CClientHeaderOverwatchEvidence) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CClientHeaderOverwatchEvidence) GetCaseid() uint64 {
	if m != nil {
		return m.Caseid
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ClientTextMsg struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	Type    uint32 `protobuf:"varint,2,opt,name=type" json:"type"`
	Payload []byte `protobuf:"bytes,3,opt,name=payload" json:"payload"`
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) Reset()         { *m = CMsgGCCStrike15V2_GC2ClientTextMsg{} }
func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_GC2ClientTextMsg) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_GC2ClientTextMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{64}
}
func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientTextMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientTextMsg.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientTextMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientTextMsg proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CMsgGCCStrike15V2_Client2GCTextMsg struct {
	Id   uint32   `protobuf:"varint,1,opt,name=id" json:"id"`
	Args [][]byte `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) Reset()         { *m = CMsgGCCStrike15V2_Client2GCTextMsg{} }
func (m *CMsgGCCStrike15V2_Client2GCTextMsg) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Client2GCTextMsg) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Client2GCTextMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{65}
}
func (m *CMsgGCCStrike15V2_Client2GCTextMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Client2GCTextMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Client2GCTextMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Client2GCTextMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Client2GCTextMsg.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Client2GCTextMsg) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Client2GCTextMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Client2GCTextMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Client2GCTextMsg proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type CMsgGCCStrike15V2_MatchEndRunRewardDrops struct {
	Serverinfo        *CMsgGCCStrike15V2_MatchmakingServerReservationResponse `protobuf:"bytes,3,opt,name=serverinfo" json:"serverinfo,omitempty"`
	MatchEndQuestData *CMsgGC_ServerQuestUpdateData                           `protobuf:"bytes,4,opt,name=match_end_quest_data,json=matchEndQuestData" json:"match_end_quest_data,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) Reset() {
	*m = CMsgGCCStrike15V2_MatchEndRunRewardDrops{}
}
func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_MatchEndRunRewardDrops) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_MatchEndRunRewardDrops) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{66}
}
func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchEndRunRewardDrops.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchEndRunRewardDrops.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchEndRunRewardDrops.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchEndRunRewardDrops proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) GetServerinfo() *CMsgGCCStrike15V2_MatchmakingServerReservationResponse {
	if m != nil {
		return m.Serverinfo
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) GetMatchEndQuestData() *CMsgGC_ServerQuestUpdateData {
	if m != nil {
		return m.MatchEndQuestData
	}
	return nil
}

type CEconItemPreviewDataBlock struct {
	Accountid          uint32                               `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Itemid             uint64                               `protobuf:"varint,2,opt,name=itemid" json:"itemid"`
	Defindex           uint32                               `protobuf:"varint,3,opt,name=defindex" json:"defindex"`
	Paintindex         uint32                               `protobuf:"varint,4,opt,name=paintindex" json:"paintindex"`
	Rarity             uint32                               `protobuf:"varint,5,opt,name=rarity" json:"rarity"`
	Quality            uint32                               `protobuf:"varint,6,opt,name=quality" json:"quality"`
	Paintwear          uint32                               `protobuf:"varint,7,opt,name=paintwear" json:"paintwear"`
	Paintseed          uint32                               `protobuf:"varint,8,opt,name=paintseed" json:"paintseed"`
	Killeaterscoretype uint32                               `protobuf:"varint,9,opt,name=killeaterscoretype" json:"killeaterscoretype"`
	Killeatervalue     uint32                               `protobuf:"varint,10,opt,name=killeatervalue" json:"killeatervalue"`
	Customname         string                               `protobuf:"bytes,11,opt,name=customname" json:"customname"`
	Stickers           []*CEconItemPreviewDataBlock_Sticker `protobuf:"bytes,12,rep,name=stickers" json:"stickers,omitempty"`
	Inventory          uint32                               `protobuf:"varint,13,opt,name=inventory" json:"inventory"`
	Origin             uint32                               `protobuf:"varint,14,opt,name=origin" json:"origin"`
	Questid            uint32                               `protobuf:"varint,15,opt,name=questid" json:"questid"`
	Dropreason         uint32                               `protobuf:"varint,16,opt,name=dropreason" json:"dropreason"`
	Musicindex         uint32                               `protobuf:"varint,17,opt,name=musicindex" json:"musicindex"`
	Entindex           int32                                `protobuf:"varint,18,opt,name=entindex" json:"entindex"`
}

func (m *CEconItemPreviewDataBlock) Reset()         { *m = CEconItemPreviewDataBlock{} }
func (m *CEconItemPreviewDataBlock) String() string { return proto.CompactTextString(m) }
func (*CEconItemPreviewDataBlock) ProtoMessage()    {}
func (*CEconItemPreviewDataBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{67}
}
func (m *CEconItemPreviewDataBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CEconItemPreviewDataBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CEconItemPreviewDataBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CEconItemPreviewDataBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CEconItemPreviewDataBlock.Merge(m, src)
}
func (m *CEconItemPreviewDataBlock) XXX_Size() int {
	return m.Size()
}
func (m *CEconItemPreviewDataBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_CEconItemPreviewDataBlock.DiscardUnknown(m)
}

var xxx_messageInfo_CEconItemPreviewDataBlock proto.InternalMessageInfo

func (m *CEconItemPreviewDataBlock) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetDefindex() uint32 {
	if m != nil {
		return m.Defindex
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetPaintindex() uint32 {
	if m != nil {
		return m.Paintindex
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetRarity() uint32 {
	if m != nil {
		return m.Rarity
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetPaintwear() uint32 {
	if m != nil {
		return m.Paintwear
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetPaintseed() uint32 {
	if m != nil {
		return m.Paintseed
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetKilleaterscoretype() uint32 {
	if m != nil {
		return m.Killeaterscoretype
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetKilleatervalue() uint32 {
	if m != nil {
		return m.Killeatervalue
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetCustomname() string {
	if m != nil {
		return m.Customname
	}
	return ""
}

func (m *CEconItemPreviewDataBlock) GetStickers() []*CEconItemPreviewDataBlock_Sticker {
	if m != nil {
		return m.Stickers
	}
	return nil
}

func (m *CEconItemPreviewDataBlock) GetInventory() uint32 {
	if m != nil {
		return m.Inventory
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetQuestid() uint32 {
	if m != nil {
		return m.Questid
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetDropreason() uint32 {
	if m != nil {
		return m.Dropreason
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetMusicindex() uint32 {
	if m != nil {
		return m.Musicindex
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetEntindex() int32 {
	if m != nil {
		return m.Entindex
	}
	return 0
}

type CEconItemPreviewDataBlock_Sticker struct {
	Slot      uint32  `protobuf:"varint,1,opt,name=slot" json:"slot"`
	StickerId uint32  `protobuf:"varint,2,opt,name=sticker_id,json=stickerId" json:"sticker_id"`
	Wear      float32 `protobuf:"fixed32,3,opt,name=wear" json:"wear"`
	Scale     float32 `protobuf:"fixed32,4,opt,name=scale" json:"scale"`
	Rotation  float32 `protobuf:"fixed32,5,opt,name=rotation" json:"rotation"`
	TintId    uint32  `protobuf:"varint,6,opt,name=tint_id,json=tintId" json:"tint_id"`
}

func (m *CEconItemPreviewDataBlock_Sticker) Reset()         { *m = CEconItemPreviewDataBlock_Sticker{} }
func (m *CEconItemPreviewDataBlock_Sticker) String() string { return proto.CompactTextString(m) }
func (*CEconItemPreviewDataBlock_Sticker) ProtoMessage()    {}
func (*CEconItemPreviewDataBlock_Sticker) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{67, 0}
}
func (m *CEconItemPreviewDataBlock_Sticker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CEconItemPreviewDataBlock_Sticker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CEconItemPreviewDataBlock_Sticker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CEconItemPreviewDataBlock_Sticker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CEconItemPreviewDataBlock_Sticker.Merge(m, src)
}
func (m *CEconItemPreviewDataBlock_Sticker) XXX_Size() int {
	return m.Size()
}
func (m *CEconItemPreviewDataBlock_Sticker) XXX_DiscardUnknown() {
	xxx_messageInfo_CEconItemPreviewDataBlock_Sticker.DiscardUnknown(m)
}

var xxx_messageInfo_CEconItemPreviewDataBlock_Sticker proto.InternalMessageInfo

func (m *CEconItemPreviewDataBlock_Sticker) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *CEconItemPreviewDataBlock_Sticker) GetStickerId() uint32 {
	if m != nil {
		return m.StickerId
	}
	return 0
}

func (m *CEconItemPreviewDataBlock_Sticker) GetWear() float32 {
	if m != nil {
		return m.Wear
	}
	return 0
}

func (m *CEconItemPreviewDataBlock_Sticker) GetScale() float32 {
	if m != nil {
		return m.Scale
	}
	return 0
}

func (m *CEconItemPreviewDataBlock_Sticker) GetRotation() float32 {
	if m != nil {
		return m.Rotation
	}
	return 0
}

func (m *CEconItemPreviewDataBlock_Sticker) GetTintId() uint32 {
	if m != nil {
		return m.TintId
	}
	return 0
}

type CMsgGCCStrike15V2_MatchEndRewardDropsNotification struct {
	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,6,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Reset() {
	*m = CMsgGCCStrike15V2_MatchEndRewardDropsNotification{}
}
func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchEndRewardDropsNotification) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{68}
}
func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchEndRewardDropsNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchEndRewardDropsNotification.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchEndRewardDropsNotification.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchEndRewardDropsNotification proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) GetIteminfo() *CEconItemPreviewDataBlock {
	if m != nil {
		return m.Iteminfo
	}
	return nil
}

type CMsgItemAcknowledged struct {
	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,1,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

func (m *CMsgItemAcknowledged) Reset()         { *m = CMsgItemAcknowledged{} }
func (m *CMsgItemAcknowledged) String() string { return proto.CompactTextString(m) }
func (*CMsgItemAcknowledged) ProtoMessage()    {}
func (*CMsgItemAcknowledged) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{69}
}
func (m *CMsgItemAcknowledged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgItemAcknowledged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgItemAcknowledged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgItemAcknowledged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgItemAcknowledged.Merge(m, src)
}
func (m *CMsgItemAcknowledged) XXX_Size() int {
	return m.Size()
}
func (m *CMsgItemAcknowledged) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgItemAcknowledged.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgItemAcknowledged proto.InternalMessageInfo

func (m *CMsgItemAcknowledged) GetIteminfo() *CEconItemPreviewDataBlock {
	if m != nil {
		return m.Iteminfo
	}
	return nil
}

type CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest struct {
	ParamS uint64 `protobuf:"varint,1,opt,name=param_s,json=paramS" json:"param_s"`
	ParamA uint64 `protobuf:"varint,2,opt,name=param_a,json=paramA" json:"param_a"`
	ParamD uint64 `protobuf:"varint,3,opt,name=param_d,json=paramD" json:"param_d"`
	ParamM uint64 `protobuf:"varint,4,opt,name=param_m,json=paramM" json:"param_m"`
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Reset() {
	*m = CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest{}
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{70}
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamS() uint64 {
	if m != nil {
		return m.ParamS
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamA() uint64 {
	if m != nil {
		return m.ParamA
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamD() uint64 {
	if m != nil {
		return m.ParamD
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamM() uint64 {
	if m != nil {
		return m.ParamM
	}
	return 0
}

type CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse struct {
	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,1,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Reset() {
	*m = CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse{}
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{71}
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) GetIteminfo() *CEconItemPreviewDataBlock {
	if m != nil {
		return m.Iteminfo
	}
	return nil
}

type CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification struct {
	MatchId    uint64   `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id"`
	Defindex   uint32   `protobuf:"varint,2,opt,name=defindex" json:"defindex"`
	Accountids []uint32 `protobuf:"varint,3,rep,name=accountids" json:"accountids,omitempty"`
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Reset() {
	*m = CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification{}
}
func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) ProtoMessage() {}
func (*CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{72}
}
func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) GetDefindex() uint32 {
	if m != nil {
		return m.Defindex
	}
	return 0
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) GetAccountids() []uint32 {
	if m != nil {
		return m.Accountids
	}
	return nil
}

type CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames struct {
}

func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Reset() {
	*m = CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames{}
}
func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{73}
}
func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames proto.InternalMessageInfo

type CMsgGCCStrike15V2_MatchListRequestLiveGameForUser struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
}

func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Reset() {
	*m = CMsgGCCStrike15V2_MatchListRequestLiveGameForUser{}
}
func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{74}
}
func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestLiveGameForUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestLiveGameForUser.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestLiveGameForUser.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestLiveGameForUser proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestRecentUserGames struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
}

func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Reset() {
	*m = CMsgGCCStrike15V2_MatchListRequestRecentUserGames{}
}
func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchListRequestRecentUserGames) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{75}
}
func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestRecentUserGames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestRecentUserGames.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestRecentUserGames.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestRecentUserGames proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestTournamentGames struct {
	Eventid int32 `protobuf:"varint,1,opt,name=eventid" json:"eventid"`
}

func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) Reset() {
	*m = CMsgGCCStrike15V2_MatchListRequestTournamentGames{}
}
func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchListRequestTournamentGames) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchListRequestTournamentGames) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{76}
}
func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestTournamentGames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestTournamentGames.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestTournamentGames.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestTournamentGames proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) GetEventid() int32 {
	if m != nil {
		return m.Eventid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestFullGameInfo struct {
	Matchid   uint64 `protobuf:"varint,1,opt,name=matchid" json:"matchid"`
	Outcomeid uint64 `protobuf:"varint,2,opt,name=outcomeid" json:"outcomeid"`
	Token     uint32 `protobuf:"varint,3,opt,name=token" json:"token"`
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Reset() {
	*m = CMsgGCCStrike15V2_MatchListRequestFullGameInfo{}
}
func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchListRequestFullGameInfo) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{77}
}
func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestFullGameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestFullGameInfo.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestFullGameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchListRequestFullGameInfo proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetMatchid() uint64 {
	if m != nil {
		return m.Matchid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetOutcomeid() uint64 {
	if m != nil {
		return m.Outcomeid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetToken() uint32 {
	if m != nil {
		return m.Token
	}
	return 0
}

type CDataGCCStrike15V2_MatchInfo struct {
	Matchid            uint64                                           `protobuf:"varint,1,opt,name=matchid" json:"matchid"`
	Matchtime          uint32                                           `protobuf:"varint,2,opt,name=matchtime" json:"matchtime"`
	Watchablematchinfo *WatchableMatchInfo                              `protobuf:"bytes,3,opt,name=watchablematchinfo" json:"watchablematchinfo,omitempty"`
	RoundstatsLegacy   *CMsgGCCStrike15V2_MatchmakingServerRoundStats   `protobuf:"bytes,4,opt,name=roundstats_legacy,json=roundstatsLegacy" json:"roundstats_legacy,omitempty"`
	Roundstatsall      []*CMsgGCCStrike15V2_MatchmakingServerRoundStats `protobuf:"bytes,5,rep,name=roundstatsall" json:"roundstatsall,omitempty"`
}

func (m *CDataGCCStrike15V2_MatchInfo) Reset()         { *m = CDataGCCStrike15V2_MatchInfo{} }
func (m *CDataGCCStrike15V2_MatchInfo) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_MatchInfo) ProtoMessage()    {}
func (*CDataGCCStrike15V2_MatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{78}
}
func (m *CDataGCCStrike15V2_MatchInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDataGCCStrike15V2_MatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDataGCCStrike15V2_MatchInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDataGCCStrike15V2_MatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDataGCCStrike15V2_MatchInfo.Merge(m, src)
}
func (m *CDataGCCStrike15V2_MatchInfo) XXX_Size() int {
	return m.Size()
}
func (m *CDataGCCStrike15V2_MatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CDataGCCStrike15V2_MatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CDataGCCStrike15V2_MatchInfo proto.InternalMessageInfo

func (m *CDataGCCStrike15V2_MatchInfo) GetMatchid() uint64 {
	if m != nil {
		return m.Matchid
	}
	return 0
}

func (m *CDataGCCStrike15V2_MatchInfo) GetMatchtime() uint32 {
	if m != nil {
		return m.Matchtime
	}
	return 0
}

func (m *CDataGCCStrike15V2_MatchInfo) GetWatchablematchinfo() *WatchableMatchInfo {
	if m != nil {
		return m.Watchablematchinfo
	}
	return nil
}

func (m *CDataGCCStrike15V2_MatchInfo) GetRoundstatsLegacy() *CMsgGCCStrike15V2_MatchmakingServerRoundStats {
	if m != nil {
		return m.RoundstatsLegacy
	}
	return nil
}

func (m *CDataGCCStrike15V2_MatchInfo) GetRoundstatsall() []*CMsgGCCStrike15V2_MatchmakingServerRoundStats {
	if m != nil {
		return m.Roundstatsall
	}
	return nil
}

type CDataGCCStrike15V2_TournamentGroupTeam struct {
	TeamId      int32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id"`
	Score       int32 `protobuf:"varint,2,opt,name=score" json:"score"`
	Correctpick bool  `protobuf:"varint,3,opt,name=correctpick" json:"correctpick"`
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) Reset() {
	*m = CDataGCCStrike15V2_TournamentGroupTeam{}
}
func (m *CDataGCCStrike15V2_TournamentGroupTeam) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentGroupTeam) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentGroupTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{79}
}
func (m *CDataGCCStrike15V2_TournamentGroupTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDataGCCStrike15V2_TournamentGroupTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDataGCCStrike15V2_TournamentGroupTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDataGCCStrike15V2_TournamentGroupTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentGroupTeam.Merge(m, src)
}
func (m *CDataGCCStrike15V2_TournamentGroupTeam) XXX_Size() int {
	return m.Size()
}
func (m *CDataGCCStrike15V2_TournamentGroupTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentGroupTeam.DiscardUnknown(m)
}

var xxx_messageInfo_CDataGCCStrike15V2_TournamentGroupTeam proto.InternalMessageInfo

func (m *CDataGCCStrike15V2_TournamentGroupTeam) GetTeamId() int32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) GetCorrectpick() bool {
	if m != nil {
		return m.Correctpick
	}
	return false
}

type CDataGCCStrike15V2_TournamentGroup struct {
	Groupid           uint32                                      `protobuf:"varint,1,opt,name=groupid" json:"groupid"`
	Name              string                                      `protobuf:"bytes,2,opt,name=name" json:"name"`
	Desc              string                                      `protobuf:"bytes,3,opt,name=desc" json:"desc"`
	Picks_Deprecated  uint32                                      `protobuf:"varint,4,opt,name=picks__deprecated,json=picksDeprecated" json:"picks__deprecated"`
	Teams             []*CDataGCCStrike15V2_TournamentGroupTeam   `protobuf:"bytes,5,rep,name=teams" json:"teams,omitempty"`
	StageIds          []int32                                     `protobuf:"varint,6,rep,name=stage_ids,json=stageIds" json:"stage_ids,omitempty"`
	Picklockuntiltime uint32                                      `protobuf:"varint,7,opt,name=picklockuntiltime" json:"picklockuntiltime"`
	Pickableteams     uint32                                      `protobuf:"varint,8,opt,name=pickableteams" json:"pickableteams"`
	PointsPerPick     uint32                                      `protobuf:"varint,9,opt,name=points_per_pick,json=pointsPerPick" json:"points_per_pick"`
	Picks             []*CDataGCCStrike15V2_TournamentGroup_Picks `protobuf:"bytes,10,rep,name=picks" json:"picks,omitempty"`
}

func (m *CDataGCCStrike15V2_TournamentGroup) Reset()         { *m = CDataGCCStrike15V2_TournamentGroup{} }
func (m *CDataGCCStrike15V2_TournamentGroup) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentGroup) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{80}
}
func (m *CDataGCCStrike15V2_TournamentGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDataGCCStrike15V2_TournamentGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDataGCCStrike15V2_TournamentGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDataGCCStrike15V2_TournamentGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentGroup.Merge(m, src)
}
func (m *CDataGCCStrike15V2_TournamentGroup) XXX_Size() int {
	return m.Size()
}
func (m *CDataGCCStrike15V2_TournamentGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CDataGCCStrike15V2_TournamentGroup proto.InternalMessageInfo

func (m *CDataGCCStrike15V2_TournamentGroup) GetGroupid() uint32 {
	if m != nil {
		return m.Groupid
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetPicks_Deprecated() uint32 {
	if m != nil {
		return m.Picks_Deprecated
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetTeams() []*CDataGCCStrike15V2_TournamentGroupTeam {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetStageIds() []int32 {
	if m != nil {
		return m.StageIds
	}
	return nil
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetPicklockuntiltime() uint32 {
	if m != nil {
		return m.Picklockuntiltime
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetPickableteams() uint32 {
	if m != nil {
		return m.Pickableteams
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetPointsPerPick() uint32 {
	if m != nil {
		return m.PointsPerPick
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetPicks() []*CDataGCCStrike15V2_TournamentGroup_Picks {
	if m != nil {
		return m.Picks
	}
	return nil
}

type CDataGCCStrike15V2_TournamentGroup_Picks struct {
	Pickids []int32 `protobuf:"varint,1,rep,name=pickids" json:"pickids,omitempty"`
}

func (m *CDataGCCStrike15V2_TournamentGroup_Picks) Reset() {
	*m = CDataGCCStrike15V2_TournamentGroup_Picks{}
}
func (m *CDataGCCStrike15V2_TournamentGroup_Picks) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentGroup_Picks) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentGroup_Picks) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{80, 0}
}
func (m *CDataGCCStrike15V2_TournamentGroup_Picks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDataGCCStrike15V2_TournamentGroup_Picks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDataGCCStrike15V2_TournamentGroup_Picks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDataGCCStrike15V2_TournamentGroup_Picks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentGroup_Picks.Merge(m, src)
}
func (m *CDataGCCStrike15V2_TournamentGroup_Picks) XXX_Size() int {
	return m.Size()
}
func (m *CDataGCCStrike15V2_TournamentGroup_Picks) XXX_DiscardUnknown() {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentGroup_Picks.DiscardUnknown(m)
}

var xxx_messageInfo_CDataGCCStrike15V2_TournamentGroup_Picks proto.InternalMessageInfo

func (m *CDataGCCStrike15V2_TournamentGroup_Picks) GetPickids() []int32 {
	if m != nil {
		return m.Pickids
	}
	return nil
}

type CDataGCCStrike15V2_TournamentSection struct {
	Sectionid uint32                                `protobuf:"varint,1,opt,name=sectionid" json:"sectionid"`
	Name      string                                `protobuf:"bytes,2,opt,name=name" json:"name"`
	Desc      string                                `protobuf:"bytes,3,opt,name=desc" json:"desc"`
	Groups    []*CDataGCCStrike15V2_TournamentGroup `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
}

func (m *CDataGCCStrike15V2_TournamentSection) Reset()         { *m = CDataGCCStrike15V2_TournamentSection{} }
func (m *CDataGCCStrike15V2_TournamentSection) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentSection) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentSection) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{81}
}
func (m *CDataGCCStrike15V2_TournamentSection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDataGCCStrike15V2_TournamentSection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDataGCCStrike15V2_TournamentSection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDataGCCStrike15V2_TournamentSection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentSection.Merge(m, src)
}
func (m *CDataGCCStrike15V2_TournamentSection) XXX_Size() int {
	return m.Size()
}
func (m *CDataGCCStrike15V2_TournamentSection) XXX_DiscardUnknown() {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentSection.DiscardUnknown(m)
}

var xxx_messageInfo_CDataGCCStrike15V2_TournamentSection proto.InternalMessageInfo

func (m *CDataGCCStrike15V2_TournamentSection) GetSectionid() uint32 {
	if m != nil {
		return m.Sectionid
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentSection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CDataGCCStrike15V2_TournamentSection) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CDataGCCStrike15V2_TournamentSection) GetGroups() []*CDataGCCStrike15V2_TournamentGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

type CDataGCCStrike15V2_TournamentInfo struct {
	Sections        []*CDataGCCStrike15V2_TournamentSection `protobuf:"bytes,1,rep,name=sections" json:"sections,omitempty"`
	TournamentEvent *TournamentEvent                        `protobuf:"bytes,2,opt,name=tournament_event,json=tournamentEvent" json:"tournament_event,omitempty"`
	TournamentTeams []*TournamentTeam                       `protobuf:"bytes,3,rep,name=tournament_teams,json=tournamentTeams" json:"tournament_teams,omitempty"`
}

func (m *CDataGCCStrike15V2_TournamentInfo) Reset()         { *m = CDataGCCStrike15V2_TournamentInfo{} }
func (m *CDataGCCStrike15V2_TournamentInfo) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentInfo) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{82}
}
func (m *CDataGCCStrike15V2_TournamentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDataGCCStrike15V2_TournamentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDataGCCStrike15V2_TournamentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDataGCCStrike15V2_TournamentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentInfo.Merge(m, src)
}
func (m *CDataGCCStrike15V2_TournamentInfo) XXX_Size() int {
	return m.Size()
}
func (m *CDataGCCStrike15V2_TournamentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CDataGCCStrike15V2_TournamentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CDataGCCStrike15V2_TournamentInfo proto.InternalMessageInfo

func (m *CDataGCCStrike15V2_TournamentInfo) GetSections() []*CDataGCCStrike15V2_TournamentSection {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *CDataGCCStrike15V2_TournamentInfo) GetTournamentEvent() *TournamentEvent {
	if m != nil {
		return m.TournamentEvent
	}
	return nil
}

func (m *CDataGCCStrike15V2_TournamentInfo) GetTournamentTeams() []*TournamentTeam {
	if m != nil {
		return m.TournamentTeams
	}
	return nil
}

type CMsgGCCStrike15V2_MatchList struct {
	Msgrequestid   uint32                             `protobuf:"varint,1,opt,name=msgrequestid" json:"msgrequestid"`
	Accountid      uint32                             `protobuf:"varint,2,opt,name=accountid" json:"accountid"`
	Servertime     uint32                             `protobuf:"varint,3,opt,name=servertime" json:"servertime"`
	Matches        []*CDataGCCStrike15V2_MatchInfo    `protobuf:"bytes,4,rep,name=matches" json:"matches,omitempty"`
	Streams        []*TournamentTeam                  `protobuf:"bytes,5,rep,name=streams" json:"streams,omitempty"`
	Tournamentinfo *CDataGCCStrike15V2_TournamentInfo `protobuf:"bytes,6,opt,name=tournamentinfo" json:"tournamentinfo,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchList) Reset()         { *m = CMsgGCCStrike15V2_MatchList{} }
func (m *CMsgGCCStrike15V2_MatchList) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_MatchList) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_MatchList) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{83}
}
func (m *CMsgGCCStrike15V2_MatchList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_MatchList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_MatchList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_MatchList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchList.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_MatchList) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_MatchList) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_MatchList.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_MatchList proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_MatchList) GetMsgrequestid() uint32 {
	if m != nil {
		return m.Msgrequestid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchList) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchList) GetServertime() uint32 {
	if m != nil {
		return m.Servertime
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchList) GetMatches() []*CDataGCCStrike15V2_MatchInfo {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchList) GetStreams() []*TournamentTeam {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchList) GetTournamentinfo() *CDataGCCStrike15V2_TournamentInfo {
	if m != nil {
		return m.Tournamentinfo
	}
	return nil
}

type CMsgGCCStrike15V2_Predictions struct {
	EventId             uint32                                              `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id"`
	GroupMatchTeamPicks []*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick `protobuf:"bytes,2,rep,name=group_match_team_picks,json=groupMatchTeamPicks" json:"group_match_team_picks,omitempty"`
}

func (m *CMsgGCCStrike15V2_Predictions) Reset()         { *m = CMsgGCCStrike15V2_Predictions{} }
func (m *CMsgGCCStrike15V2_Predictions) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Predictions) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Predictions) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{84}
}
func (m *CMsgGCCStrike15V2_Predictions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Predictions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Predictions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Predictions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Predictions.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Predictions) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Predictions) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Predictions.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Predictions proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Predictions) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Predictions) GetGroupMatchTeamPicks() []*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick {
	if m != nil {
		return m.GroupMatchTeamPicks
	}
	return nil
}

type CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick struct {
	Sectionid int32  `protobuf:"varint,1,opt,name=sectionid" json:"sectionid"`
	Groupid   int32  `protobuf:"varint,2,opt,name=groupid" json:"groupid"`
	Index     int32  `protobuf:"varint,3,opt,name=index" json:"index"`
	Teamid    int32  `protobuf:"varint,4,opt,name=teamid" json:"teamid"`
	Itemid    uint64 `protobuf:"varint,5,opt,name=itemid" json:"itemid"`
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Reset() {
	*m = CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick{}
}
func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{84, 0}
}
func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetSectionid() int32 {
	if m != nil {
		return m.Sectionid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetGroupid() int32 {
	if m != nil {
		return m.Groupid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetTeamid() int32 {
	if m != nil {
		return m.Teamid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

type CMsgGCCStrike15V2_Fantasy struct {
	EventId uint32                                   `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id"`
	Teams   []*CMsgGCCStrike15V2_Fantasy_FantasyTeam `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
}

func (m *CMsgGCCStrike15V2_Fantasy) Reset()         { *m = CMsgGCCStrike15V2_Fantasy{} }
func (m *CMsgGCCStrike15V2_Fantasy) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Fantasy) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Fantasy) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{85}
}
func (m *CMsgGCCStrike15V2_Fantasy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Fantasy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Fantasy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Fantasy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Fantasy.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Fantasy) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Fantasy) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Fantasy.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Fantasy proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Fantasy) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Fantasy) GetTeams() []*CMsgGCCStrike15V2_Fantasy_FantasyTeam {
	if m != nil {
		return m.Teams
	}
	return nil
}

type CMsgGCCStrike15V2_Fantasy_FantasySlot struct {
	Type   int32  `protobuf:"varint,1,opt,name=type" json:"type"`
	Pick   int32  `protobuf:"varint,2,opt,name=pick" json:"pick"`
	Itemid uint64 `protobuf:"varint,3,opt,name=itemid" json:"itemid"`
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) Reset()         { *m = CMsgGCCStrike15V2_Fantasy_FantasySlot{} }
func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Fantasy_FantasySlot) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Fantasy_FantasySlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{85, 0}
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Fantasy_FantasySlot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Fantasy_FantasySlot.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Fantasy_FantasySlot.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Fantasy_FantasySlot proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetPick() int32 {
	if m != nil {
		return m.Pick
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

type CMsgGCCStrike15V2_Fantasy_FantasyTeam struct {
	Sectionid int32                                    `protobuf:"varint,1,opt,name=sectionid" json:"sectionid"`
	Slots     []*CMsgGCCStrike15V2_Fantasy_FantasySlot `protobuf:"bytes,2,rep,name=slots" json:"slots,omitempty"`
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) Reset()         { *m = CMsgGCCStrike15V2_Fantasy_FantasyTeam{} }
func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Fantasy_FantasyTeam) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Fantasy_FantasyTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{85, 1}
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Fantasy_FantasyTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Fantasy_FantasyTeam.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Fantasy_FantasyTeam.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Fantasy_FantasyTeam proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) GetSectionid() int32 {
	if m != nil {
		return m.Sectionid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) GetSlots() []*CMsgGCCStrike15V2_Fantasy_FantasySlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type CAttribute_String struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value"`
}

func (m *CAttribute_String) Reset()         { *m = CAttribute_String{} }
func (m *CAttribute_String) String() string { return proto.CompactTextString(m) }
func (*CAttribute_String) ProtoMessage()    {}
func (*CAttribute_String) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{86}
}
func (m *CAttribute_String) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CAttribute_String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CAttribute_String.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CAttribute_String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAttribute_String.Merge(m, src)
}
func (m *CAttribute_String) XXX_Size() int {
	return m.Size()
}
func (m *CAttribute_String) XXX_DiscardUnknown() {
	xxx_messageInfo_CAttribute_String.DiscardUnknown(m)
}

var xxx_messageInfo_CAttribute_String proto.InternalMessageInfo

func (m *CAttribute_String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CMsgGCToGCReloadVersions struct {
}

func (m *CMsgGCToGCReloadVersions) Reset()         { *m = CMsgGCToGCReloadVersions{} }
func (m *CMsgGCToGCReloadVersions) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToGCReloadVersions) ProtoMessage()    {}
func (*CMsgGCToGCReloadVersions) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{87}
}
func (m *CMsgGCToGCReloadVersions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCToGCReloadVersions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCToGCReloadVersions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCToGCReloadVersions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCToGCReloadVersions.Merge(m, src)
}
func (m *CMsgGCToGCReloadVersions) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCToGCReloadVersions) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCToGCReloadVersions.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCToGCReloadVersions proto.InternalMessageInfo

type CMsgCStrike15Welcome struct {
	StoreItemHash           uint32 `protobuf:"varint,5,opt,name=store_item_hash,json=storeItemHash" json:"store_item_hash"`
	Timeplayedconsecutively uint32 `protobuf:"varint,6,opt,name=timeplayedconsecutively" json:"timeplayedconsecutively"`
	TimeFirstPlayed         uint32 `protobuf:"varint,10,opt,name=time_first_played,json=timeFirstPlayed" json:"time_first_played"`
	LastTimePlayed          uint32 `protobuf:"varint,12,opt,name=last_time_played,json=lastTimePlayed" json:"last_time_played"`
	LastIpAddress           uint32 `protobuf:"varint,13,opt,name=last_ip_address,json=lastIpAddress" json:"last_ip_address"`
	Gscookieid              uint64 `protobuf:"varint,18,opt,name=gscookieid" json:"gscookieid"`
	Uniqueid                uint64 `protobuf:"varint,19,opt,name=uniqueid" json:"uniqueid"`
}

func (m *CMsgCStrike15Welcome) Reset()         { *m = CMsgCStrike15Welcome{} }
func (m *CMsgCStrike15Welcome) String() string { return proto.CompactTextString(m) }
func (*CMsgCStrike15Welcome) ProtoMessage()    {}
func (*CMsgCStrike15Welcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{88}
}
func (m *CMsgCStrike15Welcome) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgCStrike15Welcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgCStrike15Welcome.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgCStrike15Welcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgCStrike15Welcome.Merge(m, src)
}
func (m *CMsgCStrike15Welcome) XXX_Size() int {
	return m.Size()
}
func (m *CMsgCStrike15Welcome) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgCStrike15Welcome.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgCStrike15Welcome proto.InternalMessageInfo

func (m *CMsgCStrike15Welcome) GetStoreItemHash() uint32 {
	if m != nil {
		return m.StoreItemHash
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetTimeplayedconsecutively() uint32 {
	if m != nil {
		return m.Timeplayedconsecutively
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetTimeFirstPlayed() uint32 {
	if m != nil {
		return m.TimeFirstPlayed
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetLastTimePlayed() uint32 {
	if m != nil {
		return m.LastTimePlayed
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetLastIpAddress() uint32 {
	if m != nil {
		return m.LastIpAddress
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetGscookieid() uint64 {
	if m != nil {
		return m.Gscookieid
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetUniqueid() uint64 {
	if m != nil {
		return m.Uniqueid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientVarValueNotificationInfo struct {
	ValueName    string   `protobuf:"bytes,1,opt,name=value_name,json=valueName" json:"value_name"`
	ValueInt     int32    `protobuf:"varint,2,opt,name=value_int,json=valueInt" json:"value_int"`
	ServerAddr   uint32   `protobuf:"varint,3,opt,name=server_addr,json=serverAddr" json:"server_addr"`
	ServerPort   uint32   `protobuf:"varint,4,opt,name=server_port,json=serverPort" json:"server_port"`
	ChokedBlocks []string `protobuf:"bytes,5,rep,name=choked_blocks,json=chokedBlocks" json:"choked_blocks,omitempty"`
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Reset() {
	*m = CMsgGCCStrike15V2_ClientVarValueNotificationInfo{}
}
func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientVarValueNotificationInfo) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{89}
}
func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientVarValueNotificationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientVarValueNotificationInfo.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientVarValueNotificationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientVarValueNotificationInfo proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetValueName() string {
	if m != nil {
		return m.ValueName
	}
	return ""
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetValueInt() int32 {
	if m != nil {
		return m.ValueInt
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetServerAddr() uint32 {
	if m != nil {
		return m.ServerAddr
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetChokedBlocks() []string {
	if m != nil {
		return m.ChokedBlocks
	}
	return nil
}

type CMsgGCCStrike15V2_ServerVarValueNotificationInfo struct {
	Accountid  uint32   `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Viewangles []uint32 `protobuf:"varint,2,rep,name=viewangles" json:"viewangles,omitempty"`
	Type       uint32   `protobuf:"varint,3,opt,name=type" json:"type"`
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Reset() {
	*m = CMsgGCCStrike15V2_ServerVarValueNotificationInfo{}
}
func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ServerVarValueNotificationInfo) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{90}
}
func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ServerVarValueNotificationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ServerVarValueNotificationInfo.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ServerVarValueNotificationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ServerVarValueNotificationInfo proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetViewangles() []uint32 {
	if m != nil {
		return m.Viewangles
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type CMsgGCCStrike15V2_GiftsLeaderboardRequest struct {
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) Reset() {
	*m = CMsgGCCStrike15V2_GiftsLeaderboardRequest{}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GiftsLeaderboardRequest) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GiftsLeaderboardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{91}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardRequest.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardRequest proto.InternalMessageInfo

type CMsgGCCStrike15V2_GiftsLeaderboardResponse struct {
	Servertime        uint32                                                             `protobuf:"varint,1,opt,name=servertime" json:"servertime"`
	TimePeriodSeconds uint32                                                             `protobuf:"varint,2,opt,name=time_period_seconds,json=timePeriodSeconds" json:"time_period_seconds"`
	TotalGiftsGiven   uint32                                                             `protobuf:"varint,3,opt,name=total_gifts_given,json=totalGiftsGiven" json:"total_gifts_given"`
	TotalGivers       uint32                                                             `protobuf:"varint,4,opt,name=total_givers,json=totalGivers" json:"total_givers"`
	Entries           []*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) Reset() {
	*m = CMsgGCCStrike15V2_GiftsLeaderboardResponse{}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{92}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardResponse.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardResponse proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetServertime() uint32 {
	if m != nil {
		return m.Servertime
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTimePeriodSeconds() uint32 {
	if m != nil {
		return m.TimePeriodSeconds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTotalGiftsGiven() uint32 {
	if m != nil {
		return m.TotalGiftsGiven
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTotalGivers() uint32 {
	if m != nil {
		return m.TotalGivers
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetEntries() []*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Gifts     uint32 `protobuf:"varint,2,opt,name=gifts" json:"gifts"`
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Reset() {
	*m = CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry{}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{92, 0}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) GetGifts() uint32 {
	if m != nil {
		return m.Gifts
	}
	return 0
}

type CMsgGCCStrike15V2_ClientSubmitSurveyVote struct {
	SurveyId uint32 `protobuf:"varint,1,opt,name=survey_id,json=surveyId" json:"survey_id"`
	Vote     uint32 `protobuf:"varint,2,opt,name=vote" json:"vote"`
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) Reset() {
	*m = CMsgGCCStrike15V2_ClientSubmitSurveyVote{}
}
func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientSubmitSurveyVote) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientSubmitSurveyVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{93}
}
func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientSubmitSurveyVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientSubmitSurveyVote.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientSubmitSurveyVote.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientSubmitSurveyVote proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) GetSurveyId() uint32 {
	if m != nil {
		return m.SurveyId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) GetVote() uint32 {
	if m != nil {
		return m.Vote
	}
	return 0
}

type CMsgGCCStrike15V2_Server2GCClientValidate struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
}

func (m *CMsgGCCStrike15V2_Server2GCClientValidate) Reset() {
	*m = CMsgGCCStrike15V2_Server2GCClientValidate{}
}
func (m *CMsgGCCStrike15V2_Server2GCClientValidate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Server2GCClientValidate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Server2GCClientValidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{94}
}
func (m *CMsgGCCStrike15V2_Server2GCClientValidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Server2GCClientValidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Server2GCClientValidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Server2GCClientValidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Server2GCClientValidate.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Server2GCClientValidate) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Server2GCClientValidate) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Server2GCClientValidate.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Server2GCClientValidate proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Server2GCClientValidate) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_Server2GCPureServerValidationFailure struct {
	Accountid  uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Path       string `protobuf:"bytes,2,opt,name=path" json:"path"`
	File       string `protobuf:"bytes,3,opt,name=file" json:"file"`
	Crc        uint32 `protobuf:"varint,4,opt,name=crc" json:"crc"`
	Hash       int32  `protobuf:"varint,5,opt,name=hash" json:"hash"`
	Len        int32  `protobuf:"varint,6,opt,name=len" json:"len"`
	PackNumber int32  `protobuf:"varint,7,opt,name=pack_number,json=packNumber" json:"pack_number"`
	PackFileId int32  `protobuf:"varint,8,opt,name=pack_file_id,json=packFileId" json:"pack_file_id"`
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Reset() {
	*m = CMsgGCCStrike15V2_Server2GCPureServerValidationFailure{}
}
func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{95}
}
func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Server2GCPureServerValidationFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Server2GCPureServerValidationFailure.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Server2GCPureServerValidationFailure.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Server2GCPureServerValidationFailure proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetCrc() uint32 {
	if m != nil {
		return m.Crc
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetLen() int32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetPackNumber() int32 {
	if m != nil {
		return m.PackNumber
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetPackFileId() int32 {
	if m != nil {
		return m.PackFileId
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ClientTournamentInfo struct {
	Eventid  uint32   `protobuf:"varint,1,opt,name=eventid" json:"eventid"`
	Stageid  uint32   `protobuf:"varint,2,opt,name=stageid" json:"stageid"`
	GameType uint32   `protobuf:"varint,3,opt,name=game_type,json=gameType" json:"game_type"`
	Teamids  []uint32 `protobuf:"varint,4,rep,name=teamids" json:"teamids,omitempty"`
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) Reset() {
	*m = CMsgGCCStrike15V2_GC2ClientTournamentInfo{}
}
func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GC2ClientTournamentInfo) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GC2ClientTournamentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{96}
}
func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientTournamentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientTournamentInfo.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientTournamentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientTournamentInfo proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetEventid() uint32 {
	if m != nil {
		return m.Eventid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetStageid() uint32 {
	if m != nil {
		return m.Stageid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetTeamids() []uint32 {
	if m != nil {
		return m.Teamids
	}
	return nil
}

type CSOEconCoupon struct {
	Entryid        uint32 `protobuf:"varint,1,opt,name=entryid" json:"entryid"`
	Defidx         uint32 `protobuf:"varint,2,opt,name=defidx" json:"defidx"`
	ExpirationDate uint32 `protobuf:"fixed32,3,opt,name=expiration_date,json=expirationDate" json:"expiration_date"`
}

func (m *CSOEconCoupon) Reset()         { *m = CSOEconCoupon{} }
func (m *CSOEconCoupon) String() string { return proto.CompactTextString(m) }
func (*CSOEconCoupon) ProtoMessage()    {}
func (*CSOEconCoupon) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{97}
}
func (m *CSOEconCoupon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSOEconCoupon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSOEconCoupon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSOEconCoupon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSOEconCoupon.Merge(m, src)
}
func (m *CSOEconCoupon) XXX_Size() int {
	return m.Size()
}
func (m *CSOEconCoupon) XXX_DiscardUnknown() {
	xxx_messageInfo_CSOEconCoupon.DiscardUnknown(m)
}

var xxx_messageInfo_CSOEconCoupon proto.InternalMessageInfo

func (m *CSOEconCoupon) GetEntryid() uint32 {
	if m != nil {
		return m.Entryid
	}
	return 0
}

func (m *CSOEconCoupon) GetDefidx() uint32 {
	if m != nil {
		return m.Defidx
	}
	return 0
}

func (m *CSOEconCoupon) GetExpirationDate() uint32 {
	if m != nil {
		return m.ExpirationDate
	}
	return 0
}

type CSOQuestProgress struct {
	Questid         uint32 `protobuf:"varint,1,opt,name=questid" json:"questid"`
	PointsRemaining uint32 `protobuf:"varint,2,opt,name=points_remaining,json=pointsRemaining" json:"points_remaining"`
	BonusPoints     uint32 `protobuf:"varint,3,opt,name=bonus_points,json=bonusPoints" json:"bonus_points"`
}

func (m *CSOQuestProgress) Reset()         { *m = CSOQuestProgress{} }
func (m *CSOQuestProgress) String() string { return proto.CompactTextString(m) }
func (*CSOQuestProgress) ProtoMessage()    {}
func (*CSOQuestProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{98}
}
func (m *CSOQuestProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSOQuestProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSOQuestProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSOQuestProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSOQuestProgress.Merge(m, src)
}
func (m *CSOQuestProgress) XXX_Size() int {
	return m.Size()
}
func (m *CSOQuestProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_CSOQuestProgress.DiscardUnknown(m)
}

var xxx_messageInfo_CSOQuestProgress proto.InternalMessageInfo

func (m *CSOQuestProgress) GetQuestid() uint32 {
	if m != nil {
		return m.Questid
	}
	return 0
}

func (m *CSOQuestProgress) GetPointsRemaining() uint32 {
	if m != nil {
		return m.PointsRemaining
	}
	return 0
}

func (m *CSOQuestProgress) GetBonusPoints() uint32 {
	if m != nil {
		return m.BonusPoints
	}
	return 0
}

type CSOAccountSeasonalOperation struct {
	SeasonValue       uint32 `protobuf:"varint,1,opt,name=season_value,json=seasonValue" json:"season_value"`
	TierUnlocked      uint32 `protobuf:"varint,2,opt,name=tier_unlocked,json=tierUnlocked" json:"tier_unlocked"`
	PremiumTiers      uint32 `protobuf:"varint,3,opt,name=premium_tiers,json=premiumTiers" json:"premium_tiers"`
	MissionId         uint32 `protobuf:"varint,4,opt,name=mission_id,json=missionId" json:"mission_id"`
	MissionsCompleted uint32 `protobuf:"varint,5,opt,name=missions_completed,json=missionsCompleted" json:"missions_completed"`
}

func (m *CSOAccountSeasonalOperation) Reset()         { *m = CSOAccountSeasonalOperation{} }
func (m *CSOAccountSeasonalOperation) String() string { return proto.CompactTextString(m) }
func (*CSOAccountSeasonalOperation) ProtoMessage()    {}
func (*CSOAccountSeasonalOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{99}
}
func (m *CSOAccountSeasonalOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSOAccountSeasonalOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSOAccountSeasonalOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSOAccountSeasonalOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSOAccountSeasonalOperation.Merge(m, src)
}
func (m *CSOAccountSeasonalOperation) XXX_Size() int {
	return m.Size()
}
func (m *CSOAccountSeasonalOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_CSOAccountSeasonalOperation.DiscardUnknown(m)
}

var xxx_messageInfo_CSOAccountSeasonalOperation proto.InternalMessageInfo

func (m *CSOAccountSeasonalOperation) GetSeasonValue() uint32 {
	if m != nil {
		return m.SeasonValue
	}
	return 0
}

func (m *CSOAccountSeasonalOperation) GetTierUnlocked() uint32 {
	if m != nil {
		return m.TierUnlocked
	}
	return 0
}

func (m *CSOAccountSeasonalOperation) GetPremiumTiers() uint32 {
	if m != nil {
		return m.PremiumTiers
	}
	return 0
}

func (m *CSOAccountSeasonalOperation) GetMissionId() uint32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *CSOAccountSeasonalOperation) GetMissionsCompleted() uint32 {
	if m != nil {
		return m.MissionsCompleted
	}
	return 0
}

type CSOPersonaDataPublic struct {
	PlayerLevel   int32                   `protobuf:"varint,1,opt,name=player_level,json=playerLevel" json:"player_level"`
	Commendation  *PlayerCommendationInfo `protobuf:"bytes,2,opt,name=commendation" json:"commendation,omitempty"`
	ElevatedState bool                    `protobuf:"varint,3,opt,name=elevated_state,json=elevatedState" json:"elevated_state"`
}

func (m *CSOPersonaDataPublic) Reset()         { *m = CSOPersonaDataPublic{} }
func (m *CSOPersonaDataPublic) String() string { return proto.CompactTextString(m) }
func (*CSOPersonaDataPublic) ProtoMessage()    {}
func (*CSOPersonaDataPublic) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{100}
}
func (m *CSOPersonaDataPublic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSOPersonaDataPublic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSOPersonaDataPublic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSOPersonaDataPublic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSOPersonaDataPublic.Merge(m, src)
}
func (m *CSOPersonaDataPublic) XXX_Size() int {
	return m.Size()
}
func (m *CSOPersonaDataPublic) XXX_DiscardUnknown() {
	xxx_messageInfo_CSOPersonaDataPublic.DiscardUnknown(m)
}

var xxx_messageInfo_CSOPersonaDataPublic proto.InternalMessageInfo

func (m *CSOPersonaDataPublic) GetPlayerLevel() int32 {
	if m != nil {
		return m.PlayerLevel
	}
	return 0
}

func (m *CSOPersonaDataPublic) GetCommendation() *PlayerCommendationInfo {
	if m != nil {
		return m.Commendation
	}
	return nil
}

func (m *CSOPersonaDataPublic) GetElevatedState() bool {
	if m != nil {
		return m.ElevatedState
	}
	return false
}

type CMsgGC_GlobalGame_Subscribe struct {
	Ticket uint64 `protobuf:"varint,1,opt,name=ticket" json:"ticket"`
}

func (m *CMsgGC_GlobalGame_Subscribe) Reset()         { *m = CMsgGC_GlobalGame_Subscribe{} }
func (m *CMsgGC_GlobalGame_Subscribe) String() string { return proto.CompactTextString(m) }
func (*CMsgGC_GlobalGame_Subscribe) ProtoMessage()    {}
func (*CMsgGC_GlobalGame_Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{101}
}
func (m *CMsgGC_GlobalGame_Subscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGC_GlobalGame_Subscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGC_GlobalGame_Subscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGC_GlobalGame_Subscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGC_GlobalGame_Subscribe.Merge(m, src)
}
func (m *CMsgGC_GlobalGame_Subscribe) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGC_GlobalGame_Subscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGC_GlobalGame_Subscribe.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGC_GlobalGame_Subscribe proto.InternalMessageInfo

func (m *CMsgGC_GlobalGame_Subscribe) GetTicket() uint64 {
	if m != nil {
		return m.Ticket
	}
	return 0
}

type CMsgGC_GlobalGame_Unsubscribe struct {
	Timeleft int32 `protobuf:"varint,1,opt,name=timeleft" json:"timeleft"`
}

func (m *CMsgGC_GlobalGame_Unsubscribe) Reset()         { *m = CMsgGC_GlobalGame_Unsubscribe{} }
func (m *CMsgGC_GlobalGame_Unsubscribe) String() string { return proto.CompactTextString(m) }
func (*CMsgGC_GlobalGame_Unsubscribe) ProtoMessage()    {}
func (*CMsgGC_GlobalGame_Unsubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{102}
}
func (m *CMsgGC_GlobalGame_Unsubscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGC_GlobalGame_Unsubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGC_GlobalGame_Unsubscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGC_GlobalGame_Unsubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGC_GlobalGame_Unsubscribe.Merge(m, src)
}
func (m *CMsgGC_GlobalGame_Unsubscribe) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGC_GlobalGame_Unsubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGC_GlobalGame_Unsubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGC_GlobalGame_Unsubscribe proto.InternalMessageInfo

func (m *CMsgGC_GlobalGame_Unsubscribe) GetTimeleft() int32 {
	if m != nil {
		return m.Timeleft
	}
	return 0
}

type CMsgGC_GlobalGame_Play struct {
	Ticket     uint64 `protobuf:"varint,1,opt,name=ticket" json:"ticket"`
	Gametimems uint32 `protobuf:"varint,2,opt,name=gametimems" json:"gametimems"`
	Msperpoint uint32 `protobuf:"varint,3,opt,name=msperpoint" json:"msperpoint"`
}

func (m *CMsgGC_GlobalGame_Play) Reset()         { *m = CMsgGC_GlobalGame_Play{} }
func (m *CMsgGC_GlobalGame_Play) String() string { return proto.CompactTextString(m) }
func (*CMsgGC_GlobalGame_Play) ProtoMessage()    {}
func (*CMsgGC_GlobalGame_Play) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{103}
}
func (m *CMsgGC_GlobalGame_Play) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGC_GlobalGame_Play) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGC_GlobalGame_Play.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGC_GlobalGame_Play) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGC_GlobalGame_Play.Merge(m, src)
}
func (m *CMsgGC_GlobalGame_Play) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGC_GlobalGame_Play) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGC_GlobalGame_Play.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGC_GlobalGame_Play proto.InternalMessageInfo

func (m *CMsgGC_GlobalGame_Play) GetTicket() uint64 {
	if m != nil {
		return m.Ticket
	}
	return 0
}

func (m *CMsgGC_GlobalGame_Play) GetGametimems() uint32 {
	if m != nil {
		return m.Gametimems
	}
	return 0
}

func (m *CMsgGC_GlobalGame_Play) GetMsperpoint() uint32 {
	if m != nil {
		return m.Msperpoint
	}
	return 0
}

type CMsgGCCStrike15V2_AcknowledgePenalty struct {
	Acknowledged int32 `protobuf:"varint,1,opt,name=acknowledged" json:"acknowledged"`
}

func (m *CMsgGCCStrike15V2_AcknowledgePenalty) Reset()         { *m = CMsgGCCStrike15V2_AcknowledgePenalty{} }
func (m *CMsgGCCStrike15V2_AcknowledgePenalty) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_AcknowledgePenalty) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_AcknowledgePenalty) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{104}
}
func (m *CMsgGCCStrike15V2_AcknowledgePenalty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_AcknowledgePenalty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_AcknowledgePenalty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_AcknowledgePenalty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_AcknowledgePenalty.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_AcknowledgePenalty) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_AcknowledgePenalty) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_AcknowledgePenalty.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_AcknowledgePenalty proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_AcknowledgePenalty) GetAcknowledged() int32 {
	if m != nil {
		return m.Acknowledged
	}
	return 0
}

type CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin struct {
	Defindex     uint32 `protobuf:"varint,1,opt,name=defindex" json:"defindex"`
	Upgradeid    uint64 `protobuf:"varint,2,opt,name=upgradeid" json:"upgradeid"`
	Hours        uint32 `protobuf:"varint,3,opt,name=hours" json:"hours"`
	Prestigetime uint32 `protobuf:"varint,4,opt,name=prestigetime" json:"prestigetime"`
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Reset() {
	*m = CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin{}
}
func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{105}
}
func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetDefindex() uint32 {
	if m != nil {
		return m.Defindex
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetUpgradeid() uint64 {
	if m != nil {
		return m.Upgradeid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetHours() uint32 {
	if m != nil {
		return m.Hours
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetPrestigetime() uint32 {
	if m != nil {
		return m.Prestigetime
	}
	return 0
}

type CMsgGCCStrike15V2_Client2GCStreamUnlock struct {
	Ticket uint64 `protobuf:"varint,1,opt,name=ticket" json:"ticket"`
	Os     int32  `protobuf:"varint,2,opt,name=os" json:"os"`
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) Reset() {
	*m = CMsgGCCStrike15V2_Client2GCStreamUnlock{}
}
func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Client2GCStreamUnlock) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Client2GCStreamUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{106}
}
func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Client2GCStreamUnlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Client2GCStreamUnlock.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Client2GCStreamUnlock.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Client2GCStreamUnlock proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) GetTicket() uint64 {
	if m != nil {
		return m.Ticket
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) GetOs() int32 {
	if m != nil {
		return m.Os
	}
	return 0
}

type CMsgGCCStrike15V2_ClientToGCRequestElevate struct {
	Stage uint32 `protobuf:"varint,1,opt,name=stage" json:"stage"`
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) Reset() {
	*m = CMsgGCCStrike15V2_ClientToGCRequestElevate{}
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientToGCRequestElevate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientToGCRequestElevate) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{107}
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCRequestElevate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCRequestElevate.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCRequestElevate.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCRequestElevate proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) GetStage() uint32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

type CMsgGCCStrike15V2_ClientToGCChat struct {
	MatchId uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id"`
	Text    string `protobuf:"bytes,2,opt,name=text" json:"text"`
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) Reset()         { *m = CMsgGCCStrike15V2_ClientToGCChat{} }
func (m *CMsgGCCStrike15V2_ClientToGCChat) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientToGCChat) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientToGCChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{108}
}
func (m *CMsgGCCStrike15V2_ClientToGCChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientToGCChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientToGCChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCChat.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientToGCChat) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientToGCChat) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCChat.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCChat proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientToGCChat) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CMsgGCCStrike15V2_GCToClientChat struct {
	AccountId uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	Text      string `protobuf:"bytes,2,opt,name=text" json:"text"`
}

func (m *CMsgGCCStrike15V2_GCToClientChat) Reset()         { *m = CMsgGCCStrike15V2_GCToClientChat{} }
func (m *CMsgGCCStrike15V2_GCToClientChat) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_GCToClientChat) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_GCToClientChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{109}
}
func (m *CMsgGCCStrike15V2_GCToClientChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_GCToClientChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_GCToClientChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_GCToClientChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_GCToClientChat.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_GCToClientChat) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_GCToClientChat) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_GCToClientChat.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_GCToClientChat proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_GCToClientChat) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GCToClientChat) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CMsgGCCStrike15V2_ClientAuthKeyCode struct {
	Eventid uint32 `protobuf:"varint,1,opt,name=eventid" json:"eventid"`
	Code    string `protobuf:"bytes,2,opt,name=code" json:"code"`
}

func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) Reset()         { *m = CMsgGCCStrike15V2_ClientAuthKeyCode{} }
func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientAuthKeyCode) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientAuthKeyCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{110}
}
func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientAuthKeyCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientAuthKeyCode.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientAuthKeyCode.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientAuthKeyCode proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) GetEventid() uint32 {
	if m != nil {
		return m.Eventid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type CMsgGCCStrike15_GotvSyncPacket struct {
	Data *CEngineGotvSyncPacket `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CMsgGCCStrike15_GotvSyncPacket) Reset()         { *m = CMsgGCCStrike15_GotvSyncPacket{} }
func (m *CMsgGCCStrike15_GotvSyncPacket) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15_GotvSyncPacket) ProtoMessage()    {}
func (*CMsgGCCStrike15_GotvSyncPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{111}
}
func (m *CMsgGCCStrike15_GotvSyncPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15_GotvSyncPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15_GotvSyncPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15_GotvSyncPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15_GotvSyncPacket.Merge(m, src)
}
func (m *CMsgGCCStrike15_GotvSyncPacket) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15_GotvSyncPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15_GotvSyncPacket.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15_GotvSyncPacket proto.InternalMessageInfo

func (m *CMsgGCCStrike15_GotvSyncPacket) GetData() *CEngineGotvSyncPacket {
	if m != nil {
		return m.Data
	}
	return nil
}

type PlayerDecalDigitalSignature struct {
	Signature    []byte    `protobuf:"bytes,1,opt,name=signature" json:"signature"`
	Accountid    uint32    `protobuf:"varint,2,opt,name=accountid" json:"accountid"`
	Rtime        uint32    `protobuf:"varint,3,opt,name=rtime" json:"rtime"`
	Endpos       []float32 `protobuf:"fixed32,4,rep,name=endpos" json:"endpos,omitempty"`
	Startpos     []float32 `protobuf:"fixed32,5,rep,name=startpos" json:"startpos,omitempty"`
	Right        []float32 `protobuf:"fixed32,6,rep,name=right" json:"right,omitempty"`
	TxDefidx     uint32    `protobuf:"varint,7,opt,name=tx_defidx,json=txDefidx" json:"tx_defidx"`
	Entindex     int32     `protobuf:"varint,8,opt,name=entindex" json:"entindex"`
	Hitbox       uint32    `protobuf:"varint,9,opt,name=hitbox" json:"hitbox"`
	Creationtime float32   `protobuf:"fixed32,10,opt,name=creationtime" json:"creationtime"`
	Equipslot    uint32    `protobuf:"varint,11,opt,name=equipslot" json:"equipslot"`
	TraceId      uint32    `protobuf:"varint,12,opt,name=trace_id,json=traceId" json:"trace_id"`
	Normal       []float32 `protobuf:"fixed32,13,rep,name=normal" json:"normal,omitempty"`
	TintId       uint32    `protobuf:"varint,14,opt,name=tint_id,json=tintId" json:"tint_id"`
}

func (m *PlayerDecalDigitalSignature) Reset()         { *m = PlayerDecalDigitalSignature{} }
func (m *PlayerDecalDigitalSignature) String() string { return proto.CompactTextString(m) }
func (*PlayerDecalDigitalSignature) ProtoMessage()    {}
func (*PlayerDecalDigitalSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{112}
}
func (m *PlayerDecalDigitalSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerDecalDigitalSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerDecalDigitalSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerDecalDigitalSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerDecalDigitalSignature.Merge(m, src)
}
func (m *PlayerDecalDigitalSignature) XXX_Size() int {
	return m.Size()
}
func (m *PlayerDecalDigitalSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerDecalDigitalSignature.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerDecalDigitalSignature proto.InternalMessageInfo

func (m *PlayerDecalDigitalSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PlayerDecalDigitalSignature) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *PlayerDecalDigitalSignature) GetRtime() uint32 {
	if m != nil {
		return m.Rtime
	}
	return 0
}

func (m *PlayerDecalDigitalSignature) GetEndpos() []float32 {
	if m != nil {
		return m.Endpos
	}
	return nil
}

func (m *PlayerDecalDigitalSignature) GetStartpos() []float32 {
	if m != nil {
		return m.Startpos
	}
	return nil
}

func (m *PlayerDecalDigitalSignature) GetRight() []float32 {
	if m != nil {
		return m.Right
	}
	return nil
}

func (m *PlayerDecalDigitalSignature) GetTxDefidx() uint32 {
	if m != nil {
		return m.TxDefidx
	}
	return 0
}

func (m *PlayerDecalDigitalSignature) GetEntindex() int32 {
	if m != nil {
		return m.Entindex
	}
	return 0
}

func (m *PlayerDecalDigitalSignature) GetHitbox() uint32 {
	if m != nil {
		return m.Hitbox
	}
	return 0
}

func (m *PlayerDecalDigitalSignature) GetCreationtime() float32 {
	if m != nil {
		return m.Creationtime
	}
	return 0
}

func (m *PlayerDecalDigitalSignature) GetEquipslot() uint32 {
	if m != nil {
		return m.Equipslot
	}
	return 0
}

func (m *PlayerDecalDigitalSignature) GetTraceId() uint32 {
	if m != nil {
		return m.TraceId
	}
	return 0
}

func (m *PlayerDecalDigitalSignature) GetNormal() []float32 {
	if m != nil {
		return m.Normal
	}
	return nil
}

func (m *PlayerDecalDigitalSignature) GetTintId() uint32 {
	if m != nil {
		return m.TintId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientPlayerDecalSign struct {
	Data   *PlayerDecalDigitalSignature `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Itemid uint64                       `protobuf:"varint,2,opt,name=itemid" json:"itemid"`
}

func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) Reset() {
	*m = CMsgGCCStrike15V2_ClientPlayerDecalSign{}
}
func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientPlayerDecalSign) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientPlayerDecalSign) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{113}
}
func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientPlayerDecalSign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPlayerDecalSign.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPlayerDecalSign.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientPlayerDecalSign proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) GetData() *PlayerDecalDigitalSignature {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientLogonFatalError struct {
	Errorcode uint32 `protobuf:"varint,1,opt,name=errorcode" json:"errorcode"`
	Message   string `protobuf:"bytes,2,opt,name=message" json:"message"`
	Country   string `protobuf:"bytes,3,opt,name=country" json:"country"`
}

func (m *CMsgGCCStrike15V2_ClientLogonFatalError) Reset() {
	*m = CMsgGCCStrike15V2_ClientLogonFatalError{}
}
func (m *CMsgGCCStrike15V2_ClientLogonFatalError) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientLogonFatalError) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientLogonFatalError) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{114}
}
func (m *CMsgGCCStrike15V2_ClientLogonFatalError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientLogonFatalError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientLogonFatalError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientLogonFatalError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientLogonFatalError.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientLogonFatalError) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientLogonFatalError) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientLogonFatalError.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientLogonFatalError proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientLogonFatalError) GetErrorcode() uint32 {
	if m != nil {
		return m.Errorcode
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientLogonFatalError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CMsgGCCStrike15V2_ClientLogonFatalError) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type CMsgGCCStrike15V2_ClientPollState struct {
	Pollid uint32   `protobuf:"varint,1,opt,name=pollid" json:"pollid"`
	Names  []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	Values []int32  `protobuf:"varint,3,rep,name=values" json:"values,omitempty"`
}

func (m *CMsgGCCStrike15V2_ClientPollState) Reset()         { *m = CMsgGCCStrike15V2_ClientPollState{} }
func (m *CMsgGCCStrike15V2_ClientPollState) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientPollState) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientPollState) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{115}
}
func (m *CMsgGCCStrike15V2_ClientPollState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientPollState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientPollState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientPollState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPollState.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientPollState) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientPollState) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPollState.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientPollState proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientPollState) GetPollid() uint32 {
	if m != nil {
		return m.Pollid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientPollState) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientPollState) GetValues() []int32 {
	if m != nil {
		return m.Values
	}
	return nil
}

type CMsgGCCStrike15V2_Party_Register struct {
	Id       uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	Ver      uint32 `protobuf:"varint,2,opt,name=ver" json:"ver"`
	Apr      uint32 `protobuf:"varint,3,opt,name=apr" json:"apr"`
	Ark      uint32 `protobuf:"varint,4,opt,name=ark" json:"ark"`
	Nby      uint32 `protobuf:"varint,5,opt,name=nby" json:"nby"`
	Grp      uint32 `protobuf:"varint,6,opt,name=grp" json:"grp"`
	Slots    uint32 `protobuf:"varint,7,opt,name=slots" json:"slots"`
	Launcher uint32 `protobuf:"varint,8,opt,name=launcher" json:"launcher"`
	GameType uint32 `protobuf:"varint,9,opt,name=game_type,json=gameType" json:"game_type"`
}

func (m *CMsgGCCStrike15V2_Party_Register) Reset()         { *m = CMsgGCCStrike15V2_Party_Register{} }
func (m *CMsgGCCStrike15V2_Party_Register) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Party_Register) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Party_Register) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{116}
}
func (m *CMsgGCCStrike15V2_Party_Register) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Party_Register) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Party_Register.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Party_Register) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Party_Register.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Party_Register) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Party_Register) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Party_Register.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Party_Register proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Party_Register) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Register) GetVer() uint32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Register) GetApr() uint32 {
	if m != nil {
		return m.Apr
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Register) GetArk() uint32 {
	if m != nil {
		return m.Ark
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Register) GetNby() uint32 {
	if m != nil {
		return m.Nby
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Register) GetGrp() uint32 {
	if m != nil {
		return m.Grp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Register) GetSlots() uint32 {
	if m != nil {
		return m.Slots
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Register) GetLauncher() uint32 {
	if m != nil {
		return m.Launcher
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Register) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

type CMsgGCCStrike15V2_Party_Search struct {
	Ver      uint32   `protobuf:"varint,1,opt,name=ver" json:"ver"`
	Apr      uint32   `protobuf:"varint,2,opt,name=apr" json:"apr"`
	Ark      uint32   `protobuf:"varint,3,opt,name=ark" json:"ark"`
	Grps     []uint32 `protobuf:"varint,4,rep,name=grps" json:"grps,omitempty"`
	Launcher uint32   `protobuf:"varint,5,opt,name=launcher" json:"launcher"`
	GameType uint32   `protobuf:"varint,6,opt,name=game_type,json=gameType" json:"game_type"`
}

func (m *CMsgGCCStrike15V2_Party_Search) Reset()         { *m = CMsgGCCStrike15V2_Party_Search{} }
func (m *CMsgGCCStrike15V2_Party_Search) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Party_Search) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Party_Search) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{117}
}
func (m *CMsgGCCStrike15V2_Party_Search) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Party_Search) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Party_Search.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Party_Search) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Party_Search.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Party_Search) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Party_Search) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Party_Search.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Party_Search proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Party_Search) GetVer() uint32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Search) GetApr() uint32 {
	if m != nil {
		return m.Apr
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Search) GetArk() uint32 {
	if m != nil {
		return m.Ark
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Search) GetGrps() []uint32 {
	if m != nil {
		return m.Grps
	}
	return nil
}

func (m *CMsgGCCStrike15V2_Party_Search) GetLauncher() uint32 {
	if m != nil {
		return m.Launcher
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Search) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

type CMsgGCCStrike15V2_Party_SearchResults struct {
	Entries []*CMsgGCCStrike15V2_Party_SearchResults_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *CMsgGCCStrike15V2_Party_SearchResults) Reset()         { *m = CMsgGCCStrike15V2_Party_SearchResults{} }
func (m *CMsgGCCStrike15V2_Party_SearchResults) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Party_SearchResults) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Party_SearchResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{118}
}
func (m *CMsgGCCStrike15V2_Party_SearchResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Party_SearchResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Party_SearchResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Party_SearchResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Party_SearchResults.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Party_SearchResults) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Party_SearchResults) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Party_SearchResults.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Party_SearchResults proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Party_SearchResults) GetEntries() []*CMsgGCCStrike15V2_Party_SearchResults_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_Party_SearchResults_Entry struct {
	Id       uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	Grp      uint32 `protobuf:"varint,2,opt,name=grp" json:"grp"`
	GameType uint32 `protobuf:"varint,3,opt,name=game_type,json=gameType" json:"game_type"`
	Apr      uint32 `protobuf:"varint,4,opt,name=apr" json:"apr"`
	Ark      uint32 `protobuf:"varint,5,opt,name=ark" json:"ark"`
	Loc      uint32 `protobuf:"varint,6,opt,name=loc" json:"loc"`
}

func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) Reset() {
	*m = CMsgGCCStrike15V2_Party_SearchResults_Entry{}
}
func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Party_SearchResults_Entry) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Party_SearchResults_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{118, 0}
}
func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Party_SearchResults_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Party_SearchResults_Entry.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Party_SearchResults_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Party_SearchResults_Entry proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetGrp() uint32 {
	if m != nil {
		return m.Grp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetApr() uint32 {
	if m != nil {
		return m.Apr
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetArk() uint32 {
	if m != nil {
		return m.Ark
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetLoc() uint32 {
	if m != nil {
		return m.Loc
	}
	return 0
}

type CMsgGCCStrike15V2_Party_Invite struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Lobbyid   uint32 `protobuf:"varint,2,opt,name=lobbyid" json:"lobbyid"`
}

func (m *CMsgGCCStrike15V2_Party_Invite) Reset()         { *m = CMsgGCCStrike15V2_Party_Invite{} }
func (m *CMsgGCCStrike15V2_Party_Invite) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Party_Invite) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Party_Invite) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{119}
}
func (m *CMsgGCCStrike15V2_Party_Invite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Party_Invite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Party_Invite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Party_Invite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Party_Invite.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Party_Invite) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Party_Invite) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Party_Invite.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Party_Invite proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Party_Invite) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Party_Invite) GetLobbyid() uint32 {
	if m != nil {
		return m.Lobbyid
	}
	return 0
}

type CMsgGCCStrike15V2_Account_RequestCoPlays struct {
	Players    []*CMsgGCCStrike15V2_Account_RequestCoPlays_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	Servertime uint32                                             `protobuf:"varint,2,opt,name=servertime" json:"servertime"`
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) Reset() {
	*m = CMsgGCCStrike15V2_Account_RequestCoPlays{}
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Account_RequestCoPlays) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Account_RequestCoPlays) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{120}
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Account_RequestCoPlays.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Account_RequestCoPlays.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Account_RequestCoPlays.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Account_RequestCoPlays proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) GetPlayers() []*CMsgGCCStrike15V2_Account_RequestCoPlays_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) GetServertime() uint32 {
	if m != nil {
		return m.Servertime
	}
	return 0
}

type CMsgGCCStrike15V2_Account_RequestCoPlays_Player struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Rtcoplay  uint32 `protobuf:"varint,2,opt,name=rtcoplay" json:"rtcoplay"`
	Online    bool   `protobuf:"varint,3,opt,name=online" json:"online"`
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) Reset() {
	*m = CMsgGCCStrike15V2_Account_RequestCoPlays_Player{}
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Account_RequestCoPlays_Player) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Account_RequestCoPlays_Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{120, 0}
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_Account_RequestCoPlays_Player.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_Account_RequestCoPlays_Player.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_Account_RequestCoPlays_Player.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_Account_RequestCoPlays_Player proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) GetRtcoplay() uint32 {
	if m != nil {
		return m.Rtcoplay
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

type CMsgGCCStrike15V2_ClientToGCRequestTicket struct {
	AuthorizedSteamId    uint64 `protobuf:"fixed64,1,opt,name=authorized_steam_id,json=authorizedSteamId" json:"authorized_steam_id"`
	AuthorizedPublicIp   uint32 `protobuf:"fixed32,2,opt,name=authorized_public_ip,json=authorizedPublicIp" json:"authorized_public_ip"`
	GameserverSteamId    uint64 `protobuf:"fixed64,3,opt,name=gameserver_steam_id,json=gameserverSteamId" json:"gameserver_steam_id"`
	GameserverSdrRouting string `protobuf:"bytes,5,opt,name=gameserver_sdr_routing,json=gameserverSdrRouting" json:"gameserver_sdr_routing"`
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) Reset() {
	*m = CMsgGCCStrike15V2_ClientToGCRequestTicket{}
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientToGCRequestTicket) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientToGCRequestTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{121}
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCRequestTicket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCRequestTicket.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCRequestTicket.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientToGCRequestTicket proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetAuthorizedSteamId() uint64 {
	if m != nil {
		return m.AuthorizedSteamId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetAuthorizedPublicIp() uint32 {
	if m != nil {
		return m.AuthorizedPublicIp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetGameserverSteamId() uint64 {
	if m != nil {
		return m.GameserverSteamId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetGameserverSdrRouting() string {
	if m != nil {
		return m.GameserverSdrRouting
	}
	return ""
}

type CMsgGCToClientSteamDatagramTicket struct {
	SerializedTicket []byte `protobuf:"bytes,16,opt,name=serialized_ticket,json=serializedTicket" json:"serialized_ticket"`
}

func (m *CMsgGCToClientSteamDatagramTicket) Reset()         { *m = CMsgGCToClientSteamDatagramTicket{} }
func (m *CMsgGCToClientSteamDatagramTicket) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToClientSteamDatagramTicket) ProtoMessage()    {}
func (*CMsgGCToClientSteamDatagramTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{122}
}
func (m *CMsgGCToClientSteamDatagramTicket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCToClientSteamDatagramTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCToClientSteamDatagramTicket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCToClientSteamDatagramTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCToClientSteamDatagramTicket.Merge(m, src)
}
func (m *CMsgGCToClientSteamDatagramTicket) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCToClientSteamDatagramTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCToClientSteamDatagramTicket.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCToClientSteamDatagramTicket proto.InternalMessageInfo

func (m *CMsgGCToClientSteamDatagramTicket) GetSerializedTicket() []byte {
	if m != nil {
		return m.SerializedTicket
	}
	return nil
}

type CMsgGCCStrike15V2_ClientRequestOffers struct {
}

func (m *CMsgGCCStrike15V2_ClientRequestOffers) Reset()         { *m = CMsgGCCStrike15V2_ClientRequestOffers{} }
func (m *CMsgGCCStrike15V2_ClientRequestOffers) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientRequestOffers) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientRequestOffers) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{123}
}
func (m *CMsgGCCStrike15V2_ClientRequestOffers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientRequestOffers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestOffers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientRequestOffers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestOffers.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientRequestOffers) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientRequestOffers) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestOffers.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestOffers proto.InternalMessageInfo

type CMsgGCCStrike15V2_ClientRequestSouvenir struct {
	Itemid  uint64 `protobuf:"varint,1,opt,name=itemid" json:"itemid"`
	Matchid uint64 `protobuf:"varint,2,opt,name=matchid" json:"matchid"`
	Eventid int32  `protobuf:"varint,3,opt,name=eventid" json:"eventid"`
}

func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) Reset() {
	*m = CMsgGCCStrike15V2_ClientRequestSouvenir{}
}
func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientRequestSouvenir) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientRequestSouvenir) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{124}
}
func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestSouvenir.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestSouvenir.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestSouvenir.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientRequestSouvenir proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) GetMatchid() uint64 {
	if m != nil {
		return m.Matchid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) GetEventid() int32 {
	if m != nil {
		return m.Eventid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientAccountBalance struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount" json:"amount"`
	Url    string `protobuf:"bytes,2,opt,name=url" json:"url"`
}

func (m *CMsgGCCStrike15V2_ClientAccountBalance) Reset() {
	*m = CMsgGCCStrike15V2_ClientAccountBalance{}
}
func (m *CMsgGCCStrike15V2_ClientAccountBalance) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientAccountBalance) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientAccountBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{125}
}
func (m *CMsgGCCStrike15V2_ClientAccountBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientAccountBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientAccountBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientAccountBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientAccountBalance.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientAccountBalance) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientAccountBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientAccountBalance.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientAccountBalance proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientAccountBalance) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientAccountBalance) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type CMsgGCCStrike15V2_ClientPartyJoinRelay struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Lobbyid   uint64 `protobuf:"varint,2,opt,name=lobbyid" json:"lobbyid"`
}

func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) Reset() {
	*m = CMsgGCCStrike15V2_ClientPartyJoinRelay{}
}
func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientPartyJoinRelay) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientPartyJoinRelay) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{126}
}
func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyJoinRelay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyJoinRelay.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyJoinRelay.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyJoinRelay proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) GetLobbyid() uint64 {
	if m != nil {
		return m.Lobbyid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientPartyWarning struct {
	Entries []*CMsgGCCStrike15V2_ClientPartyWarning_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *CMsgGCCStrike15V2_ClientPartyWarning) Reset()         { *m = CMsgGCCStrike15V2_ClientPartyWarning{} }
func (m *CMsgGCCStrike15V2_ClientPartyWarning) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientPartyWarning) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientPartyWarning) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{127}
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyWarning.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyWarning.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyWarning.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyWarning proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientPartyWarning) GetEntries() []*CMsgGCCStrike15V2_ClientPartyWarning_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_ClientPartyWarning_Entry struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Warntype  uint32 `protobuf:"varint,2,opt,name=warntype" json:"warntype"`
}

func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) Reset() {
	*m = CMsgGCCStrike15V2_ClientPartyWarning_Entry{}
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientPartyWarning_Entry) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientPartyWarning_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{127, 0}
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyWarning_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyWarning_Entry.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyWarning_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientPartyWarning_Entry proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) GetWarntype() uint32 {
	if m != nil {
		return m.Warntype
	}
	return 0
}

type CMsgGCCStrike15V2_SetEventFavorite struct {
	Eventid    uint64 `protobuf:"varint,1,opt,name=eventid" json:"eventid"`
	IsFavorite bool   `protobuf:"varint,2,opt,name=is_favorite,json=isFavorite" json:"is_favorite"`
}

func (m *CMsgGCCStrike15V2_SetEventFavorite) Reset()         { *m = CMsgGCCStrike15V2_SetEventFavorite{} }
func (m *CMsgGCCStrike15V2_SetEventFavorite) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_SetEventFavorite) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_SetEventFavorite) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{128}
}
func (m *CMsgGCCStrike15V2_SetEventFavorite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_SetEventFavorite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_SetEventFavorite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_SetEventFavorite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_SetEventFavorite.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_SetEventFavorite) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_SetEventFavorite) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_SetEventFavorite.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_SetEventFavorite proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_SetEventFavorite) GetEventid() uint64 {
	if m != nil {
		return m.Eventid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_SetEventFavorite) GetIsFavorite() bool {
	if m != nil {
		return m.IsFavorite
	}
	return false
}

type CMsgGCCStrike15V2_GetEventFavorites_Request struct {
	AllEvents bool `protobuf:"varint,1,opt,name=all_events,json=allEvents" json:"all_events"`
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) Reset() {
	*m = CMsgGCCStrike15V2_GetEventFavorites_Request{}
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GetEventFavorites_Request) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GetEventFavorites_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{129}
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_GetEventFavorites_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_GetEventFavorites_Request.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_GetEventFavorites_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_GetEventFavorites_Request proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) GetAllEvents() bool {
	if m != nil {
		return m.AllEvents
	}
	return false
}

type CMsgGCCStrike15V2_GetEventFavorites_Response struct {
	AllEvents     bool   `protobuf:"varint,1,opt,name=all_events,json=allEvents" json:"all_events"`
	JsonFavorites string `protobuf:"bytes,2,opt,name=json_favorites,json=jsonFavorites" json:"json_favorites"`
	JsonFeatured  string `protobuf:"bytes,3,opt,name=json_featured,json=jsonFeatured" json:"json_featured"`
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) Reset() {
	*m = CMsgGCCStrike15V2_GetEventFavorites_Response{}
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GetEventFavorites_Response) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GetEventFavorites_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{130}
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_GetEventFavorites_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_GetEventFavorites_Response.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_GetEventFavorites_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_GetEventFavorites_Response proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) GetAllEvents() bool {
	if m != nil {
		return m.AllEvents
	}
	return false
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) GetJsonFavorites() string {
	if m != nil {
		return m.JsonFavorites
	}
	return ""
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) GetJsonFeatured() string {
	if m != nil {
		return m.JsonFeatured
	}
	return ""
}

type CMsgGCCStrike15V2_ClientPerfReport struct {
	Entries []*CMsgGCCStrike15V2_ClientPerfReport_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *CMsgGCCStrike15V2_ClientPerfReport) Reset()         { *m = CMsgGCCStrike15V2_ClientPerfReport{} }
func (m *CMsgGCCStrike15V2_ClientPerfReport) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientPerfReport) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientPerfReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{131}
}
func (m *CMsgGCCStrike15V2_ClientPerfReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientPerfReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientPerfReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientPerfReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPerfReport.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientPerfReport) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientPerfReport) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPerfReport.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientPerfReport proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientPerfReport) GetEntries() []*CMsgGCCStrike15V2_ClientPerfReport_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_ClientPerfReport_Entry struct {
	Perfcounter uint32 `protobuf:"varint,1,opt,name=perfcounter" json:"perfcounter"`
	Length      uint32 `protobuf:"varint,2,opt,name=length" json:"length"`
	Reference   []byte `protobuf:"bytes,3,opt,name=reference" json:"reference"`
	Actual      []byte `protobuf:"bytes,4,opt,name=actual" json:"actual"`
	Sourceid    uint32 `protobuf:"varint,5,opt,name=sourceid" json:"sourceid"`
	Status      uint32 `protobuf:"varint,6,opt,name=status" json:"status"`
}

func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) Reset() {
	*m = CMsgGCCStrike15V2_ClientPerfReport_Entry{}
}
func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientPerfReport_Entry) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientPerfReport_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{131, 0}
}
func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientPerfReport_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPerfReport_Entry.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientPerfReport_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientPerfReport_Entry proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetPerfcounter() uint32 {
	if m != nil {
		return m.Perfcounter
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetReference() []byte {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetActual() []byte {
	if m != nil {
		return m.Actual
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetSourceid() uint32 {
	if m != nil {
		return m.Sourceid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type CMsgGCCStrike15V2_ClientReportValidation struct {
	FileReport          string `protobuf:"bytes,1,opt,name=file_report,json=fileReport" json:"file_report"`
	CommandLine         string `protobuf:"bytes,2,opt,name=command_line,json=commandLine" json:"command_line"`
	TotalFiles          uint32 `protobuf:"varint,3,opt,name=total_files,json=totalFiles" json:"total_files"`
	InternalError       uint32 `protobuf:"varint,4,opt,name=internal_error,json=internalError" json:"internal_error"`
	TrustTime           uint32 `protobuf:"varint,5,opt,name=trust_time,json=trustTime" json:"trust_time"`
	CountPending        uint32 `protobuf:"varint,6,opt,name=count_pending,json=countPending" json:"count_pending"`
	CountCompleted      uint32 `protobuf:"varint,7,opt,name=count_completed,json=countCompleted" json:"count_completed"`
	ProcessId           uint32 `protobuf:"varint,8,opt,name=process_id,json=processId" json:"process_id"`
	Osversion           int32  `protobuf:"varint,9,opt,name=osversion" json:"osversion"`
	Clientreportversion uint32 `protobuf:"varint,10,opt,name=clientreportversion" json:"clientreportversion"`
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) Reset() {
	*m = CMsgGCCStrike15V2_ClientReportValidation{}
}
func (m *CMsgGCCStrike15V2_ClientReportValidation) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientReportValidation) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientReportValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{132}
}
func (m *CMsgGCCStrike15V2_ClientReportValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_ClientReportValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_ClientReportValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_ClientReportValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientReportValidation.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_ClientReportValidation) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_ClientReportValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_ClientReportValidation.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_ClientReportValidation proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_ClientReportValidation) GetFileReport() string {
	if m != nil {
		return m.FileReport
	}
	return ""
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) GetCommandLine() string {
	if m != nil {
		return m.CommandLine
	}
	return ""
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) GetTotalFiles() uint32 {
	if m != nil {
		return m.TotalFiles
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) GetInternalError() uint32 {
	if m != nil {
		return m.InternalError
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) GetTrustTime() uint32 {
	if m != nil {
		return m.TrustTime
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) GetCountPending() uint32 {
	if m != nil {
		return m.CountPending
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) GetCountCompleted() uint32 {
	if m != nil {
		return m.CountCompleted
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) GetProcessId() uint32 {
	if m != nil {
		return m.ProcessId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) GetOsversion() int32 {
	if m != nil {
		return m.Osversion
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) GetClientreportversion() uint32 {
	if m != nil {
		return m.Clientreportversion
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ClientRefuseSecureMode struct {
	FileReport        string `protobuf:"bytes,1,opt,name=file_report,json=fileReport" json:"file_report"`
	OfferInsecureMode bool   `protobuf:"varint,2,opt,name=offer_insecure_mode,json=offerInsecureMode" json:"offer_insecure_mode"`
	OfferSecureMode   bool   `protobuf:"varint,3,opt,name=offer_secure_mode,json=offerSecureMode" json:"offer_secure_mode"`
	ShowUnsignedUi    bool   `protobuf:"varint,4,opt,name=show_unsigned_ui,json=showUnsignedUi" json:"show_unsigned_ui"`
	KickUser          bool   `protobuf:"varint,5,opt,name=kick_user,json=kickUser" json:"kick_user"`
}

func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) Reset() {
	*m = CMsgGCCStrike15V2_GC2ClientRefuseSecureMode{}
}
func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{133}
}
func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientRefuseSecureMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientRefuseSecureMode.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientRefuseSecureMode.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientRefuseSecureMode proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetFileReport() string {
	if m != nil {
		return m.FileReport
	}
	return ""
}

func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetOfferInsecureMode() bool {
	if m != nil {
		return m.OfferInsecureMode
	}
	return false
}

func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetOfferSecureMode() bool {
	if m != nil {
		return m.OfferSecureMode
	}
	return false
}

func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetShowUnsignedUi() bool {
	if m != nil {
		return m.ShowUnsignedUi
	}
	return false
}

func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetKickUser() bool {
	if m != nil {
		return m.KickUser
	}
	return false
}

type CMsgGCCStrike15V2_GC2ClientRequestValidation struct {
	FullReport bool `protobuf:"varint,1,opt,name=full_report,json=fullReport" json:"full_report"`
}

func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) Reset() {
	*m = CMsgGCCStrike15V2_GC2ClientRequestValidation{}
}
func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GC2ClientRequestValidation) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GC2ClientRequestValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ac1cab292d7f96, []int{134}
}
func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientRequestValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientRequestValidation.Merge(m, src)
}
func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) XXX_Size() int {
	return m.Size()
}
func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientRequestValidation.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCCStrike15V2_GC2ClientRequestValidation proto.InternalMessageInfo

func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) GetFullReport() bool {
	if m != nil {
		return m.FullReport
	}
	return false
}

func init() {
	proto.RegisterEnum("ECsgoGCMsg", ECsgoGCMsg_name, ECsgoGCMsg_value)
	proto.RegisterEnum("ECsgoSteamUserStat", ECsgoSteamUserStat_name, ECsgoSteamUserStat_value)
	proto.RegisterEnum("EClientReportingVersion", EClientReportingVersion_name, EClientReportingVersion_value)
	proto.RegisterType((*GameServerPing)(nil), "GameServerPing")
	proto.RegisterType((*DataCenterPing)(nil), "DataCenterPing")
	proto.RegisterType((*DetailedSearchStatistic)(nil), "DetailedSearchStatistic")
	proto.RegisterType((*TournamentPlayer)(nil), "TournamentPlayer")
	proto.RegisterType((*TournamentTeam)(nil), "TournamentTeam")
	proto.RegisterType((*TournamentEvent)(nil), "TournamentEvent")
	proto.RegisterType((*GlobalStatistics)(nil), "GlobalStatistics")
	proto.RegisterType((*OperationalStatisticDescription)(nil), "OperationalStatisticDescription")
	proto.RegisterType((*OperationalStatisticElement)(nil), "OperationalStatisticElement")
	proto.RegisterType((*OperationalStatisticsPacket)(nil), "OperationalStatisticsPacket")
	proto.RegisterType((*PlayerRankingInfo)(nil), "PlayerRankingInfo")
	proto.RegisterType((*PlayerCommendationInfo)(nil), "PlayerCommendationInfo")
	proto.RegisterType((*PlayerMedalsInfo)(nil), "PlayerMedalsInfo")
	proto.RegisterType((*AccountActivity)(nil), "AccountActivity")
	proto.RegisterType((*TournamentMatchSetup)(nil), "TournamentMatchSetup")
	proto.RegisterType((*ServerHltvInfo)(nil), "ServerHltvInfo")
	proto.RegisterType((*IpAddressMask)(nil), "IpAddressMask")
	proto.RegisterType((*CMsgCsgoSteamUserStatChange)(nil), "CMsgCsgoSteamUserStatChange")
	proto.RegisterType((*XpProgressData)(nil), "XpProgressData")
	proto.RegisterType((*MatchEndItemUpdates)(nil), "MatchEndItemUpdates")
	proto.RegisterType((*ScoreLeaderboardData)(nil), "ScoreLeaderboardData")
	proto.RegisterType((*ScoreLeaderboardData_Entry)(nil), "ScoreLeaderboardData.Entry")
	proto.RegisterType((*ScoreLeaderboardData_AccountEntries)(nil), "ScoreLeaderboardData.AccountEntries")
	proto.RegisterType((*PlayerQuestData)(nil), "PlayerQuestData")
	proto.RegisterType((*PlayerQuestData_QuestItemData)(nil), "PlayerQuestData.QuestItemData")
	proto.RegisterType((*CMsgGC_ServerQuestUpdateData)(nil), "CMsgGC_ServerQuestUpdateData")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGCOperationalStats)(nil), "CMsgGCCStrike15_v2_MatchmakingGCOperationalStats")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm")
	proto.RegisterType((*CMsgGCCStrike15V2_GC2ServerReservationUpdate)(nil), "CMsgGCCStrike15_v2_GC2ServerReservationUpdate")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingStart)(nil), "CMsgGCCStrike15_v2_MatchmakingStart")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingStop)(nil), "CMsgGCCStrike15_v2_MatchmakingStop")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingClient2ServerPing)(nil), "CMsgGCCStrike15_v2_MatchmakingClient2ServerPing")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentMatchDraft)(nil), "CDataGCCStrike15_v2_TournamentMatchDraft")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentMatchDraft_Entry)(nil), "CDataGCCStrike15_v2_TournamentMatchDraft.Entry")
	proto.RegisterType((*CPreMatchInfoData)(nil), "CPreMatchInfoData")
	proto.RegisterType((*CPreMatchInfoData_TeamStats)(nil), "CPreMatchInfoData.TeamStats")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingServerReservationResponse)(nil), "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingServerRoundStats)(nil), "CMsgGCCStrike15_v2_MatchmakingServerRoundStats")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo)(nil), "CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingServerMatchEnd)(nil), "CMsgGCCStrike15_v2_MatchmakingServerMatchEnd")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial)(nil), "CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingClient2GCHello)(nil), "CMsgGCCStrike15_v2_MatchmakingClient2GCHello")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ClientHello)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ClientHello")
	proto.RegisterType((*CMsgGCCStrike15V2_AccountPrivacySettings)(nil), "CMsgGCCStrike15_v2_AccountPrivacySettings")
	proto.RegisterType((*CMsgGCCStrike15V2_AccountPrivacySettings_Setting)(nil), "CMsgGCCStrike15_v2_AccountPrivacySettings.Setting")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingServer2GCKick)(nil), "CMsgGCCStrike15_v2_MatchmakingServer2GCKick")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientGCRankUpdate)(nil), "CMsgGCCStrike15_v2_ClientGCRankUpdate")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate)(nil), "CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate")
	proto.RegisterType((*CMsgGCCStrike15V2_ServerNotificationForUserPenalty)(nil), "CMsgGCCStrike15_v2_ServerNotificationForUserPenalty")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientReportPlayer)(nil), "CMsgGCCStrike15_v2_ClientReportPlayer")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientCommendPlayer)(nil), "CMsgGCCStrike15_v2_ClientCommendPlayer")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientReportServer)(nil), "CMsgGCCStrike15_v2_ClientReportServer")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientReportResponse)(nil), "CMsgGCCStrike15_v2_ClientReportResponse")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends)(nil), "CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends")
	proto.RegisterType((*WatchableMatchInfo)(nil), "WatchableMatchInfo")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientRequestJoinFriendData)(nil), "CMsgGCCStrike15_v2_ClientRequestJoinFriendData")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientRequestJoinServerData)(nil), "CMsgGCCStrike15_v2_ClientRequestJoinServerData")
	proto.RegisterType((*CMsgGCCstrike15V2_ClientRequestNewMission)(nil), "CMsgGCCstrike15_v2_ClientRequestNewMission")
	proto.RegisterType((*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded)(nil), "CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded")
	proto.RegisterType((*CMsgGCCStrike15V2_WatchInfoUsers)(nil), "CMsgGCCStrike15_v2_WatchInfoUsers")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientRequestPlayersProfile)(nil), "CMsgGCCStrike15_v2_ClientRequestPlayersProfile")
	proto.RegisterType((*CMsgGCCStrike15V2_PlayersProfile)(nil), "CMsgGCCStrike15_v2_PlayersProfile")
	proto.RegisterType((*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate)(nil), "CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate")
	proto.RegisterType((*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment)(nil), "CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment")
	proto.RegisterType((*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus)(nil), "CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus")
	proto.RegisterType((*CClientHeaderOverwatchEvidence)(nil), "CClientHeaderOverwatchEvidence")
	proto.RegisterType((*CMsgGCCStrike15V2_GC2ClientTextMsg)(nil), "CMsgGCCStrike15_v2_GC2ClientTextMsg")
	proto.RegisterType((*CMsgGCCStrike15V2_Client2GCTextMsg)(nil), "CMsgGCCStrike15_v2_Client2GCTextMsg")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchEndRunRewardDrops)(nil), "CMsgGCCStrike15_v2_MatchEndRunRewardDrops")
	proto.RegisterType((*CEconItemPreviewDataBlock)(nil), "CEconItemPreviewDataBlock")
	proto.RegisterType((*CEconItemPreviewDataBlock_Sticker)(nil), "CEconItemPreviewDataBlock.Sticker")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchEndRewardDropsNotification)(nil), "CMsgGCCStrike15_v2_MatchEndRewardDropsNotification")
	proto.RegisterType((*CMsgItemAcknowledged)(nil), "CMsgItemAcknowledged")
	proto.RegisterType((*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest)(nil), "CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest")
	proto.RegisterType((*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse)(nil), "CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse")
	proto.RegisterType((*CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification)(nil), "CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames)(nil), "CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser)(nil), "CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchListRequestRecentUserGames)(nil), "CMsgGCCStrike15_v2_MatchListRequestRecentUserGames")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchListRequestTournamentGames)(nil), "CMsgGCCStrike15_v2_MatchListRequestTournamentGames")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchListRequestFullGameInfo)(nil), "CMsgGCCStrike15_v2_MatchListRequestFullGameInfo")
	proto.RegisterType((*CDataGCCStrike15V2_MatchInfo)(nil), "CDataGCCStrike15_v2_MatchInfo")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentGroupTeam)(nil), "CDataGCCStrike15_v2_TournamentGroupTeam")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentGroup)(nil), "CDataGCCStrike15_v2_TournamentGroup")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentGroup_Picks)(nil), "CDataGCCStrike15_v2_TournamentGroup.Picks")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentSection)(nil), "CDataGCCStrike15_v2_TournamentSection")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentInfo)(nil), "CDataGCCStrike15_v2_TournamentInfo")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchList)(nil), "CMsgGCCStrike15_v2_MatchList")
	proto.RegisterType((*CMsgGCCStrike15V2_Predictions)(nil), "CMsgGCCStrike15_v2_Predictions")
	proto.RegisterType((*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick)(nil), "CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick")
	proto.RegisterType((*CMsgGCCStrike15V2_Fantasy)(nil), "CMsgGCCStrike15_v2_Fantasy")
	proto.RegisterType((*CMsgGCCStrike15V2_Fantasy_FantasySlot)(nil), "CMsgGCCStrike15_v2_Fantasy.FantasySlot")
	proto.RegisterType((*CMsgGCCStrike15V2_Fantasy_FantasyTeam)(nil), "CMsgGCCStrike15_v2_Fantasy.FantasyTeam")
	proto.RegisterType((*CAttribute_String)(nil), "CAttribute_String")
	proto.RegisterType((*CMsgGCToGCReloadVersions)(nil), "CMsgGCToGCReloadVersions")
	proto.RegisterType((*CMsgCStrike15Welcome)(nil), "CMsgCStrike15Welcome")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientVarValueNotificationInfo)(nil), "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo")
	proto.RegisterType((*CMsgGCCStrike15V2_ServerVarValueNotificationInfo)(nil), "CMsgGCCStrike15_v2_ServerVarValueNotificationInfo")
	proto.RegisterType((*CMsgGCCStrike15V2_GiftsLeaderboardRequest)(nil), "CMsgGCCStrike15_v2_GiftsLeaderboardRequest")
	proto.RegisterType((*CMsgGCCStrike15V2_GiftsLeaderboardResponse)(nil), "CMsgGCCStrike15_v2_GiftsLeaderboardResponse")
	proto.RegisterType((*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry)(nil), "CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientSubmitSurveyVote)(nil), "CMsgGCCStrike15_v2_ClientSubmitSurveyVote")
	proto.RegisterType((*CMsgGCCStrike15V2_Server2GCClientValidate)(nil), "CMsgGCCStrike15_v2_Server2GCClientValidate")
	proto.RegisterType((*CMsgGCCStrike15V2_Server2GCPureServerValidationFailure)(nil), "CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure")
	proto.RegisterType((*CMsgGCCStrike15V2_GC2ClientTournamentInfo)(nil), "CMsgGCCStrike15_v2_GC2ClientTournamentInfo")
	proto.RegisterType((*CSOEconCoupon)(nil), "CSOEconCoupon")
	proto.RegisterType((*CSOQuestProgress)(nil), "CSOQuestProgress")
	proto.RegisterType((*CSOAccountSeasonalOperation)(nil), "CSOAccountSeasonalOperation")
	proto.RegisterType((*CSOPersonaDataPublic)(nil), "CSOPersonaDataPublic")
	proto.RegisterType((*CMsgGC_GlobalGame_Subscribe)(nil), "CMsgGC_GlobalGame_Subscribe")
	proto.RegisterType((*CMsgGC_GlobalGame_Unsubscribe)(nil), "CMsgGC_GlobalGame_Unsubscribe")
	proto.RegisterType((*CMsgGC_GlobalGame_Play)(nil), "CMsgGC_GlobalGame_Play")
	proto.RegisterType((*CMsgGCCStrike15V2_AcknowledgePenalty)(nil), "CMsgGCCStrike15_v2_AcknowledgePenalty")
	proto.RegisterType((*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin)(nil), "CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin")
	proto.RegisterType((*CMsgGCCStrike15V2_Client2GCStreamUnlock)(nil), "CMsgGCCStrike15_v2_Client2GCStreamUnlock")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientToGCRequestElevate)(nil), "CMsgGCCStrike15_v2_ClientToGCRequestElevate")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientToGCChat)(nil), "CMsgGCCStrike15_v2_ClientToGCChat")
	proto.RegisterType((*CMsgGCCStrike15V2_GCToClientChat)(nil), "CMsgGCCStrike15_v2_GCToClientChat")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientAuthKeyCode)(nil), "CMsgGCCStrike15_v2_ClientAuthKeyCode")
	proto.RegisterType((*CMsgGCCStrike15_GotvSyncPacket)(nil), "CMsgGCCStrike15_GotvSyncPacket")
	proto.RegisterType((*PlayerDecalDigitalSignature)(nil), "PlayerDecalDigitalSignature")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientPlayerDecalSign)(nil), "CMsgGCCStrike15_v2_ClientPlayerDecalSign")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientLogonFatalError)(nil), "CMsgGCCStrike15_v2_ClientLogonFatalError")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientPollState)(nil), "CMsgGCCStrike15_v2_ClientPollState")
	proto.RegisterType((*CMsgGCCStrike15V2_Party_Register)(nil), "CMsgGCCStrike15_v2_Party_Register")
	proto.RegisterType((*CMsgGCCStrike15V2_Party_Search)(nil), "CMsgGCCStrike15_v2_Party_Search")
	proto.RegisterType((*CMsgGCCStrike15V2_Party_SearchResults)(nil), "CMsgGCCStrike15_v2_Party_SearchResults")
	proto.RegisterType((*CMsgGCCStrike15V2_Party_SearchResults_Entry)(nil), "CMsgGCCStrike15_v2_Party_SearchResults.Entry")
	proto.RegisterType((*CMsgGCCStrike15V2_Party_Invite)(nil), "CMsgGCCStrike15_v2_Party_Invite")
	proto.RegisterType((*CMsgGCCStrike15V2_Account_RequestCoPlays)(nil), "CMsgGCCStrike15_v2_Account_RequestCoPlays")
	proto.RegisterType((*CMsgGCCStrike15V2_Account_RequestCoPlays_Player)(nil), "CMsgGCCStrike15_v2_Account_RequestCoPlays.Player")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientToGCRequestTicket)(nil), "CMsgGCCStrike15_v2_ClientToGCRequestTicket")
	proto.RegisterType((*CMsgGCToClientSteamDatagramTicket)(nil), "CMsgGCToClientSteamDatagramTicket")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientRequestOffers)(nil), "CMsgGCCStrike15_v2_ClientRequestOffers")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientRequestSouvenir)(nil), "CMsgGCCStrike15_v2_ClientRequestSouvenir")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientAccountBalance)(nil), "CMsgGCCStrike15_v2_ClientAccountBalance")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientPartyJoinRelay)(nil), "CMsgGCCStrike15_v2_ClientPartyJoinRelay")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientPartyWarning)(nil), "CMsgGCCStrike15_v2_ClientPartyWarning")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientPartyWarning_Entry)(nil), "CMsgGCCStrike15_v2_ClientPartyWarning.Entry")
	proto.RegisterType((*CMsgGCCStrike15V2_SetEventFavorite)(nil), "CMsgGCCStrike15_v2_SetEventFavorite")
	proto.RegisterType((*CMsgGCCStrike15V2_GetEventFavorites_Request)(nil), "CMsgGCCStrike15_v2_GetEventFavorites_Request")
	proto.RegisterType((*CMsgGCCStrike15V2_GetEventFavorites_Response)(nil), "CMsgGCCStrike15_v2_GetEventFavorites_Response")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientPerfReport)(nil), "CMsgGCCStrike15_v2_ClientPerfReport")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientPerfReport_Entry)(nil), "CMsgGCCStrike15_v2_ClientPerfReport.Entry")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientReportValidation)(nil), "CMsgGCCStrike15_v2_ClientReportValidation")
	proto.RegisterType((*CMsgGCCStrike15V2_GC2ClientRefuseSecureMode)(nil), "CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode")
	proto.RegisterType((*CMsgGCCStrike15V2_GC2ClientRequestValidation)(nil), "CMsgGCCStrike15_v2_GC2ClientRequestValidation")
}

func init() { proto.RegisterFile("cstrike15_gcmessages.proto", fileDescriptor_27ac1cab292d7f96) }

var fileDescriptor_27ac1cab292d7f96 = []byte{
	// 11182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7d, 0x6b, 0x90, 0x1c, 0xc7,
	0x79, 0x18, 0x77, 0xef, 0xfd, 0xdd, 0x6b, 0x30, 0x38, 0x02, 0xc7, 0x03, 0x09, 0x82, 0x43, 0x12,
	0x04, 0x40, 0x60, 0x09, 0x80, 0x20, 0x29, 0x92, 0xa2, 0xa4, 0xc3, 0xe2, 0xb0, 0x3c, 0x13, 0x20,
	0x4e, 0x7b, 0x00, 0xc9, 0x72, 0x1c, 0x4f, 0xfa, 0x66, 0xfa, 0xf6, 0xc6, 0x37, 0x3b, 0x33, 0x9c,
	0x99, 0x5d, 0xdc, 0xf9, 0x97, 0xcb, 0x95, 0x87, 0xcb, 0x96, 0x6d, 0xc9, 0x8f, 0x58, 0x4a, 0x2c,
	0x47, 0x76, 0x5c, 0x52, 0x1e, 0x4e, 0x62, 0x27, 0x76, 0x2a, 0x2f, 0x59, 0x8e, 0xe5, 0xd8, 0xb2,
	0x13, 0x47, 0x8a, 0x63, 0x39, 0x8e, 0x63, 0x3b, 0x96, 0x98, 0xa7, 0x93, 0xc8, 0x89, 0xf3, 0xaa,
	0x4a, 0x2a, 0x55, 0xa9, 0xfe, 0xba, 0x7b, 0xa6, 0x7b, 0x76, 0x66, 0x77, 0x8f, 0x66, 0x1e, 0xbf,
	0xee, 0xf6, 0xfb, 0xbe, 0x7e, 0x7f, 0xfd, 0xf5, 0xf7, 0xea, 0x1e, 0x58, 0x73, 0x92, 0x34, 0xf6,
	0xf6, 0xe9, 0x95, 0xe7, 0xec, 0x8e, 0xd3, 0xa5, 0x49, 0x42, 0x3a, 0x34, 0x69, 0x44, 0x71, 0x98,
	0x86, 0x6b, 0xc7, 0x93, 0x94, 0x92, 0x6e, 0x01, 0x78, 0x92, 0x06, 0x1d, 0x2f, 0xa0, 0x03, 0xd4,
	0x96, 0x0b, 0x4b, 0x2d, 0xd2, 0xa5, 0xdb, 0x34, 0xee, 0xd3, 0x78, 0xcb, 0x0b, 0x3a, 0xe6, 0x2a,
	0x4c, 0x46, 0x5e, 0xd0, 0x59, 0xad, 0x9f, 0xa9, 0x9d, 0x9b, 0xba, 0x3e, 0xf9, 0x85, 0xdf, 0x7e,
	0xf4, 0x81, 0x36, 0x42, 0xcc, 0x15, 0xa8, 0x7b, 0xd1, 0xea, 0xc4, 0x99, 0xda, 0xb9, 0x45, 0x01,
	0xaf, 0x7b, 0x91, 0x69, 0xc1, 0x9c, 0x17, 0x24, 0x29, 0x09, 0x1c, 0x9a, 0xac, 0x4e, 0x29, 0xc8,
	0x1c, 0x6c, 0xbd, 0x01, 0x4b, 0x37, 0x48, 0x4a, 0x9a, 0x34, 0x48, 0x45, 0x2b, 0x17, 0x60, 0xc9,
	0x25, 0x29, 0xb1, 0x1d, 0x04, 0xd9, 0x9e, 0xbb, 0x5a, 0x3b, 0x53, 0x3b, 0x37, 0x23, 0x8a, 0x2e,
	0xb8, 0x19, 0xf5, 0xa6, 0xab, 0xf5, 0xe8, 0x98, 0xda, 0x23, 0xeb, 0x93, 0x35, 0x38, 0x79, 0x83,
	0xa6, 0xc4, 0xf3, 0xa9, 0xbb, 0x4d, 0x49, 0xec, 0xec, 0x6d, 0xa7, 0x24, 0xf5, 0x92, 0xd4, 0x73,
	0xcc, 0xc7, 0x60, 0xae, 0x43, 0xba, 0xd4, 0x4e, 0x0f, 0x23, 0x8a, 0x95, 0xcb, 0x7e, 0xcd, 0x32,
	0xf0, 0xdd, 0xc3, 0x88, 0x9a, 0x17, 0x61, 0x39, 0xc1, 0x52, 0x76, 0xea, 0x75, 0xa9, 0x4d, 0xfa,
	0xbc, 0x0d, 0x49, 0xb8, 0xc8, 0x91, 0x77, 0xbd, 0x2e, 0x5d, 0xef, 0x77, 0xcc, 0x2b, 0x70, 0x2c,
	0xf2, 0xc9, 0x21, 0x8d, 0x13, 0x9b, 0x23, 0x58, 0x9f, 0x26, 0x15, 0x7a, 0x43, 0xa0, 0xb7, 0x25,
	0xd6, 0xfa, 0x4c, 0x1d, 0x8c, 0xbb, 0x61, 0x2f, 0x0e, 0x48, 0x97, 0x06, 0xe9, 0x16, 0xa2, 0xcd,
	0xc7, 0x01, 0x88, 0xe3, 0x84, 0xbd, 0x20, 0x95, 0xc3, 0xce, 0x66, 0x4c, 0xc0, 0x37, 0x5d, 0xf3,
	0x49, 0x98, 0xe7, 0xb5, 0xd9, 0x81, 0xe7, 0xec, 0x63, 0xb7, 0xe6, 0x04, 0x15, 0x70, 0xc4, 0xeb,
	0x9e, 0xb3, 0xaf, 0x92, 0x91, 0x2e, 0xc5, 0xb5, 0x29, 0x92, 0x91, 0x2e, 0x65, 0x4d, 0x0a, 0x32,
	0x37, 0xdc, 0xd1, 0xfa, 0x3c, 0xc7, 0xe1, 0x37, 0xc2, 0x1d, 0xa5, 0xae, 0x5d, 0x9f, 0x74, 0x70,
	0x29, 0x0b, 0x75, 0xdd, 0xf4, 0x49, 0xc7, 0xbc, 0x04, 0xcb, 0x82, 0xcc, 0x0f, 0x1d, 0x92, 0x7a,
	0x61, 0xb0, 0x3a, 0xad, 0x90, 0x2e, 0x71, 0xe4, 0x2d, 0x81, 0x53, 0x6a, 0x75, 0x69, 0xe2, 0xac,
	0xce, 0x0c, 0xd6, 0x7a, 0x83, 0x26, 0x8e, 0xf5, 0xf9, 0x1a, 0x2c, 0xe5, 0x33, 0x75, 0x97, 0x92,
	0xae, 0xf9, 0x08, 0xcc, 0x30, 0x4e, 0x96, 0x93, 0x24, 0x79, 0x71, 0x9a, 0x01, 0x37, 0x5d, 0xf3,
	0x51, 0x98, 0x45, 0x74, 0x4a, 0x3a, 0xda, 0xf4, 0x60, 0xa1, 0xbb, 0xa4, 0xc3, 0x18, 0x00, 0x09,
	0x70, 0x34, 0xea, 0xcc, 0x60, 0x39, 0x1c, 0x8b, 0x24, 0xc1, 0xc9, 0x9b, 0x2c, 0x92, 0xe0, 0xd4,
	0x3d, 0x0d, 0x33, 0x62, 0x59, 0x57, 0xa7, 0xce, 0x4c, 0x9c, 0x9b, 0xbf, 0x7a, 0xac, 0x51, 0x5c,
	0xd1, 0xb6, 0xa4, 0xb0, 0xbe, 0x73, 0x02, 0x96, 0x73, 0xec, 0x46, 0x9f, 0x06, 0x29, 0xeb, 0x27,
	0x65, 0xff, 0x14, 0xc7, 0x31, 0x83, 0xd0, 0x4d, 0x97, 0x75, 0x82, 0x13, 0x14, 0x47, 0xc2, 0xcb,
	0xb1, 0xa1, 0x3c, 0x0e, 0xc0, 0x49, 0x06, 0x56, 0x99, 0x17, 0xc5, 0x9e, 0x36, 0xc0, 0x10, 0xf5,
	0x30, 0x66, 0x4e, 0x52, 0x12, 0xa7, 0xda, 0x52, 0x2f, 0xf1, 0xea, 0xbc, 0x2e, 0xdd, 0x66, 0x38,
	0xb6, 0x05, 0x15, 0x7a, 0x1a, 0xb8, 0xda, 0xee, 0x5d, 0xc8, 0xa8, 0x37, 0x02, 0xd7, 0x7c, 0x0a,
	0xf8, 0x6f, 0x3b, 0xea, 0xed, 0xf8, 0x9e, 0x83, 0x2b, 0x2e, 0x07, 0x32, 0x8f, 0x98, 0x2d, 0x44,
	0xe4, 0x95, 0x26, 0x29, 0xe9, 0x50, 0x36, 0xe6, 0x19, 0x85, 0x94, 0x57, 0xb2, 0xcd, 0x50, 0x9b,
	0x6e, 0xde, 0x61, 0x4e, 0x8b, 0x63, 0x9b, 0x55, 0x59, 0x29, 0xa7, 0xc6, 0x01, 0x5e, 0x86, 0x63,
	0xc4, 0x49, 0xbd, 0x3e, 0xb5, 0x13, 0xea, 0x30, 0xe6, 0x62, 0xd5, 0xcf, 0x29, 0x7d, 0x5e, 0xe6,
	0xe8, 0x6d, 0x8e, 0xdd, 0x74, 0xad, 0x1f, 0x9c, 0x06, 0xa3, 0xe5, 0x87, 0x3b, 0xc4, 0xcf, 0xe4,
	0x42, 0x62, 0x3e, 0x0d, 0x4b, 0x72, 0x1f, 0x87, 0x81, 0xef, 0x05, 0xba, 0x74, 0x58, 0x14, 0xb8,
	0x3b, 0x88, 0x62, 0xc4, 0x09, 0xca, 0xc6, 0x8c, 0xb8, 0x20, 0x21, 0x10, 0x27, 0x88, 0x4b, 0x25,
	0xc4, 0xc4, 0x30, 0x09, 0xc1, 0x8a, 0xc8, 0xfa, 0x49, 0x9f, 0x78, 0x3e, 0xd9, 0xf1, 0xa9, 0x2e,
	0x54, 0x04, 0x7a, 0x5d, 0x62, 0xd9, 0x06, 0x0c, 0x83, 0x4e, 0xe8, 0x05, 0x1d, 0xbb, 0x4b, 0x52,
	0x67, 0xaf, 0x20, 0x76, 0x97, 0x04, 0xf2, 0x36, 0xc7, 0x95, 0x09, 0xb9, 0xe9, 0x6a, 0x21, 0xb7,
	0xc1, 0xfa, 0x83, 0xd4, 0x49, 0x36, 0x63, 0xab, 0x33, 0xc8, 0xf8, 0xab, 0x8d, 0x0a, 0x51, 0xcb,
	0xfa, 0xa8, 0x01, 0x12, 0xf3, 0x1c, 0x2c, 0x76, 0x89, 0x17, 0xd8, 0x51, 0x98, 0xa4, 0x76, 0x2f,
	0xf6, 0xb5, 0x75, 0x9d, 0x67, 0xa8, 0xad, 0x30, 0x49, 0xef, 0xc5, 0xbe, 0xf9, 0x12, 0x9c, 0x88,
	0xe9, 0xdb, 0x3d, 0x2f, 0xa6, 0xae, 0x4d, 0xa2, 0xc8, 0x73, 0x6d, 0x36, 0x5a, 0x26, 0x55, 0xd4,
	0x95, 0x5d, 0x91, 0x34, 0xeb, 0x8c, 0xe4, 0x0d, 0x4e, 0x61, 0x3e, 0x0b, 0x66, 0x14, 0x7b, 0x0e,
	0x4d, 0xf6, 0x28, 0x4d, 0xb3, 0x72, 0xa0, 0x94, 0x3b, 0x96, 0xe3, 0x65, 0xa1, 0x97, 0xe0, 0x44,
	0x7a, 0xdf, 0x4b, 0x71, 0x84, 0x31, 0x25, 0xdd, 0x24, 0x2b, 0x38, 0xaf, 0x36, 0xc8, 0x69, 0xb6,
	0x39, 0x89, 0x2c, 0xfb, 0x21, 0x78, 0x48, 0x70, 0x60, 0x9a, 0xed, 0x72, 0x1b, 0xb9, 0xd4, 0x73,
	0x57, 0x17, 0x94, 0xe2, 0x27, 0x39, 0x59, 0x41, 0x16, 0x78, 0xc8, 0xf3, 0x92, 0x87, 0x7b, 0x71,
	0x9f, 0x1e, 0x32, 0x16, 0x5e, 0x54, 0x57, 0x4f, 0xb0, 0x30, 0x22, 0xf9, 0x39, 0x10, 0xb3, 0x75,
	0x7b, 0xf6, 0xaa, 0xed, 0xf4, 0xe2, 0xd5, 0x25, 0x85, 0x14, 0x04, 0xa2, 0xd9, 0x8b, 0xcd, 0x6b,
	0x70, 0x5c, 0x92, 0x65, 0x5b, 0x2a, 0x4e, 0x57, 0x97, 0xd5, 0xa9, 0x10, 0x04, 0x1b, 0x62, 0x53,
	0xc5, 0xa9, 0xf5, 0x26, 0x3c, 0x7a, 0x27, 0xa2, 0x31, 0x0a, 0x6a, 0x65, 0x8b, 0x30, 0x81, 0x1c,
	0x7b, 0x11, 0x8a, 0xef, 0x55, 0x98, 0xc4, 0x7d, 0x59, 0x53, 0xd6, 0x0f, 0x21, 0xe6, 0x1a, 0x4c,
	0x79, 0xee, 0x3e, 0x3d, 0xd4, 0x36, 0x04, 0x07, 0x59, 0x1f, 0x86, 0x53, 0x65, 0x15, 0x6f, 0xf8,
	0x94, 0xcd, 0x45, 0x5e, 0xb4, 0x36, 0x50, 0xd4, 0x3c, 0x01, 0xd3, 0x7d, 0xe2, 0xf7, 0x68, 0xb2,
	0x5a, 0x3f, 0x33, 0x71, 0x6e, 0xaa, 0x2d, 0x7e, 0xb1, 0xa3, 0xbe, 0xb4, 0xce, 0x64, 0x8b, 0x38,
	0xfb, 0x34, 0x35, 0xcf, 0xc0, 0x6c, 0x84, 0xff, 0x15, 0xc4, 0x6c, 0x06, 0x35, 0xcf, 0xc2, 0x7c,
	0x37, 0x61, 0x73, 0x90, 0xa4, 0xa4, 0x1b, 0x69, 0xfa, 0x8d, 0x8a, 0x30, 0xaf, 0x65, 0x3d, 0x98,
	0x40, 0xbe, 0x7f, 0xb8, 0x31, 0x64, 0x2c, 0x59, 0xff, 0x7e, 0xa6, 0x06, 0xc7, 0xc4, 0x71, 0x40,
	0x82, 0x7d, 0x2f, 0xe8, 0x6c, 0x06, 0xbb, 0xe1, 0x78, 0x67, 0xfd, 0x23, 0x30, 0x13, 0x93, 0x60,
	0x9f, 0x51, 0xa8, 0x73, 0x39, 0xcd, 0x80, 0x5c, 0xfd, 0xb9, 0xef, 0x05, 0x89, 0x26, 0x48, 0x10,
	0x82, 0xcc, 0xc1, 0x0a, 0x3a, 0x7b, 0x24, 0xe8, 0x70, 0xb1, 0x51, 0xcf, 0x98, 0x83, 0x04, 0xfb,
	0x4d, 0x84, 0x9b, 0x67, 0x61, 0x01, 0xc9, 0x98, 0x26, 0xc4, 0x1a, 0x99, 0xd6, 0x98, 0x88, 0x04,
	0xfb, 0x4c, 0x19, 0xda, 0x74, 0xad, 0xef, 0xae, 0xc1, 0x09, 0x3e, 0x84, 0x66, 0xd8, 0xed, 0xd2,
	0xc0, 0xc5, 0x31, 0xe3, 0x38, 0x9e, 0x82, 0x05, 0xa7, 0xeb, 0xda, 0xbb, 0xb1, 0x47, 0x03, 0xd7,
	0xd7, 0x17, 0x6e, 0xde, 0xe9, 0xba, 0x37, 0x05, 0x42, 0x12, 0xa6, 0x94, 0x70, 0xe9, 0x57, 0x2f,
	0x10, 0xde, 0x15, 0x08, 0x36, 0x33, 0x8c, 0xd0, 0xa7, 0xc4, 0xa5, 0xb1, 0xae, 0x92, 0x38, 0x5d,
	0xf7, 0x16, 0x82, 0xad, 0xef, 0xa8, 0x81, 0xc1, 0x7b, 0x74, 0x9b, 0xba, 0xc4, 0x4f, 0xb0, 0x2f,
	0x97, 0x61, 0xc5, 0xf5, 0x12, 0x26, 0x49, 0x6d, 0x2f, 0xa5, 0xdd, 0xc4, 0x76, 0xe9, 0xae, 0xe7,
	0x1e, 0xa0, 0x94, 0x5a, 0x6c, 0x9b, 0x02, 0xb7, 0xc9, 0x50, 0x37, 0x10, 0x63, 0x6e, 0xc0, 0xc3,
	0xbb, 0x94, 0xa4, 0x3d, 0x26, 0x63, 0xd4, 0xa2, 0xb2, 0xe4, 0xac, 0xd2, 0xfa, 0x43, 0x92, 0xf2,
	0x46, 0x5e, 0x0f, 0xaf, 0xc6, 0xfa, 0x63, 0x35, 0x58, 0x5e, 0xe7, 0xab, 0xb6, 0xce, 0x76, 0xa9,
	0x97, 0x1e, 0x32, 0xb6, 0x23, 0xe2, 0x7f, 0x5d, 0xc9, 0x94, 0x50, 0xb6, 0x7c, 0xdd, 0xd0, 0xd5,
	0xcf, 0x0d, 0x84, 0x98, 0x27, 0x60, 0xa2, 0x4b, 0x74, 0x85, 0x9a, 0x01, 0xcc, 0xd3, 0x30, 0x83,
	0x82, 0xdd, 0x73, 0x71, 0x5e, 0x26, 0xa5, 0xc2, 0x20, 0x80, 0xd6, 0x9f, 0xaf, 0xc1, 0x4a, 0x2e,
	0x59, 0x50, 0xce, 0x6f, 0xd3, 0xb4, 0x17, 0x8d, 0x56, 0x35, 0x2c, 0x00, 0xa1, 0x52, 0xd9, 0x4e,
	0xaa, 0xed, 0x80, 0x59, 0xae, 0x55, 0x35, 0xd9, 0x46, 0x9a, 0x93, 0x34, 0x29, 0xf6, 0x6d, 0x4a,
	0x55, 0xac, 0x36, 0xdd, 0xbb, 0x25, 0x67, 0xfc, 0x64, 0xd5, 0x19, 0x6f, 0xfd, 0xc2, 0x34, 0x2c,
	0x71, 0xe3, 0xe2, 0x55, 0x3f, 0xed, 0xe3, 0xfa, 0x3d, 0x01, 0xf3, 0x69, 0xdf, 0xee, 0xb9, 0x91,
	0x1d, 0x85, 0x71, 0xaa, 0x6f, 0x8a, 0xb4, 0x7f, 0xcf, 0x8d, 0xb6, 0xc2, 0x38, 0x65, 0x4c, 0x9b,
	0xf6, 0xed, 0xfb, 0x6c, 0x70, 0xb6, 0x94, 0x32, 0x72, 0x26, 0x20, 0xed, 0xbf, 0xc9, 0x10, 0xaf,
	0xd1, 0x43, 0x54, 0x03, 0xfb, 0x76, 0xe2, 0x87, 0xa9, 0xbe, 0x43, 0x66, 0xd2, 0xfe, 0x36, 0x03,
	0x32, 0x46, 0x4b, 0xfb, 0xb6, 0xe3, 0x7b, 0x34, 0x48, 0x13, 0x9d, 0xd1, 0xd2, 0x7e, 0x93, 0x83,
	0x05, 0x51, 0x14, 0x87, 0x07, 0x5e, 0xd1, 0x8a, 0x49, 0xfb, 0x5b, 0x1c, 0x8c, 0x0a, 0x69, 0x1f,
	0x4f, 0x51, 0x6d, 0x0b, 0x4d, 0xa7, 0x7d, 0x76, 0x7a, 0xea, 0x06, 0xc7, 0x6c, 0xa9, 0xc1, 0x71,
	0x1e, 0x16, 0x91, 0xa4, 0x4b, 0xa2, 0x4e, 0x1c, 0xf6, 0x22, 0x3c, 0xe3, 0xa4, 0x58, 0x5d, 0x60,
	0xa8, 0xdb, 0x02, 0xc3, 0xc6, 0x25, 0x49, 0xf1, 0x44, 0xcb, 0xd4, 0x5b, 0x41, 0xc5, 0xb4, 0xa1,
	0xb4, 0x6f, 0x77, 0x49, 0xc2, 0xec, 0x27, 0xb4, 0xf9, 0x3c, 0x17, 0x8f, 0x30, 0x39, 0x4b, 0xcb,
	0x69, 0xff, 0x36, 0x62, 0xb7, 0x39, 0x92, 0xad, 0x5b, 0xda, 0x47, 0xad, 0xdd, 0x17, 0x13, 0xa6,
	0x1e, 0x59, 0x0b, 0x69, 0x9f, 0x29, 0xed, 0x3e, 0x9f, 0xb5, 0x06, 0x18, 0x19, 0xad, 0x9c, 0x3b,
	0xed, 0x9c, 0x12, 0xd4, 0x72, 0x02, 0x55, 0x7a, 0x39, 0x8d, 0x4b, 0x25, 0xf4, 0x72, 0x2e, 0x79,
	0x5f, 0x62, 0xca, 0xb6, 0x22, 0xef, 0xcb, 0xb2, 0xde, 0x97, 0x36, 0x43, 0xa9, 0x7d, 0xe1, 0xb4,
	0xb2, 0x2f, 0x86, 0x5e, 0x37, 0x52, 0xeb, 0x7d, 0xe1, 0xf4, 0xb2, 0x2f, 0xc7, 0x4a, 0xe8, 0x65,
	0x5f, 0x54, 0x7a, 0xe2, 0xba, 0x31, 0x4d, 0x92, 0x55, 0xb3, 0x84, 0x7e, 0x9d, 0xe3, 0x98, 0x72,
	0x93, 0xd7, 0xcf, 0x58, 0xf8, 0xb8, 0x2a, 0xe4, 0x64, 0xe5, 0x8c, 0x89, 0xd5, 0x9a, 0xe5, 0x12,
	0xad, 0x28, 0x4b, 0x24, 0x6b, 0x96, 0x2b, 0xb4, 0x06, 0x53, 0xcc, 0x5a, 0x49, 0x56, 0x1f, 0x54,
	0x0f, 0x46, 0x04, 0x59, 0xdf, 0x5f, 0x83, 0xc5, 0xcd, 0x48, 0xf4, 0xe1, 0x36, 0x49, 0xf6, 0x4d,
	0x13, 0x6a, 0x44, 0xdb, 0x3e, 0x35, 0xc2, 0x60, 0x3b, 0x9a, 0xa8, 0xa9, 0xed, 0x30, 0x98, 0xa3,
	0xed, 0x8d, 0x9a, 0xc3, 0x60, 0xae, 0xb6, 0x19, 0x6a, 0x78, 0xd0, 0xec, 0x78, 0xa9, 0xce, 0xfe,
	0x08, 0x61, 0xfd, 0x4a, 0xc3, 0x7d, 0x1a, 0x68, 0x7c, 0xcf, 0x41, 0xd6, 0xc7, 0x6a, 0x70, 0xaa,
	0x79, 0x3b, 0xe9, 0x34, 0x93, 0x4e, 0x88, 0xe3, 0xb8, 0x97, 0x30, 0x96, 0x23, 0xa9, 0x38, 0x7d,
	0xae, 0x81, 0x49, 0x9d, 0xa4, 0x13, 0xe2, 0xf8, 0x7b, 0x09, 0x8d, 0x99, 0x62, 0xa9, 0x89, 0xa7,
	0x12, 0x3c, 0x6b, 0xd1, 0xa5, 0x7e, 0x4a, 0x34, 0x21, 0xc5, 0x41, 0x28, 0x73, 0x77, 0x92, 0xd0,
	0xef, 0xa5, 0xdc, 0x16, 0x9a, 0xcd, 0x64, 0xae, 0x80, 0x5a, 0x5f, 0x0f, 0x4b, 0x6f, 0x45, 0x5b,
	0x71, 0xd8, 0x61, 0x73, 0x75, 0x83, 0xa4, 0x84, 0x6d, 0xce, 0x03, 0x26, 0x70, 0x3c, 0xc6, 0x3c,
	0x9a, 0xa0, 0x3e, 0x88, 0xb6, 0x10, 0xca, 0x4e, 0xd3, 0x83, 0xc8, 0x76, 0x48, 0x4a, 0x3b, 0x61,
	0x7c, 0xa8, 0x35, 0x0c, 0x07, 0x51, 0x53, 0xc0, 0x99, 0x22, 0x72, 0x1c, 0x65, 0xee, 0x46, 0xe0,
	0xb2, 0xc3, 0xe1, 0x5e, 0xe4, 0x92, 0x94, 0x4b, 0x07, 0x3c, 0x53, 0x84, 0xec, 0x95, 0x4b, 0x3c,
	0xcd, 0x80, 0xdc, 0xd8, 0x41, 0x34, 0x49, 0xd3, 0x58, 0x9e, 0x3b, 0xea, 0x3a, 0x2d, 0x31, 0xec,
	0x7a, 0x9a, 0xc6, 0xe2, 0xcc, 0x7a, 0x01, 0x1e, 0x54, 0xe9, 0xfd, 0x94, 0xd8, 0xa8, 0x69, 0x68,
	0x0b, 0x69, 0xe6, 0x85, 0xfc, 0x94, 0xbc, 0xc1, 0xf0, 0xd6, 0xb7, 0x4d, 0xc0, 0xca, 0xb6, 0x13,
	0xc6, 0x94, 0x9f, 0xa1, 0x3b, 0x21, 0x89, 0x5d, 0x9c, 0x82, 0x47, 0x61, 0xf6, 0xed, 0x1e, 0x4d,
	0xd2, 0x62, 0x0f, 0x67, 0x10, 0xba, 0x89, 0xdc, 0x97, 0xb0, 0x82, 0xba, 0x46, 0x87, 0x20, 0xf3,
	0x16, 0x2c, 0x09, 0x85, 0x85, 0x06, 0x69, 0xec, 0x65, 0xca, 0xd1, 0x13, 0x8d, 0xb2, 0xb6, 0x1a,
	0xe2, 0x98, 0xdc, 0xe0, 0xb4, 0xed, 0x42, 0x59, 0xf3, 0x83, 0xb0, 0xc0, 0x4d, 0x17, 0x51, 0x17,
	0xb7, 0xac, 0x4f, 0x95, 0xd7, 0xc5, 0x2a, 0x39, 0x6c, 0x6b, 0x05, 0xd6, 0x5e, 0x80, 0x29, 0x04,
	0xb3, 0x33, 0x94, 0x99, 0xcd, 0xea, 0x8a, 0x32, 0x00, 0x83, 0xf7, 0x89, 0xaf, 0x8d, 0x84, 0x01,
	0xd6, 0xf6, 0x61, 0x49, 0xef, 0x9b, 0x69, 0x81, 0x54, 0xc5, 0x2a, 0x34, 0x34, 0xcf, 0x35, 0x9f,
	0x83, 0x19, 0xd9, 0xd5, 0xfa, 0xe8, 0xae, 0x4a, 0x5a, 0xeb, 0x63, 0x53, 0xb0, 0xcc, 0xd5, 0x97,
	0x0f, 0xb3, 0x29, 0xc6, 0x55, 0xb8, 0x0a, 0x26, 0xce, 0x37, 0x8d, 0xed, 0x0a, 0xcd, 0xd0, 0x10,
	0xf8, 0xf5, 0x4c, 0x41, 0xbc, 0x09, 0xcb, 0x62, 0xe5, 0x50, 0x69, 0x21, 0xb8, 0x2d, 0x58, 0x37,
	0x4e, 0x37, 0x0a, 0xd5, 0x37, 0xf0, 0x3f, 0xd4, 0x59, 0x48, 0x4a, 0xda, 0x8b, 0x6f, 0xab, 0x3f,
	0xcd, 0x17, 0xc1, 0x60, 0x9b, 0x40, 0xec, 0x0b, 0x5e, 0x11, 0x5f, 0xc6, 0xe5, 0x86, 0xbe, 0x5f,
	0xda, 0x4b, 0x07, 0xfa, 0xfe, 0x79, 0x12, 0xe6, 0xd1, 0x7c, 0x44, 0x03, 0x56, 0x97, 0x1c, 0xc0,
	0x10, 0xd8, 0x0f, 0xa6, 0x63, 0x2f, 0x74, 0xbb, 0x36, 0x3f, 0xb8, 0x98, 0xd2, 0xa3, 0x8a, 0x12,
	0xe8, 0x76, 0x5b, 0xec, 0xec, 0x62, 0xaa, 0xcf, 0x0b, 0xb0, 0x80, 0x63, 0xe9, 0xf1, 0xcd, 0xb3,
	0x3a, 0x8d, 0xbd, 0x58, 0x69, 0x94, 0x6c, 0xac, 0xf6, 0xbc, 0xa7, 0xec, 0xb2, 0x0f, 0xc1, 0x43,
	0xa1, 0xd4, 0xc6, 0xc5, 0x76, 0xb6, 0xa9, 0xef, 0x75, 0x3c, 0x66, 0x37, 0xcf, 0x28, 0xc2, 0xe0,
	0x64, 0x46, 0xc6, 0xb7, 0xf7, 0x86, 0x20, 0x62, 0x93, 0x29, 0xa5, 0x0c, 0xd7, 0x9b, 0x93, 0xd5,
	0x59, 0xa1, 0xe7, 0x0f, 0x11, 0x63, 0xed, 0x62, 0xa1, 0xb5, 0x9f, 0xac, 0xc1, 0xa2, 0x36, 0xdb,
	0xa3, 0x37, 0xd8, 0x3a, 0xac, 0x71, 0x82, 0x20, 0x8c, 0xbb, 0xec, 0xa0, 0x14, 0xfd, 0x27, 0x71,
	0x40, 0x5d, 0x4d, 0xe0, 0x9c, 0x44, 0xba, 0xd7, 0x91, 0x4c, 0xf4, 0x1f, 0x89, 0xcc, 0x0f, 0xc2,
	0x43, 0xbc, 0x8a, 0x9d, 0x30, 0xe8, 0x25, 0x85, 0x1a, 0x54, 0x6d, 0xed, 0x04, 0x92, 0x5d, 0x67,
	0x54, 0x6a, 0x05, 0xd6, 0xef, 0xd6, 0xe0, 0x61, 0x36, 0xce, 0x56, 0xd3, 0xe6, 0x7a, 0x19, 0x8e,
	0x81, 0x4f, 0x2f, 0x8e, 0xe2, 0xfd, 0xd2, 0x89, 0x61, 0xf3, 0x86, 0x90, 0x4b, 0x6a, 0x38, 0x43,
	0x46, 0x91, 0xdd, 0xda, 0xc2, 0x15, 0x98, 0xb3, 0xf7, 0x93, 0x30, 0xbf, 0xe3, 0x05, 0x24, 0x3e,
	0x94, 0x6c, 0x5a, 0x3b, 0xb7, 0x20, 0xd7, 0x9f, 0x23, 0x90, 0xac, 0xc8, 0x27, 0x13, 0x15, 0x7c,
	0xf2, 0x0a, 0x2c, 0x75, 0xbd, 0x84, 0xd9, 0xde, 0xfe, 0x4e, 0x82, 0x35, 0x32, 0xce, 0x9b, 0xbf,
	0xfa, 0x60, 0xe9, 0xfe, 0x6b, 0x17, 0x88, 0xad, 0x5f, 0xaa, 0xc1, 0x65, 0x3e, 0xd8, 0xe6, 0xb6,
	0x74, 0x98, 0xf7, 0xaf, 0xda, 0xc8, 0x65, 0x5d, 0xc2, 0xac, 0xb4, 0x56, 0xb3, 0x60, 0xdc, 0x25,
	0x63, 0x58, 0x92, 0xef, 0x87, 0x59, 0xa6, 0x7b, 0xef, 0xd3, 0x43, 0x29, 0x0f, 0xce, 0x34, 0x46,
	0x18, 0xd2, 0xed, 0xac, 0x84, 0xf9, 0x3c, 0xcc, 0xf0, 0x9a, 0x86, 0x1b, 0x98, 0xc2, 0xb0, 0x6d,
	0x4b, 0x62, 0xeb, 0xdb, 0x6b, 0xd0, 0x18, 0x35, 0x98, 0xab, 0x7c, 0x4d, 0x9b, 0x61, 0xb0, 0xeb,
	0xc5, 0xdd, 0xfc, 0xdc, 0xae, 0x0d, 0x9c, 0xdb, 0x28, 0xed, 0x33, 0x43, 0x38, 0x97, 0xf6, 0x68,
	0x02, 0x9f, 0x81, 0x59, 0x7a, 0x20, 0xac, 0xca, 0x09, 0x85, 0x93, 0x33, 0xa8, 0xf5, 0x99, 0x1a,
	0x5c, 0x2a, 0xe9, 0x4c, 0xd6, 0x83, 0x36, 0x4d, 0x68, 0xdc, 0xc7, 0x31, 0x71, 0xde, 0x32, 0x5f,
	0x82, 0x13, 0x7d, 0x8f, 0xde, 0xa7, 0x71, 0x62, 0xd3, 0x83, 0x94, 0xc6, 0x01, 0xf1, 0xed, 0x34,
	0x4c, 0x89, 0xaf, 0x75, 0x6e, 0x45, 0xd0, 0x6c, 0x08, 0x92, 0xbb, 0x8c, 0xa2, 0xb4, 0x2c, 0xea,
	0x0b, 0x5a, 0xe7, 0x8b, 0x65, 0x71, 0x1b, 0x5b, 0x3f, 0x5a, 0x87, 0xc7, 0x87, 0x4f, 0x1b, 0x77,
	0x87, 0x3e, 0x0a, 0xf3, 0xb9, 0x40, 0x4e, 0x90, 0xe3, 0x17, 0xdb, 0x90, 0x59, 0xe9, 0x89, 0xae,
	0xdf, 0xd7, 0x4b, 0xf5, 0x7b, 0x94, 0x92, 0x6c, 0xb5, 0xa4, 0x6c, 0x55, 0x9c, 0xdd, 0x1c, 0x81,
	0xdc, 0xff, 0x34, 0x2c, 0x71, 0x3d, 0x36, 0x73, 0x3d, 0xa9, 0xf2, 0x74, 0x91, 0xe3, 0x72, 0x9f,
	0x93, 0xa1, 0x38, 0x9b, 0xf0, 0x14, 0x44, 0xb1, 0xca, 0x36, 0x41, 0x99, 0x15, 0xd8, 0x5e, 0x4e,
	0x75, 0x28, 0x7a, 0xff, 0x63, 0x26, 0xbc, 0xc3, 0xc0, 0x3f, 0x44, 0x15, 0x6e, 0x36, 0xf3, 0xfe,
	0x33, 0xf8, 0x9d, 0xc0, 0x3f, 0xb4, 0x6e, 0x80, 0x35, 0x6a, 0x96, 0x42, 0x34, 0x4d, 0xc9, 0x0e,
	0x09, 0xdc, 0x30, 0xd0, 0x0d, 0x4c, 0x01, 0xb4, 0x3e, 0x57, 0x87, 0x67, 0x86, 0x57, 0xc3, 0x95,
	0xf4, 0xab, 0x4a, 0xc0, 0xe9, 0x45, 0x58, 0x66, 0x13, 0xc8, 0xfd, 0x9c, 0x91, 0x17, 0x74, 0x12,
	0x21, 0x6e, 0x96, 0x1b, 0x7a, 0x68, 0xaa, 0x5d, 0xa4, 0x33, 0x9f, 0x82, 0x85, 0x70, 0x77, 0x37,
	0xa1, 0xa9, 0xed, 0x05, 0x2e, 0x3d, 0xd0, 0x7d, 0x3a, 0x1c, 0xb3, 0xc9, 0x10, 0x6c, 0x61, 0x76,
	0x3d, 0xc6, 0x35, 0x3b, 0x38, 0x7f, 0xaa, 0xa0, 0x04, 0x44, 0x5c, 0xc7, 0x99, 0x7a, 0x19, 0x8e,
	0xa9, 0x51, 0x29, 0xde, 0x99, 0x49, 0xd1, 0x19, 0x3d, 0x82, 0xd5, 0x5e, 0x76, 0xb5, 0xdf, 0x09,
	0x13, 0xff, 0x5d, 0x72, 0x80, 0x85, 0xb4, 0x73, 0x6f, 0xa6, 0x4b, 0x0e, 0xb6, 0x84, 0xcb, 0x23,
	0x65, 0x12, 0x35, 0x57, 0xa5, 0x67, 0x32, 0x23, 0x93, 0x26, 0xe9, 0x5d, 0x54, 0xa7, 0x3f, 0x3e,
	0x57, 0xba, 0xb1, 0xf4, 0x5d, 0xce, 0x27, 0x51, 0x6c, 0xac, 0xb3, 0x30, 0xdf, 0xcd, 0xb1, 0xda,
	0xba, 0xa8, 0x08, 0xf3, 0x15, 0x38, 0x75, 0x9f, 0x78, 0xa9, 0x17, 0x74, 0x14, 0xcd, 0xc3, 0x4e,
	0x28, 0x4a, 0x4c, 0x2e, 0xc8, 0x16, 0xdb, 0xab, 0x82, 0x24, 0x53, 0x3e, 0xb6, 0x05, 0x9e, 0xc9,
	0x0b, 0x1a, 0xc7, 0x61, 0xac, 0x71, 0x35, 0x07, 0x99, 0x2d, 0x38, 0x23, 0xbc, 0xce, 0xd8, 0x60,
	0x69, 0xfd, 0xd3, 0x58, 0xff, 0x23, 0x2a, 0xdd, 0x60, 0x23, 0xd7, 0x60, 0xa1, 0x83, 0xfe, 0x7a,
	0x74, 0x3f, 0x27, 0x78, 0xa2, 0xcf, 0x5f, 0x3d, 0xd6, 0x28, 0x3a, 0xf1, 0xdb, 0xf3, 0x9d, 0x0c,
	0xc2, 0xd4, 0xc9, 0x87, 0x77, 0x89, 0xe7, 0x47, 0x55, 0x43, 0x9b, 0xc5, 0xa6, 0x1f, 0x92, 0x34,
	0x83, 0xcd, 0xbe, 0x02, 0xa7, 0x22, 0x1a, 0x10, 0x3f, 0x3d, 0x2c, 0x2d, 0x3f, 0xc7, 0xa7, 0x46,
	0x90, 0x0c, 0x16, 0x5f, 0x87, 0x47, 0x58, 0xdd, 0x31, 0x25, 0x6e, 0x79, 0x05, 0x80, 0x15, 0xac,
	0x65, 0x44, 0xa5, 0x55, 0xf4, 0x89, 0xb3, 0x43, 0x82, 0x80, 0xba, 0xa5, 0x55, 0xcc, 0xf3, 0x2a,
	0x32, 0xa2, 0xc1, 0x2a, 0xae, 0xc3, 0x83, 0x7c, 0x6f, 0xd8, 0x5e, 0x24, 0xcc, 0x58, 0xbb, 0x4b,
	0x92, 0x7d, 0xb4, 0xf2, 0xe7, 0xaf, 0x2e, 0x35, 0x34, 0xeb, 0xb1, 0x7d, 0x9c, 0x13, 0x6f, 0x4a,
	0x5a, 0x34, 0x29, 0x37, 0x61, 0x2a, 0x08, 0x99, 0x42, 0xb6, 0x88, 0x4c, 0xff, 0x6c, 0xe3, 0x48,
	0xac, 0xd8, 0x78, 0x3d, 0x4c, 0x69, 0x9b, 0xd7, 0x60, 0xbe, 0x0a, 0x8f, 0x0d, 0x99, 0x53, 0xbb,
	0x13, 0x53, 0x1a, 0xac, 0x2e, 0x71, 0xa6, 0xa8, 0x9a, 0xd9, 0x16, 0x23, 0x32, 0x5f, 0x81, 0x35,
	0x2f, 0x48, 0x7a, 0xbb, 0xbb, 0x9e, 0xc3, 0xda, 0xf2, 0x69, 0x9f, 0xfa, 0xf9, 0xc4, 0x2c, 0xf3,
	0xc5, 0x1d, 0xa0, 0xc8, 0xe6, 0xe5, 0x83, 0xf0, 0x70, 0x3f, 0x09, 0x9c, 0x3d, 0xea, 0xec, 0x97,
	0xce, 0xac, 0xc1, 0x2b, 0x90, 0x34, 0x83, 0x13, 0xfb, 0x7e, 0x58, 0xf3, 0x49, 0x8f, 0x61, 0x63,
	0xbb, 0xeb, 0x25, 0x9c, 0xc5, 0xb3, 0xe2, 0xc7, 0x38, 0x73, 0x48, 0x8a, 0xdb, 0x82, 0x40, 0x6d,
	0xde, 0x0b, 0x12, 0xea, 0xf4, 0x62, 0x5a, 0xda, 0xbc, 0x99, 0xf5, 0x1f, 0x69, 0x06, 0x9a, 0x5f,
	0xfb, 0xe3, 0x35, 0x98, 0x64, 0x13, 0xcb, 0xec, 0xf3, 0x2c, 0x98, 0x9d, 0x45, 0xe6, 0x19, 0x84,
	0x1d, 0x4d, 0x31, 0xed, 0x88, 0x88, 0x98, 0xe6, 0xd6, 0xe3, 0x60, 0x1e, 0x2e, 0x15, 0x24, 0x7c,
	0x07, 0x4b, 0x47, 0xf1, 0x0c, 0x87, 0xb6, 0xd9, 0x99, 0xef, 0x7a, 0x3c, 0x60, 0xaf, 0x79, 0x92,
	0x33, 0xa8, 0xf5, 0x89, 0x49, 0x38, 0xd7, 0x64, 0x52, 0xb0, 0xc0, 0x10, 0x85, 0x53, 0xe8, 0x46,
	0x4c, 0x76, 0xc7, 0x08, 0x7b, 0x0e, 0x7a, 0x11, 0xeb, 0x95, 0x91, 0x42, 0xc5, 0x27, 0x79, 0xb9,
	0xcc, 0x27, 0x79, 0x59, 0xa5, 0xb8, 0xa2, 0xb9, 0x23, 0x05, 0xc5, 0x15, 0x26, 0x7d, 0xbb, 0x24,
	0x4a, 0x6c, 0x9c, 0x5e, 0x14, 0xd0, 0x92, 0x64, 0x8e, 0xc1, 0x9b, 0x0c, 0xcc, 0x0e, 0x14, 0x4e,
	0xd4, 0x8b, 0x63, 0x1a, 0xa4, 0x7a, 0x9c, 0x13, 0xc9, 0x38, 0x02, 0x7d, 0x40, 0xa2, 0x3d, 0x1e,
	0x6a, 0x51, 0xc3, 0x9c, 0xf3, 0xbc, 0x4d, 0xae, 0x57, 0x28, 0x94, 0x7d, 0x9a, 0x86, 0x57, 0xd0,
	0x35, 0x58, 0xa0, 0x7c, 0x83, 0x21, 0x54, 0xca, 0xc8, 0x73, 0xf6, 0x79, 0x04, 0xac, 0x40, 0xb9,
	0xc5, 0x10, 0x66, 0x0b, 0xa6, 0x5d, 0x36, 0xcb, 0x5c, 0xb2, 0xcc, 0x5f, 0x7d, 0xa6, 0x31, 0xee,
	0xba, 0x08, 0x13, 0x55, 0x14, 0x5f, 0x6b, 0x49, 0x3b, 0x7a, 0x0d, 0xa6, 0xba, 0x24, 0x2a, 0xac,
	0x15, 0x07, 0x8d, 0xe3, 0x35, 0xb6, 0xbe, 0x52, 0x87, 0x63, 0xcd, 0xad, 0x98, 0x62, 0x4b, 0x9b,
	0xc1, 0x6e, 0x88, 0x8a, 0xce, 0x25, 0x58, 0x8e, 0x62, 0xea, 0x7a, 0x18, 0x8f, 0x4d, 0xec, 0xc8,
	0xd1, 0x1d, 0x3f, 0x4b, 0x0a, 0x72, 0xcb, 0x49, 0xcd, 0x0f, 0xc2, 0x14, 0xf6, 0x4b, 0x28, 0xf9,
	0xe7, 0xc7, 0x1e, 0x55, 0x9b, 0x97, 0x33, 0xaf, 0xa2, 0x4e, 0x9b, 0x4a, 0x87, 0xc2, 0xc3, 0x8d,
	0x81, 0x2e, 0x35, 0xee, 0x52, 0xd2, 0xc5, 0x53, 0xa3, 0xcd, 0x49, 0x4d, 0x53, 0x84, 0x57, 0xa6,
	0x31, 0xdc, 0x84, 0xff, 0xaf, 0x7d, 0x6f, 0x0d, 0xe6, 0x32, 0x42, 0xf3, 0x32, 0x1c, 0xe3, 0x7b,
	0xde, 0x0b, 0x76, 0x43, 0xdb, 0x73, 0x0f, 0xd2, 0x03, 0x7d, 0x1c, 0xcb, 0x5d, 0xd9, 0xc4, 0x26,
	0x22, 0x19, 0x6f, 0x2b, 0x25, 0x18, 0xb9, 0x1a, 0xd7, 0x5f, 0xc8, 0xc8, 0xef, 0x1e, 0x30, 0xfe,
	0x30, 0x54, 0x5a, 0x4a, 0xba, 0xdc, 0x2e, 0x98, 0x6b, 0x2f, 0xe5, 0x74, 0x0c, 0x6a, 0xfd, 0xde,
	0xf4, 0xd8, 0x06, 0x00, 0x57, 0xbf, 0xe9, 0x7b, 0xa2, 0xd4, 0xa2, 0x5e, 0x83, 0x1d, 0x74, 0x35,
	0x63, 0x80, 0xc7, 0x23, 0x36, 0xdd, 0x3c, 0x46, 0x5e, 0xae, 0xce, 0x72, 0x9c, 0x54, 0x67, 0x33,
	0x17, 0xa7, 0x39, 0xe0, 0xe2, 0x34, 0x1b, 0x30, 0x1b, 0xf3, 0xe0, 0x99, 0x5c, 0x41, 0xb3, 0x31,
	0x10, 0x53, 0x6b, 0x67, 0x34, 0xac, 0x61, 0x1a, 0x38, 0xf1, 0x21, 0x5a, 0x58, 0x18, 0x25, 0x98,
	0x56, 0xfa, 0xb7, 0x98, 0xe3, 0x5e, 0xa3, 0x87, 0xe6, 0x55, 0x30, 0x75, 0x62, 0x3b, 0xea, 0xed,
	0xe0, 0xb6, 0x95, 0x05, 0x0c, 0xad, 0xc0, 0x56, 0x6f, 0xc7, 0x3c, 0x05, 0x73, 0x11, 0x89, 0xd3,
	0x43, 0x9c, 0x3c, 0xae, 0x45, 0xcc, 0x22, 0x80, 0x4d, 0xdd, 0x45, 0x98, 0xbb, 0xbf, 0xe7, 0xa5,
	0xd4, 0xf7, 0x92, 0x14, 0x55, 0x84, 0xc1, 0x33, 0x36, 0x27, 0x28, 0x77, 0xd7, 0xc3, 0x30, 0x77,
	0xfd, 0xcb, 0x9a, 0xe2, 0x8f, 0xf2, 0x10, 0xfd, 0xfb, 0xcc, 0x0e, 0x2f, 0x04, 0x96, 0x55, 0x9d,
	0x9f, 0x67, 0x9d, 0xbc, 0xa4, 0x15, 0xe6, 0x5c, 0xb5, 0x20, 0x14, 0x59, 0x3d, 0xcf, 0x46, 0x2d,
	0x8b, 0x7c, 0x66, 0x36, 0xe1, 0xb4, 0x52, 0xd6, 0xc1, 0x4e, 0x25, 0xb6, 0xca, 0x47, 0x8b, 0x38,
	0x15, 0xa7, 0x72, 0xaa, 0x26, 0x27, 0x5a, 0xcf, 0x19, 0xab, 0xcc, 0xf5, 0xbd, 0x34, 0xc4, 0xf5,
	0xfd, 0x3e, 0x60, 0xd2, 0x80, 0xdb, 0x37, 0xdc, 0x7a, 0x5a, 0xc6, 0xb1, 0x9a, 0x83, 0x7b, 0xb8,
	0xbd, 0x10, 0x09, 0x08, 0x0a, 0x99, 0x8a, 0xd8, 0xb7, 0x31, 0x34, 0xf6, 0x2d, 0xc3, 0x42, 0x61,
	0x90, 0xc6, 0xa1, 0xaf, 0x85, 0x07, 0xe6, 0xd2, 0x7e, 0x93, 0x83, 0xad, 0x4f, 0xce, 0xc0, 0x0b,
	0x23, 0xac, 0xa2, 0xa2, 0xb5, 0xdb, 0xa6, 0x49, 0x14, 0x06, 0x09, 0x35, 0x2f, 0xc0, 0x62, 0x9c,
	0x83, 0x0b, 0x2e, 0x21, 0x1d, 0x65, 0x7e, 0x18, 0xe6, 0x15, 0x00, 0xee, 0x43, 0x14, 0xea, 0x47,
	0xda, 0xec, 0x6d, 0xb5, 0x0e, 0x35, 0xb8, 0x38, 0xa7, 0x06, 0x17, 0xaf, 0xc1, 0xf1, 0x8e, 0x63,
	0x2b, 0x94, 0x76, 0xc2, 0x18, 0x4b, 0x0d, 0x34, 0x1e, 0xeb, 0x38, 0xca, 0x80, 0xb6, 0x19, 0x3b,
	0x0d, 0x6e, 0xf1, 0xa9, 0xea, 0x2d, 0x7e, 0x0e, 0xe3, 0x64, 0x4c, 0x9c, 0xe1, 0x7e, 0x64, 0x2c,
	0xa7, 0x87, 0x00, 0xdb, 0xd3, 0x22, 0x14, 0x78, 0x0d, 0x4e, 0xc4, 0xf4, 0x3e, 0x89, 0x5d, 0x5b,
	0xb8, 0x9c, 0x04, 0x93, 0x25, 0x22, 0x98, 0xbb, 0xc2, 0xb1, 0x5c, 0x06, 0x08, 0xe6, 0x62, 0xf2,
	0x78, 0xc5, 0x73, 0x7d, 0x3a, 0x50, 0x86, 0x6f, 0x50, 0x93, 0xe1, 0x0a, 0x25, 0xde, 0x0f, 0xab,
	0xa2, 0x1d, 0xcd, 0x07, 0xcf, 0x64, 0x79, 0x31, 0xcd, 0x84, 0x51, 0x6d, 0xe6, 0xae, 0xf8, 0x4d,
	0xf7, 0xc0, 0x7c, 0x31, 0xeb, 0x65, 0x5e, 0x9a, 0xfb, 0xe2, 0xd5, 0x54, 0x93, 0xe3, 0x7a, 0x59,
	0x74, 0xc6, 0x9b, 0xd7, 0xe1, 0xd4, 0x40, 0x51, 0x09, 0x70, 0x0f, 0xb4, 0x8c, 0x93, 0x93, 0x7a,
	0xf9, 0x36, 0xff, 0xe5, 0x1e, 0xb0, 0x9d, 0x24, 0x8a, 0xb8, 0x71, 0x18, 0xd9, 0x28, 0x6e, 0xd4,
	0xc0, 0xdd, 0x12, 0xc7, 0xde, 0x88, 0xc3, 0xe8, 0x16, 0x93, 0x34, 0x4f, 0xc3, 0x92, 0xba, 0xf5,
	0x49, 0x07, 0x03, 0x77, 0x92, 0x09, 0x16, 0x95, 0xdd, 0x4e, 0x3a, 0xe6, 0x87, 0xe0, 0x21, 0x9f,
	0x76, 0x88, 0x23, 0x36, 0x29, 0xdb, 0x78, 0x9d, 0x98, 0x74, 0x79, 0x5c, 0x4b, 0x0d, 0xe0, 0x9d,
	0xe4, 0x64, 0xdb, 0x2a, 0x15, 0xc6, 0xb8, 0x5e, 0x84, 0x07, 0xf5, 0xa2, 0x71, 0xd8, 0x63, 0x16,
	0xa4, 0xb6, 0xa7, 0x56, 0x34, 0x92, 0x36, 0xa7, 0x28, 0x18, 0xc4, 0xcb, 0xa5, 0x06, 0x71, 0x7e,
	0x60, 0x18, 0x83, 0x31, 0xb1, 0xaf, 0xd5, 0x61, 0x5c, 0x0b, 0x45, 0x9e, 0x88, 0x67, 0x60, 0x96,
	0x73, 0x6b, 0x61, 0x47, 0x66, 0x50, 0xa6, 0x86, 0xb9, 0x5e, 0x4c, 0x9d, 0x14, 0x63, 0xd4, 0x9e,
	0xee, 0x20, 0x9b, 0xe7, 0xa8, 0x7b, 0x6e, 0xb4, 0x19, 0x99, 0x17, 0x61, 0x59, 0xa1, 0xc4, 0x29,
	0x53, 0x1d, 0x99, 0x8b, 0x19, 0x2d, 0x4e, 0xd4, 0x80, 0x40, 0x98, 0x1c, 0x5b, 0x20, 0x4c, 0xbd,
	0x77, 0x02, 0x61, 0xba, 0x28, 0x10, 0xf2, 0xad, 0x2d, 0x63, 0x9f, 0x6a, 0x8e, 0xa6, 0xd8, 0xda,
	0xe2, 0x50, 0xb3, 0xfe, 0xd7, 0xec, 0xa8, 0x09, 0x17, 0x3d, 0x08, 0x7b, 0x81, 0xcb, 0xb5, 0xa7,
	0xff, 0x4f, 0xe5, 0xe0, 0x1a, 0x4c, 0xc5, 0xac, 0x93, 0x9a, 0xb1, 0xc0, 0x41, 0xe6, 0x0a, 0x4c,
	0xed, 0x7b, 0xbe, 0xcf, 0x95, 0x90, 0xa9, 0x36, 0xff, 0x61, 0xae, 0xc2, 0x0c, 0x49, 0x12, 0x2f,
	0x49, 0xa5, 0xae, 0x28, 0x7f, 0x9a, 0x27, 0x60, 0xda, 0xa5, 0x24, 0xdd, 0xe3, 0x62, 0x6b, 0xaa,
	0x2d, 0x7e, 0x31, 0x38, 0x46, 0xcf, 0xb8, 0x68, 0x9a, 0x6a, 0x8b, 0x5f, 0xac, 0x7e, 0xee, 0x5a,
	0x9a, 0xe3, 0xf5, 0x67, 0xce, 0x2c, 0x6c, 0x9e, 0x09, 0xe7, 0x9e, 0x9f, 0xa2, 0x70, 0xc9, 0xb4,
	0x7f, 0xc4, 0xb4, 0x11, 0xc1, 0x8d, 0x14, 0x76, 0x4c, 0x0a, 0xc2, 0xf9, 0x01, 0x8f, 0x8f, 0x20,
	0x7c, 0x14, 0xd0, 0x6a, 0xb0, 0x45, 0x27, 0x16, 0xb0, 0x35, 0xd4, 0xe5, 0xb7, 0x79, 0x47, 0x36,
	0x61, 0xc6, 0xe1, 0xae, 0x62, 0x94, 0x11, 0x47, 0x98, 0x6b, 0xe1, 0x61, 0x6e, 0xcb, 0xf2, 0xe6,
	0x15, 0x38, 0xa6, 0x1d, 0x2a, 0xcc, 0x72, 0x43, 0x01, 0x22, 0x7b, 0x66, 0x28, 0x68, 0xb4, 0xeb,
	0x18, 0xe7, 0x89, 0xe3, 0xbe, 0xc7, 0xbd, 0xdf, 0x28, 0x02, 0x24, 0xfd, 0x22, 0xe2, 0x6e, 0x08,
	0x14, 0x1b, 0x0b, 0x0d, 0x68, 0xf7, 0xd0, 0xe6, 0x2b, 0x63, 0xf0, 0xb1, 0x20, 0xe8, 0x35, 0x5c,
	0x9e, 0xa7, 0x60, 0x99, 0x13, 0xec, 0x51, 0xe2, 0x26, 0x7b, 0x61, 0xca, 0x4d, 0xf3, 0xa9, 0xf6,
	0x12, 0x82, 0x5f, 0x95, 0x50, 0xa6, 0xd4, 0x71, 0xc2, 0x67, 0xf7, 0xb9, 0xf5, 0x3d, 0xd5, 0x9e,
	0x45, 0xc0, 0xb3, 0xfb, 0x0a, 0xf2, 0xda, 0x7e, 0xb2, 0x7a, 0x5c, 0x41, 0x5e, 0x53, 0x91, 0xcf,
	0xed, 0x27, 0xab, 0x2b, 0x0a, 0xf2, 0xb9, 0x7d, 0xb4, 0x23, 0xba, 0xfd, 0x28, 0x59, 0x7d, 0x90,
	0xdb, 0x11, 0xec, 0x7f, 0xf3, 0x19, 0x30, 0x92, 0x88, 0x3a, 0x29, 0x49, 0xc3, 0x58, 0x5a, 0x9e,
	0x27, 0xd4, 0x84, 0xd5, 0x1c, 0xcb, 0xed, 0xcf, 0x6b, 0x70, 0xbc, 0x58, 0xc0, 0x4e, 0xfb, 0xab,
	0x27, 0x55, 0x5d, 0xa6, 0x50, 0xe6, 0x6e, 0xdf, 0x7c, 0x1e, 0x56, 0x06, 0x4a, 0xf9, 0xc1, 0xfe,
	0xea, 0xaa, 0x1a, 0x2a, 0x2e, 0x14, 0xbb, 0x15, 0xec, 0x9b, 0x67, 0xe5, 0x94, 0xe1, 0x9c, 0xda,
	0xa4, 0xd3, 0x59, 0x7d, 0x08, 0x7b, 0xbf, 0x98, 0xcf, 0xeb, 0x7a, 0xa7, 0x63, 0xde, 0x83, 0x39,
	0x3c, 0x7a, 0xf0, 0x48, 0x5f, 0x43, 0x46, 0x79, 0xdf, 0x11, 0xc5, 0x40, 0x83, 0x1d, 0x4f, 0x5c,
	0x7d, 0x77, 0xc5, 0x7f, 0x6b, 0x57, 0x60, 0x56, 0x42, 0xcd, 0x27, 0x73, 0x43, 0xa5, 0xdb, 0x8f,
	0xb4, 0x90, 0x80, 0x34, 0x57, 0x6e, 0xf7, 0x23, 0xeb, 0x9d, 0x09, 0xb8, 0x38, 0x4e, 0xc3, 0x32,
	0x8e, 0x68, 0x6e, 0x48, 0x8b, 0xb0, 0x36, 0x16, 0x7f, 0x17, 0xbb, 0x2d, 0x8d, 0x44, 0x65, 0xa3,
	0x4c, 0xfc, 0x01, 0x37, 0xca, 0x69, 0x98, 0x89, 0x29, 0x77, 0xe3, 0x6b, 0xd9, 0x5d, 0x02, 0x88,
	0x62, 0x80, 0x62, 0x8a, 0x1a, 0x3f, 0x16, 0x55, 0x45, 0x6b, 0x9e, 0x63, 0xf8, 0xc1, 0x78, 0x99,
	0xed, 0xb8, 0x88, 0x27, 0xc5, 0xf4, 0x12, 0x71, 0x8b, 0x42, 0x4d, 0xd0, 0x58, 0xe6, 0xe8, 0x26,
	0xc7, 0x6e, 0xba, 0xe6, 0x79, 0x58, 0x24, 0x3b, 0x61, 0x9c, 0x52, 0x57, 0xc4, 0x11, 0xd4, 0x80,
	0xe9, 0x82, 0x40, 0xf1, 0x98, 0xc1, 0xeb, 0xb0, 0xc2, 0xf7, 0x26, 0x0d, 0x5c, 0x35, 0x10, 0x38,
	0x8b, 0xa3, 0x7f, 0xa4, 0x31, 0x2c, 0x84, 0xd8, 0xe6, 0xe6, 0xf2, 0x46, 0xe0, 0xe6, 0x71, 0xc1,
	0x41, 0x05, 0x72, 0xae, 0x52, 0x81, 0xb4, 0xbe, 0x7d, 0x02, 0x9e, 0x3d, 0xca, 0x2a, 0x6f, 0x91,
	0x38, 0xf5, 0x88, 0xff, 0xff, 0xfa, 0xa8, 0x79, 0x0f, 0x99, 0xe4, 0x1b, 0xe0, 0x94, 0x13, 0x76,
	0x23, 0x9f, 0xb2, 0xb5, 0x1a, 0x0c, 0xc7, 0x4e, 0x8e, 0xb3, 0x0a, 0xab, 0x59, 0x0d, 0xc5, 0x1c,
	0x84, 0xa3, 0x68, 0xf3, 0x56, 0x63, 0xd4, 0x8e, 0x13, 0x11, 0x9d, 0x56, 0xf3, 0x55, 0xea, 0xfb,
	0xa1, 0xf5, 0xed, 0xb3, 0xa3, 0x0a, 0x64, 0x3a, 0x19, 0x16, 0x18, 0x2f, 0x47, 0x76, 0x1b, 0x16,
	0xd4, 0xc8, 0xc1, 0xf8, 0xeb, 0xa5, 0x69, 0x7f, 0x6d, 0xad, 0x92, 0x81, 0x68, 0xc3, 0xc4, 0x58,
	0xd1, 0x86, 0x4b, 0xb0, 0x2c, 0x1d, 0xdb, 0x09, 0x75, 0xc2, 0xc0, 0xd5, 0xb3, 0x0a, 0x97, 0x04,
	0x72, 0x9b, 0xe3, 0xf0, 0xba, 0x81, 0x20, 0x8f, 0x29, 0x49, 0x8a, 0x93, 0x2d, 0x70, 0x6d, 0x44,
	0xb1, 0xb9, 0xe8, 0x13, 0xc7, 0xe6, 0x2e, 0x7e, 0xcd, 0xfb, 0x38, 0xd7, 0x27, 0xce, 0x75, 0x04,
	0x9b, 0x17, 0x79, 0xbe, 0x30, 0xd3, 0xb1, 0x67, 0x84, 0x8d, 0x3c, 0xe8, 0x25, 0x91, 0x24, 0xe6,
	0xcb, 0xb0, 0xe0, 0x28, 0xe9, 0xbc, 0x62, 0x07, 0x9f, 0x6c, 0x94, 0x67, 0xfa, 0xb6, 0x35, 0x62,
	0xf3, 0x3c, 0x4c, 0x77, 0x31, 0xf3, 0x16, 0xb7, 0x2b, 0x9b, 0x9b, 0x62, 0x3a, 0x6e, 0x5b, 0x10,
	0x98, 0x2f, 0x81, 0xd1, 0x3d, 0x94, 0x8e, 0x53, 0xe1, 0xae, 0x80, 0x0a, 0x77, 0xc5, 0x52, 0xf7,
	0x50, 0x38, 0x52, 0xb9, 0xb7, 0xe2, 0x06, 0x9c, 0x28, 0x96, 0x15, 0x3e, 0x8b, 0xf9, 0x72, 0x9f,
	0xc5, 0x71, 0xbd, 0x02, 0xee, 0xb7, 0x78, 0x01, 0x96, 0x95, 0x5a, 0x30, 0x3c, 0xbc, 0x20, 0xec,
	0xcf, 0x42, 0xf1, 0xc5, 0xac, 0x38, 0xde, 0x34, 0x6a, 0xc1, 0xc9, 0x81, 0xe6, 0x51, 0x81, 0x91,
	0x71, 0x90, 0xc1, 0x11, 0xac, 0xe8, 0x1d, 0x40, 0x85, 0x06, 0x53, 0xc8, 0x44, 0x5a, 0x7f, 0x3f,
	0x4c, 0xa9, 0x9e, 0xad, 0xcf, 0x11, 0x6f, 0x84, 0x29, 0x35, 0x2f, 0x2a, 0x49, 0xc3, 0xcb, 0x62,
	0x8a, 0x0a, 0x89, 0xc5, 0x4a, 0x02, 0xf1, 0x53, 0xb0, 0x20, 0x2f, 0x5c, 0xd1, 0x3e, 0xe5, 0xbe,
	0x8a, 0x4c, 0xdd, 0x13, 0xb7, 0xad, 0x18, 0x82, 0x19, 0x2e, 0x82, 0xd0, 0xe9, 0xc5, 0xf6, 0x41,
	0x84, 0x2e, 0xb6, 0x02, 0x65, 0xb3, 0x17, 0xbf, 0x15, 0x99, 0x2f, 0xc0, 0x83, 0x82, 0xf2, 0x20,
	0x12, 0x99, 0x24, 0xdc, 0xc6, 0x3a, 0xae, 0xa6, 0xe5, 0x71, 0x92, 0xb7, 0x22, 0x4c, 0x22, 0xb9,
	0x39, 0xe0, 0xa1, 0x5b, 0x19, 0xed, 0xa1, 0xb3, 0x7e, 0xa3, 0x06, 0xe7, 0x4b, 0xb6, 0xa8, 0x18,
	0xec, 0x56, 0xec, 0xf5, 0x99, 0x4d, 0x49, 0xd3, 0x14, 0x35, 0xe0, 0xd7, 0x99, 0x6d, 0xc6, 0xff,
	0x17, 0x21, 0xe0, 0xab, 0x8d, 0xb1, 0x4b, 0x37, 0xc4, 0x3f, 0xed, 0xac, 0x8e, 0xb5, 0x3f, 0x0c,
	0x33, 0x02, 0xc8, 0x26, 0x51, 0x80, 0x07, 0x2f, 0x04, 0xce, 0x0b, 0x8c, 0x4c, 0xd1, 0x95, 0x84,
	0xdc, 0xc6, 0x57, 0xad, 0x3f, 0x59, 0x07, 0xcf, 0xb4, 0xfb, 0x8e, 0xf1, 0xad, 0xcf, 0x75, 0x1e,
	0x1f, 0x1f, 0x4f, 0xd6, 0xbd, 0x05, 0xcb, 0x22, 0x9e, 0x9e, 0x1d, 0xd4, 0xef, 0x52, 0xdc, 0x2d,
	0x65, 0xf5, 0xf0, 0x53, 0xbd, 0x44, 0x74, 0x4d, 0x1c, 0x49, 0x74, 0x4d, 0x56, 0x8a, 0x2e, 0xeb,
	0xf3, 0x35, 0x78, 0x7a, 0x9c, 0x43, 0xfb, 0x6a, 0xab, 0xf9, 0x9a, 0xe7, 0xec, 0x8f, 0x37, 0x15,
	0xff, 0x07, 0x4e, 0xe9, 0x87, 0x61, 0x5a, 0x0c, 0x66, 0x42, 0xbb, 0x6c, 0xc1, 0x47, 0xf1, 0x47,
	0x6b, 0x70, 0x65, 0xdc, 0xda, 0x49, 0xb0, 0x2f, 0x42, 0xf0, 0xea, 0xb6, 0xa8, 0x8d, 0xe1, 0xb8,
	0x56, 0x5d, 0xea, 0xf5, 0x12, 0x97, 0xba, 0xf5, 0x26, 0x3c, 0x59, 0xd2, 0x0b, 0xbe, 0xb8, 0xad,
	0xe6, 0xbb, 0x6f, 0xd9, 0xb2, 0x47, 0x69, 0x56, 0x3c, 0x15, 0x29, 0x64, 0xcb, 0x74, 0xdd, 0x0f,
	0x3b, 0xa2, 0x99, 0x81, 0xfb, 0x5c, 0xb5, 0x8a, 0xfb, 0x5c, 0xd6, 0x97, 0x6b, 0xa5, 0x2d, 0xf0,
	0x29, 0x7b, 0x3d, 0x4c, 0xbd, 0x5d, 0x8f, 0xdf, 0x0c, 0xbd, 0x19, 0xc6, 0xf7, 0x12, 0x1a, 0x6f,
	0x71, 0x26, 0x1a, 0x8f, 0x1d, 0xf2, 0xb5, 0xab, 0x0f, 0xae, 0x1d, 0xd3, 0xac, 0xcb, 0xb8, 0x5a,
	0x02, 0xcd, 0x97, 0xe1, 0x04, 0x3b, 0xdc, 0x7a, 0x81, 0xe8, 0x81, 0xed, 0x84, 0xa1, 0xef, 0x86,
	0xf7, 0x39, 0x5b, 0x4b, 0x3d, 0xf8, 0x41, 0x8d, 0xa6, 0x29, 0x48, 0xac, 0x1f, 0x98, 0x18, 0xb2,
	0x24, 0x6d, 0x1a, 0x85, 0xf1, 0x91, 0xee, 0xf7, 0x3e, 0x0e, 0x10, 0x47, 0xa9, 0x4d, 0xbc, 0xee,
	0x4e, 0x98, 0x6a, 0xa3, 0x99, 0x8b, 0xa3, 0x74, 0x1d, 0xc1, 0x68, 0x0a, 0x44, 0xa9, 0x7d, 0x9f,
	0xf8, 0xfe, 0x1e, 0x71, 0xf6, 0xb5, 0x51, 0xcd, 0xc7, 0x51, 0xfa, 0xa6, 0x40, 0x30, 0xa1, 0xc5,
	0x08, 0x93, 0x88, 0x52, 0x17, 0x29, 0xd5, 0x7d, 0xca, 0xea, 0xd8, 0x96, 0x18, 0x59, 0x27, 0x3b,
	0x1d, 0xf7, 0x48, 0xdc, 0x2d, 0x98, 0x17, 0x11, 0x1e, 0x88, 0x0c, 0x21, 0xeb, 0x4c, 0xe9, 0x41,
	0x4a, 0x76, 0x7a, 0x89, 0x7e, 0xe7, 0x61, 0x01, 0x29, 0x05, 0x86, 0xc9, 0x09, 0x46, 0xda, 0x0f,
	0x3d, 0x87, 0x72, 0xda, 0x19, 0x55, 0x4e, 0xc4, 0x51, 0xfa, 0x46, 0x86, 0xd2, 0x78, 0x7f, 0xb6,
	0x2c, 0x9c, 0x84, 0xfe, 0x4e, 0x36, 0x9f, 0xf6, 0x6e, 0x1c, 0x76, 0x6d, 0x97, 0x76, 0x43, 0xd4,
	0x3e, 0x66, 0x73, 0x7f, 0x27, 0xc3, 0xde, 0x8c, 0xc3, 0xee, 0x0d, 0xda, 0x0d, 0xad, 0x5f, 0xac,
	0xc1, 0xd9, 0xca, 0x95, 0x11, 0xfa, 0xcd, 0x51, 0x96, 0x66, 0x64, 0x07, 0x8b, 0x1a, 0xd5, 0xdc,
	0x51, 0x34, 0xaa, 0x87, 0x61, 0x1a, 0xed, 0xba, 0x44, 0x73, 0x1e, 0x0b, 0x98, 0xf5, 0x13, 0xf5,
	0x91, 0x5c, 0xc6, 0x77, 0x92, 0x5c, 0xc7, 0x28, 0x0c, 0xe3, 0x88, 0xc6, 0xbb, 0xfa, 0x81, 0x16,
	0x47, 0xe9, 0x96, 0x40, 0xa0, 0x63, 0x86, 0x71, 0xda, 0x4e, 0x2f, 0xf1, 0xfa, 0xb4, 0x1b, 0xba,
	0xd4, 0x4f, 0x34, 0x86, 0x33, 0x18, 0xc3, 0xa9, 0x58, 0xbc, 0x57, 0x16, 0xa5, 0xf6, 0x0e, 0x71,
	0xbb, 0x61, 0xea, 0xea, 0xc9, 0x99, 0x71, 0x94, 0x5e, 0xe7, 0x70, 0xf3, 0x19, 0x60, 0x45, 0xd1,
	0x21, 0xed, 0x05, 0x1d, 0xbe, 0xf0, 0x93, 0x9a, 0xfd, 0x19, 0xa5, 0xb7, 0x14, 0xa4, 0xf9, 0x2c,
	0x98, 0xac, 0x80, 0x17, 0x30, 0x95, 0x29, 0x8c, 0x0f, 0x79, 0x91, 0x29, 0x2d, 0x50, 0x13, 0xa5,
	0x9b, 0x1a, 0x7a, 0xe4, 0x72, 0x58, 0x1f, 0xaf, 0xc3, 0x53, 0x23, 0xe6, 0x2c, 0x0b, 0xca, 0x5c,
	0x82, 0x65, 0x61, 0x62, 0x11, 0x79, 0x81, 0x58, 0xb5, 0x11, 0x97, 0x54, 0x24, 0xdf, 0xa5, 0x0a,
	0xbf, 0xd4, 0xcb, 0xf9, 0xe5, 0x31, 0x98, 0xcb, 0xf2, 0x6e, 0xb4, 0xb9, 0x9a, 0x95, 0x19, 0x36,
	0xb8, 0x97, 0x44, 0x17, 0xb8, 0xfa, 0xa1, 0xef, 0x4f, 0x81, 0x42, 0xfd, 0xe3, 0x12, 0x2c, 0x67,
	0xa4, 0xc2, 0xbf, 0x37, 0xa5, 0x3b, 0xfb, 0x39, 0x52, 0xb8, 0xf8, 0x72, 0x76, 0x9a, 0x2e, 0x61,
	0xa7, 0x4f, 0xd7, 0x4b, 0xf3, 0x5f, 0xe5, 0xd4, 0xa0, 0x45, 0xf9, 0xa6, 0x0c, 0xad, 0xf1, 0x3b,
	0x7c, 0x78, 0x17, 0x2a, 0xa6, 0x5a, 0x22, 0x73, 0x2e, 0x9a, 0xa8, 0x4c, 0x65, 0x2e, 0x04, 0x96,
	0xeb, 0x03, 0x81, 0x65, 0xd5, 0xcf, 0x3e, 0x51, 0xea, 0x67, 0x1f, 0x71, 0xcd, 0x0d, 0xd7, 0x8a,
	0x67, 0x49, 0xca, 0xdc, 0x1a, 0x7d, 0x26, 0x38, 0xf2, 0x96, 0xc0, 0x95, 0xe7, 0xee, 0x4d, 0x8f,
	0x97, 0xbb, 0x67, 0xfd, 0xf0, 0x24, 0x98, 0x38, 0x11, 0x64, 0xc7, 0xcf, 0x83, 0x8d, 0xfa, 0xd2,
	0xd6, 0x4a, 0x97, 0x96, 0x5f, 0x0a, 0x43, 0xdf, 0x7f, 0x5d, 0xbf, 0x14, 0x86, 0x4e, 0xff, 0xf3,
	0x78, 0x57, 0x28, 0xf7, 0xbd, 0x69, 0x0c, 0xb2, 0x90, 0xf6, 0xb7, 0x33, 0x8c, 0x7a, 0xbd, 0x6c,
	0xb2, 0xe4, 0x7a, 0x19, 0x0f, 0x20, 0xf3, 0x0b, 0x71, 0x11, 0x49, 0x92, 0xfb, 0x61, 0xcc, 0x6f,
	0xec, 0x2f, 0xe4, 0x01, 0x64, 0x1c, 0xc2, 0x96, 0x40, 0x9a, 0x57, 0xc1, 0x74, 0x7c, 0xdb, 0xa5,
	0x18, 0xd4, 0xc6, 0xb9, 0x29, 0x86, 0xc8, 0x0d, 0xc7, 0xbf, 0x91, 0xa3, 0x5f, 0xa3, 0x87, 0xe6,
	0x8b, 0x70, 0x62, 0xb0, 0xcc, 0x40, 0xa4, 0xfc, 0x78, 0xb1, 0xdc, 0x56, 0x6f, 0xe7, 0xff, 0xf6,
	0xfd, 0x37, 0x65, 0x6d, 0xf4, 0x7b, 0x6f, 0x72, 0x6d, 0x74, 0x49, 0xbe, 0x50, 0x91, 0xb9, 0xa0,
	0x3a, 0xad, 0xc5, 0x5d, 0xec, 0x32, 0x8f, 0xd1, 0xa6, 0x6b, 0x7d, 0xaa, 0x5c, 0xdd, 0xd7, 0x36,
	0xd3, 0xd7, 0x85, 0x5e, 0xc0, 0xf7, 0x11, 0x3a, 0x5a, 0x4e, 0xc3, 0x8c, 0xf4, 0xb0, 0xa8, 0xdc,
	0x23, 0x81, 0xe3, 0xc9, 0x97, 0xc7, 0x01, 0xbe, 0x29, 0xf4, 0x02, 0xe1, 0x0e, 0x54, 0xf9, 0x67,
	0x8e, 0xc1, 0xb9, 0x33, 0xf0, 0x51, 0x98, 0x45, 0x22, 0x2f, 0x8a, 0x34, 0xee, 0x99, 0x61, 0xd0,
	0xcd, 0x28, 0x32, 0xd7, 0x61, 0x22, 0x16, 0x57, 0x1b, 0xdf, 0x85, 0x21, 0xc1, 0xca, 0x62, 0x56,
	0x78, 0x1c, 0x87, 0x71, 0x37, 0xe9, 0x68, 0x61, 0xa4, 0x0c, 0x6a, 0xfd, 0xfc, 0x98, 0x53, 0xc4,
	0xcf, 0xb0, 0xf7, 0x6e, 0x8a, 0x46, 0x0b, 0x1b, 0x6d, 0x27, 0x4f, 0x96, 0xee, 0x64, 0x66, 0xbc,
	0x73, 0x12, 0xdc, 0xcd, 0xda, 0xd5, 0x15, 0x8e, 0xc0, 0x1d, 0x2d, 0x26, 0x72, 0xfa, 0x3d, 0x9a,
	0xc8, 0x99, 0xd2, 0x89, 0x3c, 0x80, 0x0b, 0xa2, 0xe2, 0xa4, 0x6a, 0x1e, 0x5f, 0xa7, 0xf7, 0x6f,
	0xf3, 0xdb, 0x0e, 0x98, 0xda, 0xc6, 0xff, 0x1d, 0x98, 0x23, 0x01, 0xe7, 0x2f, 0x09, 0x38, 0xa4,
	0x1b, 0x11, 0xaf, 0x13, 0xc8, 0x4c, 0x9e, 0x6c, 0x78, 0x12, 0xb1, 0xe9, 0x5a, 0xbf, 0x5c, 0xcf,
	0xdc, 0x77, 0x49, 0x59, 0x62, 0x3f, 0xaa, 0xf0, 0x87, 0x6f, 0x6d, 0xf1, 0xf8, 0x34, 0x75, 0x4b,
	0x2f, 0x15, 0xd5, 0xc6, 0xbb, 0x54, 0x34, 0x2e, 0xfb, 0x4b, 0xcf, 0xcc, 0x81, 0x7e, 0xbe, 0xce,
	0x09, 0xf8, 0x5b, 0x78, 0xc0, 0x4a, 0x22, 0xee, 0x24, 0xd1, 0x0e, 0x58, 0x81, 0xe2, 0x5e, 0x92,
	0x4b, 0xb0, 0xdc, 0x8b, 0x3a, 0x31, 0x71, 0xa9, 0x2b, 0xef, 0xe1, 0x69, 0xc7, 0x8a, 0x44, 0x8a,
	0x7b, 0x78, 0x1f, 0x80, 0xd5, 0x81, 0x0b, 0x47, 0x84, 0x0f, 0x5d, 0x3b, 0x72, 0x4f, 0x14, 0xee,
	0x1b, 0xad, 0x73, 0x1a, 0xeb, 0x9d, 0x1a, 0x3c, 0x56, 0xc2, 0x23, 0xd9, 0xa9, 0xcb, 0x6c, 0xa0,
	0xf7, 0xea, 0xcc, 0x6d, 0xc1, 0x83, 0xf7, 0xe5, 0x21, 0x66, 0xe7, 0x49, 0x65, 0xf2, 0x9e, 0xc9,
	0xf1, 0xc6, 0xe0, 0x11, 0xd7, 0x3e, 0x7e, 0x7f, 0x00, 0x86, 0x71, 0x2b, 0x7a, 0x90, 0xd2, 0x80,
	0xcd, 0x11, 0x3b, 0x90, 0xc2, 0x9e, 0xbe, 0x1f, 0x96, 0x25, 0xf6, 0x2e, 0x47, 0x5a, 0xbf, 0x5f,
	0x1b, 0xbd, 0xf1, 0xb9, 0x7a, 0x9c, 0x6c, 0xc5, 0xe1, 0xae, 0xe7, 0x53, 0x9e, 0x55, 0x21, 0x87,
	0x6c, 0xdb, 0x2e, 0x8d, 0x62, 0xea, 0x90, 0x94, 0xea, 0xc3, 0x3f, 0x9e, 0x0d, 0xff, 0x46, 0x46,
	0x60, 0x3e, 0x07, 0x27, 0x95, 0x89, 0xd0, 0xca, 0xf2, 0x49, 0x59, 0xc9, 0x27, 0x45, 0x29, 0xa6,
	0xb3, 0xdb, 0x44, 0x39, 0xbb, 0xa1, 0xaa, 0xc6, 0xbb, 0x55, 0xc2, 0x49, 0x02, 0x85, 0x9c, 0x64,
	0xfd, 0x48, 0xf9, 0xd2, 0x16, 0xc6, 0x39, 0xd6, 0xd2, 0xbe, 0x05, 0x86, 0xec, 0x5a, 0xc4, 0xcb,
	0xc9, 0x9b, 0x45, 0x97, 0x1a, 0x47, 0x71, 0xa6, 0xb7, 0x97, 0x89, 0x74, 0x8e, 0xf1, 0x5a, 0xac,
	0x5f, 0xab, 0x97, 0xba, 0xe3, 0x79, 0x27, 0xef, 0xf4, 0x69, 0x8c, 0xeb, 0xdf, 0x24, 0x09, 0x15,
	0xa6, 0xfe, 0xc3, 0x30, 0xed, 0x90, 0x84, 0x16, 0xaf, 0xb1, 0x72, 0x98, 0x69, 0xc1, 0x5c, 0xd2,
	0x43, 0x75, 0xa6, 0x38, 0x85, 0x19, 0xd8, 0x7c, 0x02, 0x60, 0x37, 0x26, 0x8e, 0x92, 0xe5, 0x90,
	0x09, 0x9a, 0x1c, 0x5e, 0xb0, 0x80, 0xa7, 0xc6, 0xb3, 0x80, 0xa7, 0xc7, 0xb6, 0x80, 0x67, 0xc6,
	0xb6, 0x80, 0x67, 0xab, 0x2c, 0xe0, 0xdc, 0xdb, 0x30, 0x57, 0xe2, 0x29, 0xfa, 0x95, 0x89, 0x52,
	0xdd, 0xba, 0x64, 0x62, 0xd7, 0x93, 0xc4, 0xeb, 0x04, 0xf8, 0xf2, 0xc9, 0xf0, 0xc9, 0x3d, 0x0d,
	0x33, 0xec, 0xbf, 0x5e, 0xec, 0xeb, 0x2f, 0x5a, 0x09, 0xa0, 0x38, 0x2b, 0x5d, 0xcf, 0xd1, 0xf3,
	0x4c, 0x24, 0x90, 0x2d, 0x4e, 0xfe, 0xbe, 0x89, 0xfe, 0xd2, 0x41, 0xf6, 0xba, 0x49, 0x03, 0x96,
	0xd3, 0xbd, 0x38, 0x4c, 0x53, 0x9f, 0x4a, 0x67, 0x89, 0xb6, 0xb3, 0x0b, 0x48, 0x7d, 0xc1, 0xa7,
	0xc7, 0x59, 0xf0, 0x99, 0x8a, 0x05, 0xb7, 0x60, 0x2e, 0xe8, 0x75, 0x31, 0x91, 0x21, 0xd1, 0x26,
	0x3d, 0x07, 0x9b, 0x17, 0x61, 0x49, 0x96, 0x10, 0x84, 0xea, 0xd4, 0x17, 0x70, 0xe6, 0x55, 0x38,
	0x86, 0x6f, 0xf8, 0xec, 0x3b, 0x61, 0xd0, 0x17, 0x79, 0xc4, 0x5a, 0xda, 0xc4, 0x20, 0x5a, 0x59,
	0xd4, 0xf9, 0x92, 0x45, 0x0d, 0xc6, 0xdd, 0x2c, 0xdb, 0x29, 0x49, 0x7b, 0xc9, 0x88, 0xf5, 0x64,
	0x6a, 0x09, 0xd2, 0x15, 0x4e, 0xb7, 0x0c, 0x6a, 0xed, 0xc0, 0xe9, 0xa6, 0xdc, 0xbe, 0xc4, 0x55,
	0xda, 0xd8, 0xe8, 0x7b, 0x2e, 0x0d, 0x1c, 0x3a, 0xd6, 0xf5, 0xe4, 0xbc, 0x17, 0xf5, 0xc1, 0x5e,
	0x58, 0xbd, 0xd2, 0xfb, 0x6f, 0x99, 0xdc, 0xb8, 0x4b, 0x0f, 0xd2, 0xdb, 0x09, 0x7f, 0xdd, 0x4f,
	0x6f, 0xa1, 0xee, 0xb9, 0xd9, 0x9d, 0x03, 0xed, 0xf5, 0x12, 0xbc, 0x73, 0x70, 0x1a, 0x66, 0x22,
	0x72, 0xe8, 0x87, 0x84, 0xcb, 0x01, 0x69, 0x85, 0x48, 0xa0, 0x75, 0xa7, 0xb4, 0xd9, 0x2c, 0x58,
	0x38, 0xbc, 0x59, 0x13, 0x26, 0x49, 0xdc, 0xe1, 0x32, 0x70, 0xa1, 0x8d, 0xff, 0x5b, 0x5f, 0x2e,
	0x8f, 0x25, 0xc8, 0x20, 0x70, 0xbb, 0x17, 0xb4, 0xb3, 0x44, 0xb8, 0xc4, 0x7c, 0x0b, 0x84, 0xd2,
	0x86, 0x49, 0x0b, 0x13, 0x47, 0x49, 0x5a, 0x18, 0x4c, 0xe6, 0x6c, 0x2b, 0x75, 0x55, 0x86, 0xc6,
	0x27, 0xdf, 0x5d, 0x68, 0xdc, 0xfa, 0x13, 0x33, 0xf0, 0x50, 0x73, 0xc3, 0x09, 0x83, 0xcd, 0x94,
	0x76, 0xb7, 0x62, 0xda, 0xf7, 0xe8, 0x7d, 0x86, 0xb8, 0xee, 0x87, 0xce, 0xfe, 0xb8, 0xeb, 0xef,
	0xa5, 0xb4, 0x5b, 0x5c, 0x7f, 0x0e, 0xc3, 0x8b, 0x1d, 0x74, 0x97, 0x5f, 0x90, 0xd3, 0xdc, 0x13,
	0x12, 0xca, 0xf6, 0x6f, 0x44, 0xbc, 0x20, 0xe5, 0x34, 0x9a, 0xc0, 0xce, 0xe1, 0xb8, 0x73, 0x48,
	0xec, 0xa5, 0x87, 0x9a, 0xc0, 0x10, 0x30, 0xc6, 0x0e, 0x6f, 0xf7, 0x88, 0xcf, 0xd0, 0xaa, 0x94,
	0x90, 0x40, 0x36, 0x0e, 0xac, 0xeb, 0x3e, 0x25, 0xb1, 0x26, 0x22, 0x72, 0x70, 0x46, 0x93, 0x50,
	0xea, 0xea, 0x12, 0x22, 0x03, 0x9b, 0xd7, 0xc0, 0xdc, 0xf7, 0x7c, 0x9f, 0x92, 0x94, 0xc6, 0x98,
	0xd7, 0x84, 0xec, 0xa9, 0x4a, 0x89, 0x12, 0x3c, 0x93, 0x2b, 0x19, 0x74, 0x30, 0x75, 0xb3, 0x80,
	0x63, 0xf3, 0xe1, 0xf4, 0x92, 0x34, 0xec, 0xe2, 0xd3, 0x57, 0xf3, 0xea, 0x2d, 0xce, 0x1c, 0x6e,
	0x7e, 0x80, 0xed, 0x6e, 0xcf, 0xd9, 0xa7, 0xb1, 0x4c, 0xad, 0xb6, 0x1a, 0x95, 0xeb, 0xd8, 0xd8,
	0xe6, 0xa4, 0xed, 0xac, 0x0c, 0x7f, 0x38, 0x53, 0xb8, 0xba, 0xb4, 0xb7, 0x55, 0x72, 0x30, 0x9b,
	0xf3, 0x30, 0xf6, 0x3a, 0x5e, 0xa0, 0xc5, 0x12, 0x05, 0x8c, 0xcf, 0x39, 0x4d, 0x18, 0x67, 0x2c,
	0xeb, 0x73, 0x8e, 0x40, 0x36, 0x0e, 0x37, 0x0e, 0x23, 0x21, 0xef, 0xd4, 0xfc, 0x49, 0x05, 0xce,
	0xa8, 0xba, 0xbd, 0xc4, 0x73, 0xf8, 0xea, 0x1f, 0xd3, 0x6e, 0x62, 0x67, 0x70, 0xb4, 0x59, 0x24,
	0x87, 0xa8, 0x71, 0xc5, 0x0c, 0xba, 0xf6, 0xb9, 0x1a, 0xcc, 0x88, 0x51, 0x32, 0xb1, 0x91, 0xf8,
	0xa1, 0xfe, 0xb8, 0x0f, 0x42, 0xd8, 0xb1, 0x2f, 0x66, 0x60, 0x40, 0xe7, 0x17, 0x70, 0xf1, 0xe4,
	0x15, 0xe3, 0x13, 0xf5, 0xa2, 0x12, 0x42, 0xf8, 0x1b, 0x15, 0xc4, 0xd7, 0xaf, 0x28, 0x71, 0x10,
	0xeb, 0x62, 0x1c, 0xa6, 0x79, 0xc6, 0x64, 0x76, 0x83, 0x49, 0x42, 0xd1, 0xc5, 0xe2, 0x71, 0xf5,
	0x4f, 0x77, 0x97, 0x79, 0x4c, 0xf7, 0xb3, 0x7c, 0xb8, 0x3a, 0x4c, 0xc0, 0xe4, 0xd2, 0x45, 0x8d,
	0x63, 0x98, 0xcf, 0xc3, 0x2c, 0xee, 0xb4, 0x3c, 0xdf, 0x79, 0xad, 0x9a, 0x0f, 0xda, 0x19, 0xad,
	0xf5, 0x3a, 0xac, 0xb0, 0xd6, 0x30, 0xe1, 0xd7, 0xd9, 0x0f, 0xc2, 0xfb, 0x3e, 0x75, 0x3b, 0xd4,
	0xd5, 0xea, 0xab, 0x1d, 0xa1, 0xbe, 0x9f, 0xaa, 0x95, 0x26, 0xab, 0x67, 0x12, 0x97, 0x55, 0x31,
	0x50, 0x9c, 0x6b, 0xa0, 0x6c, 0x62, 0x22, 0x12, 0x93, 0xae, 0x9d, 0xe8, 0x07, 0x19, 0x02, 0xb7,
	0x73, 0x34, 0xd1, 0x25, 0x0c, 0x02, 0xd7, 0x73, 0xb4, 0x6e, 0x7d, 0x73, 0xf4, 0x8d, 0x1c, 0xdd,
	0xd5, 0x1c, 0x7d, 0x1c, 0x7d, 0xdb, 0x8a, 0xe1, 0x7d, 0x47, 0xef, 0xb6, 0xf0, 0xe7, 0xbe, 0xdb,
	0xb9, 0xfa, 0xa1, 0x1a, 0xbc, 0x58, 0xd2, 0x68, 0xe1, 0x6e, 0x51, 0xd5, 0x8a, 0xab, 0x7e, 0xa5,
	0x5a, 0x99, 0x5f, 0x49, 0x15, 0xb9, 0xf5, 0x52, 0x91, 0x7b, 0x3a, 0xb3, 0x45, 0x3c, 0x97, 0xdb,
	0x67, 0xb9, 0x29, 0xe7, 0xb9, 0x89, 0xf5, 0x5c, 0x75, 0x9c, 0xee, 0x96, 0x97, 0x48, 0x93, 0x4a,
	0xa4, 0x20, 0xdc, 0xf2, 0xfa, 0xb4, 0x45, 0xba, 0x34, 0xb1, 0xde, 0xaa, 0xe6, 0x60, 0xa5, 0x98,
	0xa4, 0x17, 0x21, 0xb8, 0x71, 0xce, 0x98, 0x31, 0x6b, 0x6e, 0x53, 0x87, 0x06, 0x29, 0xab, 0x14,
	0xfb, 0x33, 0x56, 0xcd, 0x77, 0xc7, 0xaa, 0x39, 0x5f, 0x1a, 0x5e, 0xf3, 0x69, 0x98, 0x91, 0x0f,
	0x2f, 0x0e, 0x5e, 0x2f, 0xf4, 0x5c, 0xeb, 0x63, 0xb5, 0xea, 0x9b, 0xe8, 0x4a, 0xb5, 0x37, 0x7b,
	0xbe, 0xcf, 0x2a, 0x44, 0x77, 0xaf, 0xe2, 0x91, 0xae, 0x95, 0x79, 0xa4, 0x2d, 0x98, 0x0b, 0x7b,
	0xa9, 0x13, 0x76, 0x8b, 0xaa, 0x56, 0x0e, 0xce, 0x9f, 0x5c, 0x98, 0x18, 0x7c, 0x2a, 0xe9, 0xb7,
	0xea, 0xf0, 0x48, 0xd9, 0x95, 0xb6, 0xdc, 0xe1, 0x3c, 0x46, 0x0f, 0xf0, 0x5f, 0xf4, 0x12, 0xeb,
	0x8e, 0x1e, 0x09, 0x36, 0x9b, 0x60, 0x66, 0x36, 0x3d, 0x2f, 0x97, 0x6b, 0x40, 0xa5, 0x2e, 0x80,
	0x12, 0x72, 0xf3, 0x1b, 0xe0, 0x18, 0x57, 0xb2, 0x53, 0x92, 0x26, 0x36, 0xcf, 0xfd, 0x17, 0x1a,
	0xce, 0x91, 0x73, 0x28, 0x8d, 0xbc, 0xa6, 0x5b, 0x58, 0x91, 0x79, 0x0f, 0x16, 0x73, 0x18, 0xf1,
	0x7d, 0x71, 0xdb, 0xeb, 0xc8, 0x35, 0xeb, 0xb5, 0x58, 0x1f, 0xa9, 0xc1, 0x53, 0xc3, 0xaf, 0x0c,
	0xb6, 0xe2, 0xb0, 0x17, 0x8d, 0xf3, 0xba, 0xb0, 0xf6, 0x16, 0xd2, 0x94, 0xfe, 0x16, 0xd2, 0x59,
	0x98, 0x77, 0xc2, 0x38, 0xa6, 0x4e, 0x1a, 0x79, 0x22, 0x2a, 0x3b, 0x9b, 0x3d, 0x71, 0x98, 0x23,
	0xac, 0xff, 0x39, 0x01, 0x8f, 0x8f, 0xd1, 0x1d, 0xb6, 0xe8, 0xe8, 0xf3, 0x2e, 0x6c, 0x11, 0x09,
	0xcc, 0xde, 0xe0, 0xac, 0x0f, 0xbc, 0xc1, 0xb9, 0x0a, 0x93, 0xf8, 0xaa, 0xb2, 0x9a, 0xdd, 0x8e,
	0x10, 0xf3, 0x32, 0x1c, 0x63, 0x7d, 0xd0, 0x9d, 0x23, 0x5a, 0x70, 0x0e, 0xd1, 0x8a, 0x77, 0xe4,
	0x03, 0x30, 0xc5, 0x53, 0xae, 0xf8, 0x5a, 0x9c, 0x6b, 0x8c, 0x39, 0x93, 0x6d, 0x5e, 0xcc, 0x3c,
	0x05, 0x73, 0xf2, 0x26, 0xaf, 0x4c, 0x90, 0x9f, 0x4d, 0xf8, 0xfd, 0x5d, 0xb4, 0xd4, 0x58, 0x7b,
	0x4c, 0x0a, 0xb3, 0x4d, 0xef, 0x23, 0xff, 0xce, 0x68, 0x0f, 0xb5, 0x16, 0xd1, 0xe6, 0x05, 0x58,
	0x64, 0x40, 0xc6, 0x97, 0xbc, 0x63, 0xb3, 0x5a, 0xf2, 0x89, 0x8a, 0x32, 0x2f, 0xc2, 0xb2, 0xf0,
	0xcd, 0x45, 0x18, 0xfb, 0x71, 0xf6, 0xf5, 0xfc, 0x52, 0x8e, 0xdc, 0xa2, 0xf1, 0x96, 0xe7, 0xec,
	0x9b, 0x1f, 0x82, 0x29, 0x1c, 0xbd, 0xb8, 0x3d, 0x7b, 0x61, 0x9c, 0xa1, 0x36, 0x58, 0xc9, 0xa4,
	0xcd, 0x0b, 0xae, 0x3d, 0x06, 0x53, 0xf8, 0xdb, 0x5c, 0x85, 0x19, 0x06, 0x91, 0x97, 0x2b, 0xa7,
	0xda, 0xf2, 0xa7, 0xf5, 0xd9, 0x1a, 0x3c, 0x39, 0xbc, 0x5e, 0xf1, 0x4e, 0x31, 0x9a, 0xd8, 0xd4,
	0x51, 0x52, 0x56, 0x73, 0x8d, 0x48, 0x82, 0xdf, 0x15, 0x0f, 0xbc, 0x1f, 0xa6, 0x91, 0x85, 0xe4,
	0x13, 0x16, 0x4f, 0x8c, 0x33, 0xce, 0xb6, 0x28, 0x63, 0x7d, 0xa5, 0x06, 0xd6, 0x70, 0x7a, 0x94,
	0x58, 0xd7, 0x61, 0x56, 0xf4, 0x52, 0x26, 0xa0, 0x9c, 0x6d, 0x8c, 0x35, 0xec, 0x76, 0x56, 0xae,
	0xf4, 0xa6, 0x63, 0xfd, 0x0f, 0x72, 0xd3, 0x71, 0x62, 0xbc, 0x9b, 0x8e, 0xd6, 0xcf, 0xd5, 0xe5,
	0x63, 0x48, 0xe5, 0x87, 0x84, 0x79, 0x0e, 0x16, 0xba, 0x49, 0x47, 0xf8, 0xe9, 0x0a, 0xab, 0xa3,
	0x61, 0xf4, 0x93, 0xae, 0x5e, 0x6e, 0xa7, 0x3d, 0x21, 0x6d, 0x52, 0x64, 0xff, 0x89, 0xc1, 0x00,
	0x03, 0xf2, 0xfd, 0xfb, 0xc4, 0x19, 0x40, 0xe5, 0xba, 0x9d, 0x6e, 0x0c, 0x3d, 0x34, 0xda, 0x92,
	0xdc, 0x3c, 0x0f, 0x33, 0xe2, 0x4d, 0x63, 0xb1, 0x89, 0x07, 0x66, 0x40, 0xe2, 0xcd, 0xd7, 0xd4,
	0x4b, 0x62, 0x8a, 0xea, 0xfa, 0x78, 0x63, 0xf4, 0x9a, 0xb7, 0x0b, 0x45, 0xd9, 0xb9, 0x76, 0xba,
	0xcc, 0x6d, 0x92, 0xdf, 0xee, 0x1e, 0x78, 0x0e, 0x60, 0xb1, 0xf8, 0x1c, 0x40, 0x07, 0x4e, 0x20,
	0xe3, 0x09, 0xbf, 0x35, 0xca, 0x66, 0xbe, 0x49, 0xeb, 0xd5, 0x99, 0x80, 0x4a, 0x0b, 0x0d, 0xe4,
	0x5e, 0x9c, 0x14, 0x36, 0x52, 0xb6, 0x3b, 0xdb, 0xc7, 0x3b, 0x03, 0xb0, 0x64, 0xed, 0xc7, 0x6b,
	0x60, 0x0e, 0xd2, 0x0e, 0x6e, 0xc2, 0xa9, 0xc1, 0x4d, 0xa8, 0x08, 0x6a, 0xf5, 0x58, 0xc8, 0x04,
	0xf5, 0x1a, 0x4c, 0xe5, 0x66, 0x76, 0x76, 0x68, 0x64, 0xd6, 0xb3, 0xb8, 0x05, 0x3b, 0x59, 0x3c,
	0x6e, 0x34, 0x0b, 0x7e, 0x6a, 0xd0, 0x82, 0xb7, 0xbe, 0x58, 0x87, 0xb5, 0x92, 0xd1, 0xdf, 0x24,
	0x41, 0x4a, 0x92, 0xc3, 0xd1, 0x73, 0xfb, 0x8a, 0x14, 0xed, 0x7c, 0x2a, 0x9f, 0x6a, 0x54, 0x57,
	0xd6, 0x10, 0x7f, 0x15, 0xc9, 0xbe, 0x66, 0xc3, 0xbc, 0x80, 0x6e, 0x33, 0x0b, 0xae, 0xfa, 0x19,
	0x0a, 0xfc, 0x50, 0x83, 0xf8, 0x5a, 0x81, 0xf2, 0xe9, 0x08, 0x67, 0x5f, 0x19, 0xdf, 0xc4, 0xe0,
	0xf8, 0xd6, 0xa2, 0xac, 0x01, 0x3c, 0x9a, 0xc7, 0x59, 0x8a, 0x57, 0x60, 0x8a, 0x3f, 0x1b, 0x3a,
	0xfe, 0x90, 0x58, 0xe7, 0xdb, 0xbc, 0x94, 0xf5, 0x0c, 0x1c, 0x6b, 0xae, 0xa7, 0x69, 0xec, 0xed,
	0xf4, 0x52, 0x6a, 0xb3, 0x42, 0x41, 0x87, 0x2d, 0x1f, 0xf7, 0x0d, 0xa8, 0xc9, 0x6d, 0x1c, 0x64,
	0xad, 0xc1, 0x2a, 0x6f, 0xe1, 0x6e, 0xd8, 0x6a, 0xb6, 0xa9, 0x1f, 0x12, 0xf9, 0x0a, 0x79, 0x62,
	0xfd, 0x66, 0x9d, 0x5b, 0x72, 0x59, 0xe3, 0x6f, 0x52, 0x9f, 0x69, 0x83, 0xf8, 0xf4, 0x7a, 0x1a,
	0xc6, 0x94, 0x5f, 0xfe, 0xdc, 0x23, 0xc9, 0x5e, 0x21, 0xd1, 0x9e, 0x21, 0x99, 0xa5, 0xf2, 0x2a,
	0x49, 0xf6, 0xcc, 0x0f, 0xc0, 0x49, 0xb6, 0xff, 0xf9, 0x0b, 0x7b, 0x4e, 0x88, 0xef, 0x81, 0xa4,
	0x5e, 0x9f, 0xfa, 0xba, 0x47, 0xa5, 0x8a, 0x08, 0x13, 0x04, 0xbc, 0x2e, 0xb5, 0x77, 0xbd, 0x38,
	0x49, 0xe5, 0x43, 0x7d, 0xa0, 0xf9, 0x76, 0xbd, 0x2e, 0xbd, 0xc9, 0xb0, 0xe2, 0xb5, 0xbe, 0x06,
	0x18, 0x3e, 0x49, 0xc4, 0x07, 0x00, 0x44, 0x01, 0xed, 0x66, 0x29, 0xc3, 0xde, 0xcd, 0x5f, 0xf7,
	0xbb, 0x08, 0xcb, 0x48, 0xef, 0x45, 0xd9, 0x5d, 0x41, 0xd5, 0x6f, 0xb1, 0xc8, 0x90, 0xd9, 0x05,
	0x78, 0x26, 0xed, 0x3a, 0x89, 0x13, 0x86, 0xfb, 0x1e, 0x53, 0x97, 0x4d, 0xf5, 0xfd, 0xde, 0x1c,
	0xce, 0x4c, 0xa5, 0x5e, 0xe0, 0xbd, 0xdd, 0x63, 0x34, 0xc7, 0xd5, 0xd0, 0xad, 0x84, 0x5a, 0x5f,
	0x2b, 0x4f, 0xc9, 0xe4, 0x06, 0xe2, 0x1b, 0x84, 0xdf, 0xb4, 0x55, 0xed, 0x33, 0xf9, 0xf2, 0x36,
	0xae, 0x9c, 0x3d, 0xf0, 0x7c, 0xf9, 0x1c, 0xc2, 0xf1, 0x8b, 0x02, 0x8f, 0x01, 0xff, 0x61, 0x7b,
	0x41, 0xe1, 0x61, 0x0b, 0x04, 0x6f, 0x06, 0xa9, 0x12, 0x15, 0x66, 0x43, 0x2e, 0x13, 0xda, 0x6c,
	0xbc, 0xc5, 0xe0, 0xf1, 0x64, 0x45, 0xf0, 0xf8, 0x71, 0x58, 0x74, 0xf6, 0xc2, 0x7d, 0xea, 0xda,
	0x3b, 0x4c, 0xd9, 0xe1, 0x72, 0x7a, 0xae, 0xbd, 0xc0, 0x81, 0x68, 0xa5, 0x26, 0xcc, 0x74, 0xb9,
	0x52, 0x99, 0x42, 0x59, 0x39, 0xe0, 0x71, 0x1c, 0x85, 0xa7, 0x01, 0x98, 0x45, 0x4c, 0x82, 0x8e,
	0x0c, 0x30, 0x2d, 0xb6, 0x15, 0x48, 0xb6, 0xb5, 0x27, 0x8a, 0xde, 0x5e, 0xeb, 0x62, 0x16, 0x90,
	0xd6, 0x9c, 0xc8, 0xde, 0x2e, 0xd3, 0xe9, 0xb3, 0x47, 0xf8, 0x84, 0x51, 0x65, 0x7d, 0x62, 0xa2,
	0x34, 0x17, 0x78, 0x90, 0x5c, 0x98, 0xf1, 0xfa, 0xc1, 0x58, 0xab, 0x38, 0x18, 0xaf, 0xc1, 0x71,
	0xce, 0xa9, 0x34, 0xf6, 0x42, 0x37, 0xcb, 0x60, 0x56, 0x0f, 0x5b, 0xdc, 0x01, 0x5b, 0x88, 0x97,
	0x49, 0xcc, 0x6c, 0x5b, 0x84, 0x29, 0xf1, 0xed, 0x0e, 0x6b, 0xdd, 0xee, 0x78, 0xfd, 0x82, 0x71,
	0xb6, 0x8c, 0x68, 0xec, 0x5b, 0x8b, 0x21, 0xcd, 0xa7, 0x60, 0x41, 0x96, 0xe8, 0xd3, 0x58, 0xbf,
	0xdd, 0x31, 0x2f, 0x88, 0x19, 0xc2, 0xfc, 0x43, 0xf9, 0xb3, 0xa0, 0xfc, 0xbc, 0x5d, 0x6f, 0x1c,
	0x61, 0xd4, 0x0d, 0x86, 0x50, 0xe0, 0xfa, 0xe3, 0xa1, 0x6b, 0x6f, 0xc0, 0x4a, 0x19, 0xc1, 0x58,
	0xeb, 0xbc, 0x06, 0x53, 0x38, 0x5a, 0xfd, 0x6d, 0x3f, 0x04, 0x59, 0x7b, 0xa5, 0x5e, 0x74, 0xbe,
	0x9b, 0xb6, 0x7b, 0x3b, 0x5d, 0x2f, 0xdd, 0xce, 0x6f, 0x2a, 0x3c, 0x06, 0x73, 0xf9, 0x77, 0x0a,
	0xf4, 0x04, 0x28, 0xf9, 0x85, 0x82, 0x55, 0x98, 0xc4, 0xcb, 0x0e, 0x5a, 0x84, 0x80, 0x41, 0xac,
	0xad, 0x52, 0x9e, 0xc9, 0xb2, 0xc0, 0xe5, 0x06, 0xf6, 0x3d, 0x8c, 0x3b, 0x8e, 0xe3, 0x2a, 0xf8,
	0x0b, 0xf5, 0x52, 0x17, 0x57, 0x56, 0xe5, 0x56, 0x2f, 0xa6, 0x72, 0x9b, 0x60, 0xb5, 0x5e, 0x18,
	0xdc, 0x24, 0x9e, 0xdf, 0x8b, 0xc7, 0x0b, 0xa4, 0xb0, 0x03, 0x8c, 0xa4, 0x7b, 0xba, 0x96, 0xcd,
	0x20, 0x0c, 0xb3, 0xeb, 0xf9, 0xfa, 0xb7, 0x57, 0x10, 0x62, 0x9e, 0x80, 0x09, 0x27, 0x76, 0x34,
	0x26, 0x61, 0x00, 0x56, 0x22, 0x93, 0xf8, 0xd9, 0x61, 0xc8, 0x20, 0xac, 0x84, 0x2f, 0x1e, 0x80,
	0x93, 0x08, 0x06, 0xc0, 0x4f, 0xe5, 0x10, 0x67, 0xdf, 0x0e, 0x7a, 0xdd, 0x1d, 0x1a, 0x6b, 0x2f,
	0x0a, 0x01, 0x43, 0xbc, 0x8e, 0x70, 0xf3, 0x2c, 0x2c, 0x20, 0x19, 0x6b, 0x5d, 0x26, 0x45, 0x6a,
	0x74, 0x37, 0x3d, 0x9f, 0x6e, 0xe2, 0x33, 0xf1, 0x17, 0x86, 0x06, 0x7e, 0x74, 0x45, 0xbe, 0xe0,
	0x50, 0x59, 0x2c, 0x38, 0x54, 0x30, 0xbb, 0x9a, 0x99, 0x73, 0x05, 0xf5, 0x56, 0x02, 0xf5, 0xf4,
	0xaf, 0x89, 0xd2, 0xf4, 0xaf, 0x55, 0x6e, 0x73, 0x7b, 0x2e, 0xd7, 0x6c, 0x17, 0xdb, 0xf2, 0xa7,
	0xf5, 0x2d, 0x35, 0x58, 0x6c, 0x6e, 0xdf, 0xd9, 0x70, 0xc2, 0xa0, 0x19, 0xf6, 0x22, 0x34, 0x8a,
	0x70, 0x27, 0x1c, 0x66, 0xdd, 0x99, 0xfd, 0x96, 0x4f, 0x3f, 0x52, 0x13, 0x5d, 0xe2, 0x08, 0xa6,
	0x55, 0x94, 0xbc, 0xa4, 0x2c, 0x60, 0xe6, 0x25, 0x58, 0xa6, 0x07, 0x91, 0x27, 0x52, 0x37, 0x18,
	0x8f, 0x61, 0xb7, 0x66, 0xb2, 0xaf, 0xcb, 0x64, 0xc8, 0x1b, 0x24, 0xa5, 0xd6, 0x47, 0x6b, 0x60,
	0x34, 0xb7, 0xef, 0x60, 0x5c, 0x46, 0x66, 0xa9, 0xb0, 0x5e, 0xe8, 0xaa, 0xbf, 0xd2, 0x0b, 0xa9,
	0xf9, 0x3f, 0x03, 0x86, 0xb0, 0x3d, 0x63, 0xda, 0x25, 0x5e, 0x50, 0xfc, 0xec, 0x81, 0xb0, 0x4c,
	0xdb, 0x12, 0xc9, 0xe4, 0x8b, 0xfa, 0x7a, 0xab, 0x9e, 0xd6, 0xbd, 0x93, 0xbf, 0xd8, 0x6a, 0xfd,
	0x8f, 0x1a, 0x9c, 0x6a, 0x6e, 0xdf, 0x11, 0xf7, 0x5d, 0xb6, 0xd1, 0x5d, 0x4f, 0xfc, 0xec, 0xb1,
	0x50, 0xf3, 0x69, 0x58, 0x48, 0x10, 0x68, 0xe7, 0x7a, 0x8b, 0xda, 0xc5, 0x79, 0x8e, 0xe5, 0x4f,
	0x51, 0x9c, 0x87, 0xc5, 0xd4, 0xa3, 0xb1, 0xdd, 0x0b, 0xd8, 0x29, 0x43, 0xf5, 0x55, 0x5c, 0x60,
	0xa8, 0x7b, 0x02, 0xc3, 0x48, 0xa3, 0x98, 0x76, 0xbd, 0x5e, 0xd7, 0x66, 0xf0, 0x42, 0xd2, 0xa2,
	0x40, 0xdd, 0xf5, 0x44, 0xe2, 0x8a, 0x92, 0x7a, 0x34, 0x59, 0x9e, 0x7a, 0xf4, 0x2c, 0x98, 0xe2,
	0x47, 0x62, 0x67, 0x97, 0x12, 0xf5, 0xbc, 0x5f, 0x89, 0x6f, 0x4a, 0x34, 0x7e, 0xe5, 0xa0, 0xb9,
	0x7d, 0x67, 0x8b, 0xc6, 0x6c, 0xd4, 0xcc, 0x28, 0x11, 0x9f, 0x18, 0x2a, 0xde, 0x87, 0xaa, 0x55,
	0xdd, 0x87, 0x2a, 0xe6, 0x69, 0xd7, 0x8f, 0x92, 0xa7, 0xfd, 0x34, 0x2c, 0x51, 0x9f, 0xf6, 0x49,
	0x4a, 0xf1, 0x85, 0xaf, 0xc2, 0x53, 0xe3, 0x8b, 0x12, 0xb7, 0xcd, 0x50, 0xd6, 0xcb, 0xfc, 0x09,
	0xf4, 0x56, 0xd3, 0xe6, 0x57, 0x07, 0x5b, 0x6c, 0x23, 0x6c, 0xf7, 0x76, 0x12, 0x27, 0xf6, 0x76,
	0x30, 0xa5, 0x82, 0xbf, 0xfe, 0xa9, 0x3b, 0xd7, 0x39, 0xcc, 0x5a, 0x87, 0x47, 0x06, 0x0b, 0xdf,
	0x0b, 0x92, 0xac, 0xf8, 0x19, 0x98, 0x65, 0xc7, 0x9a, 0x4f, 0x77, 0xf5, 0x67, 0xa7, 0x32, 0xa8,
	0xf5, 0xad, 0x35, 0x38, 0x31, 0x58, 0x07, 0x1b, 0xe7, 0xf0, 0xb6, 0x51, 0x47, 0x23, 0x5d, 0xca,
	0x2a, 0xea, 0xea, 0xa7, 0x85, 0x02, 0xc7, 0x08, 0x51, 0x12, 0xd1, 0x18, 0xf9, 0xb5, 0xf0, 0x56,
	0x6f, 0x06, 0xb7, 0x3e, 0x5c, 0x9a, 0xba, 0xae, 0x84, 0x36, 0xe4, 0x55, 0x8f, 0x73, 0xb0, 0x40,
	0x94, 0x80, 0x87, 0x36, 0x26, 0x0d, 0x63, 0x7d, 0xb6, 0xdc, 0x89, 0x9b, 0xc5, 0x06, 0x64, 0x66,
	0x51, 0xcc, 0x76, 0x62, 0x87, 0x36, 0x43, 0x2f, 0xd0, 0x7c, 0xef, 0xb5, 0x52, 0xdf, 0xbb, 0x05,
	0x73, 0x22, 0xc9, 0xab, 0xe8, 0xc6, 0xcd, 0xc0, 0xec, 0x04, 0xdd, 0x0b, 0x7b, 0x05, 0xd6, 0xe7,
	0x20, 0xd6, 0xff, 0x48, 0xb4, 0x38, 0x90, 0xad, 0xab, 0x61, 0xac, 0x6f, 0x84, 0x73, 0xc3, 0xba,
	0xcf, 0xbf, 0x2e, 0xc4, 0xb7, 0xdd, 0x88, 0x85, 0x5a, 0x81, 0x7a, 0x98, 0x68, 0x2a, 0x6a, 0x3d,
	0x4c, 0xac, 0xcd, 0x52, 0x35, 0x4b, 0x8a, 0xf7, 0x6c, 0x7e, 0x36, 0x38, 0xb3, 0x8a, 0x27, 0x7f,
	0x3b, 0xba, 0x86, 0xc5, 0x41, 0xd6, 0x37, 0x96, 0xe6, 0x32, 0xe5, 0x55, 0x35, 0xf7, 0x48, 0x3a,
	0x3a, 0xf0, 0xc1, 0x14, 0x48, 0x5a, 0x78, 0xee, 0x0c, 0x21, 0xd6, 0x4e, 0x69, 0xfd, 0xcc, 0x9e,
	0x12, 0x17, 0x35, 0x58, 0xfd, 0x63, 0xdd, 0xcf, 0xa8, 0x6e, 0xe3, 0x8f, 0xc0, 0x13, 0x95, 0x63,
	0x58, 0xef, 0xa5, 0x7b, 0xaf, 0xd1, 0xc3, 0x66, 0xe8, 0xd2, 0x91, 0x47, 0xdd, 0x2a, 0x4c, 0x3a,
	0xf2, 0x93, 0x2d, 0x59, 0x0b, 0x0c, 0x62, 0xdd, 0x1a, 0x74, 0x74, 0xb4, 0xc2, 0xb4, 0xbf, 0x7d,
	0x18, 0x38, 0xe2, 0x3b, 0x44, 0x17, 0x60, 0x52, 0xa4, 0x40, 0x32, 0x61, 0x73, 0xa2, 0xd1, 0xdc,
	0xc0, 0x2f, 0x2f, 0xea, 0x54, 0x6d, 0xa4, 0xb1, 0x7e, 0x75, 0x02, 0x4e, 0x6d, 0x89, 0x6f, 0xe0,
	0x39, 0xc4, 0xbf, 0xe1, 0x75, 0xbc, 0x94, 0xf8, 0xdb, 0x5e, 0x27, 0xc0, 0x4f, 0xd0, 0xa0, 0x21,
	0x2c, 0x7f, 0x60, 0x85, 0x0b, 0x99, 0x21, 0xac, 0xd2, 0x8c, 0xf4, 0x3b, 0xad, 0xc1, 0xd4, 0xa0,
	0xcb, 0x89, 0x83, 0xcc, 0x13, 0x30, 0x4d, 0x03, 0x37, 0x0a, 0xf9, 0x91, 0x5c, 0x6f, 0x8b, 0x5f,
	0xe6, 0x1a, 0xe6, 0xae, 0xc4, 0x29, 0xc3, 0x4c, 0x21, 0x26, 0xfb, 0x6d, 0xae, 0xc0, 0x54, 0xec,
	0x75, 0xf6, 0x52, 0x74, 0xf3, 0xd6, 0xdb, 0xfc, 0x07, 0x7e, 0x4c, 0xef, 0x20, 0xff, 0x18, 0x8f,
	0xb2, 0xf3, 0xd2, 0x03, 0x91, 0x4c, 0xa9, 0x06, 0x91, 0x67, 0xcb, 0x82, 0xc8, 0x6c, 0x17, 0xec,
	0x79, 0xe9, 0x4e, 0xa8, 0xbf, 0xcb, 0x24, 0x60, 0x6c, 0xe7, 0x39, 0x31, 0x45, 0x01, 0x8d, 0xe3,
	0x01, 0x25, 0xca, 0xab, 0x61, 0xd8, 0xb4, 0xd0, 0xb7, 0x7b, 0x5e, 0x84, 0x51, 0x68, 0x35, 0xd3,
	0x27, 0x07, 0xe3, 0xa7, 0x63, 0x62, 0xe2, 0x50, 0xbb, 0xf0, 0xf1, 0xae, 0x19, 0x84, 0x6e, 0xba,
	0x6c, 0x6e, 0xf8, 0x4b, 0xed, 0x78, 0x0d, 0xb8, 0xde, 0x16, 0xbf, 0xd4, 0x30, 0xf2, 0x52, 0x49,
	0x18, 0xf9, 0x9b, 0x87, 0xec, 0x7a, 0x65, 0xb9, 0xd9, 0x3a, 0x9b, 0x97, 0x35, 0x76, 0x79, 0xb8,
	0x31, 0x84, 0x1d, 0x38, 0xd3, 0x0c, 0x4f, 0xf6, 0xb0, 0xbe, 0xab, 0x36, 0xa4, 0xf1, 0x5b, 0x61,
	0x87, 0xe9, 0xc3, 0x29, 0xf1, 0x37, 0xf0, 0xd9, 0x5e, 0x36, 0x49, 0xec, 0x1f, 0x64, 0x76, 0x6d,
	0xb7, 0x65, 0x60, 0x8c, 0x48, 0xf1, 0x4f, 0x86, 0xea, 0x39, 0x69, 0x02, 0x88, 0x39, 0x6b, 0x8c,
	0xcd, 0xe2, 0x43, 0x4d, 0x37, 0x96, 0x40, 0x2b, 0x2a, 0x7d, 0x57, 0x5a, 0x4c, 0x46, 0xe8, 0xe3,
	0x9d, 0x7a, 0x3c, 0x21, 0xa3, 0xd0, 0xf7, 0x0b, 0x1b, 0x52, 0xc0, 0x18, 0xbf, 0x31, 0x45, 0x95,
	0x5b, 0xac, 0x73, 0x6d, 0xfe, 0x43, 0xf9, 0x52, 0xd8, 0x84, 0xf6, 0xa5, 0xb0, 0xef, 0xa9, 0x97,
	0xa7, 0x65, 0xe2, 0x43, 0x7e, 0x6d, 0xda, 0xf1, 0x92, 0x94, 0xc6, 0x15, 0x79, 0x47, 0x27, 0x60,
	0xa2, 0x4f, 0xe3, 0xc2, 0x67, 0x23, 0x68, 0xcc, 0xe0, 0x24, 0xd2, 0xad, 0x7f, 0x06, 0x40, 0x78,
	0xac, 0x5f, 0xb7, 0x63, 0x00, 0x06, 0x0f, 0x76, 0xf4, 0x44, 0x19, 0x06, 0x60, 0xf0, 0x4e, 0x1c,
	0x69, 0xfe, 0x1c, 0x06, 0x40, 0xc9, 0x8c, 0xee, 0xac, 0x19, 0x4d, 0x32, 0xe3, 0xe7, 0x6f, 0xce,
	0xc0, 0x6c, 0x76, 0x01, 0x46, 0xbb, 0x56, 0x21, 0xa1, 0xba, 0xea, 0x3d, 0x57, 0xa6, 0x7a, 0x5b,
	0x3f, 0x5b, 0x83, 0x47, 0x2b, 0x27, 0x85, 0x7f, 0xcf, 0x4f, 0x0e, 0xbe, 0x56, 0x31, 0xf8, 0x7a,
	0xc5, 0xe0, 0x27, 0x8a, 0x83, 0x37, 0x61, 0xb2, 0x13, 0x47, 0x52, 0xc7, 0xc7, 0xff, 0xb5, 0x41,
	0x4c, 0x8d, 0x1e, 0xc4, 0x74, 0xe9, 0x20, 0xbe, 0xaf, 0x5e, 0x7a, 0xd3, 0x4f, 0x1d, 0x04, 0xbf,
	0x16, 0x95, 0x98, 0xad, 0xdc, 0x34, 0xaf, 0x55, 0xe7, 0xd1, 0x96, 0x94, 0x2c, 0x7c, 0xc3, 0x63,
	0xed, 0x53, 0x35, 0xf9, 0x44, 0x6a, 0x25, 0xc7, 0xb0, 0x15, 0xad, 0x17, 0x57, 0x74, 0x0c, 0x73,
	0x48, 0xcc, 0xeb, 0x64, 0xc5, 0xbc, 0x4e, 0x95, 0x30, 0x95, 0x1f, 0x3a, 0x3a, 0xf3, 0xf8, 0xa1,
	0x63, 0xd1, 0x21, 0x4b, 0xbb, 0x19, 0xf4, 0xbd, 0xf1, 0x8c, 0x6b, 0xb6, 0x93, 0xfd, 0x70, 0x67,
	0xe7, 0xb0, 0x68, 0xe0, 0x09, 0xa0, 0xf5, 0x91, 0xfa, 0xb0, 0xbb, 0xfc, 0xb6, 0x4c, 0x49, 0x08,
	0x99, 0x08, 0x4b, 0xcc, 0xd7, 0xf2, 0xef, 0xa6, 0xf2, 0x05, 0xb8, 0xd2, 0x18, 0xbb, 0x70, 0xa3,
	0xf0, 0x5d, 0xd5, 0x82, 0x7f, 0xa8, 0x5e, 0xee, 0x1f, 0x5a, 0xf3, 0x61, 0x5a, 0xdc, 0xf3, 0x1c,
	0x67, 0xb8, 0x67, 0x60, 0x36, 0x4e, 0x9d, 0x90, 0x35, 0xa1, 0xe7, 0x68, 0x48, 0x28, 0x26, 0x5f,
	0xf1, 0x6f, 0x7e, 0xaa, 0xaa, 0xbf, 0x80, 0xb1, 0xe9, 0xb8, 0x30, 0x8e, 0xf2, 0x75, 0x97, 0x2b,
	0x70, 0xd7, 0xe0, 0x38, 0xe9, 0xa5, 0x7b, 0x61, 0xec, 0x7d, 0x33, 0x5a, 0x14, 0x4a, 0xec, 0x79,
	0x5a, 0x1a, 0x41, 0x39, 0xc1, 0xb6, 0x08, 0x43, 0x3f, 0x0f, 0x2b, 0x4a, 0x29, 0xfe, 0xf1, 0x55,
	0xf9, 0x24, 0x9d, 0x34, 0x64, 0xcd, 0x9c, 0x82, 0x5b, 0x48, 0x9b, 0xfc, 0x95, 0xc7, 0xec, 0xad,
	0xfc, 0xbc, 0xb5, 0x09, 0xb5, 0xb5, 0x9c, 0x40, 0xb6, 0xf6, 0x12, 0x9c, 0x50, 0x4b, 0xb9, 0x71,
	0xf6, 0x96, 0x9f, 0xfa, 0x31, 0xe0, 0x15, 0xa5, 0xa0, 0x1b, 0x8b, 0xb7, 0xfc, 0xac, 0x37, 0xa4,
	0xd0, 0x95, 0x0a, 0x1d, 0x56, 0x7a, 0x43, 0xbc, 0xf8, 0x27, 0x26, 0x81, 0x7f, 0xed, 0xd4, 0x23,
	0x3e, 0x0e, 0x47, 0xa8, 0xbb, 0x86, 0xa2, 0xd8, 0x18, 0x39, 0x9a, 0x17, 0xb1, 0xce, 0x0d, 0xb9,
	0xdc, 0x2b, 0x66, 0xf8, 0xce, 0xee, 0x2e, 0x8d, 0x13, 0xeb, 0xdb, 0x86, 0x1d, 0x7d, 0x82, 0x74,
	0x3b, 0xec, 0xf5, 0x69, 0xe0, 0xc5, 0xca, 0x29, 0x5a, 0x2b, 0x49, 0x99, 0x54, 0xd2, 0x30, 0xea,
	0x65, 0x69, 0x18, 0x8a, 0x02, 0x39, 0x51, 0x96, 0x7c, 0x62, 0x0f, 0xb9, 0x91, 0x2a, 0x58, 0xfe,
	0x3a, 0xf1, 0x49, 0xe0, 0xe0, 0xc9, 0x47, 0xba, 0xf8, 0x30, 0x98, 0xd6, 0x11, 0x0e, 0x63, 0x5b,
	0xbe, 0x98, 0x0d, 0xce, 0x00, 0x56, 0x77, 0x48, 0x03, 0xb8, 0xf1, 0xbf, 0x2e, 0xf4, 0x02, 0x7c,
	0x5f, 0xf5, 0xdd, 0x6c, 0xfd, 0xc9, 0xe2, 0xd6, 0xff, 0xe9, 0xda, 0x90, 0x6b, 0xc9, 0xd8, 0xde,
	0x9b, 0x24, 0x46, 0xdf, 0xc6, 0xcd, 0xa2, 0xdc, 0xbd, 0xd8, 0x18, 0xab, 0x60, 0x51, 0xec, 0xde,
	0x96, 0x52, 0x77, 0xcc, 0xad, 0x7c, 0x9f, 0xc4, 0xc1, 0xe0, 0x1b, 0xc6, 0x12, 0x6a, 0xf9, 0xa5,
	0xc9, 0xc8, 0xdb, 0x94, 0xc7, 0x90, 0x6f, 0x92, 0x7e, 0x18, 0x33, 0x31, 0x59, 0x30, 0x0c, 0x26,
	0x8b, 0x86, 0xc1, 0x93, 0x30, 0xef, 0x25, 0xf6, 0xae, 0x20, 0xc7, 0xb6, 0xa4, 0x58, 0x00, 0x2f,
	0x91, 0xd5, 0x58, 0xdb, 0xa5, 0x59, 0xe4, 0xad, 0x42, 0x6b, 0x89, 0x94, 0x7a, 0x68, 0xf6, 0xf8,
	0x3e, 0x0f, 0x7c, 0xf3, 0x04, 0xbc, 0xec, 0x03, 0x1d, 0xc4, 0xf7, 0xb1, 0x50, 0x62, 0xfd, 0x58,
	0xc5, 0x17, 0x57, 0x4a, 0x6a, 0x15, 0x5e, 0xf5, 0x71, 0xaa, 0x35, 0x9f, 0x86, 0xa5, 0x6f, 0x4a,
	0xc2, 0x20, 0x1b, 0x54, 0xa2, 0x31, 0xdb, 0x22, 0xc3, 0x65, 0x55, 0x9b, 0xe7, 0x61, 0x91, 0x13,
	0x8b, 0x6f, 0x64, 0x6a, 0x2a, 0xdf, 0x02, 0xd2, 0x0a, 0x8c, 0xf5, 0xd9, 0xfa, 0x90, 0xfc, 0xef,
	0x2d, 0x1a, 0xef, 0xf2, 0x9b, 0xd9, 0xe6, 0x8d, 0x22, 0xc3, 0x5c, 0x68, 0x8c, 0x51, 0xac, 0xc8,
	0x2e, 0x5f, 0xcc, 0x4e, 0xe9, 0xb3, 0x30, 0x1f, 0xd1, 0x78, 0x97, 0x7f, 0x6e, 0x4c, 0x57, 0x66,
	0x54, 0x04, 0xdb, 0x77, 0x3e, 0x0d, 0x3a, 0xc2, 0xd9, 0x9b, 0x69, 0x9c, 0x1c, 0xc6, 0xb8, 0x2e,
	0xa6, 0xbb, 0x34, 0xa6, 0x81, 0x43, 0xb5, 0xf4, 0xf6, 0x1c, 0x8c, 0x3b, 0xd7, 0x49, 0x7b, 0x84,
	0x5f, 0x11, 0x5a, 0xc8, 0x76, 0x2e, 0xc2, 0x30, 0xf7, 0x3f, 0xec, 0xc5, 0x0e, 0xf5, 0x74, 0x4f,
	0x57, 0x06, 0x65, 0xe5, 0xf9, 0x3d, 0x00, 0x3d, 0x17, 0x95, 0xc3, 0xac, 0x2f, 0x4e, 0x0c, 0xf1,
	0xd3, 0xf3, 0x49, 0xc8, 0x7d, 0xdc, 0xfc, 0xfb, 0x26, 0x3e, 0xb5, 0xf9, 0xd3, 0x08, 0x5a, 0xb8,
	0x0b, 0x18, 0x42, 0x4c, 0xf6, 0x53, 0xdc, 0x23, 0x46, 0x02, 0xd7, 0xce, 0xbe, 0x65, 0x3d, 0x97,
	0xa7, 0x2e, 0x21, 0xe6, 0x96, 0x17, 0xf0, 0x0f, 0xd9, 0x60, 0x08, 0x84, 0x5f, 0x45, 0xd2, 0x5c,
	0x3e, 0x88, 0xb8, 0xc9, 0xe0, 0x8c, 0x79, 0xbc, 0x40, 0x7c, 0x8f, 0x87, 0x7f, 0x1c, 0x44, 0x7b,
	0x20, 0x46, 0xe2, 0xb8, 0xb5, 0xf1, 0x38, 0x40, 0x1a, 0xf7, 0x44, 0xb8, 0xb1, 0xf0, 0x8d, 0x4d,
	0x06, 0xc7, 0x5b, 0xce, 0xe7, 0x61, 0x51, 0x5c, 0x83, 0xa2, 0x81, 0xcb, 0x4e, 0x1e, 0xed, 0xd5,
	0x09, 0x7e, 0xb5, 0x89, 0x63, 0xf8, 0x5d, 0x7e, 0x46, 0x9a, 0xbb, 0x14, 0x67, 0xb4, 0xfb, 0xe1,
	0x0c, 0x99, 0xf9, 0x13, 0xf9, 0x57, 0x70, 0x42, 0x87, 0x26, 0x89, 0x74, 0x9a, 0xe7, 0xd9, 0xe5,
	0x1c, 0xbe, 0xc9, 0x33, 0xfc, 0x12, 0xf5, 0x85, 0xba, 0x2c, 0xf4, 0x9c, 0x81, 0xcd, 0xe7, 0xe1,
	0x38, 0xbf, 0x7a, 0xce, 0x27, 0xbb, 0xec, 0xb3, 0xd3, 0x65, 0x04, 0xd6, 0x47, 0xcb, 0x6f, 0x62,
	0x29, 0x57, 0x44, 0x77, 0x7b, 0x09, 0xdd, 0xc6, 0xaf, 0x40, 0xe0, 0xc7, 0xaf, 0xc6, 0x5c, 0xd4,
	0x6b, 0x70, 0x3c, 0x64, 0x27, 0xa0, 0x9d, 0x7d, 0x66, 0x22, 0xfb, 0xde, 0xac, 0xdc, 0xef, 0xc7,
	0x90, 0x60, 0x53, 0xe0, 0xb1, 0xf2, 0xcb, 0xc0, 0x81, 0xb6, 0x5a, 0x46, 0xd5, 0x73, 0x96, 0x11,
	0xad, 0x74, 0xa7, 0x01, 0x46, 0xb2, 0x17, 0xde, 0xb7, 0x7b, 0x41, 0xe2, 0x75, 0x02, 0xea, 0xda,
	0x3d, 0x4f, 0x7b, 0x38, 0x65, 0x89, 0x61, 0xef, 0x09, 0xe4, 0x3d, 0x8f, 0x69, 0xc0, 0xfb, 0x9e,
	0xb3, 0x6f, 0xf7, 0x12, 0xa1, 0xf3, 0x67, 0xdf, 0x69, 0x64, 0xe0, 0x7b, 0x09, 0x8d, 0xad, 0x37,
	0xaa, 0x3e, 0x22, 0xa5, 0x1d, 0xda, 0x05, 0x3e, 0xef, 0xf9, 0xbe, 0x3a, 0x25, 0x99, 0x00, 0x66,
	0x08, 0x3e, 0x25, 0x17, 0xbe, 0xf5, 0x3c, 0xc0, 0x46, 0x33, 0xe9, 0x84, 0x2d, 0x56, 0xbd, 0x79,
	0x1a, 0x1e, 0xda, 0xb7, 0x37, 0x06, 0x1b, 0xba, 0x4e, 0x12, 0x6a, 0x7c, 0xa4, 0x65, 0x5e, 0x80,
	0x27, 0x4b, 0xf1, 0xc5, 0x6f, 0x44, 0x19, 0xdf, 0xd9, 0x32, 0xcf, 0xc3, 0x13, 0xa3, 0x69, 0xc3,
	0xc8, 0xf8, 0xae, 0x96, 0xf9, 0x3c, 0x5c, 0x19, 0x45, 0x3a, 0xf0, 0x35, 0x24, 0xe3, 0xbb, 0x5b,
	0xe6, 0x35, 0x78, 0x66, 0x54, 0xb9, 0xc2, 0x87, 0x57, 0x8c, 0x8f, 0xb6, 0xcc, 0xe7, 0xe0, 0xf2,
	0x18, 0xa5, 0xb4, 0x87, 0x91, 0x8c, 0x8f, 0xb5, 0xcc, 0x0f, 0xc0, 0x8b, 0x23, 0xc7, 0x53, 0x75,
	0x2d, 0xc6, 0xf8, 0x9e, 0x71, 0x9b, 0xd5, 0x2e, 0x41, 0x1b, 0xdf, 0x3b, 0x56, 0xb1, 0x62, 0xb6,
	0xa7, 0xf1, 0x7d, 0x2d, 0xf3, 0x59, 0x68, 0x8c, 0x39, 0xa5, 0xe2, 0x39, 0x42, 0xe3, 0xfb, 0xc7,
	0x2a, 0xa4, 0xdf, 0xa2, 0x34, 0xfe, 0xe4, 0x58, 0x85, 0xf4, 0x47, 0x28, 0x8d, 0x1f, 0x38, 0xda,
	0x64, 0x88, 0x27, 0xc1, 0x8c, 0x8f, 0xb7, 0xcc, 0xab, 0x70, 0x69, 0xbc, 0xb6, 0xc4, 0xdb, 0x59,
	0xc6, 0x27, 0x8e, 0xb6, 0xdc, 0xe2, 0x79, 0x49, 0xe3, 0x4f, 0xb5, 0xcc, 0x17, 0xe0, 0xea, 0xe8,
	0x62, 0xc5, 0x4f, 0xe2, 0x19, 0x7f, 0xba, 0x65, 0xbe, 0x0f, 0x9e, 0x1d, 0x9f, 0xbd, 0xb2, 0xf7,
	0xa9, 0x8c, 0x1f, 0x6c, 0x99, 0x2f, 0xc1, 0x73, 0xa3, 0x4a, 0x96, 0x3e, 0x3a, 0x65, 0x7c, 0xb2,
	0xba, 0xec, 0xa8, 0xe7, 0xa4, 0x8c, 0x1f, 0x6a, 0x99, 0x17, 0xe1, 0xa9, 0xd2, 0xb2, 0x83, 0x4f,
	0x36, 0x19, 0x7f, 0x66, 0x3c, 0x6a, 0xde, 0xaa, 0xf1, 0xa9, 0x96, 0x79, 0x09, 0xce, 0x0d, 0xa1,
	0xd6, 0x1e, 0x1d, 0x32, 0x7e, 0xb8, 0x65, 0x36, 0xe0, 0xfc, 0xc8, 0xca, 0xb3, 0x4d, 0xf5, 0x23,
	0xd5, 0x0c, 0x51, 0x52, 0xfd, 0x87, 0x7b, 0x34, 0x3e, 0x34, 0xfe, 0x6c, 0xf5, 0x54, 0x55, 0x95,
	0xc9, 0xda, 0xfb, 0xd1, 0x96, 0x79, 0x0e, 0x1e, 0x2f, 0x2d, 0xab, 0xdf, 0x52, 0x37, 0x3e, 0x5d,
	0xcd, 0x76, 0x43, 0x6e, 0x7a, 0x1b, 0x9f, 0xa9, 0x6e, 0xa0, 0x40, 0xf9, 0xe7, 0xaa, 0xf7, 0x5d,
	0xe5, 0x85, 0x65, 0xe3, 0x2f, 0x56, 0x73, 0xf5, 0xd0, 0xcb, 0xb8, 0xc6, 0x8f, 0x1d, 0xa9, 0x35,
	0x7e, 0xe3, 0xd3, 0xf8, 0x4b, 0xd5, 0xc7, 0x45, 0xf1, 0x4a, 0xa5, 0xf1, 0x97, 0xab, 0x69, 0x8b,
	0xf7, 0x20, 0x8d, 0xbf, 0xd2, 0x32, 0x2f, 0xc3, 0xd3, 0xd5, 0x1b, 0x65, 0xe0, 0x86, 0xa3, 0xf1,
	0xe3, 0x2d, 0xf3, 0x45, 0xb8, 0x36, 0xbc, 0x44, 0xf9, 0x05, 0x16, 0xe3, 0x27, 0xaa, 0xf7, 0xf3,
	0xd0, 0xb7, 0x81, 0xae, 0x1a, 0x7f, 0xb5, 0x65, 0x3e, 0x0e, 0xa7, 0xab, 0x1b, 0xbd, 0xe5, 0x25,
	0xa9, 0xf1, 0xd7, 0x46, 0x6c, 0xfa, 0x21, 0x37, 0x58, 0x8c, 0x9f, 0x1c, 0x31, 0xaa, 0xea, 0xcb,
	0x26, 0xc6, 0x4f, 0x55, 0x1f, 0x9d, 0xd5, 0xdf, 0xa5, 0x34, 0xfe, 0xfa, 0xa8, 0xb9, 0xa8, 0xca,
	0xb8, 0x32, 0xfe, 0x46, 0xcb, 0xfc, 0x10, 0xbc, 0x5c, 0x5a, 0x72, 0xbc, 0x8b, 0x44, 0xc6, 0xdf,
	0x1c, 0x7f, 0xb0, 0x85, 0xfb, 0x2f, 0xc6, 0xdf, 0x1a, 0xa1, 0x5f, 0x54, 0xdc, 0x71, 0x31, 0xfe,
	0x76, 0xcb, 0xbc, 0x02, 0x17, 0xcb, 0x27, 0xa9, 0x3c, 0x9b, 0xcb, 0xf8, 0x3b, 0xd5, 0x02, 0xa9,
	0x2a, 0xb7, 0xc9, 0xf8, 0x6c, 0xf5, 0xac, 0x0e, 0xcf, 0x63, 0x33, 0x7e, 0xba, 0x65, 0x3e, 0x0a,
	0x6b, 0xb2, 0xe4, 0x60, 0xba, 0xa5, 0xf1, 0xb9, 0xea, 0x9d, 0x52, 0x9e, 0xc5, 0x64, 0xfc, 0x4c,
	0xf5, 0x98, 0x2b, 0xb2, 0x91, 0x8c, 0xbf, 0x3b, 0xfe, 0xca, 0x14, 0x6e, 0x53, 0x19, 0x3f, 0x5b,
	0xad, 0x54, 0x8d, 0x93, 0xa8, 0x64, 0x7c, 0xbe, 0xba, 0xfc, 0x38, 0x77, 0xf9, 0x8c, 0x9f, 0x6b,
	0x99, 0x1f, 0x84, 0x97, 0xde, 0x4d, 0x79, 0xb1, 0x76, 0x7f, 0xaf, 0x7a, 0x82, 0xcb, 0x9f, 0x5e,
	0x35, 0x7e, 0xbe, 0x65, 0x3e, 0x0d, 0x67, 0x2b, 0x86, 0x9c, 0xde, 0x3e, 0x94, 0xaf, 0xda, 0xe2,
	0x02, 0xff, 0x42, 0x75, 0xff, 0xaa, 0x99, 0x5e, 0xc9, 0xf4, 0x36, 0xbe, 0x30, 0x42, 0x6b, 0x65,
	0x15, 0xdc, 0x8b, 0x18, 0xcf, 0x94, 0x97, 0xff, 0xc5, 0x96, 0x79, 0x16, 0x1e, 0x2b, 0x2d, 0x8f,
	0x5f, 0x13, 0xdb, 0xee, 0x75, 0xbb, 0x24, 0x3e, 0x34, 0x7e, 0x69, 0xcc, 0xe3, 0x4e, 0x7f, 0xf4,
	0xc9, 0xf8, 0xfb, 0x47, 0x28, 0x96, 0x3f, 0x84, 0x64, 0xfc, 0x83, 0x6a, 0x26, 0xad, 0x78, 0xf7,
	0xc7, 0xf8, 0xe5, 0xea, 0x03, 0xac, 0xf2, 0xbd, 0x1e, 0xe3, 0x1f, 0x0e, 0x11, 0x00, 0xe5, 0xa9,
	0x61, 0xc6, 0x17, 0x5b, 0xa6, 0x05, 0x8f, 0xc8, 0x22, 0xa5, 0x39, 0x2e, 0xc6, 0x97, 0x5a, 0xe6,
	0x13, 0xf0, 0x68, 0x19, 0x8d, 0x92, 0xca, 0x62, 0xfc, 0xa3, 0x96, 0xf9, 0x08, 0xac, 0x96, 0x51,
	0xb1, 0x13, 0xd7, 0xf8, 0x95, 0x6a, 0x3d, 0x6c, 0x30, 0x8f, 0xc4, 0xf8, 0xc7, 0xd5, 0x22, 0x70,
	0x58, 0x86, 0x88, 0xf1, 0xab, 0xd5, 0x0a, 0x59, 0x36, 0x03, 0xf9, 0x13, 0xe0, 0x89, 0xf1, 0xe5,
	0x96, 0xf9, 0x0c, 0x5c, 0x18, 0xde, 0x8e, 0x9a, 0xca, 0x61, 0xfc, 0x5a, 0xb5, 0xc0, 0x14, 0xb9,
	0xe8, 0xf2, 0xf4, 0xc3, 0xe2, 0xb8, 0xfc, 0xff, 0xa4, 0x7a, 0x59, 0x44, 0x19, 0x7e, 0x5e, 0x29,
	0x45, 0x7e, 0xbd, 0x5a, 0xf1, 0x29, 0xb8, 0xe1, 0x5d, 0xcd, 0x0d, 0x6f, 0xfc, 0xd3, 0x51, 0xac,
	0x36, 0x10, 0xbe, 0x30, 0x7e, 0x63, 0x94, 0x52, 0x3a, 0x98, 0x6e, 0x62, 0xfc, 0x33, 0x8d, 0x25,
	0xf4, 0xfe, 0xe1, 0xf4, 0x36, 0xf7, 0x48, 0x6a, 0xfc, 0xe6, 0x90, 0xd5, 0xc8, 0xa8, 0x14, 0x46,
	0xfb, 0xad, 0x6a, 0xe9, 0xa4, 0xd0, 0xab, 0x4c, 0xf7, 0xdb, 0xd5, 0xd2, 0x69, 0x20, 0x37, 0xc4,
	0xf8, 0xe7, 0xd5, 0xca, 0xaa, 0x9e, 0xc3, 0x61, 0xfc, 0xce, 0x28, 0xb6, 0x28, 0xc4, 0xfa, 0x8d,
	0xaf, 0x8c, 0x2a, 0x50, 0x88, 0xcf, 0x1b, 0xef, 0x54, 0xbb, 0x1b, 0x0a, 0x01, 0x74, 0xe3, 0x5f,
	0x0c, 0xd1, 0xb1, 0xb5, 0xc0, 0xb7, 0xf1, 0x2f, 0xab, 0x95, 0x52, 0x4e, 0x79, 0x2f, 0x88, 0x25,
	0xed, 0xbf, 0xaa, 0x96, 0x94, 0x6a, 0xe8, 0xd4, 0xf8, 0xd7, 0xa3, 0xe8, 0x78, 0x18, 0xd2, 0xf8,
	0x37, 0x23, 0x4f, 0x96, 0x42, 0x24, 0xd0, 0xf8, 0xb7, 0xa3, 0x2c, 0x33, 0xf5, 0x35, 0x64, 0xe3,
	0x77, 0x47, 0x59, 0x66, 0x5a, 0xc4, 0xc8, 0xf8, 0x77, 0xa3, 0x2c, 0x33, 0x3d, 0x56, 0x63, 0xfc,
	0xfb, 0x51, 0xf4, 0x7a, 0xe8, 0xc5, 0xf8, 0x0f, 0xa3, 0x3a, 0xaf, 0x46, 0x40, 0x8c, 0xaf, 0x8d,
	0x65, 0x2a, 0x97, 0x7e, 0xf9, 0xc2, 0xf8, 0xbd, 0xea, 0x45, 0x2d, 0x06, 0x39, 0x8c, 0xff, 0x38,
	0xe4, 0xd4, 0xa8, 0x0a, 0x51, 0x18, 0xff, 0x69, 0x94, 0x29, 0x93, 0xfb, 0xe6, 0x8d, 0xdf, 0x1f,
	0xa2, 0x87, 0x57, 0x46, 0x2b, 0x8c, 0xff, 0x3c, 0x6a, 0x77, 0x14, 0x42, 0x78, 0xc6, 0x7f, 0x19,
	0xa5, 0x07, 0x16, 0xbd, 0xe4, 0xc6, 0x7f, 0x1d, 0x7a, 0x5e, 0x96, 0x7b, 0x61, 0x8d, 0xff, 0x36,
	0xd4, 0xaa, 0xa8, 0x70, 0x54, 0x1a, 0xff, 0xbd, 0x75, 0xe1, 0xe3, 0x35, 0x30, 0xd1, 0x09, 0x89,
	0x22, 0x98, 0xa9, 0x86, 0x6c, 0xab, 0x9a, 0x67, 0xc1, 0xda, 0xb7, 0x07, 0xe1, 0xf6, 0x5b, 0xd1,
	0x06, 0x89, 0x03, 0xea, 0x72, 0xf5, 0xbe, 0x66, 0x5e, 0x42, 0x4e, 0x1b, 0xa4, 0xc3, 0xa5, 0x7f,
	0xd3, 0xe3, 0xa9, 0xb2, 0x34, 0xf5, 0x52, 0xaf, 0x4f, 0x8d, 0xba, 0xf9, 0x34, 0x32, 0xda, 0x20,
	0x39, 0x53, 0x83, 0xbd, 0x3e, 0x75, 0x6f, 0x90, 0xa0, 0x43, 0xe3, 0xaf, 0x0f, 0x03, 0x6a, 0x4c,
	0x5c, 0xe8, 0xc1, 0xc9, 0x0d, 0x75, 0x8e, 0xbc, 0xa0, 0x93, 0x7f, 0xbc, 0x8f, 0x09, 0x9c, 0x72,
	0xa4, 0x7d, 0xc7, 0x97, 0x6a, 0xb8, 0xf1, 0x80, 0x79, 0x19, 0x8f, 0x90, 0x0a, 0xca, 0xed, 0x5e,
	0xc4, 0x20, 0x89, 0x32, 0x91, 0xb5, 0xeb, 0xd6, 0x17, 0xbe, 0x7a, 0xba, 0xf6, 0xa5, 0xaf, 0x9e,
	0xae, 0xfd, 0xce, 0x57, 0x4f, 0xd7, 0x3e, 0xfa, 0xce, 0xe9, 0x07, 0xbe, 0xf4, 0xce, 0xe9, 0x07,
	0x7e, 0xfd, 0x9d, 0xd3, 0x0f, 0xbc, 0x5a, 0xfb, 0xfa, 0x89, 0x6e, 0xd2, 0xf9, 0x96, 0xda, 0x03,
	0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x72, 0x6a, 0x79, 0x9e, 0xdb, 0x98, 0x00, 0x00,
}

func (m *GameServerPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameServerPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameServerPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Instances))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ip))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ping))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *DataCenterPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataCenterPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataCenterPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64((uint32(m.Ping)<<1)^uint32((m.Ping>>31))))
	i--
	dAtA[i] = 0x10
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.DataCenterId))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *DetailedSearchStatistic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetailedSearchStatistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetailedSearchStatistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayersSearching))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SearchTimeAvg))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TournamentPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TournamentPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.PlayerDesc)
	copy(dAtA[i:], m.PlayerDesc)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.PlayerDesc)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.PlayerLocation)
	copy(dAtA[i:], m.PlayerLocation)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.PlayerLocation)))
	i--
	dAtA[i] = 0x32
	i -= len(m.PlayerFlag)
	copy(dAtA[i:], m.PlayerFlag)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.PlayerFlag)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayerDob))
	i--
	dAtA[i] = 0x20
	i -= len(m.PlayerName)
	copy(dAtA[i:], m.PlayerName)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.PlayerName)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.PlayerNick)
	copy(dAtA[i:], m.PlayerNick)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.PlayerNick)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TournamentTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TournamentTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i -= len(m.TeamName)
	copy(dAtA[i:], m.TeamName)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TeamName)))
	i--
	dAtA[i] = 0x22
	i -= len(m.TeamFlag)
	copy(dAtA[i:], m.TeamFlag)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TeamFlag)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.TeamTag)
	copy(dAtA[i:], m.TeamTag)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TeamTag)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TournamentEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TournamentEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ActiveSectionId))
	i--
	dAtA[i] = 0x48
	i -= len(m.EventStageName)
	copy(dAtA[i:], m.EventStageName)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.EventStageName)))
	i--
	dAtA[i] = 0x42
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventStageId))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventPublic))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventTimeEnd))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventTimeStart))
	i--
	dAtA[i] = 0x20
	i -= len(m.EventName)
	copy(dAtA[i:], m.EventName)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.EventName)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.EventTag)
	copy(dAtA[i:], m.EventTag)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.EventTag)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GlobalStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Rtime32EventStart))
	i--
	dAtA[i] = 0x78
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Rtime32Cur))
	i--
	dAtA[i] = 0x70
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ActiveSurveyId))
	i--
	dAtA[i] = 0x68
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ActiveTournamentEventid))
	i--
	dAtA[i] = 0x60
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TwitchStreamsVersion))
	i--
	dAtA[i] = 0x58
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PricesheetVersion))
	i--
	dAtA[i] = 0x50
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequiredAppidVersion))
	i--
	dAtA[i] = 0x48
	i -= len(m.MainPostUrl)
	copy(dAtA[i:], m.MainPostUrl)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.MainPostUrl)))
	i--
	dAtA[i] = 0x42
	if len(m.SearchStatistics) > 0 {
		for iNdEx := len(m.SearchStatistics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SearchStatistics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SearchTimeAvg))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.OngoingMatches))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServersAvailable))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayersSearching))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServersOnline))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayersOnline))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *OperationalStatisticDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationalStatisticDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationalStatisticDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Idkey))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OperationalStatisticElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationalStatisticElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationalStatisticElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Values[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Idkey))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *OperationalStatisticsPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationalStatisticsPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationalStatisticsPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Mstimestamp))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Packetid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PlayerRankingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerRankingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerRankingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RankTypeId))
	i--
	dAtA[i] = 0x30
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RankChange))))
	i--
	dAtA[i] = 0x25
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Wins))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RankId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PlayerCommendationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerCommendationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerCommendationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CmdLeader))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CmdTeaching))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CmdFriendly))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PlayerMedalsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerMedalsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerMedalsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.FeaturedDisplayItemDefidx))
	i--
	dAtA[i] = 0x40
	if len(m.DisplayItemsDefidx) > 0 {
		for iNdEx := len(m.DisplayItemsDefidx) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.DisplayItemsDefidx[iNdEx]))
			i--
			dAtA[i] = 0x38
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchid))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Map))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Mode))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Activity))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TournamentMatchSetup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentMatchSetup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TournamentMatchSetup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventStageId))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdT))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdCt))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ServerHltvInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerHltvInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerHltvInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Flags))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelaySteamid))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa0
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelayPort))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelayAddress))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelayProxies))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelayClients))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelaySlots))
	i--
	dAtA[i] = 0x78
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvLocalProxies))
	i--
	dAtA[i] = 0x70
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvLocalClients))
	i--
	dAtA[i] = 0x68
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvLocalSlots))
	i--
	dAtA[i] = 0x60
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvMasterSteamid))
	i--
	dAtA[i] = 0x58
	i -= len(m.GameMap)
	copy(dAtA[i:], m.GameMap)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.GameMap)))
	i--
	dAtA[i] = 0x52
	i -= len(m.GameMapgroup)
	copy(dAtA[i:], m.GameMapgroup)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.GameMapgroup)))
	i--
	dAtA[i] = 0x4a
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvTime))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvProxies))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvClients))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvSlots))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvWatchKey))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvUdpPort))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *IpAddressMask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpAddressMask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpAddressMask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Token))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Bits))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.D))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.C))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.B))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.A))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgCsgoSteamUserStatChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgCsgoSteamUserStatChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgCsgoSteamUserStatChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Absolute {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Delta))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ecsgosteamuserstat))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *XpProgressData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XpProgressData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XpProgressData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.XpCategory))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.XpPoints))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *MatchEndItemUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchEndItemUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchEndItemUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ItemAttrDeltaValue))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ItemAttrDefidx))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ItemId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ScoreLeaderboardData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoreLeaderboardData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScoreLeaderboardData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Matchentries) > 0 {
		for iNdEx := len(m.Matchentries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Matchentries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Accountentries) > 0 {
		for iNdEx := len(m.Accountentries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accountentries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Score))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.QuestId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ScoreLeaderboardData_Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoreLeaderboardData_Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScoreLeaderboardData_Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Val))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Tag))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ScoreLeaderboardData_AccountEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoreLeaderboardData_AccountEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScoreLeaderboardData_AccountEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PlayerQuestData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerQuestData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerQuestData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Userstatchanges) > 0 {
		for iNdEx := len(m.Userstatchanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Userstatchanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	i--
	if m.OperationPointsEligible {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	if len(m.ItemUpdates) > 0 {
		for iNdEx := len(m.ItemUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MmGameMode))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TimePlayed))
	i--
	dAtA[i] = 0x20
	if len(m.XpProgressData) > 0 {
		for iNdEx := len(m.XpProgressData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.XpProgressData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.QuestItemData) > 0 {
		for iNdEx := len(m.QuestItemData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QuestItemData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.QuesterAccountId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PlayerQuestData_QuestItemData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerQuestData_QuestItemData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerQuestData_QuestItemData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.QuestBonusPointsEarned))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.QuestNormalPointsEarned))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.QuestId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGC_ServerQuestUpdateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGC_ServerQuestUpdateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGC_ServerQuestUpdateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Missionlbsdata != nil {
		{
			size, err := m.Missionlbsdata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MmGameMode))
	i--
	dAtA[i] = 0x18
	if m.BinaryData != nil {
		i -= len(m.BinaryData)
		copy(dAtA[i:], m.BinaryData)
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.BinaryData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayerQuestData) > 0 {
		for iNdEx := len(m.PlayerQuestData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayerQuestData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Packets) > 0 {
		for iNdEx := len(m.Packets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Namekeys) > 0 {
		for iNdEx := len(m.Namekeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Namekeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Packetid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Exchange))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Stamp))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Token))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ViewersExternalSteam))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ViewersExternalTotal))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.PrimeOnly {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	if m.TournamentMatch != nil {
		{
			size, err := m.TournamentMatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ClientVersion))
	i--
	dAtA[i] = 0x20
	i -= len(m.TicketData)
	copy(dAtA[i:], m.TicketData)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TicketData)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	i--
	dAtA[i] = 0x10
	if len(m.AccountIds) > 0 {
		for iNdEx := len(m.AccountIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountIds[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingStop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingStop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingStop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Abandon))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TestToken))
	i--
	dAtA[i] = 0x35
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MaxPing))
	i--
	dAtA[i] = 0x28
	if len(m.DataCenterPings) > 0 {
		for iNdEx := len(m.DataCenterPings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataCenterPings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.FinalBatch))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.OffsetIndex))
	i--
	dAtA[i] = 0x10
	if len(m.Gameserverpings) > 0 {
		for iNdEx := len(m.Gameserverpings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gameserverpings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InsecureAccountIdSessions) > 0 {
		for iNdEx := len(m.InsecureAccountIdSessions) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.InsecureAccountIdSessions[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
	}
	if len(m.LauncherMismatchSessions) > 0 {
		for iNdEx := len(m.LauncherMismatchSessions) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.LauncherMismatchSessions[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
	}
	if len(m.VsncheckAccountIdSessions) > 0 {
		for iNdEx := len(m.VsncheckAccountIdSessions) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.VsncheckAccountIdSessions[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
	}
	if len(m.InsufficientlevelSessions) > 0 {
		for iNdEx := len(m.InsufficientlevelSessions) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.InsufficientlevelSessions[iNdEx]))
			i--
			dAtA[i] = 0x78
		}
	}
	if len(m.PenaltyAccountIdSessionsGreen) > 0 {
		for iNdEx := len(m.PenaltyAccountIdSessionsGreen) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PenaltyAccountIdSessionsGreen[iNdEx]))
			i--
			dAtA[i] = 0x70
		}
	}
	if len(m.Notes) > 0 {
		for iNdEx := len(m.Notes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.ServerIpaddressMask != nil {
		{
			size, err := m.ServerIpaddressMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.VacbannedAccountIdSessions) > 0 {
		for iNdEx := len(m.VacbannedAccountIdSessions) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.VacbannedAccountIdSessions[iNdEx]))
			i--
			dAtA[i] = 0x58
		}
	}
	if len(m.FailreadyAccountIdSessions) > 0 {
		for iNdEx := len(m.FailreadyAccountIdSessions) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.FailreadyAccountIdSessions[iNdEx]))
			i--
			dAtA[i] = 0x50
		}
	}
	if len(m.PenaltyAccountIdSessions) > 0 {
		for iNdEx := len(m.PenaltyAccountIdSessions) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PenaltyAccountIdSessions[iNdEx]))
			i--
			dAtA[i] = 0x48
		}
	}
	if len(m.FailpingAccountIdSessions) > 0 {
		for iNdEx := len(m.FailpingAccountIdSessions) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.FailpingAccountIdSessions[iNdEx]))
			i--
			dAtA[i] = 0x40
		}
	}
	if m.GlobalStats != nil {
		{
			size, err := m.GlobalStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OngoingmatchAccountIdSessions) > 0 {
		for iNdEx := len(m.OngoingmatchAccountIdSessions) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.OngoingmatchAccountIdSessions[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	i -= len(m.Error)
	copy(dAtA[i:], m.Error)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Error)))
	i--
	dAtA[i] = 0x1a
	if len(m.WaitingAccountIdSessions) > 0 {
		for iNdEx := len(m.WaitingAccountIdSessions) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.WaitingAccountIdSessions[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchmaking))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Distance))))
	i--
	dAtA[i] = 0x25
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RegionR))))
	i--
	dAtA[i] = 0x1d
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RegionId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Drafts) > 0 {
		for iNdEx := len(m.Drafts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Drafts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdPickn))
	i--
	dAtA[i] = 0x48
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdVeto1))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdStart))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MapsCurrent))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MapsCount))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamId_1))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamId_0))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventStageId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdCt))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Mapid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CPreMatchInfoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPreMatchInfoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPreMatchInfoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wins) > 0 {
		for iNdEx := len(m.Wins) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Wins[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Draft != nil {
		{
			size, err := m.Draft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PredictionsPct))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CPreMatchInfoData_TeamStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPreMatchInfoData_TeamStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPreMatchInfoData_TeamStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchInfoTeams) > 0 {
		for iNdEx := len(m.MatchInfoTeams) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MatchInfoTeams[iNdEx])
			copy(dAtA[i:], m.MatchInfoTeams[iNdEx])
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.MatchInfoTeams[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.MatchInfoTxt)
	copy(dAtA[i:], m.MatchInfoTxt)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.MatchInfoTxt)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchInfoIdxtxt))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Flags))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvControl))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Rtime32EventStart))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	if m.PreMatchData != nil {
		{
			size, err := m.PreMatchData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelaySteamid))
	i--
	dAtA[i] = 0x70
	if len(m.TournamentCastersAccountIds) > 0 {
		for iNdEx := len(m.TournamentCastersAccountIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TournamentCastersAccountIds[iNdEx]))
			i--
			dAtA[i] = 0x68
		}
	}
	if len(m.TournamentTeams) > 0 {
		for iNdEx := len(m.TournamentTeams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TournamentTeams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.TournamentEvent != nil {
		{
			size, err := m.TournamentEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvMasterSteamid))
	i--
	dAtA[i] = 0x50
	if len(m.Whitelist) > 0 {
		for iNdEx := len(m.Whitelist) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Whitelist[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.PartyIds) > 0 {
		for iNdEx := len(m.PartyIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PartyIds[iNdEx]))
			i--
			dAtA[i] = 0x40
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EncryptionKeyPub))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EncryptionKey))
	i--
	dAtA[i] = 0x30
	if len(m.Rankings) > 0 {
		for iNdEx := len(m.Rankings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rankings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerVersion))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	i--
	dAtA[i] = 0x10
	if len(m.AccountIds) > 0 {
		for iNdEx := len(m.AccountIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountIds[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SteamdatagramRouting))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Flags))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TestToken))
	i--
	dAtA[i] = 0x7d
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.LegacySteamdatagramPort))
	i--
	dAtA[i] = 0x70
	i -= len(m.TournamentTag)
	copy(dAtA[i:], m.TournamentTag)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TournamentTag)))
	i--
	dAtA[i] = 0x6a
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RewardDropList))
	i--
	dAtA[i] = 0x60
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RewardItemAttrRewardIdx))
	i--
	dAtA[i] = 0x58
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RewardItemAttrValue))
	i--
	dAtA[i] = 0x50
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RewardItemAttrDefIdx))
	i--
	dAtA[i] = 0x48
	if len(m.IdlePlayerAccounts) > 0 {
		for iNdEx := len(m.IdlePlayerAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.IdlePlayerAccounts[iNdEx]))
			i--
			dAtA[i] = 0x40
		}
	}
	if len(m.RewardPlayerAccounts) > 0 {
		for iNdEx := len(m.RewardPlayerAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RewardPlayerAccounts[iNdEx]))
			i--
			dAtA[i] = 0x38
		}
	}
	if m.TvInfo != nil {
		{
			size, err := m.TvInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerVersion))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GcReservationSent))
	i--
	dAtA[i] = 0x20
	i -= len(m.Map)
	copy(dAtA[i:], m.Map)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Map)))
	i--
	dAtA[i] = 0x1a
	if m.Reservation != nil {
		{
			size, err := m.Reservation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reservationid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ServerAddress)
	copy(dAtA[i:], m.ServerAddress)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.ServerAddress)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.Map)
	copy(dAtA[i:], m.Map)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Map)))
	i--
	dAtA[i] = 0x32
	if m.Reservation != nil {
		{
			size, err := m.Reservation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reservationid))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.DirectUdpPort))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.DirectUdpIp))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Serverid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DropInfo != nil {
		{
			size, err := m.DropInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.EnemyKillsAgg) > 0 {
		for iNdEx := len(m.EnemyKillsAgg) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EnemyKillsAgg[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc8
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SpectatorsCountLnk))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc0
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SpectatorsCountTv))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb8
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SpectatorsCount))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb0
	if len(m.Mvps) > 0 {
		for iNdEx := len(m.Mvps) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Mvps[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa8
		}
	}
	if len(m.Enemy_5Ks) > 0 {
		for iNdEx := len(m.Enemy_5Ks) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Enemy_5Ks[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
	}
	if len(m.Enemy_4Ks) > 0 {
		for iNdEx := len(m.Enemy_4Ks) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Enemy_4Ks[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
	}
	if len(m.Enemy_3Ks) > 0 {
		for iNdEx := len(m.Enemy_3Ks) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Enemy_3Ks[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
	}
	if len(m.EnemyHeadshots) > 0 {
		for iNdEx := len(m.EnemyHeadshots) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EnemyHeadshots[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
	}
	if len(m.EnemyKills) > 0 {
		for iNdEx := len(m.EnemyKills) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EnemyKills[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchDuration))
	i--
	dAtA[i] = 0x78
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ReservationStage))
	i--
	dAtA[i] = 0x70
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TeamScores) > 0 {
		for iNdEx := len(m.TeamScores) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamScores[iNdEx]))
			i--
			dAtA[i] = 0x60
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchResult))
	i--
	dAtA[i] = 0x58
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RoundResult))
	i--
	dAtA[i] = 0x50
	if len(m.Pings) > 0 {
		for iNdEx := len(m.Pings) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Pings[iNdEx]))
			i--
			dAtA[i] = 0x48
		}
	}
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Scores[iNdEx]))
			i--
			dAtA[i] = 0x40
		}
	}
	if len(m.Deaths) > 0 {
		for iNdEx := len(m.Deaths) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Deaths[iNdEx]))
			i--
			dAtA[i] = 0x38
		}
	}
	if len(m.Assists) > 0 {
		for iNdEx := len(m.Assists) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Assists[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if len(m.Kills) > 0 {
		for iNdEx := len(m.Kills) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Kills[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Round))
	i--
	dAtA[i] = 0x20
	i -= len(m.Map)
	copy(dAtA[i:], m.Map)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Map)))
	i--
	dAtA[i] = 0x1a
	if m.Reservation != nil {
		{
			size, err := m.Reservation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reservationid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountMvp))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerVersion))
	i--
	dAtA[i] = 0x48
	if m.MatchEndQuestData != nil {
		{
			size, err := m.MatchEndQuestData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	i--
	if m.AbortedMatch {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ReplayClusterId))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ReplayToken))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Rematch))
	i--
	dAtA[i] = 0x20
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerVersion))
	i--
	dAtA[i] = 0x28
	if m.CompletedPlayerQuestData != nil {
		{
			size, err := m.CompletedPlayerQuestData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Reservation != nil {
		{
			size, err := m.Reservation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reservationid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rankings) > 0 {
		for iNdEx := len(m.Rankings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rankings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayerXpBonusFlags))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayerCurXp))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayerLevel))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	if m.Activity != nil {
		{
			size, err := m.Activity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SurveyVote))
	i--
	dAtA[i] = 0x70
	if len(m.MyCurrentEventStages) > 0 {
		for iNdEx := len(m.MyCurrentEventStages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MyCurrentEventStages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.MyCurrentTeam != nil {
		{
			size, err := m.MyCurrentTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.MyCurrentEventTeams) > 0 {
		for iNdEx := len(m.MyCurrentEventTeams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MyCurrentEventTeams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.MyCurrentEvent != nil {
		{
			size, err := m.MyCurrentEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Medals != nil {
		{
			size, err := m.Medals.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Commendation != nil {
		{
			size, err := m.Commendation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Ranking != nil {
		{
			size, err := m.Ranking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.VacBanned))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PenaltyReason))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PenaltySeconds))
	i--
	dAtA[i] = 0x20
	if m.GlobalStats != nil {
		{
			size, err := m.GlobalStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Ongoingmatch != nil {
		{
			size, err := m.Ongoingmatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for iNdEx := len(m.Settings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Settings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SettingValue))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SettingType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PenaltyReason))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PenaltySeconds))
	i--
	dAtA[i] = 0x18
	if m.AbandonedMatch != nil {
		{
			size, err := m.AbandonedMatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reason))
	i--
	dAtA[i] = 0x18
	if m.Reservation != nil {
		{
			size, err := m.Reservation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	i--
	dAtA[i] = 0x10
	if len(m.Rankings) > 0 {
		for iNdEx := len(m.Rankings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rankings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rankings) > 0 {
		for iNdEx := len(m.Rankings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rankings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.MainPostUrl)
	copy(dAtA[i:], m.MainPostUrl)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.MainPostUrl)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.CommunicationCooldown {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Seconds))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reason))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ReportFromDemo {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptVoiceabuse))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptTextabuse))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptTeamharm))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptSpeedhack))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptWallhack))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptAimbot))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Tokens))
	i--
	dAtA[i] = 0x50
	if m.Commendation != nil {
		{
			size, err := m.Commendation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientReportServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientReportServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientReportServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptInventoryabuse))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptListingabuse))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptBadmotd))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptAbusivemodels))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptPoorperf))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Tokens))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ResponseResult))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ResponseType))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerIp))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ConfirmationId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataCenterPings) > 0 {
		for iNdEx := len(m.DataCenterPings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataCenterPings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ClientLauncher))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchid))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Serverid))
	i--
	dAtA[i] = 0x18
	if len(m.AccountIds) > 0 {
		for iNdEx := len(m.AccountIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountIds[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequestId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *WatchableMatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchableMatchInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchableMatchInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ReservationId))
	i--
	dAtA[i] = 0x68
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	i--
	dAtA[i] = 0x60
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerId))
	i--
	dAtA[i] = 0x58
	i -= len(m.GameMap)
	copy(dAtA[i:], m.GameMap)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.GameMap)))
	i--
	dAtA[i] = 0x52
	i -= len(m.GameMapgroup)
	copy(dAtA[i:], m.GameMapgroup)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.GameMapgroup)))
	i--
	dAtA[i] = 0x4a
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ClDecryptdataKeyPub))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ClDecryptdataKey))
	i--
	dAtA[i] = 0x30
	if m.TvWatchPassword != nil {
		i -= len(m.TvWatchPassword)
		copy(dAtA[i:], m.TvWatchPassword)
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TvWatchPassword)))
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvTime))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvSpectators))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvPort))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerIp))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Errormsg)
	copy(dAtA[i:], m.Errormsg)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Errormsg)))
	i--
	dAtA[i] = 0x32
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.JoinIpp))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.JoinToken))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Errormsg)
	copy(dAtA[i:], m.Errormsg)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Errormsg)))
	i--
	dAtA[i] = 0x3a
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerPort))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerIp))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Serverid))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CampaignId))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MissionId))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.OperationPointsAwarded))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.UpgradedDefidx))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CurrentLevel))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CurrentXp))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x10
	if len(m.XpProgressData) > 0 {
		for iNdEx := len(m.XpProgressData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.XpProgressData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ExtendedTimeout))
	i--
	dAtA[i] = 0x28
	if len(m.WatchableMatchInfos) > 0 {
		for iNdEx := len(m.WatchableMatchInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WatchableMatchInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AccountIds) > 0 {
		for iNdEx := len(m.AccountIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountIds[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequestId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequestLevel))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x18
	if len(m.AccountIds_Deprecated) > 0 {
		for iNdEx := len(m.AccountIds_Deprecated) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountIds_Deprecated[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequestId_Deprecated))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_PlayersProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_PlayersProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_PlayersProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountProfiles) > 0 {
		for iNdEx := len(m.AccountProfiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountProfiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequestId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reason))
	i--
	dAtA[i] = 0x48
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptTeamharm))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptSpeedhack))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptWallhack))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptAimbot))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Fractionid))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Suspectid))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Caseid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reason))
	i--
	dAtA[i] = 0x58
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Streakconvictions))
	i--
	dAtA[i] = 0x50
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Fractionrounds))
	i--
	dAtA[i] = 0x48
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Numrounds))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Fractionid))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Suspectid))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Throttleseconds))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Timestamp))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Verdict))
	i--
	dAtA[i] = 0x18
	i -= len(m.Caseurl)
	copy(dAtA[i:], m.Caseurl)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Caseurl)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Caseid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Statusid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Caseid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CClientHeaderOverwatchEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CClientHeaderOverwatchEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CClientHeaderOverwatchEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Caseid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MatchEndQuestData != nil {
		{
			size, err := m.MatchEndQuestData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Serverinfo != nil {
		{
			size, err := m.Serverinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *CEconItemPreviewDataBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEconItemPreviewDataBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CEconItemPreviewDataBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Entindex))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Musicindex))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Dropreason))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Questid))
	i--
	dAtA[i] = 0x78
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Origin))
	i--
	dAtA[i] = 0x70
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Inventory))
	i--
	dAtA[i] = 0x68
	if len(m.Stickers) > 0 {
		for iNdEx := len(m.Stickers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stickers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	i -= len(m.Customname)
	copy(dAtA[i:], m.Customname)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Customname)))
	i--
	dAtA[i] = 0x5a
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Killeatervalue))
	i--
	dAtA[i] = 0x50
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Killeaterscoretype))
	i--
	dAtA[i] = 0x48
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Paintseed))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Paintwear))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Quality))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Rarity))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Paintindex))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Defindex))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Itemid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CEconItemPreviewDataBlock_Sticker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEconItemPreviewDataBlock_Sticker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CEconItemPreviewDataBlock_Sticker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TintId))
	i--
	dAtA[i] = 0x30
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rotation))))
	i--
	dAtA[i] = 0x2d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Scale))))
	i--
	dAtA[i] = 0x25
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Wear))))
	i--
	dAtA[i] = 0x1d
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.StickerId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Slot))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Iteminfo != nil {
		{
			size, err := m.Iteminfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}

func (m *CMsgItemAcknowledged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgItemAcknowledged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgItemAcknowledged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Iteminfo != nil {
		{
			size, err := m.Iteminfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ParamM))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ParamD))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ParamA))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ParamS))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Iteminfo != nil {
		{
			size, err := m.Iteminfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accountids) > 0 {
		for iNdEx := len(m.Accountids) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountids[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Defindex))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Eventid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Token))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Outcomeid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CDataGCCStrike15V2_MatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_MatchInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDataGCCStrike15V2_MatchInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roundstatsall) > 0 {
		for iNdEx := len(m.Roundstatsall) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roundstatsall[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.RoundstatsLegacy != nil {
		{
			size, err := m.RoundstatsLegacy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Watchablematchinfo != nil {
		{
			size, err := m.Watchablematchinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchtime))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Correctpick {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Score))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CDataGCCStrike15V2_TournamentGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDataGCCStrike15V2_TournamentGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Picks) > 0 {
		for iNdEx := len(m.Picks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Picks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PointsPerPick))
	i--
	dAtA[i] = 0x48
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Pickableteams))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Picklockuntiltime))
	i--
	dAtA[i] = 0x38
	if len(m.StageIds) > 0 {
		for iNdEx := len(m.StageIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.StageIds[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Picks_Deprecated))
	i--
	dAtA[i] = 0x20
	i -= len(m.Desc)
	copy(dAtA[i:], m.Desc)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Desc)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Groupid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CDataGCCStrike15V2_TournamentGroup_Picks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentGroup_Picks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDataGCCStrike15V2_TournamentGroup_Picks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pickids) > 0 {
		for iNdEx := len(m.Pickids) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Pickids[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *CDataGCCStrike15V2_TournamentSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentSection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDataGCCStrike15V2_TournamentSection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.Desc)
	copy(dAtA[i:], m.Desc)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Desc)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Sectionid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CDataGCCStrike15V2_TournamentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDataGCCStrike15V2_TournamentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TournamentTeams) > 0 {
		for iNdEx := len(m.TournamentTeams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TournamentTeams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TournamentEvent != nil {
		{
			size, err := m.TournamentEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_MatchList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_MatchList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tournamentinfo != nil {
		{
			size, err := m.Tournamentinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Streams) > 0 {
		for iNdEx := len(m.Streams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Streams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Matches) > 0 {
		for iNdEx := len(m.Matches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Matches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Servertime))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Msgrequestid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Predictions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Predictions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Predictions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupMatchTeamPicks) > 0 {
		for iNdEx := len(m.GroupMatchTeamPicks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupMatchTeamPicks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Itemid))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Teamid))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Groupid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Sectionid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Fantasy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Fantasy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Fantasy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Itemid))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Pick))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slots) > 0 {
		for iNdEx := len(m.Slots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Slots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Sectionid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CAttribute_String) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAttribute_String) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CAttribute_String) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Value)
	copy(dAtA[i:], m.Value)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Value)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CMsgGCToGCReloadVersions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCToGCReloadVersions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCToGCReloadVersions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CMsgCStrike15Welcome) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgCStrike15Welcome) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgCStrike15Welcome) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Uniqueid))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Gscookieid))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.LastIpAddress))
	i--
	dAtA[i] = 0x68
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.LastTimePlayed))
	i--
	dAtA[i] = 0x60
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TimeFirstPlayed))
	i--
	dAtA[i] = 0x50
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Timeplayedconsecutively))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.StoreItemHash))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChokedBlocks) > 0 {
		for iNdEx := len(m.ChokedBlocks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChokedBlocks[iNdEx])
			copy(dAtA[i:], m.ChokedBlocks[iNdEx])
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.ChokedBlocks[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerPort))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerAddr))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ValueInt))
	i--
	dAtA[i] = 0x10
	i -= len(m.ValueName)
	copy(dAtA[i:], m.ValueName)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.ValueName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x18
	if len(m.Viewangles) > 0 {
		for iNdEx := len(m.Viewangles) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Viewangles[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TotalGivers))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TotalGiftsGiven))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TimePeriodSeconds))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Servertime))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Gifts))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Vote))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SurveyId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Server2GCClientValidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Server2GCClientValidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Server2GCClientValidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PackFileId))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PackNumber))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Len))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Hash))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Crc))
	i--
	dAtA[i] = 0x20
	i -= len(m.File)
	copy(dAtA[i:], m.File)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.File)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Teamids) > 0 {
		for iNdEx := len(m.Teamids) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Teamids[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Stageid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Eventid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CSOEconCoupon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSOEconCoupon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSOEconCoupon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ExpirationDate))
	i--
	dAtA[i] = 0x1d
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Defidx))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Entryid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CSOQuestProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSOQuestProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSOQuestProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.BonusPoints))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PointsRemaining))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Questid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CSOAccountSeasonalOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSOAccountSeasonalOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSOAccountSeasonalOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MissionsCompleted))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MissionId))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PremiumTiers))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TierUnlocked))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SeasonValue))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CSOPersonaDataPublic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSOPersonaDataPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSOPersonaDataPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ElevatedState {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if m.Commendation != nil {
		{
			size, err := m.Commendation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayerLevel))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGC_GlobalGame_Subscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGC_GlobalGame_Subscribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGC_GlobalGame_Subscribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ticket))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGC_GlobalGame_Unsubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGC_GlobalGame_Unsubscribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGC_GlobalGame_Unsubscribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Timeleft))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGC_GlobalGame_Play) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGC_GlobalGame_Play) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGC_GlobalGame_Play) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Msperpoint))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Gametimems))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ticket))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_AcknowledgePenalty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_AcknowledgePenalty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_AcknowledgePenalty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Acknowledged))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Prestigetime))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Hours))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Upgradeid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Defindex))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Os))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ticket))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Stage))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_GCToClientChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GCToClientChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_GCToClientChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Code)
	copy(dAtA[i:], m.Code)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Code)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Eventid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15_GotvSyncPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15_GotvSyncPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15_GotvSyncPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerDecalDigitalSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDecalDigitalSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerDecalDigitalSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TintId))
	i--
	dAtA[i] = 0x70
	if len(m.Normal) > 0 {
		for iNdEx := len(m.Normal) - 1; iNdEx >= 0; iNdEx-- {
			f44 := math.Float32bits(float32(m.Normal[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f44))
			i--
			dAtA[i] = 0x6d
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TraceId))
	i--
	dAtA[i] = 0x60
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Equipslot))
	i--
	dAtA[i] = 0x58
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Creationtime))))
	i--
	dAtA[i] = 0x55
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Hitbox))
	i--
	dAtA[i] = 0x48
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Entindex))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TxDefidx))
	i--
	dAtA[i] = 0x38
	if len(m.Right) > 0 {
		for iNdEx := len(m.Right) - 1; iNdEx >= 0; iNdEx-- {
			f45 := math.Float32bits(float32(m.Right[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f45))
			i--
			dAtA[i] = 0x35
		}
	}
	if len(m.Startpos) > 0 {
		for iNdEx := len(m.Startpos) - 1; iNdEx >= 0; iNdEx-- {
			f46 := math.Float32bits(float32(m.Startpos[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f46))
			i--
			dAtA[i] = 0x2d
		}
	}
	if len(m.Endpos) > 0 {
		for iNdEx := len(m.Endpos) - 1; iNdEx >= 0; iNdEx-- {
			f47 := math.Float32bits(float32(m.Endpos[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f47))
			i--
			dAtA[i] = 0x25
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Rtime))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x10
	if m.Signature != nil {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Itemid))
	i--
	dAtA[i] = 0x10
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientLogonFatalError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientLogonFatalError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientLogonFatalError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Country)
	copy(dAtA[i:], m.Country)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Country)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Errorcode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientPollState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientPollState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientPollState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Values[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Pollid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Party_Register) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Party_Register) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Party_Register) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	i--
	dAtA[i] = 0x48
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Launcher))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Slots))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Grp))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Nby))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ark))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Apr))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ver))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Party_Search) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Party_Search) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Party_Search) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Launcher))
	i--
	dAtA[i] = 0x28
	if len(m.Grps) > 0 {
		for iNdEx := len(m.Grps) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Grps[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ark))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Apr))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ver))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Party_SearchResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Party_SearchResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Party_SearchResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Loc))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ark))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Apr))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Grp))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Party_Invite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Party_Invite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Party_Invite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Lobbyid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Servertime))
	i--
	dAtA[i] = 0x10
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Online {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Rtcoplay))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.GameserverSdrRouting)
	copy(dAtA[i:], m.GameserverSdrRouting)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.GameserverSdrRouting)))
	i--
	dAtA[i] = 0x2a
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.GameserverSteamId))
	i--
	dAtA[i] = 0x19
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.AuthorizedPublicIp))
	i--
	dAtA[i] = 0x15
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AuthorizedSteamId))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}

func (m *CMsgGCToClientSteamDatagramTicket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCToClientSteamDatagramTicket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCToClientSteamDatagramTicket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SerializedTicket != nil {
		i -= len(m.SerializedTicket)
		copy(dAtA[i:], m.SerializedTicket)
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.SerializedTicket)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientRequestOffers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientRequestOffers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientRequestOffers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Eventid))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Itemid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientAccountBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientAccountBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientAccountBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Url)
	copy(dAtA[i:], m.Url)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Url)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Amount))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Lobbyid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientPartyWarning) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientPartyWarning) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientPartyWarning) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Warntype))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_SetEventFavorite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_SetEventFavorite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_SetEventFavorite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.IsFavorite {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Eventid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.AllEvents {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.JsonFeatured)
	copy(dAtA[i:], m.JsonFeatured)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.JsonFeatured)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.JsonFavorites)
	copy(dAtA[i:], m.JsonFavorites)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.JsonFavorites)))
	i--
	dAtA[i] = 0x12
	i--
	if m.AllEvents {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientPerfReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientPerfReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientPerfReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Sourceid))
	i--
	dAtA[i] = 0x28
	if m.Actual != nil {
		i -= len(m.Actual)
		copy(dAtA[i:], m.Actual)
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Actual)))
		i--
		dAtA[i] = 0x22
	}
	if m.Reference != nil {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Length))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Perfcounter))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Clientreportversion))
	i--
	dAtA[i] = 0x50
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Osversion))
	i--
	dAtA[i] = 0x48
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ProcessId))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CountCompleted))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CountPending))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TrustTime))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.InternalError))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TotalFiles))
	i--
	dAtA[i] = 0x18
	i -= len(m.CommandLine)
	copy(dAtA[i:], m.CommandLine)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.CommandLine)))
	i--
	dAtA[i] = 0x12
	i -= len(m.FileReport)
	copy(dAtA[i:], m.FileReport)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.FileReport)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.KickUser {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i--
	if m.ShowUnsignedUi {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i--
	if m.OfferSecureMode {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i--
	if m.OfferInsecureMode {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i -= len(m.FileReport)
	copy(dAtA[i:], m.FileReport)
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.FileReport)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.FullReport {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintCstrike15Gcmessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovCstrike15Gcmessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GameServerPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ping))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ip))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Instances))
	return n
}

func (m *DataCenterPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 1 + sozCstrike15Gcmessages(uint64(m.Ping))
	return n
}

func (m *DetailedSearchStatistic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	n += 1 + sovCstrike15Gcmessages(uint64(m.SearchTimeAvg))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PlayersSearching))
	return n
}

func (m *TournamentPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	l = len(m.PlayerNick)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.PlayerName)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PlayerDob))
	l = len(m.PlayerFlag)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.PlayerLocation)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.PlayerDesc)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *TournamentTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamId))
	l = len(m.TeamTag)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.TeamFlag)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.TeamName)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *TournamentEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventId))
	l = len(m.EventTag)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.EventName)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventTimeStart))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventTimeEnd))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventPublic))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventStageId))
	l = len(m.EventStageName)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ActiveSectionId))
	return n
}

func (m *GlobalStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.PlayersOnline))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServersOnline))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PlayersSearching))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServersAvailable))
	n += 1 + sovCstrike15Gcmessages(uint64(m.OngoingMatches))
	n += 1 + sovCstrike15Gcmessages(uint64(m.SearchTimeAvg))
	if len(m.SearchStatistics) > 0 {
		for _, e := range m.SearchStatistics {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	l = len(m.MainPostUrl)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequiredAppidVersion))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PricesheetVersion))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TwitchStreamsVersion))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ActiveTournamentEventid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ActiveSurveyId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Rtime32Cur))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Rtime32EventStart))
	return n
}

func (m *OperationalStatisticDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Idkey))
	return n
}

func (m *OperationalStatisticElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Idkey))
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *OperationalStatisticsPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Packetid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Mstimestamp))
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *PlayerRankingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RankId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Wins))
	n += 5
	n += 1 + sovCstrike15Gcmessages(uint64(m.RankTypeId))
	return n
}

func (m *PlayerCommendationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.CmdFriendly))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CmdTeaching))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CmdLeader))
	return n
}

func (m *PlayerMedalsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DisplayItemsDefidx) > 0 {
		for _, e := range m.DisplayItemsDefidx {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.FeaturedDisplayItemDefidx))
	return n
}

func (m *AccountActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Activity))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Mode))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Map))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchid))
	return n
}

func (m *TournamentMatchSetup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdCt))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdT))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventStageId))
	return n
}

func (m *ServerHltvInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvUdpPort))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvWatchKey))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvSlots))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvClients))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvProxies))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvTime))
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	l = len(m.GameMapgroup)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.GameMap)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvMasterSteamid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvLocalSlots))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvLocalClients))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvLocalProxies))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvRelaySlots))
	n += 2 + sovCstrike15Gcmessages(uint64(m.TvRelayClients))
	n += 2 + sovCstrike15Gcmessages(uint64(m.TvRelayProxies))
	n += 2 + sovCstrike15Gcmessages(uint64(m.TvRelayAddress))
	n += 2 + sovCstrike15Gcmessages(uint64(m.TvRelayPort))
	n += 2 + sovCstrike15Gcmessages(uint64(m.TvRelaySteamid))
	n += 2 + sovCstrike15Gcmessages(uint64(m.Flags))
	return n
}

func (m *IpAddressMask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.A))
	n += 1 + sovCstrike15Gcmessages(uint64(m.B))
	n += 1 + sovCstrike15Gcmessages(uint64(m.C))
	n += 1 + sovCstrike15Gcmessages(uint64(m.D))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Bits))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Token))
	return n
}

func (m *CMsgCsgoSteamUserStatChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ecsgosteamuserstat))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Delta))
	n += 2
	return n
}

func (m *XpProgressData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.XpPoints))
	n += 1 + sovCstrike15Gcmessages(uint64(m.XpCategory))
	return n
}

func (m *MatchEndItemUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.ItemId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ItemAttrDefidx))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ItemAttrDeltaValue))
	return n
}

func (m *ScoreLeaderboardData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.QuestId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Score))
	if len(m.Accountentries) > 0 {
		for _, e := range m.Accountentries {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.Matchentries) > 0 {
		for _, e := range m.Matchentries {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *ScoreLeaderboardData_Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Tag))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Val))
	return n
}

func (m *ScoreLeaderboardData_AccountEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *PlayerQuestData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.QuesterAccountId))
	if len(m.QuestItemData) > 0 {
		for _, e := range m.QuestItemData {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.XpProgressData) > 0 {
		for _, e := range m.XpProgressData {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.TimePlayed))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MmGameMode))
	if len(m.ItemUpdates) > 0 {
		for _, e := range m.ItemUpdates {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 2
	if len(m.Userstatchanges) > 0 {
		for _, e := range m.Userstatchanges {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *PlayerQuestData_QuestItemData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.QuestId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.QuestNormalPointsEarned))
	n += 1 + sovCstrike15Gcmessages(uint64(m.QuestBonusPointsEarned))
	return n
}

func (m *CMsgGC_ServerQuestUpdateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerQuestData) > 0 {
		for _, e := range m.PlayerQuestData {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if m.BinaryData != nil {
		l = len(m.BinaryData)
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.MmGameMode))
	if m.Missionlbsdata != nil {
		l = m.Missionlbsdata.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Packetid))
	if len(m.Namekeys) > 0 {
		for _, e := range m.Namekeys {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.Packets) > 0 {
		for _, e := range m.Packets {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Token))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Stamp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Exchange))
	return n
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.ViewersExternalTotal))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ViewersExternalSteam))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountIds) > 0 {
		for _, e := range m.AccountIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	l = len(m.TicketData)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ClientVersion))
	if m.TournamentMatch != nil {
		l = m.TournamentMatch.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 2
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingStop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Abandon))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gameserverpings) > 0 {
		for _, e := range m.Gameserverpings {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.OffsetIndex))
	n += 1 + sovCstrike15Gcmessages(uint64(m.FinalBatch))
	if len(m.DataCenterPings) > 0 {
		for _, e := range m.DataCenterPings {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.MaxPing))
	n += 5
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchmaking))
	if len(m.WaitingAccountIdSessions) > 0 {
		for _, e := range m.WaitingAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	l = len(m.Error)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	if len(m.OngoingmatchAccountIdSessions) > 0 {
		for _, e := range m.OngoingmatchAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if m.GlobalStats != nil {
		l = m.GlobalStats.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.FailpingAccountIdSessions) > 0 {
		for _, e := range m.FailpingAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.PenaltyAccountIdSessions) > 0 {
		for _, e := range m.PenaltyAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.FailreadyAccountIdSessions) > 0 {
		for _, e := range m.FailreadyAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.VacbannedAccountIdSessions) > 0 {
		for _, e := range m.VacbannedAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if m.ServerIpaddressMask != nil {
		l = m.ServerIpaddressMask.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.Notes) > 0 {
		for _, e := range m.Notes {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.PenaltyAccountIdSessionsGreen) > 0 {
		for _, e := range m.PenaltyAccountIdSessionsGreen {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.InsufficientlevelSessions) > 0 {
		for _, e := range m.InsufficientlevelSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.VsncheckAccountIdSessions) > 0 {
		for _, e := range m.VsncheckAccountIdSessions {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.LauncherMismatchSessions) > 0 {
		for _, e := range m.LauncherMismatchSessions {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.InsecureAccountIdSessions) > 0 {
		for _, e := range m.InsecureAccountIdSessions {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Type))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RegionId))
	n += 5
	n += 5
	return n
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventStageId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamId_0))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamId_1))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MapsCount))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MapsCurrent))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdStart))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdVeto1))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdPickn))
	if len(m.Drafts) > 0 {
		for _, e := range m.Drafts {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Mapid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdCt))
	return n
}

func (m *CPreMatchInfoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.PredictionsPct))
	if m.Draft != nil {
		l = m.Draft.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.Wins) > 0 {
		for _, e := range m.Wins {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *CPreMatchInfoData_TeamStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchInfoIdxtxt))
	l = len(m.MatchInfoTxt)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	if len(m.MatchInfoTeams) > 0 {
		for _, s := range m.MatchInfoTeams {
			l = len(s)
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountIds) > 0 {
		for _, e := range m.AccountIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerVersion))
	if len(m.Rankings) > 0 {
		for _, e := range m.Rankings {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.EncryptionKey))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EncryptionKeyPub))
	if len(m.PartyIds) > 0 {
		for _, e := range m.PartyIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Whitelist) > 0 {
		for _, e := range m.Whitelist {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvMasterSteamid))
	if m.TournamentEvent != nil {
		l = m.TournamentEvent.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.TournamentTeams) > 0 {
		for _, e := range m.TournamentTeams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.TournamentCastersAccountIds) > 0 {
		for _, e := range m.TournamentCastersAccountIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvRelaySteamid))
	if m.PreMatchData != nil {
		l = m.PreMatchData.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 2 + sovCstrike15Gcmessages(uint64(m.Rtime32EventStart))
	n += 2 + sovCstrike15Gcmessages(uint64(m.TvControl))
	n += 2 + sovCstrike15Gcmessages(uint64(m.Flags))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reservationid))
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	l = len(m.Map)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.GcReservationSent))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerVersion))
	if m.TvInfo != nil {
		l = m.TvInfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.RewardPlayerAccounts) > 0 {
		for _, e := range m.RewardPlayerAccounts {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.IdlePlayerAccounts) > 0 {
		for _, e := range m.IdlePlayerAccounts {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.RewardItemAttrDefIdx))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RewardItemAttrValue))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RewardItemAttrRewardIdx))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RewardDropList))
	l = len(m.TournamentTag)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.LegacySteamdatagramPort))
	n += 5
	n += 2 + sovCstrike15Gcmessages(uint64(m.Flags))
	n += 2 + sovCstrike15Gcmessages(uint64(m.SteamdatagramRouting))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Serverid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.DirectUdpIp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.DirectUdpPort))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reservationid))
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	l = len(m.Map)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.ServerAddress)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reservationid))
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	l = len(m.Map)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Round))
	if len(m.Kills) > 0 {
		for _, e := range m.Kills {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Assists) > 0 {
		for _, e := range m.Assists {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Deaths) > 0 {
		for _, e := range m.Deaths {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Pings) > 0 {
		for _, e := range m.Pings {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.RoundResult))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchResult))
	if len(m.TeamScores) > 0 {
		for _, e := range m.TeamScores {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.ReservationStage))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchDuration))
	if len(m.EnemyKills) > 0 {
		for _, e := range m.EnemyKills {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.EnemyHeadshots) > 0 {
		for _, e := range m.EnemyHeadshots {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Enemy_3Ks) > 0 {
		for _, e := range m.Enemy_3Ks {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Enemy_4Ks) > 0 {
		for _, e := range m.Enemy_4Ks {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Enemy_5Ks) > 0 {
		for _, e := range m.Enemy_5Ks {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Mvps) > 0 {
		for _, e := range m.Mvps {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 2 + sovCstrike15Gcmessages(uint64(m.SpectatorsCount))
	n += 2 + sovCstrike15Gcmessages(uint64(m.SpectatorsCountTv))
	n += 2 + sovCstrike15Gcmessages(uint64(m.SpectatorsCountLnk))
	if len(m.EnemyKillsAgg) > 0 {
		for _, e := range m.EnemyKillsAgg {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if m.DropInfo != nil {
		l = m.DropInfo.Size()
		n += 2 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountMvp))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Rematch))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ReplayToken))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ReplayClusterId))
	n += 2
	if m.MatchEndQuestData != nil {
		l = m.MatchEndQuestData.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerVersion))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reservationid))
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.CompletedPlayerQuestData != nil {
		l = m.CompletedPlayerQuestData.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerVersion))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	if m.Ongoingmatch != nil {
		l = m.Ongoingmatch.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.GlobalStats != nil {
		l = m.GlobalStats.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.PenaltySeconds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PenaltyReason))
	n += 1 + sovCstrike15Gcmessages(uint64(m.VacBanned))
	if m.Ranking != nil {
		l = m.Ranking.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.Commendation != nil {
		l = m.Commendation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.Medals != nil {
		l = m.Medals.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.MyCurrentEvent != nil {
		l = m.MyCurrentEvent.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.MyCurrentEventTeams) > 0 {
		for _, e := range m.MyCurrentEventTeams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if m.MyCurrentTeam != nil {
		l = m.MyCurrentTeam.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.MyCurrentEventStages) > 0 {
		for _, e := range m.MyCurrentEventStages {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.SurveyVote))
	if m.Activity != nil {
		l = m.Activity.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 2 + sovCstrike15Gcmessages(uint64(m.PlayerLevel))
	n += 2 + sovCstrike15Gcmessages(uint64(m.PlayerCurXp))
	n += 2 + sovCstrike15Gcmessages(uint64(m.PlayerXpBonusFlags))
	if len(m.Rankings) > 0 {
		for _, e := range m.Rankings {
			l = e.Size()
			n += 2 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for _, e := range m.Settings {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.SettingType))
	n += 1 + sovCstrike15Gcmessages(uint64(m.SettingValue))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	if m.AbandonedMatch != nil {
		l = m.AbandonedMatch.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.PenaltySeconds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PenaltyReason))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reason))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rankings) > 0 {
		for _, e := range m.Rankings {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	return n
}

func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rankings) > 0 {
		for _, e := range m.Rankings {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MainPostUrl)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reason))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Seconds))
	n += 2
	return n
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptAimbot))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptWallhack))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptSpeedhack))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptTeamharm))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptTextabuse))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptVoiceabuse))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	n += 2
	return n
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	if m.Commendation != nil {
		l = m.Commendation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Tokens))
	return n
}

func (m *CMsgGCCStrike15V2_ClientReportServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptPoorperf))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptAbusivemodels))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptBadmotd))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptListingabuse))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptInventoryabuse))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	return n
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.ConfirmationId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerIp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ResponseType))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ResponseResult))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Tokens))
	return n
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequestId))
	if len(m.AccountIds) > 0 {
		for _, e := range m.AccountIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Serverid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ClientLauncher))
	if len(m.DataCenterPings) > 0 {
		for _, e := range m.DataCenterPings {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *WatchableMatchInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerIp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvPort))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvSpectators))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvTime))
	if m.TvWatchPassword != nil {
		l = len(m.TvWatchPassword)
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.ClDecryptdataKey))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ClDecryptdataKeyPub))
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	l = len(m.GameMapgroup)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.GameMap)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ReservationId))
	return n
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Version))
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.JoinToken))
	n += 1 + sovCstrike15Gcmessages(uint64(m.JoinIpp))
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	l = len(m.Errormsg)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Version))
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Serverid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerIp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerPort))
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	l = len(m.Errormsg)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.MissionId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CampaignId))
	return n
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.XpProgressData) > 0 {
		for _, e := range m.XpProgressData {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CurrentXp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CurrentLevel))
	n += 1 + sovCstrike15Gcmessages(uint64(m.UpgradedDefidx))
	n += 1 + sovCstrike15Gcmessages(uint64(m.OperationPointsAwarded))
	return n
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequestId))
	if len(m.AccountIds) > 0 {
		for _, e := range m.AccountIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.WatchableMatchInfos) > 0 {
		for _, e := range m.WatchableMatchInfos {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.ExtendedTimeout))
	return n
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequestId_Deprecated))
	if len(m.AccountIds_Deprecated) > 0 {
		for _, e := range m.AccountIds_Deprecated {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequestLevel))
	return n
}

func (m *CMsgGCCStrike15V2_PlayersProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequestId))
	if len(m.AccountProfiles) > 0 {
		for _, e := range m.AccountProfiles {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Caseid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Suspectid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Fractionid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptAimbot))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptWallhack))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptSpeedhack))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptTeamharm))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reason))
	return n
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Caseid))
	l = len(m.Caseurl)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Verdict))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Timestamp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Throttleseconds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Suspectid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Fractionid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Numrounds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Fractionrounds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Streakconvictions))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reason))
	return n
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Caseid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Statusid))
	return n
}

func (m *CClientHeaderOverwatchEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Caseid))
	return n
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Id))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Type))
	if m.Payload != nil {
		l = len(m.Payload)
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Id))
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			l = len(b)
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Serverinfo != nil {
		l = m.Serverinfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.MatchEndQuestData != nil {
		l = m.MatchEndQuestData.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CEconItemPreviewDataBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Itemid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Defindex))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Paintindex))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Rarity))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Quality))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Paintwear))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Paintseed))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Killeaterscoretype))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Killeatervalue))
	l = len(m.Customname)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	if len(m.Stickers) > 0 {
		for _, e := range m.Stickers {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Inventory))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Origin))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Questid))
	n += 2 + sovCstrike15Gcmessages(uint64(m.Dropreason))
	n += 2 + sovCstrike15Gcmessages(uint64(m.Musicindex))
	n += 2 + sovCstrike15Gcmessages(uint64(m.Entindex))
	return n
}

func (m *CEconItemPreviewDataBlock_Sticker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Slot))
	n += 1 + sovCstrike15Gcmessages(uint64(m.StickerId))
	n += 5
	n += 5
	n += 5
	n += 1 + sovCstrike15Gcmessages(uint64(m.TintId))
	return n
}

func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iteminfo != nil {
		l = m.Iteminfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgItemAcknowledged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iteminfo != nil {
		l = m.Iteminfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.ParamS))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ParamA))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ParamD))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ParamM))
	return n
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iteminfo != nil {
		l = m.Iteminfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Defindex))
	if len(m.Accountids) > 0 {
		for _, e := range m.Accountids {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	return n
}

func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	return n
}

func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Eventid))
	return n
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Outcomeid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Token))
	return n
}

func (m *CDataGCCStrike15V2_MatchInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchtime))
	if m.Watchablematchinfo != nil {
		l = m.Watchablematchinfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.RoundstatsLegacy != nil {
		l = m.RoundstatsLegacy.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.Roundstatsall) > 0 {
		for _, e := range m.Roundstatsall {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Score))
	n += 2
	return n
}

func (m *CDataGCCStrike15V2_TournamentGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Groupid))
	l = len(m.Name)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.Desc)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Picks_Deprecated))
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.StageIds) > 0 {
		for _, e := range m.StageIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Picklockuntiltime))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Pickableteams))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PointsPerPick))
	if len(m.Picks) > 0 {
		for _, e := range m.Picks {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CDataGCCStrike15V2_TournamentGroup_Picks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pickids) > 0 {
		for _, e := range m.Pickids {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *CDataGCCStrike15V2_TournamentSection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Sectionid))
	l = len(m.Name)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.Desc)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CDataGCCStrike15V2_TournamentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if m.TournamentEvent != nil {
		l = m.TournamentEvent.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.TournamentTeams) > 0 {
		for _, e := range m.TournamentTeams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Msgrequestid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Servertime))
	if len(m.Matches) > 0 {
		for _, e := range m.Matches {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.Streams) > 0 {
		for _, e := range m.Streams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if m.Tournamentinfo != nil {
		l = m.Tournamentinfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_Predictions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventId))
	if len(m.GroupMatchTeamPicks) > 0 {
		for _, e := range m.GroupMatchTeamPicks {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Sectionid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Groupid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Index))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Teamid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Itemid))
	return n
}

func (m *CMsgGCCStrike15V2_Fantasy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventId))
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Type))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Pick))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Itemid))
	return n
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Sectionid))
	if len(m.Slots) > 0 {
		for _, e := range m.Slots {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CAttribute_String) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCToGCReloadVersions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CMsgCStrike15Welcome) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.StoreItemHash))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Timeplayedconsecutively))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TimeFirstPlayed))
	n += 1 + sovCstrike15Gcmessages(uint64(m.LastTimePlayed))
	n += 1 + sovCstrike15Gcmessages(uint64(m.LastIpAddress))
	n += 2 + sovCstrike15Gcmessages(uint64(m.Gscookieid))
	n += 2 + sovCstrike15Gcmessages(uint64(m.Uniqueid))
	return n
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValueName)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ValueInt))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerAddr))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerPort))
	if len(m.ChokedBlocks) > 0 {
		for _, s := range m.ChokedBlocks {
			l = len(s)
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	if len(m.Viewangles) > 0 {
		for _, e := range m.Viewangles {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Type))
	return n
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Servertime))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TimePeriodSeconds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TotalGiftsGiven))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TotalGivers))
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Gifts))
	return n
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.SurveyId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Vote))
	return n
}

func (m *CMsgGCCStrike15V2_Server2GCClientValidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	return n
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	l = len(m.Path)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.File)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Crc))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Hash))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Len))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PackNumber))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PackFileId))
	return n
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Eventid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Stageid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	if len(m.Teamids) > 0 {
		for _, e := range m.Teamids {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *CSOEconCoupon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Entryid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Defidx))
	n += 5
	return n
}

func (m *CSOQuestProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Questid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PointsRemaining))
	n += 1 + sovCstrike15Gcmessages(uint64(m.BonusPoints))
	return n
}

func (m *CSOAccountSeasonalOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.SeasonValue))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TierUnlocked))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PremiumTiers))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MissionId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MissionsCompleted))
	return n
}

func (m *CSOPersonaDataPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.PlayerLevel))
	if m.Commendation != nil {
		l = m.Commendation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 2
	return n
}

func (m *CMsgGC_GlobalGame_Subscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ticket))
	return n
}

func (m *CMsgGC_GlobalGame_Unsubscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Timeleft))
	return n
}

func (m *CMsgGC_GlobalGame_Play) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ticket))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Gametimems))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Msperpoint))
	return n
}

func (m *CMsgGCCStrike15V2_AcknowledgePenalty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Acknowledged))
	return n
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Defindex))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Upgradeid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Hours))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Prestigetime))
	return n
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ticket))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Os))
	return n
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Stage))
	return n
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	l = len(m.Text)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_GCToClientChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	l = len(m.Text)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Eventid))
	l = len(m.Code)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15_GotvSyncPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *PlayerDecalDigitalSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Signature != nil {
		l = len(m.Signature)
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Rtime))
	if len(m.Endpos) > 0 {
		n += 5 * len(m.Endpos)
	}
	if len(m.Startpos) > 0 {
		n += 5 * len(m.Startpos)
	}
	if len(m.Right) > 0 {
		n += 5 * len(m.Right)
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.TxDefidx))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Entindex))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Hitbox))
	n += 5
	n += 1 + sovCstrike15Gcmessages(uint64(m.Equipslot))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TraceId))
	if len(m.Normal) > 0 {
		n += 5 * len(m.Normal)
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.TintId))
	return n
}

func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Itemid))
	return n
}

func (m *CMsgGCCStrike15V2_ClientLogonFatalError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Errorcode))
	l = len(m.Message)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.Country)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_ClientPollState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Pollid))
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_Party_Register) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Id))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ver))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Apr))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ark))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Nby))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Grp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Slots))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Launcher))
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	return n
}

func (m *CMsgGCCStrike15V2_Party_Search) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ver))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Apr))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ark))
	if len(m.Grps) > 0 {
		for _, e := range m.Grps {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Launcher))
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	return n
}

func (m *CMsgGCCStrike15V2_Party_SearchResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Id))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Grp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Apr))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ark))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Loc))
	return n
}

func (m *CMsgGCCStrike15V2_Party_Invite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Lobbyid))
	return n
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Servertime))
	return n
}

func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Rtcoplay))
	n += 2
	return n
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	n += 5
	n += 9
	l = len(m.GameserverSdrRouting)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCToClientSteamDatagramTicket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SerializedTicket != nil {
		l = len(m.SerializedTicket)
		n += 2 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_ClientRequestOffers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Itemid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Eventid))
	return n
}

func (m *CMsgGCCStrike15V2_ClientAccountBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Amount))
	l = len(m.Url)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Lobbyid))
	return n
}

func (m *CMsgGCCStrike15V2_ClientPartyWarning) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Warntype))
	return n
}

func (m *CMsgGCCStrike15V2_SetEventFavorite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Eventid))
	n += 2
	return n
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.JsonFavorites)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.JsonFeatured)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_ClientPerfReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Perfcounter))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Length))
	if m.Reference != nil {
		l = len(m.Reference)
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.Actual != nil {
		l = len(m.Actual)
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Sourceid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Status))
	return n
}

func (m *CMsgGCCStrike15V2_ClientReportValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileReport)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.CommandLine)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TotalFiles))
	n += 1 + sovCstrike15Gcmessages(uint64(m.InternalError))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TrustTime))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CountPending))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CountCompleted))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ProcessId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Osversion))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Clientreportversion))
	return n
}

func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileReport)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 2
	n += 2
	n += 2
	n += 2
	return n
}

func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func sovCstrike15Gcmessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCstrike15Gcmessages(x uint64) (n int) {
	return sovCstrike15Gcmessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameServerPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameServerPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameServerPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			m.Ping = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ping |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			m.Ip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ip |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			m.Instances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Instances |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataCenterPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataCenterPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataCenterPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCenterId", wireType)
			}
			m.DataCenterId = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.DataCenterId = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Ping = v
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetailedSearchStatistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetailedSearchStatistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetailedSearchStatistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchTimeAvg", wireType)
			}
			m.SearchTimeAvg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SearchTimeAvg |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayersSearching", wireType)
			}
			m.PlayersSearching = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayersSearching |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDob", wireType)
			}
			m.PlayerDob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerDob |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &TournamentPlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTimeStart", wireType)
			}
			m.EventTimeStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventTimeStart |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTimeEnd", wireType)
			}
			m.EventTimeEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventTimeEnd |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPublic", wireType)
			}
			m.EventPublic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventPublic |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStageId", wireType)
			}
			m.EventStageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventStageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSectionId", wireType)
			}
			m.ActiveSectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveSectionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayersOnline", wireType)
			}
			m.PlayersOnline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayersOnline |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServersOnline", wireType)
			}
			m.ServersOnline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServersOnline |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayersSearching", wireType)
			}
			m.PlayersSearching = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayersSearching |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServersAvailable", wireType)
			}
			m.ServersAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServersAvailable |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OngoingMatches", wireType)
			}
			m.OngoingMatches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OngoingMatches |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchTimeAvg", wireType)
			}
			m.SearchTimeAvg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SearchTimeAvg |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchStatistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchStatistics = append(m.SearchStatistics, &DetailedSearchStatistic{})
			if err := m.SearchStatistics[len(m.SearchStatistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainPostUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainPostUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredAppidVersion", wireType)
			}
			m.RequiredAppidVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredAppidVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricesheetVersion", wireType)
			}
			m.PricesheetVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PricesheetVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwitchStreamsVersion", wireType)
			}
			m.TwitchStreamsVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TwitchStreamsVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTournamentEventid", wireType)
			}
			m.ActiveTournamentEventid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveTournamentEventid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSurveyId", wireType)
			}
			m.ActiveSurveyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveSurveyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtime32Cur", wireType)
			}
			m.Rtime32Cur = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtime32Cur |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtime32EventStart", wireType)
			}
			m.Rtime32EventStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtime32EventStart |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationalStatisticDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationalStatisticDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationalStatisticDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idkey", wireType)
			}
			m.Idkey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idkey |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationalStatisticElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationalStatisticElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationalStatisticElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idkey", wireType)
			}
			m.Idkey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idkey |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Values = append(m.Values, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Values) == 0 {
					m.Values = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Values = append(m.Values, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationalStatisticsPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationalStatisticsPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationalStatisticsPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packetid", wireType)
			}
			m.Packetid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Packetid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mstimestamp", wireType)
			}
			m.Mstimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mstimestamp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &OperationalStatisticElement{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerRankingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerRankingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerRankingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			m.RankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankChange", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RankChange = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankTypeId", wireType)
			}
			m.RankTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankTypeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerCommendationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerCommendationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerCommendationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdFriendly", wireType)
			}
			m.CmdFriendly = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdFriendly |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdTeaching", wireType)
			}
			m.CmdTeaching = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdTeaching |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdLeader", wireType)
			}
			m.CmdLeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdLeader |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerMedalsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerMedalsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerMedalsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DisplayItemsDefidx = append(m.DisplayItemsDefidx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DisplayItemsDefidx) == 0 {
					m.DisplayItemsDefidx = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DisplayItemsDefidx = append(m.DisplayItemsDefidx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayItemsDefidx", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeaturedDisplayItemDefidx", wireType)
			}
			m.FeaturedDisplayItemDefidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeaturedDisplayItemDefidx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			m.Activity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Activity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			m.Map = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Map |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchid", wireType)
			}
			m.Matchid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentMatchSetup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentMatchSetup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentMatchSetup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdCt", wireType)
			}
			m.TeamIdCt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdCt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdT", wireType)
			}
			m.TeamIdT = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdT |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStageId", wireType)
			}
			m.EventStageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerHltvInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerHltvInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerHltvInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvUdpPort", wireType)
			}
			m.TvUdpPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvUdpPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvWatchKey", wireType)
			}
			m.TvWatchKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvWatchKey |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvSlots", wireType)
			}
			m.TvSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvSlots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvClients", wireType)
			}
			m.TvClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvClients |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvProxies", wireType)
			}
			m.TvProxies = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvProxies |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvTime", wireType)
			}
			m.TvTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMapgroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameMapgroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameMap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvMasterSteamid", wireType)
			}
			m.TvMasterSteamid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvMasterSteamid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvLocalSlots", wireType)
			}
			m.TvLocalSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvLocalSlots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvLocalClients", wireType)
			}
			m.TvLocalClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvLocalClients |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvLocalProxies", wireType)
			}
			m.TvLocalProxies = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvLocalProxies |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelaySlots", wireType)
			}
			m.TvRelaySlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelaySlots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelayClients", wireType)
			}
			m.TvRelayClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelayClients |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelayProxies", wireType)
			}
			m.TvRelayProxies = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelayProxies |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelayAddress", wireType)
			}
			m.TvRelayAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelayAddress |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelayPort", wireType)
			}
			m.TvRelayPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelayPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelaySteamid", wireType)
			}
			m.TvRelaySteamid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelaySteamid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpAddressMask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpAddressMask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpAddressMask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			m.A = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.A |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			m.B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.B |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			m.C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			m.D = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.D |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bits", wireType)
			}
			m.Bits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bits |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Token |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgCsgoSteamUserStatChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgCsgoSteamUserStatChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgCsgoSteamUserStatChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecsgosteamuserstat", wireType)
			}
			m.Ecsgosteamuserstat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ecsgosteamuserstat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			m.Delta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delta |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Absolute", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Absolute = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XpProgressData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XpProgressData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XpProgressData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XpPoints", wireType)
			}
			m.XpPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XpPoints |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XpCategory", wireType)
			}
			m.XpCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XpCategory |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchEndItemUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchEndItemUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchEndItemUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemAttrDefidx", wireType)
			}
			m.ItemAttrDefidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemAttrDefidx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemAttrDeltaValue", wireType)
			}
			m.ItemAttrDeltaValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemAttrDeltaValue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoreLeaderboardData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScoreLeaderboardData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScoreLeaderboardData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestId", wireType)
			}
			m.QuestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountentries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accountentries = append(m.Accountentries, &ScoreLeaderboardData_AccountEntries{})
			if err := m.Accountentries[len(m.Accountentries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchentries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matchentries = append(m.Matchentries, &ScoreLeaderboardData_Entry{})
			if err := m.Matchentries[len(m.Matchentries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoreLeaderboardData_Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoreLeaderboardData_AccountEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &ScoreLeaderboardData_Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerQuestData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerQuestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerQuestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuesterAccountId", wireType)
			}
			m.QuesterAccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuesterAccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestItemData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestItemData = append(m.QuestItemData, &PlayerQuestData_QuestItemData{})
			if err := m.QuestItemData[len(m.QuestItemData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XpProgressData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XpProgressData = append(m.XpProgressData, &XpProgressData{})
			if err := m.XpProgressData[len(m.XpProgressData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimePlayed", wireType)
			}
			m.TimePlayed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimePlayed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MmGameMode", wireType)
			}
			m.MmGameMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MmGameMode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemUpdates = append(m.ItemUpdates, &MatchEndItemUpdates{})
			if err := m.ItemUpdates[len(m.ItemUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationPointsEligible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OperationPointsEligible = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userstatchanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userstatchanges = append(m.Userstatchanges, &CMsgCsgoSteamUserStatChange{})
			if err := m.Userstatchanges[len(m.Userstatchanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerQuestData_QuestItemData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestItemData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestItemData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestId", wireType)
			}
			m.QuestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestNormalPointsEarned", wireType)
			}
			m.QuestNormalPointsEarned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestNormalPointsEarned |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestBonusPointsEarned", wireType)
			}
			m.QuestBonusPointsEarned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestBonusPointsEarned |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGC_ServerQuestUpdateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGC_ServerQuestUpdateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGC_ServerQuestUpdateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerQuestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerQuestData = append(m.PlayerQuestData, &PlayerQuestData{})
			if err := m.PlayerQuestData[len(m.PlayerQuestData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryData = append(m.BinaryData[:0], dAtA[iNdEx:postIndex]...)
			if m.BinaryData == nil {
				m.BinaryData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MmGameMode", wireType)
			}
			m.MmGameMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MmGameMode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Missionlbsdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Missionlbsdata == nil {
				m.Missionlbsdata = &ScoreLeaderboardData{}
			}
			if err := m.Missionlbsdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGCOperationalStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGCOperationalStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packetid", wireType)
			}
			m.Packetid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Packetid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namekeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namekeys = append(m.Namekeys, &OperationalStatisticDescription{})
			if err := m.Namekeys[len(m.Namekeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packets = append(m.Packets, &OperationalStatisticsPacket{})
			if err := m.Packets[len(m.Packets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Token |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stamp", wireType)
			}
			m.Stamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			m.Exchange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exchange |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ServerReservationUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ServerReservationUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewersExternalTotal", wireType)
			}
			m.ViewersExternalTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewersExternalTotal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewersExternalSteam", wireType)
			}
			m.ViewersExternalSteam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewersExternalSteam |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIds = append(m.AccountIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AccountIds) == 0 {
					m.AccountIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIds = append(m.AccountIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			m.ClientVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentMatch == nil {
				m.TournamentMatch = &TournamentMatchSetup{}
			}
			if err := m.TournamentMatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimeOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrimeOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingStop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingStop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingStop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abandon", wireType)
			}
			m.Abandon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Abandon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingClient2ServerPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingClient2ServerPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameserverpings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gameserverpings = append(m.Gameserverpings, &GameServerPing{})
			if err := m.Gameserverpings[len(m.Gameserverpings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetIndex", wireType)
			}
			m.OffsetIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalBatch", wireType)
			}
			m.FinalBatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalBatch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCenterPings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataCenterPings = append(m.DataCenterPings, &DataCenterPing{})
			if err := m.DataCenterPings[len(m.DataCenterPings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPing", wireType)
			}
			m.MaxPing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPing |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestToken", wireType)
			}
			m.TestToken = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.TestToken = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchmaking", wireType)
			}
			m.Matchmaking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchmaking |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WaitingAccountIdSessions = append(m.WaitingAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WaitingAccountIdSessions) == 0 {
					m.WaitingAccountIdSessions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WaitingAccountIdSessions = append(m.WaitingAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitingAccountIdSessions", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OngoingmatchAccountIdSessions = append(m.OngoingmatchAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OngoingmatchAccountIdSessions) == 0 {
					m.OngoingmatchAccountIdSessions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OngoingmatchAccountIdSessions = append(m.OngoingmatchAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OngoingmatchAccountIdSessions", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalStats == nil {
				m.GlobalStats = &GlobalStatistics{}
			}
			if err := m.GlobalStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FailpingAccountIdSessions = append(m.FailpingAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FailpingAccountIdSessions) == 0 {
					m.FailpingAccountIdSessions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FailpingAccountIdSessions = append(m.FailpingAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FailpingAccountIdSessions", wireType)
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PenaltyAccountIdSessions = append(m.PenaltyAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PenaltyAccountIdSessions) == 0 {
					m.PenaltyAccountIdSessions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PenaltyAccountIdSessions = append(m.PenaltyAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyAccountIdSessions", wireType)
			}
		case 10:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FailreadyAccountIdSessions = append(m.FailreadyAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FailreadyAccountIdSessions) == 0 {
					m.FailreadyAccountIdSessions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FailreadyAccountIdSessions = append(m.FailreadyAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FailreadyAccountIdSessions", wireType)
			}
		case 11:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VacbannedAccountIdSessions = append(m.VacbannedAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VacbannedAccountIdSessions) == 0 {
					m.VacbannedAccountIdSessions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VacbannedAccountIdSessions = append(m.VacbannedAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VacbannedAccountIdSessions", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIpaddressMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerIpaddressMask == nil {
				m.ServerIpaddressMask = &IpAddressMask{}
			}
			if err := m.ServerIpaddressMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = append(m.Notes, &CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note{})
			if err := m.Notes[len(m.Notes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PenaltyAccountIdSessionsGreen = append(m.PenaltyAccountIdSessionsGreen, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PenaltyAccountIdSessionsGreen) == 0 {
					m.PenaltyAccountIdSessionsGreen = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PenaltyAccountIdSessionsGreen = append(m.PenaltyAccountIdSessionsGreen, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyAccountIdSessionsGreen", wireType)
			}
		case 15:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InsufficientlevelSessions = append(m.InsufficientlevelSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.InsufficientlevelSessions) == 0 {
					m.InsufficientlevelSessions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InsufficientlevelSessions = append(m.InsufficientlevelSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InsufficientlevelSessions", wireType)
			}
		case 16:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VsncheckAccountIdSessions = append(m.VsncheckAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VsncheckAccountIdSessions) == 0 {
					m.VsncheckAccountIdSessions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VsncheckAccountIdSessions = append(m.VsncheckAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VsncheckAccountIdSessions", wireType)
			}
		case 17:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LauncherMismatchSessions = append(m.LauncherMismatchSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LauncherMismatchSessions) == 0 {
					m.LauncherMismatchSessions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LauncherMismatchSessions = append(m.LauncherMismatchSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LauncherMismatchSessions", wireType)
			}
		case 18:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InsecureAccountIdSessions = append(m.InsecureAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.InsecureAccountIdSessions) == 0 {
					m.InsecureAccountIdSessions = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InsecureAccountIdSessions = append(m.InsecureAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InsecureAccountIdSessions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Note: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Note: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionR", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RegionR = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Distance = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentMatchDraft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentMatchDraft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStageId", wireType)
			}
			m.EventStageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId_0", wireType)
			}
			m.TeamId_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId_0 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId_1", wireType)
			}
			m.TeamId_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId_1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapsCount", wireType)
			}
			m.MapsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapsCurrent", wireType)
			}
			m.MapsCurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapsCurrent |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdStart", wireType)
			}
			m.TeamIdStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdStart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdVeto1", wireType)
			}
			m.TeamIdVeto1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdVeto1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdPickn", wireType)
			}
			m.TeamIdPickn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdPickn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drafts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drafts = append(m.Drafts, &CDataGCCStrike15V2_TournamentMatchDraft_Entry{})
			if err := m.Drafts[len(m.Drafts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapid", wireType)
			}
			m.Mapid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mapid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdCt", wireType)
			}
			m.TeamIdCt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdCt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPreMatchInfoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPreMatchInfoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPreMatchInfoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictionsPct", wireType)
			}
			m.PredictionsPct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PredictionsPct |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Draft == nil {
				m.Draft = &CDataGCCStrike15V2_TournamentMatchDraft{}
			}
			if err := m.Draft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &CPreMatchInfoData_TeamStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Wins = append(m.Wins, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Wins) == 0 {
					m.Wins = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Wins = append(m.Wins, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPreMatchInfoData_TeamStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchInfoIdxtxt", wireType)
			}
			m.MatchInfoIdxtxt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchInfoIdxtxt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchInfoTxt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchInfoTxt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchInfoTeams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchInfoTeams = append(m.MatchInfoTeams, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIds = append(m.AccountIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AccountIds) == 0 {
					m.AccountIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIds = append(m.AccountIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerVersion", wireType)
			}
			m.ServerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rankings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rankings = append(m.Rankings, &PlayerRankingInfo{})
			if err := m.Rankings[len(m.Rankings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			m.EncryptionKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptionKey |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKeyPub", wireType)
			}
			m.EncryptionKeyPub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptionKeyPub |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PartyIds = append(m.PartyIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PartyIds) == 0 {
					m.PartyIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PartyIds = append(m.PartyIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyIds", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whitelist = append(m.Whitelist, &IpAddressMask{})
			if err := m.Whitelist[len(m.Whitelist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvMasterSteamid", wireType)
			}
			m.TvMasterSteamid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvMasterSteamid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentEvent == nil {
				m.TournamentEvent = &TournamentEvent{}
			}
			if err := m.TournamentEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTeams = append(m.TournamentTeams, &TournamentTeam{})
			if err := m.TournamentTeams[len(m.TournamentTeams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TournamentCastersAccountIds = append(m.TournamentCastersAccountIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TournamentCastersAccountIds) == 0 {
					m.TournamentCastersAccountIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TournamentCastersAccountIds = append(m.TournamentCastersAccountIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentCastersAccountIds", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelaySteamid", wireType)
			}
			m.TvRelaySteamid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelaySteamid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreMatchData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreMatchData == nil {
				m.PreMatchData = &CPreMatchInfoData{}
			}
			if err := m.PreMatchData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtime32EventStart", wireType)
			}
			m.Rtime32EventStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtime32EventStart |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvControl", wireType)
			}
			m.TvControl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvControl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerReservationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerReservationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservationid", wireType)
			}
			m.Reservationid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reservationid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcReservationSent", wireType)
			}
			m.GcReservationSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GcReservationSent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerVersion", wireType)
			}
			m.ServerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TvInfo == nil {
				m.TvInfo = &ServerHltvInfo{}
			}
			if err := m.TvInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RewardPlayerAccounts = append(m.RewardPlayerAccounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RewardPlayerAccounts) == 0 {
					m.RewardPlayerAccounts = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RewardPlayerAccounts = append(m.RewardPlayerAccounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPlayerAccounts", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdlePlayerAccounts = append(m.IdlePlayerAccounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IdlePlayerAccounts) == 0 {
					m.IdlePlayerAccounts = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdlePlayerAccounts = append(m.IdlePlayerAccounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdlePlayerAccounts", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardItemAttrDefIdx", wireType)
			}
			m.RewardItemAttrDefIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardItemAttrDefIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardItemAttrValue", wireType)
			}
			m.RewardItemAttrValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardItemAttrValue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardItemAttrRewardIdx", wireType)
			}
			m.RewardItemAttrRewardIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardItemAttrRewardIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDropList", wireType)
			}
			m.RewardDropList = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardDropList |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacySteamdatagramPort", wireType)
			}
			m.LegacySteamdatagramPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LegacySteamdatagramPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestToken", wireType)
			}
			m.TestToken = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.TestToken = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SteamdatagramRouting", wireType)
			}
			m.SteamdatagramRouting = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SteamdatagramRouting |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serverid", wireType)
			}
			m.Serverid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serverid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectUdpIp", wireType)
			}
			m.DirectUdpIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DirectUdpIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectUdpPort", wireType)
			}
			m.DirectUdpPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DirectUdpPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservationid", wireType)
			}
			m.Reservationid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reservationid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerRoundStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerRoundStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservationid", wireType)
			}
			m.Reservationid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reservationid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Kills = append(m.Kills, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Kills) == 0 {
					m.Kills = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Kills = append(m.Kills, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Kills", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Assists = append(m.Assists, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Assists) == 0 {
					m.Assists = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Assists = append(m.Assists, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Assists", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Deaths = append(m.Deaths, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Deaths) == 0 {
					m.Deaths = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Deaths = append(m.Deaths, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Deaths", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Scores = append(m.Scores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Scores) == 0 {
					m.Scores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Scores = append(m.Scores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pings = append(m.Pings, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pings) == 0 {
					m.Pings = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pings = append(m.Pings, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pings", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundResult", wireType)
			}
			m.RoundResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundResult |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchResult", wireType)
			}
			m.MatchResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchResult |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TeamScores = append(m.TeamScores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TeamScores) == 0 {
					m.TeamScores = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TeamScores = append(m.TeamScores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamScores", wireType)
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationStage", wireType)
			}
			m.ReservationStage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationStage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchDuration", wireType)
			}
			m.MatchDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchDuration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnemyKills = append(m.EnemyKills, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EnemyKills) == 0 {
					m.EnemyKills = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnemyKills = append(m.EnemyKills, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyKills", wireType)
			}
		case 17:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnemyHeadshots = append(m.EnemyHeadshots, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EnemyHeadshots) == 0 {
					m.EnemyHeadshots = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnemyHeadshots = append(m.EnemyHeadshots, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyHeadshots", wireType)
			}
		case 18:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enemy_3Ks = append(m.Enemy_3Ks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Enemy_3Ks) == 0 {
					m.Enemy_3Ks = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enemy_3Ks = append(m.Enemy_3Ks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enemy_3Ks", wireType)
			}
		case 19:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enemy_4Ks = append(m.Enemy_4Ks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Enemy_4Ks) == 0 {
					m.Enemy_4Ks = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enemy_4Ks = append(m.Enemy_4Ks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enemy_4Ks", wireType)
			}
		case 20:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enemy_5Ks = append(m.Enemy_5Ks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Enemy_5Ks) == 0 {
					m.Enemy_5Ks = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enemy_5Ks = append(m.Enemy_5Ks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enemy_5Ks", wireType)
			}
		case 21:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mvps = append(m.Mvps, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Mvps) == 0 {
					m.Mvps = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mvps = append(m.Mvps, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mvps", wireType)
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpectatorsCount", wireType)
			}
			m.SpectatorsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpectatorsCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpectatorsCountTv", wireType)
			}
			m.SpectatorsCountTv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpectatorsCountTv |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpectatorsCountLnk", wireType)
			}
			m.SpectatorsCountLnk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpectatorsCountLnk |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnemyKillsAgg = append(m.EnemyKillsAgg, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EnemyKillsAgg) == 0 {
					m.EnemyKillsAgg = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnemyKillsAgg = append(m.EnemyKillsAgg, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyKillsAgg", wireType)
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropInfo == nil {
				m.DropInfo = &CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo{}
			}
			if err := m.DropInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountMvp", wireType)
			}
			m.AccountMvp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountMvp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerMatchEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerMatchEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &CMsgGCCStrike15V2_MatchmakingServerRoundStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rematch", wireType)
			}
			m.Rematch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rematch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayToken", wireType)
			}
			m.ReplayToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplayToken |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayClusterId", wireType)
			}
			m.ReplayClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplayClusterId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortedMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AbortedMatch = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchEndQuestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchEndQuestData == nil {
				m.MatchEndQuestData = &CMsgGC_ServerQuestUpdateData{}
			}
			if err := m.MatchEndQuestData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerVersion", wireType)
			}
			m.ServerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEndPartial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservationid", wireType)
			}
			m.Reservationid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reservationid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedPlayerQuestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedPlayerQuestData == nil {
				m.CompletedPlayerQuestData = &CMsgGC_ServerQuestUpdateData{}
			}
			if err := m.CompletedPlayerQuestData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerVersion", wireType)
			}
			m.ServerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingClient2GCHello: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingClient2GCHello: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ongoingmatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ongoingmatch == nil {
				m.Ongoingmatch = &CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
			}
			if err := m.Ongoingmatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalStats == nil {
				m.GlobalStats = &GlobalStatistics{}
			}
			if err := m.GlobalStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltySeconds", wireType)
			}
			m.PenaltySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PenaltySeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyReason", wireType)
			}
			m.PenaltyReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PenaltyReason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VacBanned", wireType)
			}
			m.VacBanned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VacBanned |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ranking == nil {
				m.Ranking = &PlayerRankingInfo{}
			}
			if err := m.Ranking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commendation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commendation == nil {
				m.Commendation = &PlayerCommendationInfo{}
			}
			if err := m.Commendation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Medals == nil {
				m.Medals = &PlayerMedalsInfo{}
			}
			if err := m.Medals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCurrentEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyCurrentEvent == nil {
				m.MyCurrentEvent = &TournamentEvent{}
			}
			if err := m.MyCurrentEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCurrentEventTeams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyCurrentEventTeams = append(m.MyCurrentEventTeams, &TournamentTeam{})
			if err := m.MyCurrentEventTeams[len(m.MyCurrentEventTeams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCurrentTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyCurrentTeam == nil {
				m.MyCurrentTeam = &TournamentTeam{}
			}
			if err := m.MyCurrentTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCurrentEventStages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyCurrentEventStages = append(m.MyCurrentEventStages, &TournamentEvent{})
			if err := m.MyCurrentEventStages[len(m.MyCurrentEventStages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurveyVote", wireType)
			}
			m.SurveyVote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurveyVote |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activity == nil {
				m.Activity = &AccountActivity{}
			}
			if err := m.Activity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerLevel", wireType)
			}
			m.PlayerLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerCurXp", wireType)
			}
			m.PlayerCurXp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerCurXp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerXpBonusFlags", wireType)
			}
			m.PlayerXpBonusFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerXpBonusFlags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rankings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rankings = append(m.Rankings, &PlayerRankingInfo{})
			if err := m.Rankings[len(m.Rankings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_AccountPrivacySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_AccountPrivacySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings, &CMsgGCCStrike15V2_AccountPrivacySettings_Setting{})
			if err := m.Settings[len(m.Settings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingType", wireType)
			}
			m.SettingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettingType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingValue", wireType)
			}
			m.SettingValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettingValue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbandonedMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbandonedMatch == nil {
				m.AbandonedMatch = &CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
			}
			if err := m.AbandonedMatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltySeconds", wireType)
			}
			m.PenaltySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PenaltySeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyReason", wireType)
			}
			m.PenaltyReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PenaltyReason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServer2GCKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServer2GCKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rankings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rankings = append(m.Rankings, &PlayerRankingInfo{})
			if err := m.Rankings[len(m.Rankings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientGCRankUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientGCRankUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientGCRankUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rankings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rankings = append(m.Rankings, &PlayerRankingInfo{})
			if err := m.Rankings[len(m.Rankings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainPostUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainPostUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ServerNotificationForUserPenalty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ServerNotificationForUserPenalty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunicationCooldown", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommunicationCooldown = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientReportPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptAimbot", wireType)
			}
			m.RptAimbot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptAimbot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptWallhack", wireType)
			}
			m.RptWallhack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptWallhack |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptSpeedhack", wireType)
			}
			m.RptSpeedhack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptSpeedhack |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptTeamharm", wireType)
			}
			m.RptTeamharm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptTeamharm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptTextabuse", wireType)
			}
			m.RptTextabuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptTextabuse |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptVoiceabuse", wireType)
			}
			m.RptVoiceabuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptVoiceabuse |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportFromDemo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReportFromDemo = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientCommendPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientCommendPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientCommendPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commendation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commendation == nil {
				m.Commendation = &PlayerCommendationInfo{}
			}
			if err := m.Commendation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			m.Tokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tokens |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientReportServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptPoorperf", wireType)
			}
			m.RptPoorperf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptPoorperf |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptAbusivemodels", wireType)
			}
			m.RptAbusivemodels = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptAbusivemodels |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptBadmotd", wireType)
			}
			m.RptBadmotd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptBadmotd |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptListingabuse", wireType)
			}
			m.RptListingabuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptListingabuse |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptInventoryabuse", wireType)
			}
			m.RptInventoryabuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptInventoryabuse |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationId", wireType)
			}
			m.ConfirmationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIp", wireType)
			}
			m.ServerIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseType", wireType)
			}
			m.ResponseType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseResult", wireType)
			}
			m.ResponseResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseResult |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			m.Tokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tokens |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIds = append(m.AccountIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AccountIds) == 0 {
					m.AccountIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIds = append(m.AccountIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serverid", wireType)
			}
			m.Serverid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serverid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchid", wireType)
			}
			m.Matchid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLauncher", wireType)
			}
			m.ClientLauncher = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientLauncher |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCenterPings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataCenterPings = append(m.DataCenterPings, &DataCenterPing{})
			if err := m.DataCenterPings[len(m.DataCenterPings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchableMatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchableMatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchableMatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIp", wireType)
			}
			m.ServerIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvPort", wireType)
			}
			m.TvPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvSpectators", wireType)
			}
			m.TvSpectators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvSpectators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvTime", wireType)
			}
			m.TvTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvWatchPassword", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TvWatchPassword = append(m.TvWatchPassword[:0], dAtA[iNdEx:postIndex]...)
			if m.TvWatchPassword == nil {
				m.TvWatchPassword = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClDecryptdataKey", wireType)
			}
			m.ClDecryptdataKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClDecryptdataKey |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClDecryptdataKeyPub", wireType)
			}
			m.ClDecryptdataKeyPub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClDecryptdataKeyPub |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMapgroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameMapgroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameMap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationId", wireType)
			}
			m.ReservationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestJoinFriendData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestJoinFriendData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinToken", wireType)
			}
			m.JoinToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinToken |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinIpp", wireType)
			}
			m.JoinIpp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinIpp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errormsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errormsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestJoinServerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestJoinServerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serverid", wireType)
			}
			m.Serverid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serverid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIp", wireType)
			}
			m.ServerIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerIp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			m.ServerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errormsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errormsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCstrike15V2_ClientRequestNewMission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCstrike15_v2_ClientRequestNewMission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCstrike15_v2_ClientRequestNewMission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionId", wireType)
			}
			m.MissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XpProgressData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XpProgressData = append(m.XpProgressData, &XpProgressData{})
			if err := m.XpProgressData[len(m.XpProgressData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentXp", wireType)
			}
			m.CurrentXp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentXp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLevel", wireType)
			}
			m.CurrentLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradedDefidx", wireType)
			}
			m.UpgradedDefidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradedDefidx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationPointsAwarded", wireType)
			}
			m.OperationPointsAwarded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationPointsAwarded |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_WatchInfoUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_WatchInfoUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_WatchInfoUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIds = append(m.AccountIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AccountIds) == 0 {
					m.AccountIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIds = append(m.AccountIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchableMatchInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WatchableMatchInfos = append(m.WatchableMatchInfos, &WatchableMatchInfo{})
			if err := m.WatchableMatchInfos[len(m.WatchableMatchInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedTimeout", wireType)
			}
			m.ExtendedTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestPlayersProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestPlayersProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId_Deprecated", wireType)
			}
			m.RequestId_Deprecated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId_Deprecated |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIds_Deprecated = append(m.AccountIds_Deprecated, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AccountIds_Deprecated) == 0 {
					m.AccountIds_Deprecated = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIds_Deprecated = append(m.AccountIds_Deprecated, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds_Deprecated", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestLevel", wireType)
			}
			m.RequestLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_PlayersProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayersProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayersProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountProfiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountProfiles = append(m.AccountProfiles, &CMsgGCCStrike15V2_MatchmakingGC2ClientHello{})
			if err := m.AccountProfiles[len(m.AccountProfiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caseid", wireType)
			}
			m.Caseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caseid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspectid", wireType)
			}
			m.Suspectid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Suspectid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fractionid", wireType)
			}
			m.Fractionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fractionid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptAimbot", wireType)
			}
			m.RptAimbot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptAimbot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptWallhack", wireType)
			}
			m.RptWallhack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptWallhack |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptSpeedhack", wireType)
			}
			m.RptSpeedhack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptSpeedhack |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptTeamharm", wireType)
			}
			m.RptTeamharm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptTeamharm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caseid", wireType)
			}
			m.Caseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caseid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caseurl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caseurl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verdict", wireType)
			}
			m.Verdict = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Verdict |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Throttleseconds", wireType)
			}
			m.Throttleseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Throttleseconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspectid", wireType)
			}
			m.Suspectid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Suspectid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fractionid", wireType)
			}
			m.Fractionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fractionid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numrounds", wireType)
			}
			m.Numrounds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numrounds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fractionrounds", wireType)
			}
			m.Fractionrounds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fractionrounds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streakconvictions", wireType)
			}
			m.Streakconvictions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Streakconvictions |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caseid", wireType)
			}
			m.Caseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caseid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statusid", wireType)
			}
			m.Statusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Statusid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CClientHeaderOverwatchEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CClientHeaderOverwatchEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CClientHeaderOverwatchEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caseid", wireType)
			}
			m.Caseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caseid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientTextMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientTextMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Client2GCTextMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCTextMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCTextMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, make([]byte, postIndex-iNdEx))
			copy(m.Args[len(m.Args)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchEndRunRewardDrops: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchEndRunRewardDrops: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serverinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Serverinfo == nil {
				m.Serverinfo = &CMsgGCCStrike15V2_MatchmakingServerReservationResponse{}
			}
			if err := m.Serverinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchEndQuestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchEndQuestData == nil {
				m.MatchEndQuestData = &CMsgGC_ServerQuestUpdateData{}
			}
			if err := m.MatchEndQuestData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEconItemPreviewDataBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEconItemPreviewDataBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEconItemPreviewDataBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defindex", wireType)
			}
			m.Defindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paintindex", wireType)
			}
			m.Paintindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Paintindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rarity", wireType)
			}
			m.Rarity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rarity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paintwear", wireType)
			}
			m.Paintwear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Paintwear |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paintseed", wireType)
			}
			m.Paintseed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Paintseed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killeaterscoretype", wireType)
			}
			m.Killeaterscoretype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Killeaterscoretype |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killeatervalue", wireType)
			}
			m.Killeatervalue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Killeatervalue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Customname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stickers = append(m.Stickers, &CEconItemPreviewDataBlock_Sticker{})
			if err := m.Stickers[len(m.Stickers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inventory", wireType)
			}
			m.Inventory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inventory |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questid", wireType)
			}
			m.Questid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Questid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dropreason", wireType)
			}
			m.Dropreason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dropreason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Musicindex", wireType)
			}
			m.Musicindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Musicindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entindex", wireType)
			}
			m.Entindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entindex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEconItemPreviewDataBlock_Sticker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sticker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sticker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerId", wireType)
			}
			m.StickerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wear", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Wear = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Scale = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rotation = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TintId", wireType)
			}
			m.TintId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TintId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchEndRewardDropsNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchEndRewardDropsNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iteminfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iteminfo == nil {
				m.Iteminfo = &CEconItemPreviewDataBlock{}
			}
			if err := m.Iteminfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgItemAcknowledged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgItemAcknowledged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgItemAcknowledged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iteminfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iteminfo == nil {
				m.Iteminfo = &CEconItemPreviewDataBlock{}
			}
			if err := m.Iteminfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamS", wireType)
			}
			m.ParamS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamA", wireType)
			}
			m.ParamA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamA |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamD", wireType)
			}
			m.ParamD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamD |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamM", wireType)
			}
			m.ParamM = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamM |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iteminfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iteminfo == nil {
				m.Iteminfo = &CEconItemPreviewDataBlock{}
			}
			if err := m.Iteminfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defindex", wireType)
			}
			m.Defindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Accountids = append(m.Accountids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Accountids) == 0 {
					m.Accountids = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Accountids = append(m.Accountids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestRecentUserGames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestRecentUserGames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestTournamentGames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestTournamentGames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eventid", wireType)
			}
			m.Eventid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eventid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestFullGameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestFullGameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchid", wireType)
			}
			m.Matchid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcomeid", wireType)
			}
			m.Outcomeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Outcomeid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Token |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_MatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_MatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_MatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchid", wireType)
			}
			m.Matchid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchtime", wireType)
			}
			m.Matchtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchtime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watchablematchinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Watchablematchinfo == nil {
				m.Watchablematchinfo = &WatchableMatchInfo{}
			}
			if err := m.Watchablematchinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundstatsLegacy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoundstatsLegacy == nil {
				m.RoundstatsLegacy = &CMsgGCCStrike15V2_MatchmakingServerRoundStats{}
			}
			if err := m.RoundstatsLegacy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roundstatsall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roundstatsall = append(m.Roundstatsall, &CMsgGCCStrike15V2_MatchmakingServerRoundStats{})
			if err := m.Roundstatsall[len(m.Roundstatsall)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentGroupTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentGroupTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentGroupTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Correctpick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Correctpick = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groupid", wireType)
			}
			m.Groupid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Groupid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Picks_Deprecated", wireType)
			}
			m.Picks_Deprecated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Picks_Deprecated |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &CDataGCCStrike15V2_TournamentGroupTeam{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StageIds = append(m.StageIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StageIds) == 0 {
					m.StageIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StageIds = append(m.StageIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StageIds", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Picklockuntiltime", wireType)
			}
			m.Picklockuntiltime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Picklockuntiltime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pickableteams", wireType)
			}
			m.Pickableteams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pickableteams |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointsPerPick", wireType)
			}
			m.PointsPerPick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointsPerPick |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Picks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Picks = append(m.Picks, &CDataGCCStrike15V2_TournamentGroup_Picks{})
			if err := m.Picks[len(m.Picks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentGroup_Picks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Picks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Picks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pickids = append(m.Pickids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pickids) == 0 {
					m.Pickids = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pickids = append(m.Pickids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pickids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sectionid", wireType)
			}
			m.Sectionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sectionid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &CDataGCCStrike15V2_TournamentGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &CDataGCCStrike15V2_TournamentSection{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentEvent == nil {
				m.TournamentEvent = &TournamentEvent{}
			}
			if err := m.TournamentEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTeams = append(m.TournamentTeams, &TournamentTeam{})
			if err := m.TournamentTeams[len(m.TournamentTeams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgrequestid", wireType)
			}
			m.Msgrequestid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msgrequestid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servertime", wireType)
			}
			m.Servertime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Servertime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matches = append(m.Matches, &CDataGCCStrike15V2_MatchInfo{})
			if err := m.Matches[len(m.Matches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streams = append(m.Streams, &TournamentTeam{})
			if err := m.Streams[len(m.Streams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tournamentinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tournamentinfo == nil {
				m.Tournamentinfo = &CDataGCCStrike15V2_TournamentInfo{}
			}
			if err := m.Tournamentinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Predictions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Predictions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Predictions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMatchTeamPicks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupMatchTeamPicks = append(m.GroupMatchTeamPicks, &CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick{})
			if err := m.GroupMatchTeamPicks[len(m.GroupMatchTeamPicks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMatchTeamPick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMatchTeamPick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sectionid", wireType)
			}
			m.Sectionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sectionid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groupid", wireType)
			}
			m.Groupid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Groupid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teamid", wireType)
			}
			m.Teamid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Teamid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Fantasy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Fantasy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Fantasy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &CMsgGCCStrike15V2_Fantasy_FantasyTeam{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FantasySlot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FantasySlot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pick", wireType)
			}
			m.Pick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FantasyTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FantasyTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sectionid", wireType)
			}
			m.Sectionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sectionid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots, &CMsgGCCStrike15V2_Fantasy_FantasySlot{})
			if err := m.Slots[len(m.Slots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAttribute_String) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAttribute_String: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAttribute_String: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCToGCReloadVersions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCToGCReloadVersions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCToGCReloadVersions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgCStrike15Welcome) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgCStrike15Welcome: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgCStrike15Welcome: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreItemHash", wireType)
			}
			m.StoreItemHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreItemHash |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeplayedconsecutively", wireType)
			}
			m.Timeplayedconsecutively = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeplayedconsecutively |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFirstPlayed", wireType)
			}
			m.TimeFirstPlayed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeFirstPlayed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimePlayed", wireType)
			}
			m.LastTimePlayed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTimePlayed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIpAddress", wireType)
			}
			m.LastIpAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIpAddress |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gscookieid", wireType)
			}
			m.Gscookieid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gscookieid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uniqueid", wireType)
			}
			m.Uniqueid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uniqueid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientVarValueNotificationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientVarValueNotificationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueInt", wireType)
			}
			m.ValueInt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueInt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			m.ServerAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerAddr |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			m.ServerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChokedBlocks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChokedBlocks = append(m.ChokedBlocks, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ServerVarValueNotificationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ServerVarValueNotificationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Viewangles = append(m.Viewangles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Viewangles) == 0 {
					m.Viewangles = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Viewangles = append(m.Viewangles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Viewangles", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GiftsLeaderboardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GiftsLeaderboardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GiftsLeaderboardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GiftsLeaderboardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servertime", wireType)
			}
			m.Servertime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Servertime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimePeriodSeconds", wireType)
			}
			m.TimePeriodSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimePeriodSeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGiftsGiven", wireType)
			}
			m.TotalGiftsGiven = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalGiftsGiven |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGivers", wireType)
			}
			m.TotalGivers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalGivers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftLeaderboardEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftLeaderboardEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifts", wireType)
			}
			m.Gifts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gifts |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientSubmitSurveyVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientSubmitSurveyVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurveyId", wireType)
			}
			m.SurveyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurveyId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Server2GCClientValidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Server2GCClientValidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Server2GCClientValidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc", wireType)
			}
			m.Crc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackNumber", wireType)
			}
			m.PackNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackFileId", wireType)
			}
			m.PackFileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackFileId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientTournamentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientTournamentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eventid", wireType)
			}
			m.Eventid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eventid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stageid", wireType)
			}
			m.Stageid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stageid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Teamids = append(m.Teamids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Teamids) == 0 {
					m.Teamids = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Teamids = append(m.Teamids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Teamids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSOEconCoupon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSOEconCoupon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSOEconCoupon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entryid", wireType)
			}
			m.Entryid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entryid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defidx", wireType)
			}
			m.Defidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defidx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			m.ExpirationDate = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationDate = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSOQuestProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSOQuestProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSOQuestProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questid", wireType)
			}
			m.Questid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Questid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointsRemaining", wireType)
			}
			m.PointsRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointsRemaining |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonusPoints", wireType)
			}
			m.BonusPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BonusPoints |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSOAccountSeasonalOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSOAccountSeasonalOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSOAccountSeasonalOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonValue", wireType)
			}
			m.SeasonValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonValue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierUnlocked", wireType)
			}
			m.TierUnlocked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TierUnlocked |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumTiers", wireType)
			}
			m.PremiumTiers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PremiumTiers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionId", wireType)
			}
			m.MissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionsCompleted", wireType)
			}
			m.MissionsCompleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionsCompleted |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSOPersonaDataPublic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSOPersonaDataPublic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSOPersonaDataPublic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerLevel", wireType)
			}
			m.PlayerLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commendation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commendation == nil {
				m.Commendation = &PlayerCommendationInfo{}
			}
			if err := m.Commendation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElevatedState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ElevatedState = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGC_GlobalGame_Subscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Subscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Subscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGC_GlobalGame_Unsubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Unsubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Unsubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeleft", wireType)
			}
			m.Timeleft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeleft |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGC_GlobalGame_Play) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Play: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Play: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gametimems", wireType)
			}
			m.Gametimems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gametimems |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msperpoint", wireType)
			}
			m.Msperpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msperpoint |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_AcknowledgePenalty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_AcknowledgePenalty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_AcknowledgePenalty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledged", wireType)
			}
			m.Acknowledged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Acknowledged |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defindex", wireType)
			}
			m.Defindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgradeid", wireType)
			}
			m.Upgradeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Upgradeid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hours", wireType)
			}
			m.Hours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hours |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prestigetime", wireType)
			}
			m.Prestigetime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prestigetime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCStreamUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCStreamUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			m.Os = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Os |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientToGCRequestElevate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientToGCRequestElevate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientToGCChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientToGCChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientToGCChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GCToClientChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GCToClientChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GCToClientChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientAuthKeyCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientAuthKeyCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientAuthKeyCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eventid", wireType)
			}
			m.Eventid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eventid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15_GotvSyncPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_GotvSyncPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_GotvSyncPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &CEngineGotvSyncPacket{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDecalDigitalSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDecalDigitalSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDecalDigitalSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtime", wireType)
			}
			m.Rtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Endpos = append(m.Endpos, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Endpos) == 0 {
					m.Endpos = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Endpos = append(m.Endpos, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpos", wireType)
			}
		case 5:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Startpos = append(m.Startpos, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Startpos) == 0 {
					m.Startpos = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Startpos = append(m.Startpos, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Startpos", wireType)
			}
		case 6:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Right = append(m.Right, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Right) == 0 {
					m.Right = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Right = append(m.Right, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxDefidx", wireType)
			}
			m.TxDefidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxDefidx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entindex", wireType)
			}
			m.Entindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entindex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hitbox", wireType)
			}
			m.Hitbox = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hitbox |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creationtime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Creationtime = float32(math.Float32frombits(v))
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equipslot", wireType)
			}
			m.Equipslot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Equipslot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			m.TraceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Normal = append(m.Normal, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Normal) == 0 {
					m.Normal = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Normal = append(m.Normal, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Normal", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TintId", wireType)
			}
			m.TintId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TintId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientPlayerDecalSign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientPlayerDecalSign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientPlayerDecalSign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &PlayerDecalDigitalSignature{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientLogonFatalError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientLogonFatalError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientLogonFatalError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientPollState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientPollState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientPollState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pollid", wireType)
			}
			m.Pollid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pollid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Values = append(m.Values, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Values) == 0 {
					m.Values = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Values = append(m.Values, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Party_Register) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Party_Register: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Party_Register: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apr", wireType)
			}
			m.Apr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Apr |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ark", wireType)
			}
			m.Ark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ark |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nby", wireType)
			}
			m.Nby = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nby |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grp", wireType)
			}
			m.Grp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			m.Slots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Launcher", wireType)
			}
			m.Launcher = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Launcher |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Party_Search) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Party_Search: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Party_Search: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apr", wireType)
			}
			m.Apr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Apr |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ark", wireType)
			}
			m.Ark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ark |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Grps = append(m.Grps, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Grps) == 0 {
					m.Grps = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Grps = append(m.Grps, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Grps", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Launcher", wireType)
			}
			m.Launcher = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Launcher |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Party_SearchResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Party_SearchResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Party_SearchResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &CMsgGCCStrike15V2_Party_SearchResults_Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Party_SearchResults_Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grp", wireType)
			}
			m.Grp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apr", wireType)
			}
			m.Apr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Apr |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ark", wireType)
			}
			m.Ark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ark |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			m.Loc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loc |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Party_Invite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Party_Invite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Party_Invite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lobbyid", wireType)
			}
			m.Lobbyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lobbyid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Account_RequestCoPlays: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Account_RequestCoPlays: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &CMsgGCCStrike15V2_Account_RequestCoPlays_Player{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servertime", wireType)
			}
			m.Servertime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Servertime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtcoplay", wireType)
			}
			m.Rtcoplay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtcoplay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestTicket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientToGCRequestTicket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientToGCRequestTicket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedSteamId", wireType)
			}
			m.AuthorizedSteamId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizedSteamId = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedPublicIp", wireType)
			}
			m.AuthorizedPublicIp = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizedPublicIp = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameserverSteamId", wireType)
			}
			m.GameserverSteamId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.GameserverSteamId = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameserverSdrRouting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameserverSdrRouting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCToClientSteamDatagramTicket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCToClientSteamDatagramTicket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCToClientSteamDatagramTicket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedTicket", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedTicket = append(m.SerializedTicket[:0], dAtA[iNdEx:postIndex]...)
			if m.SerializedTicket == nil {
				m.SerializedTicket = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientRequestOffers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestOffers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestOffers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientRequestSouvenir) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestSouvenir: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestSouvenir: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchid", wireType)
			}
			m.Matchid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eventid", wireType)
			}
			m.Eventid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eventid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientAccountBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientAccountBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientAccountBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientPartyJoinRelay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientPartyJoinRelay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientPartyJoinRelay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lobbyid", wireType)
			}
			m.Lobbyid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lobbyid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientPartyWarning: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientPartyWarning: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &CMsgGCCStrike15V2_ClientPartyWarning_Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientPartyWarning_Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warntype", wireType)
			}
			m.Warntype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Warntype |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_SetEventFavorite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_SetEventFavorite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_SetEventFavorite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eventid", wireType)
			}
			m.Eventid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eventid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFavorite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFavorite = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GetEventFavorites_Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GetEventFavorites_Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllEvents", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllEvents = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GetEventFavorites_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GetEventFavorites_Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GetEventFavorites_Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllEvents", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllEvents = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonFavorites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonFavorites = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonFeatured", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonFeatured = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientPerfReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientPerfReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientPerfReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &CMsgGCCStrike15V2_ClientPerfReport_Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientPerfReport_Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perfcounter", wireType)
			}
			m.Perfcounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Perfcounter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = append(m.Reference[:0], dAtA[iNdEx:postIndex]...)
			if m.Reference == nil {
				m.Reference = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actual", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actual = append(m.Actual[:0], dAtA[iNdEx:postIndex]...)
			if m.Actual == nil {
				m.Actual = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sourceid", wireType)
			}
			m.Sourceid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sourceid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientReportValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileReport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileReport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandLine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandLine = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFiles", wireType)
			}
			m.TotalFiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFiles |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalError", wireType)
			}
			m.InternalError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InternalError |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustTime", wireType)
			}
			m.TrustTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrustTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountPending", wireType)
			}
			m.CountPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountPending |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountCompleted", wireType)
			}
			m.CountCompleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountCompleted |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessId", wireType)
			}
			m.ProcessId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Osversion", wireType)
			}
			m.Osversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Osversion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clientreportversion", wireType)
			}
			m.Clientreportversion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clientreportversion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileReport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileReport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferInsecureMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfferInsecureMode = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferSecureMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfferSecureMode = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowUnsignedUi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowUnsignedUi = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KickUser = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GC2ClientRequestValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientRequestValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientRequestValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullReport", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullReport = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCstrike15Gcmessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCstrike15Gcmessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCstrike15Gcmessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCstrike15Gcmessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCstrike15Gcmessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCstrike15Gcmessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCstrike15Gcmessages = fmt.Errorf("proto: unexpected end of group")
)
