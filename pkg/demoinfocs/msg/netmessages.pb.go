// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: netmessages.proto

package msg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NET_Messages int32

const (
	NET_Messages_net_NOP              NET_Messages = 0
	NET_Messages_net_Disconnect       NET_Messages = 1
	NET_Messages_net_File             NET_Messages = 2
	NET_Messages_net_SplitScreenUser  NET_Messages = 3
	NET_Messages_net_Tick             NET_Messages = 4
	NET_Messages_net_StringCmd        NET_Messages = 5
	NET_Messages_net_SetConVar        NET_Messages = 6
	NET_Messages_net_SignonState      NET_Messages = 7
	NET_Messages_net_PlayerAvatarData NET_Messages = 100
)

// Enum value maps for NET_Messages.
var (
	NET_Messages_name = map[int32]string{
		0:   "net_NOP",
		1:   "net_Disconnect",
		2:   "net_File",
		3:   "net_SplitScreenUser",
		4:   "net_Tick",
		5:   "net_StringCmd",
		6:   "net_SetConVar",
		7:   "net_SignonState",
		100: "net_PlayerAvatarData",
	}
	NET_Messages_value = map[string]int32{
		"net_NOP":              0,
		"net_Disconnect":       1,
		"net_File":             2,
		"net_SplitScreenUser":  3,
		"net_Tick":             4,
		"net_StringCmd":        5,
		"net_SetConVar":        6,
		"net_SignonState":      7,
		"net_PlayerAvatarData": 100,
	}
)

func (x NET_Messages) Enum() *NET_Messages {
	p := new(NET_Messages)
	*p = x
	return p
}

func (x NET_Messages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NET_Messages) Descriptor() protoreflect.EnumDescriptor {
	return file_netmessages_proto_enumTypes[0].Descriptor()
}

func (NET_Messages) Type() protoreflect.EnumType {
	return &file_netmessages_proto_enumTypes[0]
}

func (x NET_Messages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NET_Messages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NET_Messages(num)
	return nil
}

// Deprecated: Use NET_Messages.Descriptor instead.
func (NET_Messages) EnumDescriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{0}
}

type CLC_Messages int32

const (
	CLC_Messages_clc_ClientInfo         CLC_Messages = 8
	CLC_Messages_clc_Move               CLC_Messages = 9
	CLC_Messages_clc_VoiceData          CLC_Messages = 10
	CLC_Messages_clc_BaselineAck        CLC_Messages = 11
	CLC_Messages_clc_ListenEvents       CLC_Messages = 12
	CLC_Messages_clc_RespondCvarValue   CLC_Messages = 13
	CLC_Messages_clc_FileCRCCheck       CLC_Messages = 14
	CLC_Messages_clc_LoadingProgress    CLC_Messages = 15
	CLC_Messages_clc_SplitPlayerConnect CLC_Messages = 16
	CLC_Messages_clc_ClientMessage      CLC_Messages = 17
	CLC_Messages_clc_CmdKeyValues       CLC_Messages = 18
	CLC_Messages_clc_HltvReplay         CLC_Messages = 20
)

// Enum value maps for CLC_Messages.
var (
	CLC_Messages_name = map[int32]string{
		8:  "clc_ClientInfo",
		9:  "clc_Move",
		10: "clc_VoiceData",
		11: "clc_BaselineAck",
		12: "clc_ListenEvents",
		13: "clc_RespondCvarValue",
		14: "clc_FileCRCCheck",
		15: "clc_LoadingProgress",
		16: "clc_SplitPlayerConnect",
		17: "clc_ClientMessage",
		18: "clc_CmdKeyValues",
		20: "clc_HltvReplay",
	}
	CLC_Messages_value = map[string]int32{
		"clc_ClientInfo":         8,
		"clc_Move":               9,
		"clc_VoiceData":          10,
		"clc_BaselineAck":        11,
		"clc_ListenEvents":       12,
		"clc_RespondCvarValue":   13,
		"clc_FileCRCCheck":       14,
		"clc_LoadingProgress":    15,
		"clc_SplitPlayerConnect": 16,
		"clc_ClientMessage":      17,
		"clc_CmdKeyValues":       18,
		"clc_HltvReplay":         20,
	}
)

func (x CLC_Messages) Enum() *CLC_Messages {
	p := new(CLC_Messages)
	*p = x
	return p
}

func (x CLC_Messages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CLC_Messages) Descriptor() protoreflect.EnumDescriptor {
	return file_netmessages_proto_enumTypes[1].Descriptor()
}

func (CLC_Messages) Type() protoreflect.EnumType {
	return &file_netmessages_proto_enumTypes[1]
}

func (x CLC_Messages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CLC_Messages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CLC_Messages(num)
	return nil
}

// Deprecated: Use CLC_Messages.Descriptor instead.
func (CLC_Messages) EnumDescriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{1}
}

type VoiceDataFormatT int32

const (
	VoiceDataFormatT_VOICEDATA_FORMAT_STEAM  VoiceDataFormatT = 0
	VoiceDataFormatT_VOICEDATA_FORMAT_ENGINE VoiceDataFormatT = 1
)

// Enum value maps for VoiceDataFormatT.
var (
	VoiceDataFormatT_name = map[int32]string{
		0: "VOICEDATA_FORMAT_STEAM",
		1: "VOICEDATA_FORMAT_ENGINE",
	}
	VoiceDataFormatT_value = map[string]int32{
		"VOICEDATA_FORMAT_STEAM":  0,
		"VOICEDATA_FORMAT_ENGINE": 1,
	}
)

func (x VoiceDataFormatT) Enum() *VoiceDataFormatT {
	p := new(VoiceDataFormatT)
	*p = x
	return p
}

func (x VoiceDataFormatT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoiceDataFormatT) Descriptor() protoreflect.EnumDescriptor {
	return file_netmessages_proto_enumTypes[2].Descriptor()
}

func (VoiceDataFormatT) Type() protoreflect.EnumType {
	return &file_netmessages_proto_enumTypes[2]
}

func (x VoiceDataFormatT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VoiceDataFormatT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VoiceDataFormatT(num)
	return nil
}

// Deprecated: Use VoiceDataFormatT.Descriptor instead.
func (VoiceDataFormatT) EnumDescriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{2}
}

type ESplitScreenMessageType int32

const (
	ESplitScreenMessageType_MSG_SPLITSCREEN_ADDUSER    ESplitScreenMessageType = 0
	ESplitScreenMessageType_MSG_SPLITSCREEN_REMOVEUSER ESplitScreenMessageType = 1
	ESplitScreenMessageType_MSG_SPLITSCREEN_TYPE_BITS  ESplitScreenMessageType = 1
)

// Enum value maps for ESplitScreenMessageType.
var (
	ESplitScreenMessageType_name = map[int32]string{
		0: "MSG_SPLITSCREEN_ADDUSER",
		1: "MSG_SPLITSCREEN_REMOVEUSER",
		// Duplicate value: 1: "MSG_SPLITSCREEN_TYPE_BITS",
	}
	ESplitScreenMessageType_value = map[string]int32{
		"MSG_SPLITSCREEN_ADDUSER":    0,
		"MSG_SPLITSCREEN_REMOVEUSER": 1,
		"MSG_SPLITSCREEN_TYPE_BITS":  1,
	}
)

func (x ESplitScreenMessageType) Enum() *ESplitScreenMessageType {
	p := new(ESplitScreenMessageType)
	*p = x
	return p
}

func (x ESplitScreenMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESplitScreenMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_netmessages_proto_enumTypes[3].Descriptor()
}

func (ESplitScreenMessageType) Type() protoreflect.EnumType {
	return &file_netmessages_proto_enumTypes[3]
}

func (x ESplitScreenMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESplitScreenMessageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESplitScreenMessageType(num)
	return nil
}

// Deprecated: Use ESplitScreenMessageType.Descriptor instead.
func (ESplitScreenMessageType) EnumDescriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{3}
}

type SVC_Messages int32

const (
	SVC_Messages_svc_ServerInfo        SVC_Messages = 8
	SVC_Messages_svc_SendTable         SVC_Messages = 9
	SVC_Messages_svc_ClassInfo         SVC_Messages = 10
	SVC_Messages_svc_SetPause          SVC_Messages = 11
	SVC_Messages_svc_CreateStringTable SVC_Messages = 12
	SVC_Messages_svc_UpdateStringTable SVC_Messages = 13
	SVC_Messages_svc_VoiceInit         SVC_Messages = 14
	SVC_Messages_svc_VoiceData         SVC_Messages = 15
	SVC_Messages_svc_Print             SVC_Messages = 16
	SVC_Messages_svc_Sounds            SVC_Messages = 17
	SVC_Messages_svc_SetView           SVC_Messages = 18
	SVC_Messages_svc_FixAngle          SVC_Messages = 19
	SVC_Messages_svc_CrosshairAngle    SVC_Messages = 20
	SVC_Messages_svc_BSPDecal          SVC_Messages = 21
	SVC_Messages_svc_SplitScreen       SVC_Messages = 22
	SVC_Messages_svc_UserMessage       SVC_Messages = 23
	SVC_Messages_svc_EntityMessage     SVC_Messages = 24
	SVC_Messages_svc_GameEvent         SVC_Messages = 25
	SVC_Messages_svc_PacketEntities    SVC_Messages = 26
	SVC_Messages_svc_TempEntities      SVC_Messages = 27
	SVC_Messages_svc_Prefetch          SVC_Messages = 28
	SVC_Messages_svc_Menu              SVC_Messages = 29
	SVC_Messages_svc_GameEventList     SVC_Messages = 30
	SVC_Messages_svc_GetCvarValue      SVC_Messages = 31
	SVC_Messages_svc_PaintmapData      SVC_Messages = 33
	SVC_Messages_svc_CmdKeyValues      SVC_Messages = 34
	SVC_Messages_svc_EncryptedData     SVC_Messages = 35
	SVC_Messages_svc_HltvReplay        SVC_Messages = 36
	SVC_Messages_svc_Broadcast_Command SVC_Messages = 38
)

// Enum value maps for SVC_Messages.
var (
	SVC_Messages_name = map[int32]string{
		8:  "svc_ServerInfo",
		9:  "svc_SendTable",
		10: "svc_ClassInfo",
		11: "svc_SetPause",
		12: "svc_CreateStringTable",
		13: "svc_UpdateStringTable",
		14: "svc_VoiceInit",
		15: "svc_VoiceData",
		16: "svc_Print",
		17: "svc_Sounds",
		18: "svc_SetView",
		19: "svc_FixAngle",
		20: "svc_CrosshairAngle",
		21: "svc_BSPDecal",
		22: "svc_SplitScreen",
		23: "svc_UserMessage",
		24: "svc_EntityMessage",
		25: "svc_GameEvent",
		26: "svc_PacketEntities",
		27: "svc_TempEntities",
		28: "svc_Prefetch",
		29: "svc_Menu",
		30: "svc_GameEventList",
		31: "svc_GetCvarValue",
		33: "svc_PaintmapData",
		34: "svc_CmdKeyValues",
		35: "svc_EncryptedData",
		36: "svc_HltvReplay",
		38: "svc_Broadcast_Command",
	}
	SVC_Messages_value = map[string]int32{
		"svc_ServerInfo":        8,
		"svc_SendTable":         9,
		"svc_ClassInfo":         10,
		"svc_SetPause":          11,
		"svc_CreateStringTable": 12,
		"svc_UpdateStringTable": 13,
		"svc_VoiceInit":         14,
		"svc_VoiceData":         15,
		"svc_Print":             16,
		"svc_Sounds":            17,
		"svc_SetView":           18,
		"svc_FixAngle":          19,
		"svc_CrosshairAngle":    20,
		"svc_BSPDecal":          21,
		"svc_SplitScreen":       22,
		"svc_UserMessage":       23,
		"svc_EntityMessage":     24,
		"svc_GameEvent":         25,
		"svc_PacketEntities":    26,
		"svc_TempEntities":      27,
		"svc_Prefetch":          28,
		"svc_Menu":              29,
		"svc_GameEventList":     30,
		"svc_GetCvarValue":      31,
		"svc_PaintmapData":      33,
		"svc_CmdKeyValues":      34,
		"svc_EncryptedData":     35,
		"svc_HltvReplay":        36,
		"svc_Broadcast_Command": 38,
	}
)

func (x SVC_Messages) Enum() *SVC_Messages {
	p := new(SVC_Messages)
	*p = x
	return p
}

func (x SVC_Messages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SVC_Messages) Descriptor() protoreflect.EnumDescriptor {
	return file_netmessages_proto_enumTypes[4].Descriptor()
}

func (SVC_Messages) Type() protoreflect.EnumType {
	return &file_netmessages_proto_enumTypes[4]
}

func (x SVC_Messages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SVC_Messages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SVC_Messages(num)
	return nil
}

// Deprecated: Use SVC_Messages.Descriptor instead.
func (SVC_Messages) EnumDescriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{4}
}

type ReplayEventTypeT int32

const (
	ReplayEventTypeT_REPLAY_EVENT_CANCEL                 ReplayEventTypeT = 0
	ReplayEventTypeT_REPLAY_EVENT_DEATH                  ReplayEventTypeT = 1
	ReplayEventTypeT_REPLAY_EVENT_GENERIC                ReplayEventTypeT = 2
	ReplayEventTypeT_REPLAY_EVENT_STUCK_NEED_FULL_UPDATE ReplayEventTypeT = 3
)

// Enum value maps for ReplayEventTypeT.
var (
	ReplayEventTypeT_name = map[int32]string{
		0: "REPLAY_EVENT_CANCEL",
		1: "REPLAY_EVENT_DEATH",
		2: "REPLAY_EVENT_GENERIC",
		3: "REPLAY_EVENT_STUCK_NEED_FULL_UPDATE",
	}
	ReplayEventTypeT_value = map[string]int32{
		"REPLAY_EVENT_CANCEL":                 0,
		"REPLAY_EVENT_DEATH":                  1,
		"REPLAY_EVENT_GENERIC":                2,
		"REPLAY_EVENT_STUCK_NEED_FULL_UPDATE": 3,
	}
)

func (x ReplayEventTypeT) Enum() *ReplayEventTypeT {
	p := new(ReplayEventTypeT)
	*p = x
	return p
}

func (x ReplayEventTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplayEventTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_netmessages_proto_enumTypes[5].Descriptor()
}

func (ReplayEventTypeT) Type() protoreflect.EnumType {
	return &file_netmessages_proto_enumTypes[5]
}

func (x ReplayEventTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReplayEventTypeT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReplayEventTypeT(num)
	return nil
}

// Deprecated: Use ReplayEventTypeT.Descriptor instead.
func (ReplayEventTypeT) EnumDescriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{5}
}

type CMsgVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (x *CMsgVector) Reset() {
	*x = CMsgVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgVector) ProtoMessage() {}

func (x *CMsgVector) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgVector.ProtoReflect.Descriptor instead.
func (*CMsgVector) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgVector) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgVector) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgVector) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type CMsgVector2D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
}

func (x *CMsgVector2D) Reset() {
	*x = CMsgVector2D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgVector2D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgVector2D) ProtoMessage() {}

func (x *CMsgVector2D) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgVector2D.ProtoReflect.Descriptor instead.
func (*CMsgVector2D) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgVector2D) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgVector2D) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type CMsgQAngle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (x *CMsgQAngle) Reset() {
	*x = CMsgQAngle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQAngle) ProtoMessage() {}

func (x *CMsgQAngle) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQAngle.ProtoReflect.Descriptor instead.
func (*CMsgQAngle) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgQAngle) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgQAngle) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgQAngle) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type CMsgRGBA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R *int32 `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	G *int32 `protobuf:"varint,2,opt,name=g" json:"g,omitempty"`
	B *int32 `protobuf:"varint,3,opt,name=b" json:"b,omitempty"`
	A *int32 `protobuf:"varint,4,opt,name=a" json:"a,omitempty"`
}

func (x *CMsgRGBA) Reset() {
	*x = CMsgRGBA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRGBA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRGBA) ProtoMessage() {}

func (x *CMsgRGBA) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRGBA.ProtoReflect.Descriptor instead.
func (*CMsgRGBA) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgRGBA) GetR() int32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *CMsgRGBA) GetG() int32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return 0
}

func (x *CMsgRGBA) GetB() int32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

func (x *CMsgRGBA) GetA() int32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

type CNETMsg_Tick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tick                            *uint32 `protobuf:"varint,1,opt,name=tick" json:"tick,omitempty"`
	HostComputationtime             *uint32 `protobuf:"varint,4,opt,name=host_computationtime,json=hostComputationtime" json:"host_computationtime,omitempty"`
	HostComputationtimeStdDeviation *uint32 `protobuf:"varint,5,opt,name=host_computationtime_std_deviation,json=hostComputationtimeStdDeviation" json:"host_computationtime_std_deviation,omitempty"`
	HostFramestarttimeStdDeviation  *uint32 `protobuf:"varint,6,opt,name=host_framestarttime_std_deviation,json=hostFramestarttimeStdDeviation" json:"host_framestarttime_std_deviation,omitempty"`
	HltvReplayFlags                 *uint32 `protobuf:"varint,7,opt,name=hltv_replay_flags,json=hltvReplayFlags" json:"hltv_replay_flags,omitempty"`
}

func (x *CNETMsg_Tick) Reset() {
	*x = CNETMsg_Tick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_Tick) ProtoMessage() {}

func (x *CNETMsg_Tick) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_Tick.ProtoReflect.Descriptor instead.
func (*CNETMsg_Tick) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{4}
}

func (x *CNETMsg_Tick) GetTick() uint32 {
	if x != nil && x.Tick != nil {
		return *x.Tick
	}
	return 0
}

func (x *CNETMsg_Tick) GetHostComputationtime() uint32 {
	if x != nil && x.HostComputationtime != nil {
		return *x.HostComputationtime
	}
	return 0
}

func (x *CNETMsg_Tick) GetHostComputationtimeStdDeviation() uint32 {
	if x != nil && x.HostComputationtimeStdDeviation != nil {
		return *x.HostComputationtimeStdDeviation
	}
	return 0
}

func (x *CNETMsg_Tick) GetHostFramestarttimeStdDeviation() uint32 {
	if x != nil && x.HostFramestarttimeStdDeviation != nil {
		return *x.HostFramestarttimeStdDeviation
	}
	return 0
}

func (x *CNETMsg_Tick) GetHltvReplayFlags() uint32 {
	if x != nil && x.HltvReplayFlags != nil {
		return *x.HltvReplayFlags
	}
	return 0
}

type CNETMsg_StringCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command *string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
}

func (x *CNETMsg_StringCmd) Reset() {
	*x = CNETMsg_StringCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_StringCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_StringCmd) ProtoMessage() {}

func (x *CNETMsg_StringCmd) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_StringCmd.ProtoReflect.Descriptor instead.
func (*CNETMsg_StringCmd) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{5}
}

func (x *CNETMsg_StringCmd) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

type CNETMsg_SignonState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignonState       *uint32  `protobuf:"varint,1,opt,name=signon_state,json=signonState" json:"signon_state,omitempty"`
	SpawnCount        *uint32  `protobuf:"varint,2,opt,name=spawn_count,json=spawnCount" json:"spawn_count,omitempty"`
	NumServerPlayers  *uint32  `protobuf:"varint,3,opt,name=num_server_players,json=numServerPlayers" json:"num_server_players,omitempty"`
	PlayersNetworkids []string `protobuf:"bytes,4,rep,name=players_networkids,json=playersNetworkids" json:"players_networkids,omitempty"`
	MapName           *string  `protobuf:"bytes,5,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
}

func (x *CNETMsg_SignonState) Reset() {
	*x = CNETMsg_SignonState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_SignonState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_SignonState) ProtoMessage() {}

func (x *CNETMsg_SignonState) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_SignonState.ProtoReflect.Descriptor instead.
func (*CNETMsg_SignonState) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{6}
}

func (x *CNETMsg_SignonState) GetSignonState() uint32 {
	if x != nil && x.SignonState != nil {
		return *x.SignonState
	}
	return 0
}

func (x *CNETMsg_SignonState) GetSpawnCount() uint32 {
	if x != nil && x.SpawnCount != nil {
		return *x.SpawnCount
	}
	return 0
}

func (x *CNETMsg_SignonState) GetNumServerPlayers() uint32 {
	if x != nil && x.NumServerPlayers != nil {
		return *x.NumServerPlayers
	}
	return 0
}

func (x *CNETMsg_SignonState) GetPlayersNetworkids() []string {
	if x != nil {
		return x.PlayersNetworkids
	}
	return nil
}

func (x *CNETMsg_SignonState) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

type CMsg_CVars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cvars []*CMsg_CVars_CVar `protobuf:"bytes,1,rep,name=cvars" json:"cvars,omitempty"`
}

func (x *CMsg_CVars) Reset() {
	*x = CMsg_CVars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsg_CVars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsg_CVars) ProtoMessage() {}

func (x *CMsg_CVars) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsg_CVars.ProtoReflect.Descriptor instead.
func (*CMsg_CVars) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{7}
}

func (x *CMsg_CVars) GetCvars() []*CMsg_CVars_CVar {
	if x != nil {
		return x.Cvars
	}
	return nil
}

type CNETMsg_SetConVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Convars *CMsg_CVars `protobuf:"bytes,1,opt,name=convars" json:"convars,omitempty"`
}

func (x *CNETMsg_SetConVar) Reset() {
	*x = CNETMsg_SetConVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_SetConVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_SetConVar) ProtoMessage() {}

func (x *CNETMsg_SetConVar) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_SetConVar.ProtoReflect.Descriptor instead.
func (*CNETMsg_SetConVar) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{8}
}

func (x *CNETMsg_SetConVar) GetConvars() *CMsg_CVars {
	if x != nil {
		return x.Convars
	}
	return nil
}

type CNETMsg_NOP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CNETMsg_NOP) Reset() {
	*x = CNETMsg_NOP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_NOP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_NOP) ProtoMessage() {}

func (x *CNETMsg_NOP) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_NOP.ProtoReflect.Descriptor instead.
func (*CNETMsg_NOP) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{9}
}

type CNETMsg_Disconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (x *CNETMsg_Disconnect) Reset() {
	*x = CNETMsg_Disconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_Disconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_Disconnect) ProtoMessage() {}

func (x *CNETMsg_Disconnect) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_Disconnect.ProtoReflect.Descriptor instead.
func (*CNETMsg_Disconnect) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{10}
}

func (x *CNETMsg_Disconnect) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CNETMsg_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId       *int32  `protobuf:"varint,1,opt,name=transfer_id,json=transferId" json:"transfer_id,omitempty"`
	FileName         *string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	IsReplayDemoFile *bool   `protobuf:"varint,3,opt,name=is_replay_demo_file,json=isReplayDemoFile" json:"is_replay_demo_file,omitempty"`
	Deny             *bool   `protobuf:"varint,4,opt,name=deny" json:"deny,omitempty"`
}

func (x *CNETMsg_File) Reset() {
	*x = CNETMsg_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_File) ProtoMessage() {}

func (x *CNETMsg_File) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_File.ProtoReflect.Descriptor instead.
func (*CNETMsg_File) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{11}
}

func (x *CNETMsg_File) GetTransferId() int32 {
	if x != nil && x.TransferId != nil {
		return *x.TransferId
	}
	return 0
}

func (x *CNETMsg_File) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *CNETMsg_File) GetIsReplayDemoFile() bool {
	if x != nil && x.IsReplayDemoFile != nil {
		return *x.IsReplayDemoFile
	}
	return false
}

func (x *CNETMsg_File) GetDeny() bool {
	if x != nil && x.Deny != nil {
		return *x.Deny
	}
	return false
}

type CNETMsg_SplitScreenUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot *int32 `protobuf:"varint,1,opt,name=slot" json:"slot,omitempty"`
}

func (x *CNETMsg_SplitScreenUser) Reset() {
	*x = CNETMsg_SplitScreenUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_SplitScreenUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_SplitScreenUser) ProtoMessage() {}

func (x *CNETMsg_SplitScreenUser) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_SplitScreenUser.ProtoReflect.Descriptor instead.
func (*CNETMsg_SplitScreenUser) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{12}
}

func (x *CNETMsg_SplitScreenUser) GetSlot() int32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

type CNETMsg_PlayerAvatarData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Rgb       []byte  `protobuf:"bytes,2,opt,name=rgb" json:"rgb,omitempty"`
}

func (x *CNETMsg_PlayerAvatarData) Reset() {
	*x = CNETMsg_PlayerAvatarData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_PlayerAvatarData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_PlayerAvatarData) ProtoMessage() {}

func (x *CNETMsg_PlayerAvatarData) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_PlayerAvatarData.ProtoReflect.Descriptor instead.
func (*CNETMsg_PlayerAvatarData) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{13}
}

func (x *CNETMsg_PlayerAvatarData) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CNETMsg_PlayerAvatarData) GetRgb() []byte {
	if x != nil {
		return x.Rgb
	}
	return nil
}

type CCLCMsg_ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendTableCrc *uint32  `protobuf:"fixed32,1,opt,name=send_table_crc,json=sendTableCrc" json:"send_table_crc,omitempty"`
	ServerCount  *uint32  `protobuf:"varint,2,opt,name=server_count,json=serverCount" json:"server_count,omitempty"`
	IsHltv       *bool    `protobuf:"varint,3,opt,name=is_hltv,json=isHltv" json:"is_hltv,omitempty"`
	IsReplay     *bool    `protobuf:"varint,4,opt,name=is_replay,json=isReplay" json:"is_replay,omitempty"`
	FriendsId    *uint32  `protobuf:"varint,5,opt,name=friends_id,json=friendsId" json:"friends_id,omitempty"`
	FriendsName  *string  `protobuf:"bytes,6,opt,name=friends_name,json=friendsName" json:"friends_name,omitempty"`
	CustomFiles  []uint32 `protobuf:"fixed32,7,rep,name=custom_files,json=customFiles" json:"custom_files,omitempty"`
}

func (x *CCLCMsg_ClientInfo) Reset() {
	*x = CCLCMsg_ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCLCMsg_ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCLCMsg_ClientInfo) ProtoMessage() {}

func (x *CCLCMsg_ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCLCMsg_ClientInfo.ProtoReflect.Descriptor instead.
func (*CCLCMsg_ClientInfo) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{14}
}

func (x *CCLCMsg_ClientInfo) GetSendTableCrc() uint32 {
	if x != nil && x.SendTableCrc != nil {
		return *x.SendTableCrc
	}
	return 0
}

func (x *CCLCMsg_ClientInfo) GetServerCount() uint32 {
	if x != nil && x.ServerCount != nil {
		return *x.ServerCount
	}
	return 0
}

func (x *CCLCMsg_ClientInfo) GetIsHltv() bool {
	if x != nil && x.IsHltv != nil {
		return *x.IsHltv
	}
	return false
}

func (x *CCLCMsg_ClientInfo) GetIsReplay() bool {
	if x != nil && x.IsReplay != nil {
		return *x.IsReplay
	}
	return false
}

func (x *CCLCMsg_ClientInfo) GetFriendsId() uint32 {
	if x != nil && x.FriendsId != nil {
		return *x.FriendsId
	}
	return 0
}

func (x *CCLCMsg_ClientInfo) GetFriendsName() string {
	if x != nil && x.FriendsName != nil {
		return *x.FriendsName
	}
	return ""
}

func (x *CCLCMsg_ClientInfo) GetCustomFiles() []uint32 {
	if x != nil {
		return x.CustomFiles
	}
	return nil
}

type CCLCMsg_Move struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumBackupCommands *uint32 `protobuf:"varint,1,opt,name=num_backup_commands,json=numBackupCommands" json:"num_backup_commands,omitempty"`
	NumNewCommands    *uint32 `protobuf:"varint,2,opt,name=num_new_commands,json=numNewCommands" json:"num_new_commands,omitempty"`
	Data              []byte  `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (x *CCLCMsg_Move) Reset() {
	*x = CCLCMsg_Move{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCLCMsg_Move) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCLCMsg_Move) ProtoMessage() {}

func (x *CCLCMsg_Move) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCLCMsg_Move.ProtoReflect.Descriptor instead.
func (*CCLCMsg_Move) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{15}
}

func (x *CCLCMsg_Move) GetNumBackupCommands() uint32 {
	if x != nil && x.NumBackupCommands != nil {
		return *x.NumBackupCommands
	}
	return 0
}

func (x *CCLCMsg_Move) GetNumNewCommands() uint32 {
	if x != nil && x.NumNewCommands != nil {
		return *x.NumNewCommands
	}
	return 0
}

func (x *CCLCMsg_Move) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CCLCMsg_VoiceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data                     []byte            `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Xuid                     *uint64           `protobuf:"fixed64,2,opt,name=xuid" json:"xuid,omitempty"`
	Format                   *VoiceDataFormatT `protobuf:"varint,3,opt,name=format,enum=VoiceDataFormatT,def=1" json:"format,omitempty"`
	SequenceBytes            *int32            `protobuf:"varint,4,opt,name=sequence_bytes,json=sequenceBytes" json:"sequence_bytes,omitempty"`
	SectionNumber            *uint32           `protobuf:"varint,5,opt,name=section_number,json=sectionNumber" json:"section_number,omitempty"`
	UncompressedSampleOffset *uint32           `protobuf:"varint,6,opt,name=uncompressed_sample_offset,json=uncompressedSampleOffset" json:"uncompressed_sample_offset,omitempty"`
}

// Default values for CCLCMsg_VoiceData fields.
const (
	Default_CCLCMsg_VoiceData_Format = VoiceDataFormatT_VOICEDATA_FORMAT_ENGINE
)

func (x *CCLCMsg_VoiceData) Reset() {
	*x = CCLCMsg_VoiceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCLCMsg_VoiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCLCMsg_VoiceData) ProtoMessage() {}

func (x *CCLCMsg_VoiceData) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCLCMsg_VoiceData.ProtoReflect.Descriptor instead.
func (*CCLCMsg_VoiceData) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{16}
}

func (x *CCLCMsg_VoiceData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CCLCMsg_VoiceData) GetXuid() uint64 {
	if x != nil && x.Xuid != nil {
		return *x.Xuid
	}
	return 0
}

func (x *CCLCMsg_VoiceData) GetFormat() VoiceDataFormatT {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Default_CCLCMsg_VoiceData_Format
}

func (x *CCLCMsg_VoiceData) GetSequenceBytes() int32 {
	if x != nil && x.SequenceBytes != nil {
		return *x.SequenceBytes
	}
	return 0
}

func (x *CCLCMsg_VoiceData) GetSectionNumber() uint32 {
	if x != nil && x.SectionNumber != nil {
		return *x.SectionNumber
	}
	return 0
}

func (x *CCLCMsg_VoiceData) GetUncompressedSampleOffset() uint32 {
	if x != nil && x.UncompressedSampleOffset != nil {
		return *x.UncompressedSampleOffset
	}
	return 0
}

type CCLCMsg_BaselineAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaselineTick *int32 `protobuf:"varint,1,opt,name=baseline_tick,json=baselineTick" json:"baseline_tick,omitempty"`
	BaselineNr   *int32 `protobuf:"varint,2,opt,name=baseline_nr,json=baselineNr" json:"baseline_nr,omitempty"`
}

func (x *CCLCMsg_BaselineAck) Reset() {
	*x = CCLCMsg_BaselineAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCLCMsg_BaselineAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCLCMsg_BaselineAck) ProtoMessage() {}

func (x *CCLCMsg_BaselineAck) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCLCMsg_BaselineAck.ProtoReflect.Descriptor instead.
func (*CCLCMsg_BaselineAck) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{17}
}

func (x *CCLCMsg_BaselineAck) GetBaselineTick() int32 {
	if x != nil && x.BaselineTick != nil {
		return *x.BaselineTick
	}
	return 0
}

func (x *CCLCMsg_BaselineAck) GetBaselineNr() int32 {
	if x != nil && x.BaselineNr != nil {
		return *x.BaselineNr
	}
	return 0
}

type CCLCMsg_ListenEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventMask []uint32 `protobuf:"fixed32,1,rep,name=event_mask,json=eventMask" json:"event_mask,omitempty"`
}

func (x *CCLCMsg_ListenEvents) Reset() {
	*x = CCLCMsg_ListenEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCLCMsg_ListenEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCLCMsg_ListenEvents) ProtoMessage() {}

func (x *CCLCMsg_ListenEvents) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCLCMsg_ListenEvents.ProtoReflect.Descriptor instead.
func (*CCLCMsg_ListenEvents) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{18}
}

func (x *CCLCMsg_ListenEvents) GetEventMask() []uint32 {
	if x != nil {
		return x.EventMask
	}
	return nil
}

type CCLCMsg_RespondCvarValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie     *int32  `protobuf:"varint,1,opt,name=cookie" json:"cookie,omitempty"`
	StatusCode *int32  `protobuf:"varint,2,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	Name       *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Value      *string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (x *CCLCMsg_RespondCvarValue) Reset() {
	*x = CCLCMsg_RespondCvarValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCLCMsg_RespondCvarValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCLCMsg_RespondCvarValue) ProtoMessage() {}

func (x *CCLCMsg_RespondCvarValue) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCLCMsg_RespondCvarValue.ProtoReflect.Descriptor instead.
func (*CCLCMsg_RespondCvarValue) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{19}
}

func (x *CCLCMsg_RespondCvarValue) GetCookie() int32 {
	if x != nil && x.Cookie != nil {
		return *x.Cookie
	}
	return 0
}

func (x *CCLCMsg_RespondCvarValue) GetStatusCode() int32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *CCLCMsg_RespondCvarValue) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCLCMsg_RespondCvarValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCLCMsg_FileCRCCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodePath       *int32  `protobuf:"varint,1,opt,name=code_path,json=codePath" json:"code_path,omitempty"`
	Path           *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	CodeFilename   *int32  `protobuf:"varint,3,opt,name=code_filename,json=codeFilename" json:"code_filename,omitempty"`
	Filename       *string `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	FileFraction   *int32  `protobuf:"varint,5,opt,name=file_fraction,json=fileFraction" json:"file_fraction,omitempty"`
	Md5            []byte  `protobuf:"bytes,6,opt,name=md5" json:"md5,omitempty"`
	Crc            *uint32 `protobuf:"varint,7,opt,name=crc" json:"crc,omitempty"`
	FileHashType   *int32  `protobuf:"varint,8,opt,name=file_hash_type,json=fileHashType" json:"file_hash_type,omitempty"`
	FileLen        *int32  `protobuf:"varint,9,opt,name=file_len,json=fileLen" json:"file_len,omitempty"`
	PackFileId     *int32  `protobuf:"varint,10,opt,name=pack_file_id,json=packFileId" json:"pack_file_id,omitempty"`
	PackFileNumber *int32  `protobuf:"varint,11,opt,name=pack_file_number,json=packFileNumber" json:"pack_file_number,omitempty"`
}

func (x *CCLCMsg_FileCRCCheck) Reset() {
	*x = CCLCMsg_FileCRCCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCLCMsg_FileCRCCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCLCMsg_FileCRCCheck) ProtoMessage() {}

func (x *CCLCMsg_FileCRCCheck) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCLCMsg_FileCRCCheck.ProtoReflect.Descriptor instead.
func (*CCLCMsg_FileCRCCheck) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{20}
}

func (x *CCLCMsg_FileCRCCheck) GetCodePath() int32 {
	if x != nil && x.CodePath != nil {
		return *x.CodePath
	}
	return 0
}

func (x *CCLCMsg_FileCRCCheck) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CCLCMsg_FileCRCCheck) GetCodeFilename() int32 {
	if x != nil && x.CodeFilename != nil {
		return *x.CodeFilename
	}
	return 0
}

func (x *CCLCMsg_FileCRCCheck) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCLCMsg_FileCRCCheck) GetFileFraction() int32 {
	if x != nil && x.FileFraction != nil {
		return *x.FileFraction
	}
	return 0
}

func (x *CCLCMsg_FileCRCCheck) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *CCLCMsg_FileCRCCheck) GetCrc() uint32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

func (x *CCLCMsg_FileCRCCheck) GetFileHashType() int32 {
	if x != nil && x.FileHashType != nil {
		return *x.FileHashType
	}
	return 0
}

func (x *CCLCMsg_FileCRCCheck) GetFileLen() int32 {
	if x != nil && x.FileLen != nil {
		return *x.FileLen
	}
	return 0
}

func (x *CCLCMsg_FileCRCCheck) GetPackFileId() int32 {
	if x != nil && x.PackFileId != nil {
		return *x.PackFileId
	}
	return 0
}

func (x *CCLCMsg_FileCRCCheck) GetPackFileNumber() int32 {
	if x != nil && x.PackFileNumber != nil {
		return *x.PackFileNumber
	}
	return 0
}

type CCLCMsg_LoadingProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress *int32 `protobuf:"varint,1,opt,name=progress" json:"progress,omitempty"`
}

func (x *CCLCMsg_LoadingProgress) Reset() {
	*x = CCLCMsg_LoadingProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCLCMsg_LoadingProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCLCMsg_LoadingProgress) ProtoMessage() {}

func (x *CCLCMsg_LoadingProgress) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCLCMsg_LoadingProgress.ProtoReflect.Descriptor instead.
func (*CCLCMsg_LoadingProgress) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{21}
}

func (x *CCLCMsg_LoadingProgress) GetProgress() int32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

type CCLCMsg_SplitPlayerConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Convars *CMsg_CVars `protobuf:"bytes,1,opt,name=convars" json:"convars,omitempty"`
}

func (x *CCLCMsg_SplitPlayerConnect) Reset() {
	*x = CCLCMsg_SplitPlayerConnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCLCMsg_SplitPlayerConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCLCMsg_SplitPlayerConnect) ProtoMessage() {}

func (x *CCLCMsg_SplitPlayerConnect) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCLCMsg_SplitPlayerConnect.ProtoReflect.Descriptor instead.
func (*CCLCMsg_SplitPlayerConnect) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{22}
}

func (x *CCLCMsg_SplitPlayerConnect) GetConvars() *CMsg_CVars {
	if x != nil {
		return x.Convars
	}
	return nil
}

type CCLCMsg_CmdKeyValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyvalues []byte `protobuf:"bytes,1,opt,name=keyvalues" json:"keyvalues,omitempty"`
}

func (x *CCLCMsg_CmdKeyValues) Reset() {
	*x = CCLCMsg_CmdKeyValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCLCMsg_CmdKeyValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCLCMsg_CmdKeyValues) ProtoMessage() {}

func (x *CCLCMsg_CmdKeyValues) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCLCMsg_CmdKeyValues.ProtoReflect.Descriptor instead.
func (*CCLCMsg_CmdKeyValues) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{23}
}

func (x *CCLCMsg_CmdKeyValues) GetKeyvalues() []byte {
	if x != nil {
		return x.Keyvalues
	}
	return nil
}

type CSVCMsg_ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol                  *int32   `protobuf:"varint,1,opt,name=protocol" json:"protocol,omitempty"`
	ServerCount               *int32   `protobuf:"varint,2,opt,name=server_count,json=serverCount" json:"server_count,omitempty"`
	IsDedicated               *bool    `protobuf:"varint,3,opt,name=is_dedicated,json=isDedicated" json:"is_dedicated,omitempty"`
	IsOfficialValveServer     *bool    `protobuf:"varint,4,opt,name=is_official_valve_server,json=isOfficialValveServer" json:"is_official_valve_server,omitempty"`
	IsHltv                    *bool    `protobuf:"varint,5,opt,name=is_hltv,json=isHltv" json:"is_hltv,omitempty"`
	IsReplay                  *bool    `protobuf:"varint,6,opt,name=is_replay,json=isReplay" json:"is_replay,omitempty"`
	IsRedirectingToProxyRelay *bool    `protobuf:"varint,21,opt,name=is_redirecting_to_proxy_relay,json=isRedirectingToProxyRelay" json:"is_redirecting_to_proxy_relay,omitempty"`
	COs                       *int32   `protobuf:"varint,7,opt,name=c_os,json=cOs" json:"c_os,omitempty"`
	MapCrc                    *uint32  `protobuf:"fixed32,8,opt,name=map_crc,json=mapCrc" json:"map_crc,omitempty"`
	ClientCrc                 *uint32  `protobuf:"fixed32,9,opt,name=client_crc,json=clientCrc" json:"client_crc,omitempty"`
	StringTableCrc            *uint32  `protobuf:"fixed32,10,opt,name=string_table_crc,json=stringTableCrc" json:"string_table_crc,omitempty"`
	MaxClients                *int32   `protobuf:"varint,11,opt,name=max_clients,json=maxClients" json:"max_clients,omitempty"`
	MaxClasses                *int32   `protobuf:"varint,12,opt,name=max_classes,json=maxClasses" json:"max_classes,omitempty"`
	PlayerSlot                *int32   `protobuf:"varint,13,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	TickInterval              *float32 `protobuf:"fixed32,14,opt,name=tick_interval,json=tickInterval" json:"tick_interval,omitempty"`
	GameDir                   *string  `protobuf:"bytes,15,opt,name=game_dir,json=gameDir" json:"game_dir,omitempty"`
	MapName                   *string  `protobuf:"bytes,16,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
	MapGroupName              *string  `protobuf:"bytes,17,opt,name=map_group_name,json=mapGroupName" json:"map_group_name,omitempty"`
	SkyName                   *string  `protobuf:"bytes,18,opt,name=sky_name,json=skyName" json:"sky_name,omitempty"`
	HostName                  *string  `protobuf:"bytes,19,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	PublicIp                  *uint32  `protobuf:"varint,20,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
	UgcMapId                  *uint64  `protobuf:"varint,22,opt,name=ugc_map_id,json=ugcMapId" json:"ugc_map_id,omitempty"`
}

func (x *CSVCMsg_ServerInfo) Reset() {
	*x = CSVCMsg_ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_ServerInfo) ProtoMessage() {}

func (x *CSVCMsg_ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_ServerInfo.ProtoReflect.Descriptor instead.
func (*CSVCMsg_ServerInfo) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{24}
}

func (x *CSVCMsg_ServerInfo) GetProtocol() int32 {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return 0
}

func (x *CSVCMsg_ServerInfo) GetServerCount() int32 {
	if x != nil && x.ServerCount != nil {
		return *x.ServerCount
	}
	return 0
}

func (x *CSVCMsg_ServerInfo) GetIsDedicated() bool {
	if x != nil && x.IsDedicated != nil {
		return *x.IsDedicated
	}
	return false
}

func (x *CSVCMsg_ServerInfo) GetIsOfficialValveServer() bool {
	if x != nil && x.IsOfficialValveServer != nil {
		return *x.IsOfficialValveServer
	}
	return false
}

func (x *CSVCMsg_ServerInfo) GetIsHltv() bool {
	if x != nil && x.IsHltv != nil {
		return *x.IsHltv
	}
	return false
}

func (x *CSVCMsg_ServerInfo) GetIsReplay() bool {
	if x != nil && x.IsReplay != nil {
		return *x.IsReplay
	}
	return false
}

func (x *CSVCMsg_ServerInfo) GetIsRedirectingToProxyRelay() bool {
	if x != nil && x.IsRedirectingToProxyRelay != nil {
		return *x.IsRedirectingToProxyRelay
	}
	return false
}

func (x *CSVCMsg_ServerInfo) GetCOs() int32 {
	if x != nil && x.COs != nil {
		return *x.COs
	}
	return 0
}

func (x *CSVCMsg_ServerInfo) GetMapCrc() uint32 {
	if x != nil && x.MapCrc != nil {
		return *x.MapCrc
	}
	return 0
}

func (x *CSVCMsg_ServerInfo) GetClientCrc() uint32 {
	if x != nil && x.ClientCrc != nil {
		return *x.ClientCrc
	}
	return 0
}

func (x *CSVCMsg_ServerInfo) GetStringTableCrc() uint32 {
	if x != nil && x.StringTableCrc != nil {
		return *x.StringTableCrc
	}
	return 0
}

func (x *CSVCMsg_ServerInfo) GetMaxClients() int32 {
	if x != nil && x.MaxClients != nil {
		return *x.MaxClients
	}
	return 0
}

func (x *CSVCMsg_ServerInfo) GetMaxClasses() int32 {
	if x != nil && x.MaxClasses != nil {
		return *x.MaxClasses
	}
	return 0
}

func (x *CSVCMsg_ServerInfo) GetPlayerSlot() int32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CSVCMsg_ServerInfo) GetTickInterval() float32 {
	if x != nil && x.TickInterval != nil {
		return *x.TickInterval
	}
	return 0
}

func (x *CSVCMsg_ServerInfo) GetGameDir() string {
	if x != nil && x.GameDir != nil {
		return *x.GameDir
	}
	return ""
}

func (x *CSVCMsg_ServerInfo) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

func (x *CSVCMsg_ServerInfo) GetMapGroupName() string {
	if x != nil && x.MapGroupName != nil {
		return *x.MapGroupName
	}
	return ""
}

func (x *CSVCMsg_ServerInfo) GetSkyName() string {
	if x != nil && x.SkyName != nil {
		return *x.SkyName
	}
	return ""
}

func (x *CSVCMsg_ServerInfo) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *CSVCMsg_ServerInfo) GetPublicIp() uint32 {
	if x != nil && x.PublicIp != nil {
		return *x.PublicIp
	}
	return 0
}

func (x *CSVCMsg_ServerInfo) GetUgcMapId() uint64 {
	if x != nil && x.UgcMapId != nil {
		return *x.UgcMapId
	}
	return 0
}

type CSVCMsg_ClassInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateOnClient *bool                      `protobuf:"varint,1,opt,name=create_on_client,json=createOnClient" json:"create_on_client,omitempty"`
	Classes        []*CSVCMsg_ClassInfoClassT `protobuf:"bytes,2,rep,name=classes" json:"classes,omitempty"`
}

func (x *CSVCMsg_ClassInfo) Reset() {
	*x = CSVCMsg_ClassInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_ClassInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_ClassInfo) ProtoMessage() {}

func (x *CSVCMsg_ClassInfo) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_ClassInfo.ProtoReflect.Descriptor instead.
func (*CSVCMsg_ClassInfo) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{25}
}

func (x *CSVCMsg_ClassInfo) GetCreateOnClient() bool {
	if x != nil && x.CreateOnClient != nil {
		return *x.CreateOnClient
	}
	return false
}

func (x *CSVCMsg_ClassInfo) GetClasses() []*CSVCMsg_ClassInfoClassT {
	if x != nil {
		return x.Classes
	}
	return nil
}

type CSVCMsg_SendTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnd        *bool                         `protobuf:"varint,1,opt,name=is_end,json=isEnd" json:"is_end,omitempty"`
	NetTableName *string                       `protobuf:"bytes,2,opt,name=net_table_name,json=netTableName" json:"net_table_name,omitempty"`
	NeedsDecoder *bool                         `protobuf:"varint,3,opt,name=needs_decoder,json=needsDecoder" json:"needs_decoder,omitempty"`
	Props        []*CSVCMsg_SendTableSendpropT `protobuf:"bytes,4,rep,name=props" json:"props,omitempty"`
}

func (x *CSVCMsg_SendTable) Reset() {
	*x = CSVCMsg_SendTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_SendTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_SendTable) ProtoMessage() {}

func (x *CSVCMsg_SendTable) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_SendTable.ProtoReflect.Descriptor instead.
func (*CSVCMsg_SendTable) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{26}
}

func (x *CSVCMsg_SendTable) GetIsEnd() bool {
	if x != nil && x.IsEnd != nil {
		return *x.IsEnd
	}
	return false
}

func (x *CSVCMsg_SendTable) GetNetTableName() string {
	if x != nil && x.NetTableName != nil {
		return *x.NetTableName
	}
	return ""
}

func (x *CSVCMsg_SendTable) GetNeedsDecoder() bool {
	if x != nil && x.NeedsDecoder != nil {
		return *x.NeedsDecoder
	}
	return false
}

func (x *CSVCMsg_SendTable) GetProps() []*CSVCMsg_SendTableSendpropT {
	if x != nil {
		return x.Props
	}
	return nil
}

type CSVCMsg_Print struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (x *CSVCMsg_Print) Reset() {
	*x = CSVCMsg_Print{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_Print) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_Print) ProtoMessage() {}

func (x *CSVCMsg_Print) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_Print.ProtoReflect.Descriptor instead.
func (*CSVCMsg_Print) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{27}
}

func (x *CSVCMsg_Print) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CSVCMsg_SetPause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paused *bool `protobuf:"varint,1,opt,name=paused" json:"paused,omitempty"`
}

func (x *CSVCMsg_SetPause) Reset() {
	*x = CSVCMsg_SetPause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_SetPause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_SetPause) ProtoMessage() {}

func (x *CSVCMsg_SetPause) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_SetPause.ProtoReflect.Descriptor instead.
func (*CSVCMsg_SetPause) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{28}
}

func (x *CSVCMsg_SetPause) GetPaused() bool {
	if x != nil && x.Paused != nil {
		return *x.Paused
	}
	return false
}

type CSVCMsg_SetView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityIndex *int32 `protobuf:"varint,1,opt,name=entity_index,json=entityIndex" json:"entity_index,omitempty"`
}

func (x *CSVCMsg_SetView) Reset() {
	*x = CSVCMsg_SetView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_SetView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_SetView) ProtoMessage() {}

func (x *CSVCMsg_SetView) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_SetView.ProtoReflect.Descriptor instead.
func (*CSVCMsg_SetView) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{29}
}

func (x *CSVCMsg_SetView) GetEntityIndex() int32 {
	if x != nil && x.EntityIndex != nil {
		return *x.EntityIndex
	}
	return 0
}

type CSVCMsg_CreateStringTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MaxEntries        *int32  `protobuf:"varint,2,opt,name=max_entries,json=maxEntries" json:"max_entries,omitempty"`
	NumEntries        *int32  `protobuf:"varint,3,opt,name=num_entries,json=numEntries" json:"num_entries,omitempty"`
	UserDataFixedSize *bool   `protobuf:"varint,4,opt,name=user_data_fixed_size,json=userDataFixedSize" json:"user_data_fixed_size,omitempty"`
	UserDataSize      *int32  `protobuf:"varint,5,opt,name=user_data_size,json=userDataSize" json:"user_data_size,omitempty"`
	UserDataSizeBits  *int32  `protobuf:"varint,6,opt,name=user_data_size_bits,json=userDataSizeBits" json:"user_data_size_bits,omitempty"`
	Flags             *int32  `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	StringData        []byte  `protobuf:"bytes,8,opt,name=string_data,json=stringData" json:"string_data,omitempty"`
}

func (x *CSVCMsg_CreateStringTable) Reset() {
	*x = CSVCMsg_CreateStringTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_CreateStringTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_CreateStringTable) ProtoMessage() {}

func (x *CSVCMsg_CreateStringTable) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_CreateStringTable.ProtoReflect.Descriptor instead.
func (*CSVCMsg_CreateStringTable) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{30}
}

func (x *CSVCMsg_CreateStringTable) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSVCMsg_CreateStringTable) GetMaxEntries() int32 {
	if x != nil && x.MaxEntries != nil {
		return *x.MaxEntries
	}
	return 0
}

func (x *CSVCMsg_CreateStringTable) GetNumEntries() int32 {
	if x != nil && x.NumEntries != nil {
		return *x.NumEntries
	}
	return 0
}

func (x *CSVCMsg_CreateStringTable) GetUserDataFixedSize() bool {
	if x != nil && x.UserDataFixedSize != nil {
		return *x.UserDataFixedSize
	}
	return false
}

func (x *CSVCMsg_CreateStringTable) GetUserDataSize() int32 {
	if x != nil && x.UserDataSize != nil {
		return *x.UserDataSize
	}
	return 0
}

func (x *CSVCMsg_CreateStringTable) GetUserDataSizeBits() int32 {
	if x != nil && x.UserDataSizeBits != nil {
		return *x.UserDataSizeBits
	}
	return 0
}

func (x *CSVCMsg_CreateStringTable) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CSVCMsg_CreateStringTable) GetStringData() []byte {
	if x != nil {
		return x.StringData
	}
	return nil
}

type CSVCMsg_UpdateStringTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId           *int32 `protobuf:"varint,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	NumChangedEntries *int32 `protobuf:"varint,2,opt,name=num_changed_entries,json=numChangedEntries" json:"num_changed_entries,omitempty"`
	StringData        []byte `protobuf:"bytes,3,opt,name=string_data,json=stringData" json:"string_data,omitempty"`
}

func (x *CSVCMsg_UpdateStringTable) Reset() {
	*x = CSVCMsg_UpdateStringTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_UpdateStringTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_UpdateStringTable) ProtoMessage() {}

func (x *CSVCMsg_UpdateStringTable) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_UpdateStringTable.ProtoReflect.Descriptor instead.
func (*CSVCMsg_UpdateStringTable) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{31}
}

func (x *CSVCMsg_UpdateStringTable) GetTableId() int32 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *CSVCMsg_UpdateStringTable) GetNumChangedEntries() int32 {
	if x != nil && x.NumChangedEntries != nil {
		return *x.NumChangedEntries
	}
	return 0
}

func (x *CSVCMsg_UpdateStringTable) GetStringData() []byte {
	if x != nil {
		return x.StringData
	}
	return nil
}

type CSVCMsg_VoiceInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality *int32  `protobuf:"varint,1,opt,name=quality" json:"quality,omitempty"`
	Codec   *string `protobuf:"bytes,2,opt,name=codec" json:"codec,omitempty"`
	Version *int32  `protobuf:"varint,3,opt,name=version,def=0" json:"version,omitempty"`
}

// Default values for CSVCMsg_VoiceInit fields.
const (
	Default_CSVCMsg_VoiceInit_Version = int32(0)
)

func (x *CSVCMsg_VoiceInit) Reset() {
	*x = CSVCMsg_VoiceInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_VoiceInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_VoiceInit) ProtoMessage() {}

func (x *CSVCMsg_VoiceInit) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_VoiceInit.ProtoReflect.Descriptor instead.
func (*CSVCMsg_VoiceInit) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{32}
}

func (x *CSVCMsg_VoiceInit) GetQuality() int32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *CSVCMsg_VoiceInit) GetCodec() string {
	if x != nil && x.Codec != nil {
		return *x.Codec
	}
	return ""
}

func (x *CSVCMsg_VoiceInit) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_CSVCMsg_VoiceInit_Version
}

type CSVCMsg_VoiceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client                   *int32            `protobuf:"varint,1,opt,name=client" json:"client,omitempty"`
	Proximity                *bool             `protobuf:"varint,2,opt,name=proximity" json:"proximity,omitempty"`
	Xuid                     *uint64           `protobuf:"fixed64,3,opt,name=xuid" json:"xuid,omitempty"`
	AudibleMask              *int32            `protobuf:"varint,4,opt,name=audible_mask,json=audibleMask" json:"audible_mask,omitempty"`
	VoiceData                []byte            `protobuf:"bytes,5,opt,name=voice_data,json=voiceData" json:"voice_data,omitempty"`
	Caster                   *bool             `protobuf:"varint,6,opt,name=caster" json:"caster,omitempty"`
	Format                   *VoiceDataFormatT `protobuf:"varint,7,opt,name=format,enum=VoiceDataFormatT,def=1" json:"format,omitempty"`
	SequenceBytes            *int32            `protobuf:"varint,8,opt,name=sequence_bytes,json=sequenceBytes" json:"sequence_bytes,omitempty"`
	SectionNumber            *uint32           `protobuf:"varint,9,opt,name=section_number,json=sectionNumber" json:"section_number,omitempty"`
	UncompressedSampleOffset *uint32           `protobuf:"varint,10,opt,name=uncompressed_sample_offset,json=uncompressedSampleOffset" json:"uncompressed_sample_offset,omitempty"`
}

// Default values for CSVCMsg_VoiceData fields.
const (
	Default_CSVCMsg_VoiceData_Format = VoiceDataFormatT_VOICEDATA_FORMAT_ENGINE
)

func (x *CSVCMsg_VoiceData) Reset() {
	*x = CSVCMsg_VoiceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_VoiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_VoiceData) ProtoMessage() {}

func (x *CSVCMsg_VoiceData) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_VoiceData.ProtoReflect.Descriptor instead.
func (*CSVCMsg_VoiceData) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{33}
}

func (x *CSVCMsg_VoiceData) GetClient() int32 {
	if x != nil && x.Client != nil {
		return *x.Client
	}
	return 0
}

func (x *CSVCMsg_VoiceData) GetProximity() bool {
	if x != nil && x.Proximity != nil {
		return *x.Proximity
	}
	return false
}

func (x *CSVCMsg_VoiceData) GetXuid() uint64 {
	if x != nil && x.Xuid != nil {
		return *x.Xuid
	}
	return 0
}

func (x *CSVCMsg_VoiceData) GetAudibleMask() int32 {
	if x != nil && x.AudibleMask != nil {
		return *x.AudibleMask
	}
	return 0
}

func (x *CSVCMsg_VoiceData) GetVoiceData() []byte {
	if x != nil {
		return x.VoiceData
	}
	return nil
}

func (x *CSVCMsg_VoiceData) GetCaster() bool {
	if x != nil && x.Caster != nil {
		return *x.Caster
	}
	return false
}

func (x *CSVCMsg_VoiceData) GetFormat() VoiceDataFormatT {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Default_CSVCMsg_VoiceData_Format
}

func (x *CSVCMsg_VoiceData) GetSequenceBytes() int32 {
	if x != nil && x.SequenceBytes != nil {
		return *x.SequenceBytes
	}
	return 0
}

func (x *CSVCMsg_VoiceData) GetSectionNumber() uint32 {
	if x != nil && x.SectionNumber != nil {
		return *x.SectionNumber
	}
	return 0
}

func (x *CSVCMsg_VoiceData) GetUncompressedSampleOffset() uint32 {
	if x != nil && x.UncompressedSampleOffset != nil {
		return *x.UncompressedSampleOffset
	}
	return 0
}

type CSVCMsg_FixAngle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relative *bool       `protobuf:"varint,1,opt,name=relative" json:"relative,omitempty"`
	Angle    *CMsgQAngle `protobuf:"bytes,2,opt,name=angle" json:"angle,omitempty"`
}

func (x *CSVCMsg_FixAngle) Reset() {
	*x = CSVCMsg_FixAngle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_FixAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_FixAngle) ProtoMessage() {}

func (x *CSVCMsg_FixAngle) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_FixAngle.ProtoReflect.Descriptor instead.
func (*CSVCMsg_FixAngle) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{34}
}

func (x *CSVCMsg_FixAngle) GetRelative() bool {
	if x != nil && x.Relative != nil {
		return *x.Relative
	}
	return false
}

func (x *CSVCMsg_FixAngle) GetAngle() *CMsgQAngle {
	if x != nil {
		return x.Angle
	}
	return nil
}

type CSVCMsg_CrosshairAngle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Angle *CMsgQAngle `protobuf:"bytes,1,opt,name=angle" json:"angle,omitempty"`
}

func (x *CSVCMsg_CrosshairAngle) Reset() {
	*x = CSVCMsg_CrosshairAngle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_CrosshairAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_CrosshairAngle) ProtoMessage() {}

func (x *CSVCMsg_CrosshairAngle) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_CrosshairAngle.ProtoReflect.Descriptor instead.
func (*CSVCMsg_CrosshairAngle) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{35}
}

func (x *CSVCMsg_CrosshairAngle) GetAngle() *CMsgQAngle {
	if x != nil {
		return x.Angle
	}
	return nil
}

type CSVCMsg_Prefetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoundIndex *int32 `protobuf:"varint,1,opt,name=sound_index,json=soundIndex" json:"sound_index,omitempty"`
}

func (x *CSVCMsg_Prefetch) Reset() {
	*x = CSVCMsg_Prefetch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_Prefetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_Prefetch) ProtoMessage() {}

func (x *CSVCMsg_Prefetch) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_Prefetch.ProtoReflect.Descriptor instead.
func (*CSVCMsg_Prefetch) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{36}
}

func (x *CSVCMsg_Prefetch) GetSoundIndex() int32 {
	if x != nil && x.SoundIndex != nil {
		return *x.SoundIndex
	}
	return 0
}

type CSVCMsg_BSPDecal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos               *CMsgVector `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	DecalTextureIndex *int32      `protobuf:"varint,2,opt,name=decal_texture_index,json=decalTextureIndex" json:"decal_texture_index,omitempty"`
	EntityIndex       *int32      `protobuf:"varint,3,opt,name=entity_index,json=entityIndex" json:"entity_index,omitempty"`
	ModelIndex        *int32      `protobuf:"varint,4,opt,name=model_index,json=modelIndex" json:"model_index,omitempty"`
	LowPriority       *bool       `protobuf:"varint,5,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
}

func (x *CSVCMsg_BSPDecal) Reset() {
	*x = CSVCMsg_BSPDecal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_BSPDecal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_BSPDecal) ProtoMessage() {}

func (x *CSVCMsg_BSPDecal) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_BSPDecal.ProtoReflect.Descriptor instead.
func (*CSVCMsg_BSPDecal) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{37}
}

func (x *CSVCMsg_BSPDecal) GetPos() *CMsgVector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *CSVCMsg_BSPDecal) GetDecalTextureIndex() int32 {
	if x != nil && x.DecalTextureIndex != nil {
		return *x.DecalTextureIndex
	}
	return 0
}

func (x *CSVCMsg_BSPDecal) GetEntityIndex() int32 {
	if x != nil && x.EntityIndex != nil {
		return *x.EntityIndex
	}
	return 0
}

func (x *CSVCMsg_BSPDecal) GetModelIndex() int32 {
	if x != nil && x.ModelIndex != nil {
		return *x.ModelIndex
	}
	return 0
}

func (x *CSVCMsg_BSPDecal) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

type CSVCMsg_SplitScreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *ESplitScreenMessageType `protobuf:"varint,1,opt,name=type,enum=ESplitScreenMessageType,def=0" json:"type,omitempty"`
	Slot        *int32                   `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
	PlayerIndex *int32                   `protobuf:"varint,3,opt,name=player_index,json=playerIndex" json:"player_index,omitempty"`
}

// Default values for CSVCMsg_SplitScreen fields.
const (
	Default_CSVCMsg_SplitScreen_Type = ESplitScreenMessageType_MSG_SPLITSCREEN_ADDUSER
)

func (x *CSVCMsg_SplitScreen) Reset() {
	*x = CSVCMsg_SplitScreen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_SplitScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_SplitScreen) ProtoMessage() {}

func (x *CSVCMsg_SplitScreen) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_SplitScreen.ProtoReflect.Descriptor instead.
func (*CSVCMsg_SplitScreen) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{38}
}

func (x *CSVCMsg_SplitScreen) GetType() ESplitScreenMessageType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CSVCMsg_SplitScreen_Type
}

func (x *CSVCMsg_SplitScreen) GetSlot() int32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CSVCMsg_SplitScreen) GetPlayerIndex() int32 {
	if x != nil && x.PlayerIndex != nil {
		return *x.PlayerIndex
	}
	return 0
}

type CSVCMsg_GetCvarValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie   *int32  `protobuf:"varint,1,opt,name=cookie" json:"cookie,omitempty"`
	CvarName *string `protobuf:"bytes,2,opt,name=cvar_name,json=cvarName" json:"cvar_name,omitempty"`
}

func (x *CSVCMsg_GetCvarValue) Reset() {
	*x = CSVCMsg_GetCvarValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_GetCvarValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_GetCvarValue) ProtoMessage() {}

func (x *CSVCMsg_GetCvarValue) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_GetCvarValue.ProtoReflect.Descriptor instead.
func (*CSVCMsg_GetCvarValue) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{39}
}

func (x *CSVCMsg_GetCvarValue) GetCookie() int32 {
	if x != nil && x.Cookie != nil {
		return *x.Cookie
	}
	return 0
}

func (x *CSVCMsg_GetCvarValue) GetCvarName() string {
	if x != nil && x.CvarName != nil {
		return *x.CvarName
	}
	return ""
}

type CSVCMsg_Menu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DialogType    *int32 `protobuf:"varint,1,opt,name=dialog_type,json=dialogType" json:"dialog_type,omitempty"`
	MenuKeyValues []byte `protobuf:"bytes,2,opt,name=menu_key_values,json=menuKeyValues" json:"menu_key_values,omitempty"`
}

func (x *CSVCMsg_Menu) Reset() {
	*x = CSVCMsg_Menu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_Menu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_Menu) ProtoMessage() {}

func (x *CSVCMsg_Menu) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_Menu.ProtoReflect.Descriptor instead.
func (*CSVCMsg_Menu) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{40}
}

func (x *CSVCMsg_Menu) GetDialogType() int32 {
	if x != nil && x.DialogType != nil {
		return *x.DialogType
	}
	return 0
}

func (x *CSVCMsg_Menu) GetMenuKeyValues() []byte {
	if x != nil {
		return x.MenuKeyValues
	}
	return nil
}

type CSVCMsg_UserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType     *int32 `protobuf:"varint,1,opt,name=msg_type,json=msgType" json:"msg_type,omitempty"`
	MsgData     []byte `protobuf:"bytes,2,opt,name=msg_data,json=msgData" json:"msg_data,omitempty"`
	Passthrough *int32 `protobuf:"varint,3,opt,name=passthrough" json:"passthrough,omitempty"`
}

func (x *CSVCMsg_UserMessage) Reset() {
	*x = CSVCMsg_UserMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_UserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_UserMessage) ProtoMessage() {}

func (x *CSVCMsg_UserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_UserMessage.ProtoReflect.Descriptor instead.
func (*CSVCMsg_UserMessage) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{41}
}

func (x *CSVCMsg_UserMessage) GetMsgType() int32 {
	if x != nil && x.MsgType != nil {
		return *x.MsgType
	}
	return 0
}

func (x *CSVCMsg_UserMessage) GetMsgData() []byte {
	if x != nil {
		return x.MsgData
	}
	return nil
}

func (x *CSVCMsg_UserMessage) GetPassthrough() int32 {
	if x != nil && x.Passthrough != nil {
		return *x.Passthrough
	}
	return 0
}

type CSVCMsg_PaintmapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paintmap []byte `protobuf:"bytes,1,opt,name=paintmap" json:"paintmap,omitempty"`
}

func (x *CSVCMsg_PaintmapData) Reset() {
	*x = CSVCMsg_PaintmapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_PaintmapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_PaintmapData) ProtoMessage() {}

func (x *CSVCMsg_PaintmapData) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_PaintmapData.ProtoReflect.Descriptor instead.
func (*CSVCMsg_PaintmapData) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{42}
}

func (x *CSVCMsg_PaintmapData) GetPaintmap() []byte {
	if x != nil {
		return x.Paintmap
	}
	return nil
}

type CSVCMsg_GameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName   *string                  `protobuf:"bytes,1,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	Eventid     *int32                   `protobuf:"varint,2,opt,name=eventid" json:"eventid,omitempty"`
	Keys        []*CSVCMsg_GameEventKeyT `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
	Passthrough *int32                   `protobuf:"varint,4,opt,name=passthrough" json:"passthrough,omitempty"`
}

func (x *CSVCMsg_GameEvent) Reset() {
	*x = CSVCMsg_GameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_GameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_GameEvent) ProtoMessage() {}

func (x *CSVCMsg_GameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_GameEvent.ProtoReflect.Descriptor instead.
func (*CSVCMsg_GameEvent) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{43}
}

func (x *CSVCMsg_GameEvent) GetEventName() string {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return ""
}

func (x *CSVCMsg_GameEvent) GetEventid() int32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

func (x *CSVCMsg_GameEvent) GetKeys() []*CSVCMsg_GameEventKeyT {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CSVCMsg_GameEvent) GetPassthrough() int32 {
	if x != nil && x.Passthrough != nil {
		return *x.Passthrough
	}
	return 0
}

type CSVCMsg_GameEventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptors []*CSVCMsg_GameEventListDescriptorT `protobuf:"bytes,1,rep,name=descriptors" json:"descriptors,omitempty"`
}

func (x *CSVCMsg_GameEventList) Reset() {
	*x = CSVCMsg_GameEventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_GameEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_GameEventList) ProtoMessage() {}

func (x *CSVCMsg_GameEventList) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_GameEventList.ProtoReflect.Descriptor instead.
func (*CSVCMsg_GameEventList) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{44}
}

func (x *CSVCMsg_GameEventList) GetDescriptors() []*CSVCMsg_GameEventListDescriptorT {
	if x != nil {
		return x.Descriptors
	}
	return nil
}

type CSVCMsg_TempEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reliable   *bool  `protobuf:"varint,1,opt,name=reliable" json:"reliable,omitempty"`
	NumEntries *int32 `protobuf:"varint,2,opt,name=num_entries,json=numEntries" json:"num_entries,omitempty"`
	EntityData []byte `protobuf:"bytes,3,opt,name=entity_data,json=entityData" json:"entity_data,omitempty"`
}

func (x *CSVCMsg_TempEntities) Reset() {
	*x = CSVCMsg_TempEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_TempEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_TempEntities) ProtoMessage() {}

func (x *CSVCMsg_TempEntities) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_TempEntities.ProtoReflect.Descriptor instead.
func (*CSVCMsg_TempEntities) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{45}
}

func (x *CSVCMsg_TempEntities) GetReliable() bool {
	if x != nil && x.Reliable != nil {
		return *x.Reliable
	}
	return false
}

func (x *CSVCMsg_TempEntities) GetNumEntries() int32 {
	if x != nil && x.NumEntries != nil {
		return *x.NumEntries
	}
	return 0
}

func (x *CSVCMsg_TempEntities) GetEntityData() []byte {
	if x != nil {
		return x.EntityData
	}
	return nil
}

type CSVCMsg_PacketEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxEntries     *int32 `protobuf:"varint,1,opt,name=max_entries,json=maxEntries" json:"max_entries,omitempty"`
	UpdatedEntries *int32 `protobuf:"varint,2,opt,name=updated_entries,json=updatedEntries" json:"updated_entries,omitempty"`
	IsDelta        *bool  `protobuf:"varint,3,opt,name=is_delta,json=isDelta" json:"is_delta,omitempty"`
	UpdateBaseline *bool  `protobuf:"varint,4,opt,name=update_baseline,json=updateBaseline" json:"update_baseline,omitempty"`
	Baseline       *int32 `protobuf:"varint,5,opt,name=baseline" json:"baseline,omitempty"`
	DeltaFrom      *int32 `protobuf:"varint,6,opt,name=delta_from,json=deltaFrom" json:"delta_from,omitempty"`
	EntityData     []byte `protobuf:"bytes,7,opt,name=entity_data,json=entityData" json:"entity_data,omitempty"`
}

func (x *CSVCMsg_PacketEntities) Reset() {
	*x = CSVCMsg_PacketEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_PacketEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_PacketEntities) ProtoMessage() {}

func (x *CSVCMsg_PacketEntities) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_PacketEntities.ProtoReflect.Descriptor instead.
func (*CSVCMsg_PacketEntities) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{46}
}

func (x *CSVCMsg_PacketEntities) GetMaxEntries() int32 {
	if x != nil && x.MaxEntries != nil {
		return *x.MaxEntries
	}
	return 0
}

func (x *CSVCMsg_PacketEntities) GetUpdatedEntries() int32 {
	if x != nil && x.UpdatedEntries != nil {
		return *x.UpdatedEntries
	}
	return 0
}

func (x *CSVCMsg_PacketEntities) GetIsDelta() bool {
	if x != nil && x.IsDelta != nil {
		return *x.IsDelta
	}
	return false
}

func (x *CSVCMsg_PacketEntities) GetUpdateBaseline() bool {
	if x != nil && x.UpdateBaseline != nil {
		return *x.UpdateBaseline
	}
	return false
}

func (x *CSVCMsg_PacketEntities) GetBaseline() int32 {
	if x != nil && x.Baseline != nil {
		return *x.Baseline
	}
	return 0
}

func (x *CSVCMsg_PacketEntities) GetDeltaFrom() int32 {
	if x != nil && x.DeltaFrom != nil {
		return *x.DeltaFrom
	}
	return 0
}

func (x *CSVCMsg_PacketEntities) GetEntityData() []byte {
	if x != nil {
		return x.EntityData
	}
	return nil
}

type CSVCMsg_Sounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReliableSound *bool                       `protobuf:"varint,1,opt,name=reliable_sound,json=reliableSound" json:"reliable_sound,omitempty"`
	Sounds        []*CSVCMsg_SoundsSounddataT `protobuf:"bytes,2,rep,name=sounds" json:"sounds,omitempty"`
}

func (x *CSVCMsg_Sounds) Reset() {
	*x = CSVCMsg_Sounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_Sounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_Sounds) ProtoMessage() {}

func (x *CSVCMsg_Sounds) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_Sounds.ProtoReflect.Descriptor instead.
func (*CSVCMsg_Sounds) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{47}
}

func (x *CSVCMsg_Sounds) GetReliableSound() bool {
	if x != nil && x.ReliableSound != nil {
		return *x.ReliableSound
	}
	return false
}

func (x *CSVCMsg_Sounds) GetSounds() []*CSVCMsg_SoundsSounddataT {
	if x != nil {
		return x.Sounds
	}
	return nil
}

type CSVCMsg_EntityMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntIndex *int32 `protobuf:"varint,1,opt,name=ent_index,json=entIndex" json:"ent_index,omitempty"`
	ClassId  *int32 `protobuf:"varint,2,opt,name=class_id,json=classId" json:"class_id,omitempty"`
	EntData  []byte `protobuf:"bytes,3,opt,name=ent_data,json=entData" json:"ent_data,omitempty"`
}

func (x *CSVCMsg_EntityMsg) Reset() {
	*x = CSVCMsg_EntityMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_EntityMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_EntityMsg) ProtoMessage() {}

func (x *CSVCMsg_EntityMsg) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_EntityMsg.ProtoReflect.Descriptor instead.
func (*CSVCMsg_EntityMsg) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{48}
}

func (x *CSVCMsg_EntityMsg) GetEntIndex() int32 {
	if x != nil && x.EntIndex != nil {
		return *x.EntIndex
	}
	return 0
}

func (x *CSVCMsg_EntityMsg) GetClassId() int32 {
	if x != nil && x.ClassId != nil {
		return *x.ClassId
	}
	return 0
}

func (x *CSVCMsg_EntityMsg) GetEntData() []byte {
	if x != nil {
		return x.EntData
	}
	return nil
}

type CSVCMsg_CmdKeyValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyvalues []byte `protobuf:"bytes,1,opt,name=keyvalues" json:"keyvalues,omitempty"`
}

func (x *CSVCMsg_CmdKeyValues) Reset() {
	*x = CSVCMsg_CmdKeyValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_CmdKeyValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_CmdKeyValues) ProtoMessage() {}

func (x *CSVCMsg_CmdKeyValues) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_CmdKeyValues.ProtoReflect.Descriptor instead.
func (*CSVCMsg_CmdKeyValues) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{49}
}

func (x *CSVCMsg_CmdKeyValues) GetKeyvalues() []byte {
	if x != nil {
		return x.Keyvalues
	}
	return nil
}

type CSVCMsg_EncryptedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encrypted []byte `protobuf:"bytes,1,opt,name=encrypted" json:"encrypted,omitempty"`
	KeyType   *int32 `protobuf:"varint,2,opt,name=key_type,json=keyType" json:"key_type,omitempty"`
}

func (x *CSVCMsg_EncryptedData) Reset() {
	*x = CSVCMsg_EncryptedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_EncryptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_EncryptedData) ProtoMessage() {}

func (x *CSVCMsg_EncryptedData) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_EncryptedData.ProtoReflect.Descriptor instead.
func (*CSVCMsg_EncryptedData) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{50}
}

func (x *CSVCMsg_EncryptedData) GetEncrypted() []byte {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

func (x *CSVCMsg_EncryptedData) GetKeyType() int32 {
	if x != nil && x.KeyType != nil {
		return *x.KeyType
	}
	return 0
}

type CSVCMsg_HltvReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delay               *int32   `protobuf:"varint,1,opt,name=delay" json:"delay,omitempty"`
	PrimaryTarget       *int32   `protobuf:"varint,2,opt,name=primary_target,json=primaryTarget" json:"primary_target,omitempty"`
	ReplayStopAt        *int32   `protobuf:"varint,3,opt,name=replay_stop_at,json=replayStopAt" json:"replay_stop_at,omitempty"`
	ReplayStartAt       *int32   `protobuf:"varint,4,opt,name=replay_start_at,json=replayStartAt" json:"replay_start_at,omitempty"`
	ReplaySlowdownBegin *int32   `protobuf:"varint,5,opt,name=replay_slowdown_begin,json=replaySlowdownBegin" json:"replay_slowdown_begin,omitempty"`
	ReplaySlowdownEnd   *int32   `protobuf:"varint,6,opt,name=replay_slowdown_end,json=replaySlowdownEnd" json:"replay_slowdown_end,omitempty"`
	ReplaySlowdownRate  *float32 `protobuf:"fixed32,7,opt,name=replay_slowdown_rate,json=replaySlowdownRate" json:"replay_slowdown_rate,omitempty"`
}

func (x *CSVCMsg_HltvReplay) Reset() {
	*x = CSVCMsg_HltvReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_HltvReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_HltvReplay) ProtoMessage() {}

func (x *CSVCMsg_HltvReplay) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_HltvReplay.ProtoReflect.Descriptor instead.
func (*CSVCMsg_HltvReplay) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{51}
}

func (x *CSVCMsg_HltvReplay) GetDelay() int32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

func (x *CSVCMsg_HltvReplay) GetPrimaryTarget() int32 {
	if x != nil && x.PrimaryTarget != nil {
		return *x.PrimaryTarget
	}
	return 0
}

func (x *CSVCMsg_HltvReplay) GetReplayStopAt() int32 {
	if x != nil && x.ReplayStopAt != nil {
		return *x.ReplayStopAt
	}
	return 0
}

func (x *CSVCMsg_HltvReplay) GetReplayStartAt() int32 {
	if x != nil && x.ReplayStartAt != nil {
		return *x.ReplayStartAt
	}
	return 0
}

func (x *CSVCMsg_HltvReplay) GetReplaySlowdownBegin() int32 {
	if x != nil && x.ReplaySlowdownBegin != nil {
		return *x.ReplaySlowdownBegin
	}
	return 0
}

func (x *CSVCMsg_HltvReplay) GetReplaySlowdownEnd() int32 {
	if x != nil && x.ReplaySlowdownEnd != nil {
		return *x.ReplaySlowdownEnd
	}
	return 0
}

func (x *CSVCMsg_HltvReplay) GetReplaySlowdownRate() float32 {
	if x != nil && x.ReplaySlowdownRate != nil {
		return *x.ReplaySlowdownRate
	}
	return 0
}

type CCLCMsg_HltvReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request               *int32   `protobuf:"varint,1,opt,name=request" json:"request,omitempty"`
	SlowdownLength        *float32 `protobuf:"fixed32,2,opt,name=slowdown_length,json=slowdownLength" json:"slowdown_length,omitempty"`
	SlowdownRate          *float32 `protobuf:"fixed32,3,opt,name=slowdown_rate,json=slowdownRate" json:"slowdown_rate,omitempty"`
	PrimaryTargetEntIndex *int32   `protobuf:"varint,4,opt,name=primary_target_ent_index,json=primaryTargetEntIndex" json:"primary_target_ent_index,omitempty"`
	EventTime             *float32 `protobuf:"fixed32,5,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
}

func (x *CCLCMsg_HltvReplay) Reset() {
	*x = CCLCMsg_HltvReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCLCMsg_HltvReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCLCMsg_HltvReplay) ProtoMessage() {}

func (x *CCLCMsg_HltvReplay) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCLCMsg_HltvReplay.ProtoReflect.Descriptor instead.
func (*CCLCMsg_HltvReplay) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{52}
}

func (x *CCLCMsg_HltvReplay) GetRequest() int32 {
	if x != nil && x.Request != nil {
		return *x.Request
	}
	return 0
}

func (x *CCLCMsg_HltvReplay) GetSlowdownLength() float32 {
	if x != nil && x.SlowdownLength != nil {
		return *x.SlowdownLength
	}
	return 0
}

func (x *CCLCMsg_HltvReplay) GetSlowdownRate() float32 {
	if x != nil && x.SlowdownRate != nil {
		return *x.SlowdownRate
	}
	return 0
}

func (x *CCLCMsg_HltvReplay) GetPrimaryTargetEntIndex() int32 {
	if x != nil && x.PrimaryTargetEntIndex != nil {
		return *x.PrimaryTargetEntIndex
	}
	return 0
}

func (x *CCLCMsg_HltvReplay) GetEventTime() float32 {
	if x != nil && x.EventTime != nil {
		return *x.EventTime
	}
	return 0
}

type CSVCMsg_Broadcast_Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd *string `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
}

func (x *CSVCMsg_Broadcast_Command) Reset() {
	*x = CSVCMsg_Broadcast_Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_Broadcast_Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_Broadcast_Command) ProtoMessage() {}

func (x *CSVCMsg_Broadcast_Command) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_Broadcast_Command.ProtoReflect.Descriptor instead.
func (*CSVCMsg_Broadcast_Command) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{53}
}

func (x *CSVCMsg_Broadcast_Command) GetCmd() string {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return ""
}

type CMsg_CVars_CVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value          *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	DictionaryName *uint32 `protobuf:"varint,3,opt,name=dictionary_name,json=dictionaryName" json:"dictionary_name,omitempty"`
}

func (x *CMsg_CVars_CVar) Reset() {
	*x = CMsg_CVars_CVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsg_CVars_CVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsg_CVars_CVar) ProtoMessage() {}

func (x *CMsg_CVars_CVar) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsg_CVars_CVar.ProtoReflect.Descriptor instead.
func (*CMsg_CVars_CVar) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsg_CVars_CVar) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsg_CVars_CVar) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *CMsg_CVars_CVar) GetDictionaryName() uint32 {
	if x != nil && x.DictionaryName != nil {
		return *x.DictionaryName
	}
	return 0
}

type CSVCMsg_ClassInfoClassT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId       *int32  `protobuf:"varint,1,opt,name=class_id,json=classId" json:"class_id,omitempty"`
	DataTableName *string `protobuf:"bytes,2,opt,name=data_table_name,json=dataTableName" json:"data_table_name,omitempty"`
	ClassName     *string `protobuf:"bytes,3,opt,name=class_name,json=className" json:"class_name,omitempty"`
}

func (x *CSVCMsg_ClassInfoClassT) Reset() {
	*x = CSVCMsg_ClassInfoClassT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_ClassInfoClassT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_ClassInfoClassT) ProtoMessage() {}

func (x *CSVCMsg_ClassInfoClassT) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_ClassInfoClassT.ProtoReflect.Descriptor instead.
func (*CSVCMsg_ClassInfoClassT) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{25, 0}
}

func (x *CSVCMsg_ClassInfoClassT) GetClassId() int32 {
	if x != nil && x.ClassId != nil {
		return *x.ClassId
	}
	return 0
}

func (x *CSVCMsg_ClassInfoClassT) GetDataTableName() string {
	if x != nil && x.DataTableName != nil {
		return *x.DataTableName
	}
	return ""
}

func (x *CSVCMsg_ClassInfoClassT) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

type CSVCMsg_SendTableSendpropT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *int32   `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	VarName     *string  `protobuf:"bytes,2,opt,name=var_name,json=varName" json:"var_name,omitempty"`
	Flags       *int32   `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Priority    *int32   `protobuf:"varint,4,opt,name=priority" json:"priority,omitempty"`
	DtName      *string  `protobuf:"bytes,5,opt,name=dt_name,json=dtName" json:"dt_name,omitempty"`
	NumElements *int32   `protobuf:"varint,6,opt,name=num_elements,json=numElements" json:"num_elements,omitempty"`
	LowValue    *float32 `protobuf:"fixed32,7,opt,name=low_value,json=lowValue" json:"low_value,omitempty"`
	HighValue   *float32 `protobuf:"fixed32,8,opt,name=high_value,json=highValue" json:"high_value,omitempty"`
	NumBits     *int32   `protobuf:"varint,9,opt,name=num_bits,json=numBits" json:"num_bits,omitempty"`
}

func (x *CSVCMsg_SendTableSendpropT) Reset() {
	*x = CSVCMsg_SendTableSendpropT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_SendTableSendpropT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_SendTableSendpropT) ProtoMessage() {}

func (x *CSVCMsg_SendTableSendpropT) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_SendTableSendpropT.ProtoReflect.Descriptor instead.
func (*CSVCMsg_SendTableSendpropT) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{26, 0}
}

func (x *CSVCMsg_SendTableSendpropT) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CSVCMsg_SendTableSendpropT) GetVarName() string {
	if x != nil && x.VarName != nil {
		return *x.VarName
	}
	return ""
}

func (x *CSVCMsg_SendTableSendpropT) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CSVCMsg_SendTableSendpropT) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *CSVCMsg_SendTableSendpropT) GetDtName() string {
	if x != nil && x.DtName != nil {
		return *x.DtName
	}
	return ""
}

func (x *CSVCMsg_SendTableSendpropT) GetNumElements() int32 {
	if x != nil && x.NumElements != nil {
		return *x.NumElements
	}
	return 0
}

func (x *CSVCMsg_SendTableSendpropT) GetLowValue() float32 {
	if x != nil && x.LowValue != nil {
		return *x.LowValue
	}
	return 0
}

func (x *CSVCMsg_SendTableSendpropT) GetHighValue() float32 {
	if x != nil && x.HighValue != nil {
		return *x.HighValue
	}
	return 0
}

func (x *CSVCMsg_SendTableSendpropT) GetNumBits() int32 {
	if x != nil && x.NumBits != nil {
		return *x.NumBits
	}
	return 0
}

type CSVCMsg_GameEventKeyT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *int32   `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	ValString  *string  `protobuf:"bytes,2,opt,name=val_string,json=valString" json:"val_string,omitempty"`
	ValFloat   *float32 `protobuf:"fixed32,3,opt,name=val_float,json=valFloat" json:"val_float,omitempty"`
	ValLong    *int32   `protobuf:"varint,4,opt,name=val_long,json=valLong" json:"val_long,omitempty"`
	ValShort   *int32   `protobuf:"varint,5,opt,name=val_short,json=valShort" json:"val_short,omitempty"`
	ValByte    *int32   `protobuf:"varint,6,opt,name=val_byte,json=valByte" json:"val_byte,omitempty"`
	ValBool    *bool    `protobuf:"varint,7,opt,name=val_bool,json=valBool" json:"val_bool,omitempty"`
	ValUint64  *uint64  `protobuf:"varint,8,opt,name=val_uint64,json=valUint64" json:"val_uint64,omitempty"`
	ValWstring []byte   `protobuf:"bytes,9,opt,name=val_wstring,json=valWstring" json:"val_wstring,omitempty"`
}

func (x *CSVCMsg_GameEventKeyT) Reset() {
	*x = CSVCMsg_GameEventKeyT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_GameEventKeyT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_GameEventKeyT) ProtoMessage() {}

func (x *CSVCMsg_GameEventKeyT) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_GameEventKeyT.ProtoReflect.Descriptor instead.
func (*CSVCMsg_GameEventKeyT) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{43, 0}
}

func (x *CSVCMsg_GameEventKeyT) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CSVCMsg_GameEventKeyT) GetValString() string {
	if x != nil && x.ValString != nil {
		return *x.ValString
	}
	return ""
}

func (x *CSVCMsg_GameEventKeyT) GetValFloat() float32 {
	if x != nil && x.ValFloat != nil {
		return *x.ValFloat
	}
	return 0
}

func (x *CSVCMsg_GameEventKeyT) GetValLong() int32 {
	if x != nil && x.ValLong != nil {
		return *x.ValLong
	}
	return 0
}

func (x *CSVCMsg_GameEventKeyT) GetValShort() int32 {
	if x != nil && x.ValShort != nil {
		return *x.ValShort
	}
	return 0
}

func (x *CSVCMsg_GameEventKeyT) GetValByte() int32 {
	if x != nil && x.ValByte != nil {
		return *x.ValByte
	}
	return 0
}

func (x *CSVCMsg_GameEventKeyT) GetValBool() bool {
	if x != nil && x.ValBool != nil {
		return *x.ValBool
	}
	return false
}

func (x *CSVCMsg_GameEventKeyT) GetValUint64() uint64 {
	if x != nil && x.ValUint64 != nil {
		return *x.ValUint64
	}
	return 0
}

func (x *CSVCMsg_GameEventKeyT) GetValWstring() []byte {
	if x != nil {
		return x.ValWstring
	}
	return nil
}

type CSVCMsg_GameEventListKeyT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CSVCMsg_GameEventListKeyT) Reset() {
	*x = CSVCMsg_GameEventListKeyT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_GameEventListKeyT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_GameEventListKeyT) ProtoMessage() {}

func (x *CSVCMsg_GameEventListKeyT) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_GameEventListKeyT.ProtoReflect.Descriptor instead.
func (*CSVCMsg_GameEventListKeyT) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{44, 0}
}

func (x *CSVCMsg_GameEventListKeyT) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CSVCMsg_GameEventListKeyT) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CSVCMsg_GameEventListDescriptorT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eventid *int32                       `protobuf:"varint,1,opt,name=eventid" json:"eventid,omitempty"`
	Name    *string                      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Keys    []*CSVCMsg_GameEventListKeyT `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
}

func (x *CSVCMsg_GameEventListDescriptorT) Reset() {
	*x = CSVCMsg_GameEventListDescriptorT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_GameEventListDescriptorT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_GameEventListDescriptorT) ProtoMessage() {}

func (x *CSVCMsg_GameEventListDescriptorT) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_GameEventListDescriptorT.ProtoReflect.Descriptor instead.
func (*CSVCMsg_GameEventListDescriptorT) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{44, 1}
}

func (x *CSVCMsg_GameEventListDescriptorT) GetEventid() int32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

func (x *CSVCMsg_GameEventListDescriptorT) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSVCMsg_GameEventListDescriptorT) GetKeys() []*CSVCMsg_GameEventListKeyT {
	if x != nil {
		return x.Keys
	}
	return nil
}

type CSVCMsg_SoundsSounddataT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginX        *int32   `protobuf:"zigzag32,1,opt,name=origin_x,json=originX" json:"origin_x,omitempty"`
	OriginY        *int32   `protobuf:"zigzag32,2,opt,name=origin_y,json=originY" json:"origin_y,omitempty"`
	OriginZ        *int32   `protobuf:"zigzag32,3,opt,name=origin_z,json=originZ" json:"origin_z,omitempty"`
	Volume         *uint32  `protobuf:"varint,4,opt,name=volume" json:"volume,omitempty"`
	DelayValue     *float32 `protobuf:"fixed32,5,opt,name=delay_value,json=delayValue" json:"delay_value,omitempty"`
	SequenceNumber *int32   `protobuf:"varint,6,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	EntityIndex    *int32   `protobuf:"varint,7,opt,name=entity_index,json=entityIndex" json:"entity_index,omitempty"`
	Channel        *int32   `protobuf:"varint,8,opt,name=channel" json:"channel,omitempty"`
	Pitch          *int32   `protobuf:"varint,9,opt,name=pitch" json:"pitch,omitempty"`
	Flags          *int32   `protobuf:"varint,10,opt,name=flags" json:"flags,omitempty"`
	SoundNum       *uint32  `protobuf:"varint,11,opt,name=sound_num,json=soundNum" json:"sound_num,omitempty"`
	SoundNumHandle *uint32  `protobuf:"fixed32,12,opt,name=sound_num_handle,json=soundNumHandle" json:"sound_num_handle,omitempty"`
	SpeakerEntity  *int32   `protobuf:"varint,13,opt,name=speaker_entity,json=speakerEntity" json:"speaker_entity,omitempty"`
	RandomSeed     *int32   `protobuf:"varint,14,opt,name=random_seed,json=randomSeed" json:"random_seed,omitempty"`
	SoundLevel     *int32   `protobuf:"varint,15,opt,name=sound_level,json=soundLevel" json:"sound_level,omitempty"`
	IsSentence     *bool    `protobuf:"varint,16,opt,name=is_sentence,json=isSentence" json:"is_sentence,omitempty"`
	IsAmbient      *bool    `protobuf:"varint,17,opt,name=is_ambient,json=isAmbient" json:"is_ambient,omitempty"`
}

func (x *CSVCMsg_SoundsSounddataT) Reset() {
	*x = CSVCMsg_SoundsSounddataT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netmessages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_SoundsSounddataT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_SoundsSounddataT) ProtoMessage() {}

func (x *CSVCMsg_SoundsSounddataT) ProtoReflect() protoreflect.Message {
	mi := &file_netmessages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_SoundsSounddataT.ProtoReflect.Descriptor instead.
func (*CSVCMsg_SoundsSounddataT) Descriptor() ([]byte, []int) {
	return file_netmessages_proto_rawDescGZIP(), []int{47, 0}
}

func (x *CSVCMsg_SoundsSounddataT) GetOriginX() int32 {
	if x != nil && x.OriginX != nil {
		return *x.OriginX
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetOriginY() int32 {
	if x != nil && x.OriginY != nil {
		return *x.OriginY
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetOriginZ() int32 {
	if x != nil && x.OriginZ != nil {
		return *x.OriginZ
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetVolume() uint32 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetDelayValue() float32 {
	if x != nil && x.DelayValue != nil {
		return *x.DelayValue
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetSequenceNumber() int32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetEntityIndex() int32 {
	if x != nil && x.EntityIndex != nil {
		return *x.EntityIndex
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetPitch() int32 {
	if x != nil && x.Pitch != nil {
		return *x.Pitch
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetSoundNum() uint32 {
	if x != nil && x.SoundNum != nil {
		return *x.SoundNum
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetSoundNumHandle() uint32 {
	if x != nil && x.SoundNumHandle != nil {
		return *x.SoundNumHandle
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetSpeakerEntity() int32 {
	if x != nil && x.SpeakerEntity != nil {
		return *x.SpeakerEntity
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetRandomSeed() int32 {
	if x != nil && x.RandomSeed != nil {
		return *x.RandomSeed
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetSoundLevel() int32 {
	if x != nil && x.SoundLevel != nil {
		return *x.SoundLevel
	}
	return 0
}

func (x *CSVCMsg_SoundsSounddataT) GetIsSentence() bool {
	if x != nil && x.IsSentence != nil {
		return *x.IsSentence
	}
	return false
}

func (x *CSVCMsg_SoundsSounddataT) GetIsAmbient() bool {
	if x != nil && x.IsAmbient != nil {
		return *x.IsAmbient
	}
	return false
}

var File_netmessages_proto protoreflect.FileDescriptor

var file_netmessages_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6e, 0x65, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x0a, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x2a, 0x0a,
	0x0c, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0x36, 0x0a, 0x0a, 0x43, 0x4d, 0x73,
	0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x7a, 0x22, 0x42, 0x0a, 0x08, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x47, 0x42, 0x41, 0x12, 0x0c, 0x0a,
	0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x61, 0x22, 0x99, 0x02, 0x0a, 0x0c, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73,
	0x67, 0x5f, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x14, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a,
	0x22, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x68, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x6c, 0x74, 0x76, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x68, 0x6c, 0x74, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x2d, 0x0a, 0x11, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6d, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x22, 0xd1, 0x01, 0x0a, 0x13, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x70, 0x61, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x56,
	0x61, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x63, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x56, 0x61, 0x72, 0x73, 0x2e,
	0x43, 0x56, 0x61, 0x72, 0x52, 0x05, 0x63, 0x76, 0x61, 0x72, 0x73, 0x1a, 0x59, 0x0a, 0x04, 0x43,
	0x56, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73,
	0x67, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x5f, 0x43, 0x56, 0x61, 0x72, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x61,
	0x72, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x4e, 0x4f,
	0x50, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0c,
	0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x44, 0x65, 0x6d, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6e,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x22, 0x2d, 0x0a,
	0x17, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x4a, 0x0a, 0x18,
	0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x67, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x67, 0x62, 0x22, 0xf8, 0x01, 0x0a, 0x12, 0x43, 0x43, 0x4c,
	0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x72, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68,
	0x6c, 0x74, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x6c, 0x74,
	0x76, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x0c, 0x43, 0x43, 0x4c, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x4d,
	0x6f, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x6e, 0x75, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e,
	0x75, 0x6d, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x8c, 0x02, 0x0a, 0x11, 0x43, 0x43, 0x4c, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x78,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x04, 0x78, 0x75, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x74, 0x3a, 0x17, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x5b, 0x0a, 0x13, 0x43, 0x43, 0x4c, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x42, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x72, 0x22, 0x35, 0x0a,
	0x14, 0x43, 0x43, 0x4c, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x7d, 0x0a, 0x18, 0x43, 0x43, 0x4c, 0x43, 0x4d, 0x73, 0x67, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x43, 0x76, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x14, 0x43, 0x43, 0x4c, 0x43, 0x4d, 0x73, 0x67, 0x5f,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x52, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x63, 0x72, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x17, 0x43, 0x43, 0x4c, 0x43, 0x4d, 0x73, 0x67, 0x5f,
	0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x43, 0x0a, 0x1a, 0x43,
	0x43, 0x4c, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x5f, 0x43, 0x56, 0x61, 0x72, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x61, 0x72, 0x73,
	0x22, 0x34, 0x0a, 0x14, 0x43, 0x43, 0x4c, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6d, 0x64, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xf3, 0x05, 0x0a, 0x12, 0x43, 0x53, 0x56, 0x43, 0x4d,
	0x73, 0x67, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68,
	0x6c, 0x74, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x6c, 0x74,
	0x76, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x40,
	0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x11, 0x0a, 0x04, 0x63, 0x5f, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x63, 0x4f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x43, 0x72, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x63, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x72, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x74, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x1c,
	0x0a, 0x0a, 0x75, 0x67, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x75, 0x67, 0x63, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a,
	0x11, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x1a, 0x6b, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xad, 0x03, 0x0a, 0x11, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67,
	0x5f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x70,
	0x72, 0x6f, 0x70, 0x5f, 0x74, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0x80, 0x02, 0x0a,
	0x0a, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x77,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x73, 0x22,
	0x23, 0x0a, 0x0d, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x2a, 0x0a, 0x10, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x22, 0x34, 0x0a, 0x0f, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xae, 0x02, 0x0a, 0x19, 0x43, 0x53, 0x56, 0x43, 0x4d,
	0x73, 0x67, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x69, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x43, 0x53, 0x56, 0x43,
	0x4d, 0x73, 0x67, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e,
	0x75, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x60, 0x0a, 0x11, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x88, 0x03, 0x0a, 0x11, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x78, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x04, 0x78,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x74, 0x3a, 0x17, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x51,
	0x0a, 0x10, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x46, 0x69, 0x78, 0x41, 0x6e, 0x67,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x22, 0x3b, 0x0a, 0x16, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x33,
	0x0a, 0x10, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f,
	0x42, 0x53, 0x50, 0x44, 0x65, 0x63, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x61, 0x6c,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x93,
	0x01, 0x0a, 0x13, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17,
	0x4d, 0x53, 0x47, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f,
	0x41, 0x44, 0x44, 0x55, 0x53, 0x45, 0x52, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x4b, 0x0a, 0x14, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f,
	0x47, 0x65, 0x74, 0x43, 0x76, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x76, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x76, 0x61, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x57, 0x0a, 0x0c, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x4d, 0x65, 0x6e,
	0x75, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x65, 0x6e,
	0x75, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x13, 0x43, 0x53,
	0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x73, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61,
	0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x22, 0x32, 0x0a, 0x14, 0x43, 0x53, 0x56,
	0x43, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x6d, 0x61, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x6d, 0x61, 0x70, 0x22, 0xa4, 0x03,
	0x0a, 0x11, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x53, 0x56,
	0x43, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6b,
	0x65, 0x79, 0x5f, 0x74, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x1a, 0x85, 0x02, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x61,
	0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x6f,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x6e,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x61, 0x6c,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x57, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0xff, 0x01, 0x0a, 0x15, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x2f, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x6e, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x6b, 0x65, 0x79, 0x5f, 0x74,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x74, 0x0a, 0x14, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73,
	0x67, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x82, 0x02, 0x0a,
	0x16, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x88, 0x05, 0x0a, 0x0e, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x53,
	0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x2e, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x1a, 0x99, 0x04, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x58, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x59, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5a, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x11,
	0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x14, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f,
	0x43, 0x6d, 0x64, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x15, 0x43, 0x53,
	0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb5, 0x02, 0x0a,
	0x12, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x48, 0x6c, 0x74, 0x76, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x6f, 0x70, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6c, 0x6f,
	0x77, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x45,
	0x6e, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6c, 0x6f,
	0x77, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x43, 0x43, 0x4c, 0x43, 0x4d, 0x73, 0x67,
	0x5f, 0x48, 0x6c, 0x74, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x73, 0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x19, 0x43,
	0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x2a, 0xb9, 0x01, 0x0a, 0x0c, 0x4e,
	0x45, 0x54, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x5f, 0x4e, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x5f,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x6e, 0x65, 0x74, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x6e, 0x65,
	0x74, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x54, 0x69, 0x63, 0x6b, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6d, 0x64, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x56, 0x61, 0x72, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x5f, 0x53,
	0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14,
	0x6e, 0x65, 0x74, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x10, 0x64, 0x2a, 0x94, 0x02, 0x0a, 0x0c, 0x43, 0x4c, 0x43, 0x5f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x6c, 0x63, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x63,
	0x6c, 0x63, 0x5f, 0x4d, 0x6f, 0x76, 0x65, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x6c, 0x63,
	0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f,
	0x63, 0x6c, 0x63, 0x5f, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x6b, 0x10,
	0x0b, 0x12, 0x14, 0x0a, 0x10, 0x63, 0x6c, 0x63, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x6c, 0x63, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x43, 0x76, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0x0d, 0x12, 0x14, 0x0a, 0x10, 0x63, 0x6c, 0x63, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x52, 0x43,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6c, 0x63, 0x5f, 0x4c,
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x0f,
	0x12, 0x1a, 0x0a, 0x16, 0x63, 0x6c, 0x63, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11,
	0x63, 0x6c, 0x63, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x63, 0x6c, 0x63, 0x5f, 0x43, 0x6d, 0x64, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x6c, 0x63,
	0x5f, 0x48, 0x6c, 0x74, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x10, 0x14, 0x2a, 0x4c, 0x0a,
	0x11, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x2a, 0x79, 0x0a, 0x17, 0x45,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x50,
	0x4c, 0x49, 0x54, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54,
	0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54,
	0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x53,
	0x10, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0xe3, 0x04, 0x0a, 0x0c, 0x53, 0x56, 0x43, 0x5f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x73,
	0x76, 0x63, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x09, 0x12, 0x11,
	0x0a, 0x0d, 0x73, 0x76, 0x63, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x10,
	0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x76, 0x63, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x73, 0x76, 0x63, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x0c, 0x12, 0x19,
	0x0a, 0x15, 0x73, 0x76, 0x63, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x76, 0x63,
	0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d,
	0x73, 0x76, 0x63, 0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0x0f, 0x12,
	0x0d, 0x0a, 0x09, 0x73, 0x76, 0x63, 0x5f, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x10, 0x10, 0x12, 0x0e,
	0x0a, 0x0a, 0x73, 0x76, 0x63, 0x5f, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x10, 0x11, 0x12, 0x0f,
	0x0a, 0x0b, 0x73, 0x76, 0x63, 0x5f, 0x53, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x10, 0x12, 0x12,
	0x10, 0x0a, 0x0c, 0x73, 0x76, 0x63, 0x5f, 0x46, 0x69, 0x78, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x10,
	0x13, 0x12, 0x16, 0x0a, 0x12, 0x73, 0x76, 0x63, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61,
	0x69, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x76, 0x63,
	0x5f, 0x42, 0x53, 0x50, 0x44, 0x65, 0x63, 0x61, 0x6c, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x73,
	0x76, 0x63, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x16,
	0x12, 0x13, 0x0a, 0x0f, 0x73, 0x76, 0x63, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x73, 0x76, 0x63, 0x5f, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x18, 0x12, 0x11, 0x0a, 0x0d,
	0x73, 0x76, 0x63, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x19, 0x12,
	0x16, 0x0a, 0x12, 0x73, 0x76, 0x63, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x76, 0x63, 0x5f, 0x54,
	0x65, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x10, 0x1b, 0x12, 0x10, 0x0a,
	0x0c, 0x73, 0x76, 0x63, 0x5f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x10, 0x1c, 0x12,
	0x0c, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x4d, 0x65, 0x6e, 0x75, 0x10, 0x1d, 0x12, 0x15, 0x0a,
	0x11, 0x73, 0x76, 0x63, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x76, 0x63, 0x5f, 0x47, 0x65, 0x74, 0x43,
	0x76, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x1f, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x76,
	0x63, 0x5f, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x6d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x10, 0x21,
	0x12, 0x14, 0x0a, 0x10, 0x73, 0x76, 0x63, 0x5f, 0x43, 0x6d, 0x64, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x10, 0x22, 0x12, 0x15, 0x0a, 0x11, 0x73, 0x76, 0x63, 0x5f, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x10, 0x23, 0x12, 0x12, 0x0a,
	0x0e, 0x73, 0x76, 0x63, 0x5f, 0x48, 0x6c, 0x74, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x10,
	0x24, 0x12, 0x19, 0x0a, 0x15, 0x73, 0x76, 0x63, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x26, 0x2a, 0x87, 0x01, 0x0a,
	0x11, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x41, 0x54,
	0x48, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x02, 0x12, 0x27, 0x0a,
	0x23, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x55, 0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x42, 0x03, 0x80, 0x01, 0x00,
}

var (
	file_netmessages_proto_rawDescOnce sync.Once
	file_netmessages_proto_rawDescData = file_netmessages_proto_rawDesc
)

func file_netmessages_proto_rawDescGZIP() []byte {
	file_netmessages_proto_rawDescOnce.Do(func() {
		file_netmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_netmessages_proto_rawDescData)
	})
	return file_netmessages_proto_rawDescData
}

var file_netmessages_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_netmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_netmessages_proto_goTypes = []interface{}{
	(NET_Messages)(0),                        // 0: NET_Messages
	(CLC_Messages)(0),                        // 1: CLC_Messages
	(VoiceDataFormatT)(0),                    // 2: VoiceDataFormat_t
	(ESplitScreenMessageType)(0),             // 3: ESplitScreenMessageType
	(SVC_Messages)(0),                        // 4: SVC_Messages
	(ReplayEventTypeT)(0),                    // 5: ReplayEventType_t
	(*CMsgVector)(nil),                       // 6: CMsgVector
	(*CMsgVector2D)(nil),                     // 7: CMsgVector2D
	(*CMsgQAngle)(nil),                       // 8: CMsgQAngle
	(*CMsgRGBA)(nil),                         // 9: CMsgRGBA
	(*CNETMsg_Tick)(nil),                     // 10: CNETMsg_Tick
	(*CNETMsg_StringCmd)(nil),                // 11: CNETMsg_StringCmd
	(*CNETMsg_SignonState)(nil),              // 12: CNETMsg_SignonState
	(*CMsg_CVars)(nil),                       // 13: CMsg_CVars
	(*CNETMsg_SetConVar)(nil),                // 14: CNETMsg_SetConVar
	(*CNETMsg_NOP)(nil),                      // 15: CNETMsg_NOP
	(*CNETMsg_Disconnect)(nil),               // 16: CNETMsg_Disconnect
	(*CNETMsg_File)(nil),                     // 17: CNETMsg_File
	(*CNETMsg_SplitScreenUser)(nil),          // 18: CNETMsg_SplitScreenUser
	(*CNETMsg_PlayerAvatarData)(nil),         // 19: CNETMsg_PlayerAvatarData
	(*CCLCMsg_ClientInfo)(nil),               // 20: CCLCMsg_ClientInfo
	(*CCLCMsg_Move)(nil),                     // 21: CCLCMsg_Move
	(*CCLCMsg_VoiceData)(nil),                // 22: CCLCMsg_VoiceData
	(*CCLCMsg_BaselineAck)(nil),              // 23: CCLCMsg_BaselineAck
	(*CCLCMsg_ListenEvents)(nil),             // 24: CCLCMsg_ListenEvents
	(*CCLCMsg_RespondCvarValue)(nil),         // 25: CCLCMsg_RespondCvarValue
	(*CCLCMsg_FileCRCCheck)(nil),             // 26: CCLCMsg_FileCRCCheck
	(*CCLCMsg_LoadingProgress)(nil),          // 27: CCLCMsg_LoadingProgress
	(*CCLCMsg_SplitPlayerConnect)(nil),       // 28: CCLCMsg_SplitPlayerConnect
	(*CCLCMsg_CmdKeyValues)(nil),             // 29: CCLCMsg_CmdKeyValues
	(*CSVCMsg_ServerInfo)(nil),               // 30: CSVCMsg_ServerInfo
	(*CSVCMsg_ClassInfo)(nil),                // 31: CSVCMsg_ClassInfo
	(*CSVCMsg_SendTable)(nil),                // 32: CSVCMsg_SendTable
	(*CSVCMsg_Print)(nil),                    // 33: CSVCMsg_Print
	(*CSVCMsg_SetPause)(nil),                 // 34: CSVCMsg_SetPause
	(*CSVCMsg_SetView)(nil),                  // 35: CSVCMsg_SetView
	(*CSVCMsg_CreateStringTable)(nil),        // 36: CSVCMsg_CreateStringTable
	(*CSVCMsg_UpdateStringTable)(nil),        // 37: CSVCMsg_UpdateStringTable
	(*CSVCMsg_VoiceInit)(nil),                // 38: CSVCMsg_VoiceInit
	(*CSVCMsg_VoiceData)(nil),                // 39: CSVCMsg_VoiceData
	(*CSVCMsg_FixAngle)(nil),                 // 40: CSVCMsg_FixAngle
	(*CSVCMsg_CrosshairAngle)(nil),           // 41: CSVCMsg_CrosshairAngle
	(*CSVCMsg_Prefetch)(nil),                 // 42: CSVCMsg_Prefetch
	(*CSVCMsg_BSPDecal)(nil),                 // 43: CSVCMsg_BSPDecal
	(*CSVCMsg_SplitScreen)(nil),              // 44: CSVCMsg_SplitScreen
	(*CSVCMsg_GetCvarValue)(nil),             // 45: CSVCMsg_GetCvarValue
	(*CSVCMsg_Menu)(nil),                     // 46: CSVCMsg_Menu
	(*CSVCMsg_UserMessage)(nil),              // 47: CSVCMsg_UserMessage
	(*CSVCMsg_PaintmapData)(nil),             // 48: CSVCMsg_PaintmapData
	(*CSVCMsg_GameEvent)(nil),                // 49: CSVCMsg_GameEvent
	(*CSVCMsg_GameEventList)(nil),            // 50: CSVCMsg_GameEventList
	(*CSVCMsg_TempEntities)(nil),             // 51: CSVCMsg_TempEntities
	(*CSVCMsg_PacketEntities)(nil),           // 52: CSVCMsg_PacketEntities
	(*CSVCMsg_Sounds)(nil),                   // 53: CSVCMsg_Sounds
	(*CSVCMsg_EntityMsg)(nil),                // 54: CSVCMsg_EntityMsg
	(*CSVCMsg_CmdKeyValues)(nil),             // 55: CSVCMsg_CmdKeyValues
	(*CSVCMsg_EncryptedData)(nil),            // 56: CSVCMsg_EncryptedData
	(*CSVCMsg_HltvReplay)(nil),               // 57: CSVCMsg_HltvReplay
	(*CCLCMsg_HltvReplay)(nil),               // 58: CCLCMsg_HltvReplay
	(*CSVCMsg_Broadcast_Command)(nil),        // 59: CSVCMsg_Broadcast_Command
	(*CMsg_CVars_CVar)(nil),                  // 60: CMsg_CVars.CVar
	(*CSVCMsg_ClassInfoClassT)(nil),          // 61: CSVCMsg_ClassInfo.class_t
	(*CSVCMsg_SendTableSendpropT)(nil),       // 62: CSVCMsg_SendTable.sendprop_t
	(*CSVCMsg_GameEventKeyT)(nil),            // 63: CSVCMsg_GameEvent.key_t
	(*CSVCMsg_GameEventListKeyT)(nil),        // 64: CSVCMsg_GameEventList.key_t
	(*CSVCMsg_GameEventListDescriptorT)(nil), // 65: CSVCMsg_GameEventList.descriptor_t
	(*CSVCMsg_SoundsSounddataT)(nil),         // 66: CSVCMsg_Sounds.sounddata_t
}
var file_netmessages_proto_depIdxs = []int32{
	60, // 0: CMsg_CVars.cvars:type_name -> CMsg_CVars.CVar
	13, // 1: CNETMsg_SetConVar.convars:type_name -> CMsg_CVars
	2,  // 2: CCLCMsg_VoiceData.format:type_name -> VoiceDataFormat_t
	13, // 3: CCLCMsg_SplitPlayerConnect.convars:type_name -> CMsg_CVars
	61, // 4: CSVCMsg_ClassInfo.classes:type_name -> CSVCMsg_ClassInfo.class_t
	62, // 5: CSVCMsg_SendTable.props:type_name -> CSVCMsg_SendTable.sendprop_t
	2,  // 6: CSVCMsg_VoiceData.format:type_name -> VoiceDataFormat_t
	8,  // 7: CSVCMsg_FixAngle.angle:type_name -> CMsgQAngle
	8,  // 8: CSVCMsg_CrosshairAngle.angle:type_name -> CMsgQAngle
	6,  // 9: CSVCMsg_BSPDecal.pos:type_name -> CMsgVector
	3,  // 10: CSVCMsg_SplitScreen.type:type_name -> ESplitScreenMessageType
	63, // 11: CSVCMsg_GameEvent.keys:type_name -> CSVCMsg_GameEvent.key_t
	65, // 12: CSVCMsg_GameEventList.descriptors:type_name -> CSVCMsg_GameEventList.descriptor_t
	66, // 13: CSVCMsg_Sounds.sounds:type_name -> CSVCMsg_Sounds.sounddata_t
	64, // 14: CSVCMsg_GameEventList.descriptor_t.keys:type_name -> CSVCMsg_GameEventList.key_t
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_netmessages_proto_init() }
func file_netmessages_proto_init() {
	if File_netmessages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_netmessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgVector2D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgQAngle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRGBA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_Tick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_StringCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_SignonState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsg_CVars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_SetConVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_NOP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_Disconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_SplitScreenUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_PlayerAvatarData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCLCMsg_ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCLCMsg_Move); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCLCMsg_VoiceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCLCMsg_BaselineAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCLCMsg_ListenEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCLCMsg_RespondCvarValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCLCMsg_FileCRCCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCLCMsg_LoadingProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCLCMsg_SplitPlayerConnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCLCMsg_CmdKeyValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_ClassInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_SendTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_Print); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_SetPause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_SetView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_CreateStringTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_UpdateStringTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_VoiceInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_VoiceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_FixAngle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_CrosshairAngle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_Prefetch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_BSPDecal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_SplitScreen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_GetCvarValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_Menu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_UserMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_PaintmapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_GameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_GameEventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_TempEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_PacketEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_Sounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_EntityMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_CmdKeyValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_EncryptedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_HltvReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCLCMsg_HltvReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_Broadcast_Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsg_CVars_CVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_ClassInfoClassT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_SendTableSendpropT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_GameEventKeyT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_GameEventListKeyT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_GameEventListDescriptorT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netmessages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_SoundsSounddataT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_netmessages_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_netmessages_proto_goTypes,
		DependencyIndexes: file_netmessages_proto_depIdxs,
		EnumInfos:         file_netmessages_proto_enumTypes,
		MessageInfos:      file_netmessages_proto_msgTypes,
	}.Build()
	File_netmessages_proto = out.File
	file_netmessages_proto_rawDesc = nil
	file_netmessages_proto_goTypes = nil
	file_netmessages_proto_depIdxs = nil
}
