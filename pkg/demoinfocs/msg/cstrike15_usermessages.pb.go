// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cstrike15_usermessages.proto

package msg

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ECstrike15UserMessages int32

const (
	ECstrike15UserMessages_CS_UM_VGUIMenu                        ECstrike15UserMessages = 1
	ECstrike15UserMessages_CS_UM_Geiger                          ECstrike15UserMessages = 2
	ECstrike15UserMessages_CS_UM_Train                           ECstrike15UserMessages = 3
	ECstrike15UserMessages_CS_UM_HudText                         ECstrike15UserMessages = 4
	ECstrike15UserMessages_CS_UM_SayText                         ECstrike15UserMessages = 5
	ECstrike15UserMessages_CS_UM_SayText2                        ECstrike15UserMessages = 6
	ECstrike15UserMessages_CS_UM_TextMsg                         ECstrike15UserMessages = 7
	ECstrike15UserMessages_CS_UM_HudMsg                          ECstrike15UserMessages = 8
	ECstrike15UserMessages_CS_UM_ResetHud                        ECstrike15UserMessages = 9
	ECstrike15UserMessages_CS_UM_GameTitle                       ECstrike15UserMessages = 10
	ECstrike15UserMessages_CS_UM_Shake                           ECstrike15UserMessages = 12
	ECstrike15UserMessages_CS_UM_Fade                            ECstrike15UserMessages = 13
	ECstrike15UserMessages_CS_UM_Rumble                          ECstrike15UserMessages = 14
	ECstrike15UserMessages_CS_UM_CloseCaption                    ECstrike15UserMessages = 15
	ECstrike15UserMessages_CS_UM_CloseCaptionDirect              ECstrike15UserMessages = 16
	ECstrike15UserMessages_CS_UM_SendAudio                       ECstrike15UserMessages = 17
	ECstrike15UserMessages_CS_UM_RawAudio                        ECstrike15UserMessages = 18
	ECstrike15UserMessages_CS_UM_VoiceMask                       ECstrike15UserMessages = 19
	ECstrike15UserMessages_CS_UM_RequestState                    ECstrike15UserMessages = 20
	ECstrike15UserMessages_CS_UM_Damage                          ECstrike15UserMessages = 21
	ECstrike15UserMessages_CS_UM_RadioText                       ECstrike15UserMessages = 22
	ECstrike15UserMessages_CS_UM_HintText                        ECstrike15UserMessages = 23
	ECstrike15UserMessages_CS_UM_KeyHintText                     ECstrike15UserMessages = 24
	ECstrike15UserMessages_CS_UM_ProcessSpottedEntityUpdate      ECstrike15UserMessages = 25
	ECstrike15UserMessages_CS_UM_ReloadEffect                    ECstrike15UserMessages = 26
	ECstrike15UserMessages_CS_UM_AdjustMoney                     ECstrike15UserMessages = 27
	ECstrike15UserMessages_CS_UM_UpdateTeamMoney                 ECstrike15UserMessages = 28
	ECstrike15UserMessages_CS_UM_StopSpectatorMode               ECstrike15UserMessages = 29
	ECstrike15UserMessages_CS_UM_KillCam                         ECstrike15UserMessages = 30
	ECstrike15UserMessages_CS_UM_DesiredTimescale                ECstrike15UserMessages = 31
	ECstrike15UserMessages_CS_UM_CurrentTimescale                ECstrike15UserMessages = 32
	ECstrike15UserMessages_CS_UM_AchievementEvent                ECstrike15UserMessages = 33
	ECstrike15UserMessages_CS_UM_MatchEndConditions              ECstrike15UserMessages = 34
	ECstrike15UserMessages_CS_UM_DisconnectToLobby               ECstrike15UserMessages = 35
	ECstrike15UserMessages_CS_UM_PlayerStatsUpdate               ECstrike15UserMessages = 36
	ECstrike15UserMessages_CS_UM_DisplayInventory                ECstrike15UserMessages = 37
	ECstrike15UserMessages_CS_UM_WarmupHasEnded                  ECstrike15UserMessages = 38
	ECstrike15UserMessages_CS_UM_ClientInfo                      ECstrike15UserMessages = 39
	ECstrike15UserMessages_CS_UM_XRankGet                        ECstrike15UserMessages = 40
	ECstrike15UserMessages_CS_UM_XRankUpd                        ECstrike15UserMessages = 41
	ECstrike15UserMessages_CS_UM_CallVoteFailed                  ECstrike15UserMessages = 45
	ECstrike15UserMessages_CS_UM_VoteStart                       ECstrike15UserMessages = 46
	ECstrike15UserMessages_CS_UM_VotePass                        ECstrike15UserMessages = 47
	ECstrike15UserMessages_CS_UM_VoteFailed                      ECstrike15UserMessages = 48
	ECstrike15UserMessages_CS_UM_VoteSetup                       ECstrike15UserMessages = 49
	ECstrike15UserMessages_CS_UM_ServerRankRevealAll             ECstrike15UserMessages = 50
	ECstrike15UserMessages_CS_UM_SendLastKillerDamageToClient    ECstrike15UserMessages = 51
	ECstrike15UserMessages_CS_UM_ServerRankUpdate                ECstrike15UserMessages = 52
	ECstrike15UserMessages_CS_UM_ItemPickup                      ECstrike15UserMessages = 53
	ECstrike15UserMessages_CS_UM_ShowMenu                        ECstrike15UserMessages = 54
	ECstrike15UserMessages_CS_UM_BarTime                         ECstrike15UserMessages = 55
	ECstrike15UserMessages_CS_UM_AmmoDenied                      ECstrike15UserMessages = 56
	ECstrike15UserMessages_CS_UM_MarkAchievement                 ECstrike15UserMessages = 57
	ECstrike15UserMessages_CS_UM_MatchStatsUpdate                ECstrike15UserMessages = 58
	ECstrike15UserMessages_CS_UM_ItemDrop                        ECstrike15UserMessages = 59
	ECstrike15UserMessages_CS_UM_GlowPropTurnOff                 ECstrike15UserMessages = 60
	ECstrike15UserMessages_CS_UM_SendPlayerItemDrops             ECstrike15UserMessages = 61
	ECstrike15UserMessages_CS_UM_RoundBackupFilenames            ECstrike15UserMessages = 62
	ECstrike15UserMessages_CS_UM_SendPlayerItemFound             ECstrike15UserMessages = 63
	ECstrike15UserMessages_CS_UM_ReportHit                       ECstrike15UserMessages = 64
	ECstrike15UserMessages_CS_UM_XpUpdate                        ECstrike15UserMessages = 65
	ECstrike15UserMessages_CS_UM_QuestProgress                   ECstrike15UserMessages = 66
	ECstrike15UserMessages_CS_UM_ScoreLeaderboardData            ECstrike15UserMessages = 67
	ECstrike15UserMessages_CS_UM_PlayerDecalDigitalSignature     ECstrike15UserMessages = 68
	ECstrike15UserMessages_CS_UM_WeaponSound                     ECstrike15UserMessages = 69
	ECstrike15UserMessages_CS_UM_UpdateScreenHealthBar           ECstrike15UserMessages = 70
	ECstrike15UserMessages_CS_UM_EntityOutlineHighlight          ECstrike15UserMessages = 71
	ECstrike15UserMessages_CS_UM_SSUI                            ECstrike15UserMessages = 72
	ECstrike15UserMessages_CS_UM_SurvivalStats                   ECstrike15UserMessages = 73
	ECstrike15UserMessages_CS_UM_DisconnectToLobby2              ECstrike15UserMessages = 74
	ECstrike15UserMessages_CS_UM_EndOfMatchAllPlayersData        ECstrike15UserMessages = 75
	ECstrike15UserMessages_CS_UM_RetakeUpdatePlayerCardList      ECstrike15UserMessages = 77
	ECstrike15UserMessages_CS_UM_RetakeUpdatePlayerCardSelection ECstrike15UserMessages = 78
	ECstrike15UserMessages_CS_UM_RoundImpactScoreData            ECstrike15UserMessages = 79
	ECstrike15UserMessages_CS_UM_CurrentRoundOdds                ECstrike15UserMessages = 80
	ECstrike15UserMessages_CS_UM_DeepStats                       ECstrike15UserMessages = 81
)

var ECstrike15UserMessages_name = map[int32]string{
	1:  "CS_UM_VGUIMenu",
	2:  "CS_UM_Geiger",
	3:  "CS_UM_Train",
	4:  "CS_UM_HudText",
	5:  "CS_UM_SayText",
	6:  "CS_UM_SayText2",
	7:  "CS_UM_TextMsg",
	8:  "CS_UM_HudMsg",
	9:  "CS_UM_ResetHud",
	10: "CS_UM_GameTitle",
	12: "CS_UM_Shake",
	13: "CS_UM_Fade",
	14: "CS_UM_Rumble",
	15: "CS_UM_CloseCaption",
	16: "CS_UM_CloseCaptionDirect",
	17: "CS_UM_SendAudio",
	18: "CS_UM_RawAudio",
	19: "CS_UM_VoiceMask",
	20: "CS_UM_RequestState",
	21: "CS_UM_Damage",
	22: "CS_UM_RadioText",
	23: "CS_UM_HintText",
	24: "CS_UM_KeyHintText",
	25: "CS_UM_ProcessSpottedEntityUpdate",
	26: "CS_UM_ReloadEffect",
	27: "CS_UM_AdjustMoney",
	28: "CS_UM_UpdateTeamMoney",
	29: "CS_UM_StopSpectatorMode",
	30: "CS_UM_KillCam",
	31: "CS_UM_DesiredTimescale",
	32: "CS_UM_CurrentTimescale",
	33: "CS_UM_AchievementEvent",
	34: "CS_UM_MatchEndConditions",
	35: "CS_UM_DisconnectToLobby",
	36: "CS_UM_PlayerStatsUpdate",
	37: "CS_UM_DisplayInventory",
	38: "CS_UM_WarmupHasEnded",
	39: "CS_UM_ClientInfo",
	40: "CS_UM_XRankGet",
	41: "CS_UM_XRankUpd",
	45: "CS_UM_CallVoteFailed",
	46: "CS_UM_VoteStart",
	47: "CS_UM_VotePass",
	48: "CS_UM_VoteFailed",
	49: "CS_UM_VoteSetup",
	50: "CS_UM_ServerRankRevealAll",
	51: "CS_UM_SendLastKillerDamageToClient",
	52: "CS_UM_ServerRankUpdate",
	53: "CS_UM_ItemPickup",
	54: "CS_UM_ShowMenu",
	55: "CS_UM_BarTime",
	56: "CS_UM_AmmoDenied",
	57: "CS_UM_MarkAchievement",
	58: "CS_UM_MatchStatsUpdate",
	59: "CS_UM_ItemDrop",
	60: "CS_UM_GlowPropTurnOff",
	61: "CS_UM_SendPlayerItemDrops",
	62: "CS_UM_RoundBackupFilenames",
	63: "CS_UM_SendPlayerItemFound",
	64: "CS_UM_ReportHit",
	65: "CS_UM_XpUpdate",
	66: "CS_UM_QuestProgress",
	67: "CS_UM_ScoreLeaderboardData",
	68: "CS_UM_PlayerDecalDigitalSignature",
	69: "CS_UM_WeaponSound",
	70: "CS_UM_UpdateScreenHealthBar",
	71: "CS_UM_EntityOutlineHighlight",
	72: "CS_UM_SSUI",
	73: "CS_UM_SurvivalStats",
	74: "CS_UM_DisconnectToLobby2",
	75: "CS_UM_EndOfMatchAllPlayersData",
	77: "CS_UM_RetakeUpdatePlayerCardList",
	78: "CS_UM_RetakeUpdatePlayerCardSelection",
	79: "CS_UM_RoundImpactScoreData",
	80: "CS_UM_CurrentRoundOdds",
	81: "CS_UM_DeepStats",
}

var ECstrike15UserMessages_value = map[string]int32{
	"CS_UM_VGUIMenu":                        1,
	"CS_UM_Geiger":                          2,
	"CS_UM_Train":                           3,
	"CS_UM_HudText":                         4,
	"CS_UM_SayText":                         5,
	"CS_UM_SayText2":                        6,
	"CS_UM_TextMsg":                         7,
	"CS_UM_HudMsg":                          8,
	"CS_UM_ResetHud":                        9,
	"CS_UM_GameTitle":                       10,
	"CS_UM_Shake":                           12,
	"CS_UM_Fade":                            13,
	"CS_UM_Rumble":                          14,
	"CS_UM_CloseCaption":                    15,
	"CS_UM_CloseCaptionDirect":              16,
	"CS_UM_SendAudio":                       17,
	"CS_UM_RawAudio":                        18,
	"CS_UM_VoiceMask":                       19,
	"CS_UM_RequestState":                    20,
	"CS_UM_Damage":                          21,
	"CS_UM_RadioText":                       22,
	"CS_UM_HintText":                        23,
	"CS_UM_KeyHintText":                     24,
	"CS_UM_ProcessSpottedEntityUpdate":      25,
	"CS_UM_ReloadEffect":                    26,
	"CS_UM_AdjustMoney":                     27,
	"CS_UM_UpdateTeamMoney":                 28,
	"CS_UM_StopSpectatorMode":               29,
	"CS_UM_KillCam":                         30,
	"CS_UM_DesiredTimescale":                31,
	"CS_UM_CurrentTimescale":                32,
	"CS_UM_AchievementEvent":                33,
	"CS_UM_MatchEndConditions":              34,
	"CS_UM_DisconnectToLobby":               35,
	"CS_UM_PlayerStatsUpdate":               36,
	"CS_UM_DisplayInventory":                37,
	"CS_UM_WarmupHasEnded":                  38,
	"CS_UM_ClientInfo":                      39,
	"CS_UM_XRankGet":                        40,
	"CS_UM_XRankUpd":                        41,
	"CS_UM_CallVoteFailed":                  45,
	"CS_UM_VoteStart":                       46,
	"CS_UM_VotePass":                        47,
	"CS_UM_VoteFailed":                      48,
	"CS_UM_VoteSetup":                       49,
	"CS_UM_ServerRankRevealAll":             50,
	"CS_UM_SendLastKillerDamageToClient":    51,
	"CS_UM_ServerRankUpdate":                52,
	"CS_UM_ItemPickup":                      53,
	"CS_UM_ShowMenu":                        54,
	"CS_UM_BarTime":                         55,
	"CS_UM_AmmoDenied":                      56,
	"CS_UM_MarkAchievement":                 57,
	"CS_UM_MatchStatsUpdate":                58,
	"CS_UM_ItemDrop":                        59,
	"CS_UM_GlowPropTurnOff":                 60,
	"CS_UM_SendPlayerItemDrops":             61,
	"CS_UM_RoundBackupFilenames":            62,
	"CS_UM_SendPlayerItemFound":             63,
	"CS_UM_ReportHit":                       64,
	"CS_UM_XpUpdate":                        65,
	"CS_UM_QuestProgress":                   66,
	"CS_UM_ScoreLeaderboardData":            67,
	"CS_UM_PlayerDecalDigitalSignature":     68,
	"CS_UM_WeaponSound":                     69,
	"CS_UM_UpdateScreenHealthBar":           70,
	"CS_UM_EntityOutlineHighlight":          71,
	"CS_UM_SSUI":                            72,
	"CS_UM_SurvivalStats":                   73,
	"CS_UM_DisconnectToLobby2":              74,
	"CS_UM_EndOfMatchAllPlayersData":        75,
	"CS_UM_RetakeUpdatePlayerCardList":      77,
	"CS_UM_RetakeUpdatePlayerCardSelection": 78,
	"CS_UM_RoundImpactScoreData":            79,
	"CS_UM_CurrentRoundOdds":                80,
	"CS_UM_DeepStats":                       81,
}

func (x ECstrike15UserMessages) Enum() *ECstrike15UserMessages {
	p := new(ECstrike15UserMessages)
	*p = x
	return p
}

func (x ECstrike15UserMessages) String() string {
	return proto.EnumName(ECstrike15UserMessages_name, int32(x))
}

func (x *ECstrike15UserMessages) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ECstrike15UserMessages_value, data, "ECstrike15UserMessages")
	if err != nil {
		return err
	}
	*x = ECstrike15UserMessages(value)
	return nil
}

func (ECstrike15UserMessages) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{0}
}

type ECSUsrMsg_DisconnectToLobby_Action int32

const (
	ECSUsrMsg_DisconnectToLobby_Action_k_ECSUsrMsg_DisconnectToLobby_Action_Default ECSUsrMsg_DisconnectToLobby_Action = 0
	ECSUsrMsg_DisconnectToLobby_Action_k_ECSUsrMsg_DisconnectToLobby_Action_GoQueue ECSUsrMsg_DisconnectToLobby_Action = 1
)

var ECSUsrMsg_DisconnectToLobby_Action_name = map[int32]string{
	0: "k_ECSUsrMsg_DisconnectToLobby_Action_Default",
	1: "k_ECSUsrMsg_DisconnectToLobby_Action_GoQueue",
}

var ECSUsrMsg_DisconnectToLobby_Action_value = map[string]int32{
	"k_ECSUsrMsg_DisconnectToLobby_Action_Default": 0,
	"k_ECSUsrMsg_DisconnectToLobby_Action_GoQueue": 1,
}

func (x ECSUsrMsg_DisconnectToLobby_Action) Enum() *ECSUsrMsg_DisconnectToLobby_Action {
	p := new(ECSUsrMsg_DisconnectToLobby_Action)
	*p = x
	return p
}

func (x ECSUsrMsg_DisconnectToLobby_Action) String() string {
	return proto.EnumName(ECSUsrMsg_DisconnectToLobby_Action_name, int32(x))
}

func (x *ECSUsrMsg_DisconnectToLobby_Action) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ECSUsrMsg_DisconnectToLobby_Action_value, data, "ECSUsrMsg_DisconnectToLobby_Action")
	if err != nil {
		return err
	}
	*x = ECSUsrMsg_DisconnectToLobby_Action(value)
	return nil
}

func (ECSUsrMsg_DisconnectToLobby_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{1}
}

type CCSUsrMsg_VGUIMenu struct {
	Name    string                       `protobuf:"bytes,1,opt,name=name" json:"name"`
	Show    bool                         `protobuf:"varint,2,opt,name=show" json:"show"`
	Subkeys []*CCSUsrMsg_VGUIMenu_Subkey `protobuf:"bytes,3,rep,name=subkeys" json:"subkeys,omitempty"`
}

func (m *CCSUsrMsg_VGUIMenu) Reset()         { *m = CCSUsrMsg_VGUIMenu{} }
func (m *CCSUsrMsg_VGUIMenu) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VGUIMenu) ProtoMessage()    {}
func (*CCSUsrMsg_VGUIMenu) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{0}
}
func (m *CCSUsrMsg_VGUIMenu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_VGUIMenu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_VGUIMenu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_VGUIMenu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_VGUIMenu.Merge(m, src)
}
func (m *CCSUsrMsg_VGUIMenu) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_VGUIMenu) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_VGUIMenu.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_VGUIMenu proto.InternalMessageInfo

func (m *CCSUsrMsg_VGUIMenu) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CCSUsrMsg_VGUIMenu) GetShow() bool {
	if m != nil {
		return m.Show
	}
	return false
}

func (m *CCSUsrMsg_VGUIMenu) GetSubkeys() []*CCSUsrMsg_VGUIMenu_Subkey {
	if m != nil {
		return m.Subkeys
	}
	return nil
}

type CCSUsrMsg_VGUIMenu_Subkey struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Str  string `protobuf:"bytes,2,opt,name=str" json:"str"`
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) Reset()         { *m = CCSUsrMsg_VGUIMenu_Subkey{} }
func (m *CCSUsrMsg_VGUIMenu_Subkey) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VGUIMenu_Subkey) ProtoMessage()    {}
func (*CCSUsrMsg_VGUIMenu_Subkey) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{0, 0}
}
func (m *CCSUsrMsg_VGUIMenu_Subkey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_VGUIMenu_Subkey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_VGUIMenu_Subkey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_VGUIMenu_Subkey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_VGUIMenu_Subkey.Merge(m, src)
}
func (m *CCSUsrMsg_VGUIMenu_Subkey) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_VGUIMenu_Subkey) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_VGUIMenu_Subkey.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_VGUIMenu_Subkey proto.InternalMessageInfo

func (m *CCSUsrMsg_VGUIMenu_Subkey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type CCSUsrMsg_Geiger struct {
	Range int32 `protobuf:"varint,1,opt,name=range" json:"range"`
}

func (m *CCSUsrMsg_Geiger) Reset()         { *m = CCSUsrMsg_Geiger{} }
func (m *CCSUsrMsg_Geiger) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Geiger) ProtoMessage()    {}
func (*CCSUsrMsg_Geiger) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{1}
}
func (m *CCSUsrMsg_Geiger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_Geiger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_Geiger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_Geiger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_Geiger.Merge(m, src)
}
func (m *CCSUsrMsg_Geiger) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_Geiger) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_Geiger.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_Geiger proto.InternalMessageInfo

func (m *CCSUsrMsg_Geiger) GetRange() int32 {
	if m != nil {
		return m.Range
	}
	return 0
}

type CCSUsrMsg_Train struct {
	Train int32 `protobuf:"varint,1,opt,name=train" json:"train"`
}

func (m *CCSUsrMsg_Train) Reset()         { *m = CCSUsrMsg_Train{} }
func (m *CCSUsrMsg_Train) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Train) ProtoMessage()    {}
func (*CCSUsrMsg_Train) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{2}
}
func (m *CCSUsrMsg_Train) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_Train) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_Train.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_Train) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_Train.Merge(m, src)
}
func (m *CCSUsrMsg_Train) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_Train) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_Train.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_Train proto.InternalMessageInfo

func (m *CCSUsrMsg_Train) GetTrain() int32 {
	if m != nil {
		return m.Train
	}
	return 0
}

type CCSUsrMsg_HudText struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text"`
}

func (m *CCSUsrMsg_HudText) Reset()         { *m = CCSUsrMsg_HudText{} }
func (m *CCSUsrMsg_HudText) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_HudText) ProtoMessage()    {}
func (*CCSUsrMsg_HudText) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{3}
}
func (m *CCSUsrMsg_HudText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_HudText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_HudText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_HudText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_HudText.Merge(m, src)
}
func (m *CCSUsrMsg_HudText) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_HudText) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_HudText.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_HudText proto.InternalMessageInfo

func (m *CCSUsrMsg_HudText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CCSUsrMsg_SayText struct {
	EntIdx      int32  `protobuf:"varint,1,opt,name=ent_idx,json=entIdx" json:"ent_idx"`
	Text        string `protobuf:"bytes,2,opt,name=text" json:"text"`
	Chat        bool   `protobuf:"varint,3,opt,name=chat" json:"chat"`
	Textallchat bool   `protobuf:"varint,4,opt,name=textallchat" json:"textallchat"`
}

func (m *CCSUsrMsg_SayText) Reset()         { *m = CCSUsrMsg_SayText{} }
func (m *CCSUsrMsg_SayText) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SayText) ProtoMessage()    {}
func (*CCSUsrMsg_SayText) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{4}
}
func (m *CCSUsrMsg_SayText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_SayText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_SayText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_SayText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_SayText.Merge(m, src)
}
func (m *CCSUsrMsg_SayText) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_SayText) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_SayText.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_SayText proto.InternalMessageInfo

func (m *CCSUsrMsg_SayText) GetEntIdx() int32 {
	if m != nil {
		return m.EntIdx
	}
	return 0
}

func (m *CCSUsrMsg_SayText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CCSUsrMsg_SayText) GetChat() bool {
	if m != nil {
		return m.Chat
	}
	return false
}

func (m *CCSUsrMsg_SayText) GetTextallchat() bool {
	if m != nil {
		return m.Textallchat
	}
	return false
}

type CCSUsrMsg_SayText2 struct {
	EntIdx      int32    `protobuf:"varint,1,opt,name=ent_idx,json=entIdx" json:"ent_idx"`
	Chat        bool     `protobuf:"varint,2,opt,name=chat" json:"chat"`
	MsgName     string   `protobuf:"bytes,3,opt,name=msg_name,json=msgName" json:"msg_name"`
	Params      []string `protobuf:"bytes,4,rep,name=params" json:"params,omitempty"`
	Textallchat bool     `protobuf:"varint,5,opt,name=textallchat" json:"textallchat"`
}

func (m *CCSUsrMsg_SayText2) Reset()         { *m = CCSUsrMsg_SayText2{} }
func (m *CCSUsrMsg_SayText2) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SayText2) ProtoMessage()    {}
func (*CCSUsrMsg_SayText2) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{5}
}
func (m *CCSUsrMsg_SayText2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_SayText2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_SayText2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_SayText2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_SayText2.Merge(m, src)
}
func (m *CCSUsrMsg_SayText2) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_SayText2) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_SayText2.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_SayText2 proto.InternalMessageInfo

func (m *CCSUsrMsg_SayText2) GetEntIdx() int32 {
	if m != nil {
		return m.EntIdx
	}
	return 0
}

func (m *CCSUsrMsg_SayText2) GetChat() bool {
	if m != nil {
		return m.Chat
	}
	return false
}

func (m *CCSUsrMsg_SayText2) GetMsgName() string {
	if m != nil {
		return m.MsgName
	}
	return ""
}

func (m *CCSUsrMsg_SayText2) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *CCSUsrMsg_SayText2) GetTextallchat() bool {
	if m != nil {
		return m.Textallchat
	}
	return false
}

type CCSUsrMsg_TextMsg struct {
	MsgDst int32    `protobuf:"varint,1,opt,name=msg_dst,json=msgDst" json:"msg_dst"`
	Params []string `protobuf:"bytes,3,rep,name=params" json:"params,omitempty"`
}

func (m *CCSUsrMsg_TextMsg) Reset()         { *m = CCSUsrMsg_TextMsg{} }
func (m *CCSUsrMsg_TextMsg) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_TextMsg) ProtoMessage()    {}
func (*CCSUsrMsg_TextMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{6}
}
func (m *CCSUsrMsg_TextMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_TextMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_TextMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_TextMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_TextMsg.Merge(m, src)
}
func (m *CCSUsrMsg_TextMsg) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_TextMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_TextMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_TextMsg proto.InternalMessageInfo

func (m *CCSUsrMsg_TextMsg) GetMsgDst() int32 {
	if m != nil {
		return m.MsgDst
	}
	return 0
}

func (m *CCSUsrMsg_TextMsg) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

type CCSUsrMsg_HudMsg struct {
	Channel     int32         `protobuf:"varint,1,opt,name=channel" json:"channel"`
	Pos         *CMsgVector2D `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	Clr1        *CMsgRGBA     `protobuf:"bytes,3,opt,name=clr1" json:"clr1,omitempty"`
	Clr2        *CMsgRGBA     `protobuf:"bytes,4,opt,name=clr2" json:"clr2,omitempty"`
	Effect      int32         `protobuf:"varint,5,opt,name=effect" json:"effect"`
	FadeInTime  float32       `protobuf:"fixed32,6,opt,name=fade_in_time,json=fadeInTime" json:"fade_in_time"`
	FadeOutTime float32       `protobuf:"fixed32,7,opt,name=fade_out_time,json=fadeOutTime" json:"fade_out_time"`
	HoldTime    float32       `protobuf:"fixed32,9,opt,name=hold_time,json=holdTime" json:"hold_time"`
	FxTime      float32       `protobuf:"fixed32,10,opt,name=fx_time,json=fxTime" json:"fx_time"`
	Text        string        `protobuf:"bytes,11,opt,name=text" json:"text"`
}

func (m *CCSUsrMsg_HudMsg) Reset()         { *m = CCSUsrMsg_HudMsg{} }
func (m *CCSUsrMsg_HudMsg) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_HudMsg) ProtoMessage()    {}
func (*CCSUsrMsg_HudMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{7}
}
func (m *CCSUsrMsg_HudMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_HudMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_HudMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_HudMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_HudMsg.Merge(m, src)
}
func (m *CCSUsrMsg_HudMsg) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_HudMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_HudMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_HudMsg proto.InternalMessageInfo

func (m *CCSUsrMsg_HudMsg) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetPos() *CMsgVector2D {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CCSUsrMsg_HudMsg) GetClr1() *CMsgRGBA {
	if m != nil {
		return m.Clr1
	}
	return nil
}

func (m *CCSUsrMsg_HudMsg) GetClr2() *CMsgRGBA {
	if m != nil {
		return m.Clr2
	}
	return nil
}

func (m *CCSUsrMsg_HudMsg) GetEffect() int32 {
	if m != nil {
		return m.Effect
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetFadeInTime() float32 {
	if m != nil {
		return m.FadeInTime
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetFadeOutTime() float32 {
	if m != nil {
		return m.FadeOutTime
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetHoldTime() float32 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetFxTime() float32 {
	if m != nil {
		return m.FxTime
	}
	return 0
}

func (m *CCSUsrMsg_HudMsg) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CCSUsrMsg_Shake struct {
	Command        int32   `protobuf:"varint,1,opt,name=command" json:"command"`
	LocalAmplitude float32 `protobuf:"fixed32,2,opt,name=local_amplitude,json=localAmplitude" json:"local_amplitude"`
	Frequency      float32 `protobuf:"fixed32,3,opt,name=frequency" json:"frequency"`
	Duration       float32 `protobuf:"fixed32,4,opt,name=duration" json:"duration"`
}

func (m *CCSUsrMsg_Shake) Reset()         { *m = CCSUsrMsg_Shake{} }
func (m *CCSUsrMsg_Shake) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Shake) ProtoMessage()    {}
func (*CCSUsrMsg_Shake) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{8}
}
func (m *CCSUsrMsg_Shake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_Shake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_Shake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_Shake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_Shake.Merge(m, src)
}
func (m *CCSUsrMsg_Shake) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_Shake) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_Shake.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_Shake proto.InternalMessageInfo

func (m *CCSUsrMsg_Shake) GetCommand() int32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *CCSUsrMsg_Shake) GetLocalAmplitude() float32 {
	if m != nil {
		return m.LocalAmplitude
	}
	return 0
}

func (m *CCSUsrMsg_Shake) GetFrequency() float32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *CCSUsrMsg_Shake) GetDuration() float32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type CCSUsrMsg_Fade struct {
	Duration int32     `protobuf:"varint,1,opt,name=duration" json:"duration"`
	HoldTime int32     `protobuf:"varint,2,opt,name=hold_time,json=holdTime" json:"hold_time"`
	Flags    int32     `protobuf:"varint,3,opt,name=flags" json:"flags"`
	Clr      *CMsgRGBA `protobuf:"bytes,4,opt,name=clr" json:"clr,omitempty"`
}

func (m *CCSUsrMsg_Fade) Reset()         { *m = CCSUsrMsg_Fade{} }
func (m *CCSUsrMsg_Fade) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Fade) ProtoMessage()    {}
func (*CCSUsrMsg_Fade) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{9}
}
func (m *CCSUsrMsg_Fade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_Fade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_Fade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_Fade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_Fade.Merge(m, src)
}
func (m *CCSUsrMsg_Fade) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_Fade) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_Fade.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_Fade proto.InternalMessageInfo

func (m *CCSUsrMsg_Fade) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CCSUsrMsg_Fade) GetHoldTime() int32 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *CCSUsrMsg_Fade) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *CCSUsrMsg_Fade) GetClr() *CMsgRGBA {
	if m != nil {
		return m.Clr
	}
	return nil
}

type CCSUsrMsg_Rumble struct {
	Index int32 `protobuf:"varint,1,opt,name=index" json:"index"`
	Data  int32 `protobuf:"varint,2,opt,name=data" json:"data"`
	Flags int32 `protobuf:"varint,3,opt,name=flags" json:"flags"`
}

func (m *CCSUsrMsg_Rumble) Reset()         { *m = CCSUsrMsg_Rumble{} }
func (m *CCSUsrMsg_Rumble) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Rumble) ProtoMessage()    {}
func (*CCSUsrMsg_Rumble) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{10}
}
func (m *CCSUsrMsg_Rumble) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_Rumble) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_Rumble.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_Rumble) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_Rumble.Merge(m, src)
}
func (m *CCSUsrMsg_Rumble) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_Rumble) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_Rumble.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_Rumble proto.InternalMessageInfo

func (m *CCSUsrMsg_Rumble) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CCSUsrMsg_Rumble) GetData() int32 {
	if m != nil {
		return m.Data
	}
	return 0
}

func (m *CCSUsrMsg_Rumble) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type CCSUsrMsg_CloseCaption struct {
	Hash       uint32 `protobuf:"varint,1,opt,name=hash" json:"hash"`
	Duration   int32  `protobuf:"varint,2,opt,name=duration" json:"duration"`
	FromPlayer bool   `protobuf:"varint,3,opt,name=from_player,json=fromPlayer" json:"from_player"`
	Cctoken    string `protobuf:"bytes,4,opt,name=cctoken" json:"cctoken"`
}

func (m *CCSUsrMsg_CloseCaption) Reset()         { *m = CCSUsrMsg_CloseCaption{} }
func (m *CCSUsrMsg_CloseCaption) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_CloseCaption) ProtoMessage()    {}
func (*CCSUsrMsg_CloseCaption) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{11}
}
func (m *CCSUsrMsg_CloseCaption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_CloseCaption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_CloseCaption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_CloseCaption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_CloseCaption.Merge(m, src)
}
func (m *CCSUsrMsg_CloseCaption) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_CloseCaption) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_CloseCaption.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_CloseCaption proto.InternalMessageInfo

func (m *CCSUsrMsg_CloseCaption) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *CCSUsrMsg_CloseCaption) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CCSUsrMsg_CloseCaption) GetFromPlayer() bool {
	if m != nil {
		return m.FromPlayer
	}
	return false
}

func (m *CCSUsrMsg_CloseCaption) GetCctoken() string {
	if m != nil {
		return m.Cctoken
	}
	return ""
}

type CCSUsrMsg_CloseCaptionDirect struct {
	Hash       uint32 `protobuf:"varint,1,opt,name=hash" json:"hash"`
	Duration   int32  `protobuf:"varint,2,opt,name=duration" json:"duration"`
	FromPlayer bool   `protobuf:"varint,3,opt,name=from_player,json=fromPlayer" json:"from_player"`
}

func (m *CCSUsrMsg_CloseCaptionDirect) Reset()         { *m = CCSUsrMsg_CloseCaptionDirect{} }
func (m *CCSUsrMsg_CloseCaptionDirect) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_CloseCaptionDirect) ProtoMessage()    {}
func (*CCSUsrMsg_CloseCaptionDirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{12}
}
func (m *CCSUsrMsg_CloseCaptionDirect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_CloseCaptionDirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_CloseCaptionDirect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_CloseCaptionDirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_CloseCaptionDirect.Merge(m, src)
}
func (m *CCSUsrMsg_CloseCaptionDirect) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_CloseCaptionDirect) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_CloseCaptionDirect.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_CloseCaptionDirect proto.InternalMessageInfo

func (m *CCSUsrMsg_CloseCaptionDirect) GetHash() uint32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *CCSUsrMsg_CloseCaptionDirect) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CCSUsrMsg_CloseCaptionDirect) GetFromPlayer() bool {
	if m != nil {
		return m.FromPlayer
	}
	return false
}

type CCSUsrMsg_SendAudio struct {
	RadioSound string `protobuf:"bytes,1,opt,name=radio_sound,json=radioSound" json:"radio_sound"`
}

func (m *CCSUsrMsg_SendAudio) Reset()         { *m = CCSUsrMsg_SendAudio{} }
func (m *CCSUsrMsg_SendAudio) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SendAudio) ProtoMessage()    {}
func (*CCSUsrMsg_SendAudio) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{13}
}
func (m *CCSUsrMsg_SendAudio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_SendAudio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_SendAudio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_SendAudio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_SendAudio.Merge(m, src)
}
func (m *CCSUsrMsg_SendAudio) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_SendAudio) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_SendAudio.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_SendAudio proto.InternalMessageInfo

func (m *CCSUsrMsg_SendAudio) GetRadioSound() string {
	if m != nil {
		return m.RadioSound
	}
	return ""
}

type CCSUsrMsg_RawAudio struct {
	Pitch         int32   `protobuf:"varint,1,opt,name=pitch" json:"pitch"`
	Entidx        int32   `protobuf:"varint,2,opt,name=entidx" json:"entidx"`
	Duration      float32 `protobuf:"fixed32,3,opt,name=duration" json:"duration"`
	VoiceFilename string  `protobuf:"bytes,4,opt,name=voice_filename,json=voiceFilename" json:"voice_filename"`
}

func (m *CCSUsrMsg_RawAudio) Reset()         { *m = CCSUsrMsg_RawAudio{} }
func (m *CCSUsrMsg_RawAudio) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_RawAudio) ProtoMessage()    {}
func (*CCSUsrMsg_RawAudio) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{14}
}
func (m *CCSUsrMsg_RawAudio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RawAudio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RawAudio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RawAudio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RawAudio.Merge(m, src)
}
func (m *CCSUsrMsg_RawAudio) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RawAudio) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RawAudio.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RawAudio proto.InternalMessageInfo

func (m *CCSUsrMsg_RawAudio) GetPitch() int32 {
	if m != nil {
		return m.Pitch
	}
	return 0
}

func (m *CCSUsrMsg_RawAudio) GetEntidx() int32 {
	if m != nil {
		return m.Entidx
	}
	return 0
}

func (m *CCSUsrMsg_RawAudio) GetDuration() float32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CCSUsrMsg_RawAudio) GetVoiceFilename() string {
	if m != nil {
		return m.VoiceFilename
	}
	return ""
}

type CCSUsrMsg_VoiceMask struct {
	PlayerMasks     []*CCSUsrMsg_VoiceMask_PlayerMask `protobuf:"bytes,1,rep,name=player_masks,json=playerMasks" json:"player_masks,omitempty"`
	PlayerModEnable bool                              `protobuf:"varint,2,opt,name=player_mod_enable,json=playerModEnable" json:"player_mod_enable"`
}

func (m *CCSUsrMsg_VoiceMask) Reset()         { *m = CCSUsrMsg_VoiceMask{} }
func (m *CCSUsrMsg_VoiceMask) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VoiceMask) ProtoMessage()    {}
func (*CCSUsrMsg_VoiceMask) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{15}
}
func (m *CCSUsrMsg_VoiceMask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_VoiceMask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_VoiceMask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_VoiceMask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_VoiceMask.Merge(m, src)
}
func (m *CCSUsrMsg_VoiceMask) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_VoiceMask) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_VoiceMask.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_VoiceMask proto.InternalMessageInfo

func (m *CCSUsrMsg_VoiceMask) GetPlayerMasks() []*CCSUsrMsg_VoiceMask_PlayerMask {
	if m != nil {
		return m.PlayerMasks
	}
	return nil
}

func (m *CCSUsrMsg_VoiceMask) GetPlayerModEnable() bool {
	if m != nil {
		return m.PlayerModEnable
	}
	return false
}

type CCSUsrMsg_VoiceMask_PlayerMask struct {
	GameRulesMask int32 `protobuf:"varint,1,opt,name=game_rules_mask,json=gameRulesMask" json:"game_rules_mask"`
	BanMasks      int32 `protobuf:"varint,2,opt,name=ban_masks,json=banMasks" json:"ban_masks"`
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) Reset()         { *m = CCSUsrMsg_VoiceMask_PlayerMask{} }
func (m *CCSUsrMsg_VoiceMask_PlayerMask) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VoiceMask_PlayerMask) ProtoMessage()    {}
func (*CCSUsrMsg_VoiceMask_PlayerMask) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{15, 0}
}
func (m *CCSUsrMsg_VoiceMask_PlayerMask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_VoiceMask_PlayerMask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_VoiceMask_PlayerMask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_VoiceMask_PlayerMask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_VoiceMask_PlayerMask.Merge(m, src)
}
func (m *CCSUsrMsg_VoiceMask_PlayerMask) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_VoiceMask_PlayerMask) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_VoiceMask_PlayerMask.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_VoiceMask_PlayerMask proto.InternalMessageInfo

func (m *CCSUsrMsg_VoiceMask_PlayerMask) GetGameRulesMask() int32 {
	if m != nil {
		return m.GameRulesMask
	}
	return 0
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) GetBanMasks() int32 {
	if m != nil {
		return m.BanMasks
	}
	return 0
}

type CCSUsrMsg_Damage struct {
	Amount            int32       `protobuf:"varint,1,opt,name=amount" json:"amount"`
	InflictorWorldPos *CMsgVector `protobuf:"bytes,2,opt,name=inflictor_world_pos,json=inflictorWorldPos" json:"inflictor_world_pos,omitempty"`
	VictimEntindex    int32       `protobuf:"varint,3,opt,name=victim_entindex,json=victimEntindex" json:"victim_entindex"`
}

func (m *CCSUsrMsg_Damage) Reset()         { *m = CCSUsrMsg_Damage{} }
func (m *CCSUsrMsg_Damage) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_Damage) ProtoMessage()    {}
func (*CCSUsrMsg_Damage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{16}
}
func (m *CCSUsrMsg_Damage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_Damage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_Damage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_Damage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_Damage.Merge(m, src)
}
func (m *CCSUsrMsg_Damage) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_Damage) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_Damage.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_Damage proto.InternalMessageInfo

func (m *CCSUsrMsg_Damage) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CCSUsrMsg_Damage) GetInflictorWorldPos() *CMsgVector {
	if m != nil {
		return m.InflictorWorldPos
	}
	return nil
}

func (m *CCSUsrMsg_Damage) GetVictimEntindex() int32 {
	if m != nil {
		return m.VictimEntindex
	}
	return 0
}

type CCSUsrMsg_RadioText struct {
	MsgDst  int32    `protobuf:"varint,1,opt,name=msg_dst,json=msgDst" json:"msg_dst"`
	Client  int32    `protobuf:"varint,2,opt,name=client" json:"client"`
	MsgName string   `protobuf:"bytes,3,opt,name=msg_name,json=msgName" json:"msg_name"`
	Params  []string `protobuf:"bytes,4,rep,name=params" json:"params,omitempty"`
}

func (m *CCSUsrMsg_RadioText) Reset()         { *m = CCSUsrMsg_RadioText{} }
func (m *CCSUsrMsg_RadioText) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_RadioText) ProtoMessage()    {}
func (*CCSUsrMsg_RadioText) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{17}
}
func (m *CCSUsrMsg_RadioText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RadioText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RadioText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RadioText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RadioText.Merge(m, src)
}
func (m *CCSUsrMsg_RadioText) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RadioText) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RadioText.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RadioText proto.InternalMessageInfo

func (m *CCSUsrMsg_RadioText) GetMsgDst() int32 {
	if m != nil {
		return m.MsgDst
	}
	return 0
}

func (m *CCSUsrMsg_RadioText) GetClient() int32 {
	if m != nil {
		return m.Client
	}
	return 0
}

func (m *CCSUsrMsg_RadioText) GetMsgName() string {
	if m != nil {
		return m.MsgName
	}
	return ""
}

func (m *CCSUsrMsg_RadioText) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

type CCSUsrMsg_HintText struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text"`
}

func (m *CCSUsrMsg_HintText) Reset()         { *m = CCSUsrMsg_HintText{} }
func (m *CCSUsrMsg_HintText) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_HintText) ProtoMessage()    {}
func (*CCSUsrMsg_HintText) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{18}
}
func (m *CCSUsrMsg_HintText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_HintText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_HintText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_HintText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_HintText.Merge(m, src)
}
func (m *CCSUsrMsg_HintText) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_HintText) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_HintText.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_HintText proto.InternalMessageInfo

func (m *CCSUsrMsg_HintText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CCSUsrMsg_KeyHintText struct {
	Hints []string `protobuf:"bytes,1,rep,name=hints" json:"hints,omitempty"`
}

func (m *CCSUsrMsg_KeyHintText) Reset()         { *m = CCSUsrMsg_KeyHintText{} }
func (m *CCSUsrMsg_KeyHintText) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_KeyHintText) ProtoMessage()    {}
func (*CCSUsrMsg_KeyHintText) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{19}
}
func (m *CCSUsrMsg_KeyHintText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_KeyHintText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_KeyHintText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_KeyHintText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_KeyHintText.Merge(m, src)
}
func (m *CCSUsrMsg_KeyHintText) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_KeyHintText) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_KeyHintText.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_KeyHintText proto.InternalMessageInfo

func (m *CCSUsrMsg_KeyHintText) GetHints() []string {
	if m != nil {
		return m.Hints
	}
	return nil
}

type CCSUsrMsg_ProcessSpottedEntityUpdate struct {
	NewUpdate     bool                                                        `protobuf:"varint,1,opt,name=new_update,json=newUpdate" json:"new_update"`
	EntityUpdates []*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate `protobuf:"bytes,2,rep,name=entity_updates,json=entityUpdates" json:"entity_updates,omitempty"`
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) Reset()         { *m = CCSUsrMsg_ProcessSpottedEntityUpdate{} }
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ProcessSpottedEntityUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_ProcessSpottedEntityUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{20}
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ProcessSpottedEntityUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ProcessSpottedEntityUpdate.Merge(m, src)
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ProcessSpottedEntityUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ProcessSpottedEntityUpdate proto.InternalMessageInfo

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) GetNewUpdate() bool {
	if m != nil {
		return m.NewUpdate
	}
	return false
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) GetEntityUpdates() []*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate {
	if m != nil {
		return m.EntityUpdates
	}
	return nil
}

type CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate struct {
	EntityIdx        int32 `protobuf:"varint,1,opt,name=entity_idx,json=entityIdx" json:"entity_idx"`
	ClassId          int32 `protobuf:"varint,2,opt,name=class_id,json=classId" json:"class_id"`
	OriginX          int32 `protobuf:"varint,3,opt,name=origin_x,json=originX" json:"origin_x"`
	OriginY          int32 `protobuf:"varint,4,opt,name=origin_y,json=originY" json:"origin_y"`
	OriginZ          int32 `protobuf:"varint,5,opt,name=origin_z,json=originZ" json:"origin_z"`
	AngleY           int32 `protobuf:"varint,6,opt,name=angle_y,json=angleY" json:"angle_y"`
	Defuser          bool  `protobuf:"varint,7,opt,name=defuser" json:"defuser"`
	PlayerHasDefuser bool  `protobuf:"varint,8,opt,name=player_has_defuser,json=playerHasDefuser" json:"player_has_defuser"`
	PlayerHasC4      bool  `protobuf:"varint,9,opt,name=player_has_c4,json=playerHasC4" json:"player_has_c4"`
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) Reset() {
	*m = CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate{}
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) ProtoMessage() {}
func (*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{20, 0}
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate.Merge(m, src)
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate proto.InternalMessageInfo

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetEntityIdx() int32 {
	if m != nil {
		return m.EntityIdx
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetOriginX() int32 {
	if m != nil {
		return m.OriginX
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetOriginY() int32 {
	if m != nil {
		return m.OriginY
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetOriginZ() int32 {
	if m != nil {
		return m.OriginZ
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetAngleY() int32 {
	if m != nil {
		return m.AngleY
	}
	return 0
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetDefuser() bool {
	if m != nil {
		return m.Defuser
	}
	return false
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetPlayerHasDefuser() bool {
	if m != nil {
		return m.PlayerHasDefuser
	}
	return false
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) GetPlayerHasC4() bool {
	if m != nil {
		return m.PlayerHasC4
	}
	return false
}

type CCSUsrMsg_SendPlayerItemDrops struct {
	EntityUpdates []*CEconItemPreviewDataBlock `protobuf:"bytes,1,rep,name=entity_updates,json=entityUpdates" json:"entity_updates,omitempty"`
}

func (m *CCSUsrMsg_SendPlayerItemDrops) Reset()         { *m = CCSUsrMsg_SendPlayerItemDrops{} }
func (m *CCSUsrMsg_SendPlayerItemDrops) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SendPlayerItemDrops) ProtoMessage()    {}
func (*CCSUsrMsg_SendPlayerItemDrops) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{21}
}
func (m *CCSUsrMsg_SendPlayerItemDrops) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_SendPlayerItemDrops) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_SendPlayerItemDrops.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_SendPlayerItemDrops) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_SendPlayerItemDrops.Merge(m, src)
}
func (m *CCSUsrMsg_SendPlayerItemDrops) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_SendPlayerItemDrops) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_SendPlayerItemDrops.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_SendPlayerItemDrops proto.InternalMessageInfo

func (m *CCSUsrMsg_SendPlayerItemDrops) GetEntityUpdates() []*CEconItemPreviewDataBlock {
	if m != nil {
		return m.EntityUpdates
	}
	return nil
}

type CCSUsrMsg_SendPlayerItemFound struct {
	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,1,opt,name=iteminfo" json:"iteminfo,omitempty"`
	Entindex int32                      `protobuf:"varint,2,opt,name=entindex" json:"entindex"`
}

func (m *CCSUsrMsg_SendPlayerItemFound) Reset()         { *m = CCSUsrMsg_SendPlayerItemFound{} }
func (m *CCSUsrMsg_SendPlayerItemFound) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SendPlayerItemFound) ProtoMessage()    {}
func (*CCSUsrMsg_SendPlayerItemFound) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{22}
}
func (m *CCSUsrMsg_SendPlayerItemFound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_SendPlayerItemFound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_SendPlayerItemFound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_SendPlayerItemFound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_SendPlayerItemFound.Merge(m, src)
}
func (m *CCSUsrMsg_SendPlayerItemFound) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_SendPlayerItemFound) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_SendPlayerItemFound.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_SendPlayerItemFound proto.InternalMessageInfo

func (m *CCSUsrMsg_SendPlayerItemFound) GetIteminfo() *CEconItemPreviewDataBlock {
	if m != nil {
		return m.Iteminfo
	}
	return nil
}

func (m *CCSUsrMsg_SendPlayerItemFound) GetEntindex() int32 {
	if m != nil {
		return m.Entindex
	}
	return 0
}

type CCSUsrMsg_RetakeUpdatePlayerCardList struct {
	DefuseKit            bool    `protobuf:"varint,1,opt,name=defuse_kit,json=defuseKit" json:"defuse_kit"`
	RoundIdx             []int32 `protobuf:"varint,2,rep,name=round_idx,json=roundIdx" json:"round_idx,omitempty"`
	LoadoutIdx           []int32 `protobuf:"varint,3,rep,name=loadout_idx,json=loadoutIdx" json:"loadout_idx,omitempty"`
	CardIdx              []int32 `protobuf:"varint,4,rep,name=card_idx,json=cardIdx" json:"card_idx,omitempty"`
	TypeIdx              []int32 `protobuf:"varint,5,rep,name=type_idx,json=typeIdx" json:"type_idx,omitempty"`
	MvpBoostRoundIdx     int32   `protobuf:"varint,6,opt,name=mvp_boost_round_idx,json=mvpBoostRoundIdx" json:"mvp_boost_round_idx"`
	MvpBoostLoadoutIdx   int32   `protobuf:"varint,7,opt,name=mvp_boost_loadout_idx,json=mvpBoostLoadoutIdx" json:"mvp_boost_loadout_idx"`
	MvpBoostCardIdx      int32   `protobuf:"varint,8,opt,name=mvp_boost_card_idx,json=mvpBoostCardIdx" json:"mvp_boost_card_idx"`
	MvpBoostExtraUtility int32   `protobuf:"varint,9,opt,name=mvp_boost_extra_utility,json=mvpBoostExtraUtility" json:"mvp_boost_extra_utility"`
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) Reset()         { *m = CCSUsrMsg_RetakeUpdatePlayerCardList{} }
func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_RetakeUpdatePlayerCardList) ProtoMessage()    {}
func (*CCSUsrMsg_RetakeUpdatePlayerCardList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{23}
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RetakeUpdatePlayerCardList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RetakeUpdatePlayerCardList.Merge(m, src)
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RetakeUpdatePlayerCardList.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RetakeUpdatePlayerCardList proto.InternalMessageInfo

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) GetDefuseKit() bool {
	if m != nil {
		return m.DefuseKit
	}
	return false
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) GetRoundIdx() []int32 {
	if m != nil {
		return m.RoundIdx
	}
	return nil
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) GetLoadoutIdx() []int32 {
	if m != nil {
		return m.LoadoutIdx
	}
	return nil
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) GetCardIdx() []int32 {
	if m != nil {
		return m.CardIdx
	}
	return nil
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) GetTypeIdx() []int32 {
	if m != nil {
		return m.TypeIdx
	}
	return nil
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) GetMvpBoostRoundIdx() int32 {
	if m != nil {
		return m.MvpBoostRoundIdx
	}
	return 0
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) GetMvpBoostLoadoutIdx() int32 {
	if m != nil {
		return m.MvpBoostLoadoutIdx
	}
	return 0
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) GetMvpBoostCardIdx() int32 {
	if m != nil {
		return m.MvpBoostCardIdx
	}
	return 0
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) GetMvpBoostExtraUtility() int32 {
	if m != nil {
		return m.MvpBoostExtraUtility
	}
	return 0
}

type CCSUsrMsg_RetakeUpdatePlayerCardSelection struct {
	RoundIdx   int32 `protobuf:"varint,1,opt,name=round_idx,json=roundIdx" json:"round_idx"`
	LoadoutIdx int32 `protobuf:"varint,2,opt,name=loadout_idx,json=loadoutIdx" json:"loadout_idx"`
	CardIdx    int32 `protobuf:"varint,3,opt,name=card_idx,json=cardIdx" json:"card_idx"`
	TypeIdx    int32 `protobuf:"varint,4,opt,name=type_idx,json=typeIdx" json:"type_idx"`
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) Reset() {
	*m = CCSUsrMsg_RetakeUpdatePlayerCardSelection{}
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) String() string {
	return proto.CompactTextString(m)
}
func (*CCSUsrMsg_RetakeUpdatePlayerCardSelection) ProtoMessage() {}
func (*CCSUsrMsg_RetakeUpdatePlayerCardSelection) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{24}
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RetakeUpdatePlayerCardSelection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RetakeUpdatePlayerCardSelection.Merge(m, src)
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RetakeUpdatePlayerCardSelection.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RetakeUpdatePlayerCardSelection proto.InternalMessageInfo

func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) GetRoundIdx() int32 {
	if m != nil {
		return m.RoundIdx
	}
	return 0
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) GetLoadoutIdx() int32 {
	if m != nil {
		return m.LoadoutIdx
	}
	return 0
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) GetCardIdx() int32 {
	if m != nil {
		return m.CardIdx
	}
	return 0
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) GetTypeIdx() int32 {
	if m != nil {
		return m.TypeIdx
	}
	return 0
}

type CCSUsrMsg_ReloadEffect struct {
	Entidx  int32   `protobuf:"varint,1,opt,name=entidx" json:"entidx"`
	Actanim int32   `protobuf:"varint,2,opt,name=actanim" json:"actanim"`
	OriginX float32 `protobuf:"fixed32,3,opt,name=origin_x,json=originX" json:"origin_x"`
	OriginY float32 `protobuf:"fixed32,4,opt,name=origin_y,json=originY" json:"origin_y"`
	OriginZ float32 `protobuf:"fixed32,5,opt,name=origin_z,json=originZ" json:"origin_z"`
}

func (m *CCSUsrMsg_ReloadEffect) Reset()         { *m = CCSUsrMsg_ReloadEffect{} }
func (m *CCSUsrMsg_ReloadEffect) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ReloadEffect) ProtoMessage()    {}
func (*CCSUsrMsg_ReloadEffect) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{25}
}
func (m *CCSUsrMsg_ReloadEffect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ReloadEffect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ReloadEffect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ReloadEffect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ReloadEffect.Merge(m, src)
}
func (m *CCSUsrMsg_ReloadEffect) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ReloadEffect) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ReloadEffect.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ReloadEffect proto.InternalMessageInfo

func (m *CCSUsrMsg_ReloadEffect) GetEntidx() int32 {
	if m != nil {
		return m.Entidx
	}
	return 0
}

func (m *CCSUsrMsg_ReloadEffect) GetActanim() int32 {
	if m != nil {
		return m.Actanim
	}
	return 0
}

func (m *CCSUsrMsg_ReloadEffect) GetOriginX() float32 {
	if m != nil {
		return m.OriginX
	}
	return 0
}

func (m *CCSUsrMsg_ReloadEffect) GetOriginY() float32 {
	if m != nil {
		return m.OriginY
	}
	return 0
}

func (m *CCSUsrMsg_ReloadEffect) GetOriginZ() float32 {
	if m != nil {
		return m.OriginZ
	}
	return 0
}

type CCSUsrMsg_WeaponSound struct {
	Entidx    int32   `protobuf:"varint,1,opt,name=entidx" json:"entidx"`
	OriginX   float32 `protobuf:"fixed32,2,opt,name=origin_x,json=originX" json:"origin_x"`
	OriginY   float32 `protobuf:"fixed32,3,opt,name=origin_y,json=originY" json:"origin_y"`
	OriginZ   float32 `protobuf:"fixed32,4,opt,name=origin_z,json=originZ" json:"origin_z"`
	Sound     string  `protobuf:"bytes,5,opt,name=sound" json:"sound"`
	Timestamp float32 `protobuf:"fixed32,6,opt,name=timestamp" json:"timestamp"`
}

func (m *CCSUsrMsg_WeaponSound) Reset()         { *m = CCSUsrMsg_WeaponSound{} }
func (m *CCSUsrMsg_WeaponSound) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_WeaponSound) ProtoMessage()    {}
func (*CCSUsrMsg_WeaponSound) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{26}
}
func (m *CCSUsrMsg_WeaponSound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_WeaponSound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_WeaponSound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_WeaponSound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_WeaponSound.Merge(m, src)
}
func (m *CCSUsrMsg_WeaponSound) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_WeaponSound) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_WeaponSound.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_WeaponSound proto.InternalMessageInfo

func (m *CCSUsrMsg_WeaponSound) GetEntidx() int32 {
	if m != nil {
		return m.Entidx
	}
	return 0
}

func (m *CCSUsrMsg_WeaponSound) GetOriginX() float32 {
	if m != nil {
		return m.OriginX
	}
	return 0
}

func (m *CCSUsrMsg_WeaponSound) GetOriginY() float32 {
	if m != nil {
		return m.OriginY
	}
	return 0
}

func (m *CCSUsrMsg_WeaponSound) GetOriginZ() float32 {
	if m != nil {
		return m.OriginZ
	}
	return 0
}

func (m *CCSUsrMsg_WeaponSound) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

func (m *CCSUsrMsg_WeaponSound) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type CCSUsrMsg_UpdateScreenHealthBar struct {
	Entidx         int32   `protobuf:"varint,1,opt,name=entidx" json:"entidx"`
	HealthratioOld float32 `protobuf:"fixed32,2,opt,name=healthratio_old,json=healthratioOld" json:"healthratio_old"`
	HealthratioNew float32 `protobuf:"fixed32,3,opt,name=healthratio_new,json=healthratioNew" json:"healthratio_new"`
	Style          int32   `protobuf:"varint,4,opt,name=style" json:"style"`
}

func (m *CCSUsrMsg_UpdateScreenHealthBar) Reset()         { *m = CCSUsrMsg_UpdateScreenHealthBar{} }
func (m *CCSUsrMsg_UpdateScreenHealthBar) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_UpdateScreenHealthBar) ProtoMessage()    {}
func (*CCSUsrMsg_UpdateScreenHealthBar) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{27}
}
func (m *CCSUsrMsg_UpdateScreenHealthBar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_UpdateScreenHealthBar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_UpdateScreenHealthBar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_UpdateScreenHealthBar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_UpdateScreenHealthBar.Merge(m, src)
}
func (m *CCSUsrMsg_UpdateScreenHealthBar) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_UpdateScreenHealthBar) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_UpdateScreenHealthBar.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_UpdateScreenHealthBar proto.InternalMessageInfo

func (m *CCSUsrMsg_UpdateScreenHealthBar) GetEntidx() int32 {
	if m != nil {
		return m.Entidx
	}
	return 0
}

func (m *CCSUsrMsg_UpdateScreenHealthBar) GetHealthratioOld() float32 {
	if m != nil {
		return m.HealthratioOld
	}
	return 0
}

func (m *CCSUsrMsg_UpdateScreenHealthBar) GetHealthratioNew() float32 {
	if m != nil {
		return m.HealthratioNew
	}
	return 0
}

func (m *CCSUsrMsg_UpdateScreenHealthBar) GetStyle() int32 {
	if m != nil {
		return m.Style
	}
	return 0
}

type CCSUsrMsg_EntityOutlineHighlight struct {
	Entidx          int32 `protobuf:"varint,1,opt,name=entidx" json:"entidx"`
	Removehighlight bool  `protobuf:"varint,2,opt,name=removehighlight" json:"removehighlight"`
}

func (m *CCSUsrMsg_EntityOutlineHighlight) Reset()         { *m = CCSUsrMsg_EntityOutlineHighlight{} }
func (m *CCSUsrMsg_EntityOutlineHighlight) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_EntityOutlineHighlight) ProtoMessage()    {}
func (*CCSUsrMsg_EntityOutlineHighlight) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{28}
}
func (m *CCSUsrMsg_EntityOutlineHighlight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_EntityOutlineHighlight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_EntityOutlineHighlight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_EntityOutlineHighlight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_EntityOutlineHighlight.Merge(m, src)
}
func (m *CCSUsrMsg_EntityOutlineHighlight) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_EntityOutlineHighlight) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_EntityOutlineHighlight.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_EntityOutlineHighlight proto.InternalMessageInfo

func (m *CCSUsrMsg_EntityOutlineHighlight) GetEntidx() int32 {
	if m != nil {
		return m.Entidx
	}
	return 0
}

func (m *CCSUsrMsg_EntityOutlineHighlight) GetRemovehighlight() bool {
	if m != nil {
		return m.Removehighlight
	}
	return false
}

type CCSUsrMsg_AdjustMoney struct {
	Amount int32 `protobuf:"varint,1,opt,name=amount" json:"amount"`
}

func (m *CCSUsrMsg_AdjustMoney) Reset()         { *m = CCSUsrMsg_AdjustMoney{} }
func (m *CCSUsrMsg_AdjustMoney) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_AdjustMoney) ProtoMessage()    {}
func (*CCSUsrMsg_AdjustMoney) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{29}
}
func (m *CCSUsrMsg_AdjustMoney) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_AdjustMoney) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_AdjustMoney.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_AdjustMoney) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_AdjustMoney.Merge(m, src)
}
func (m *CCSUsrMsg_AdjustMoney) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_AdjustMoney) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_AdjustMoney.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_AdjustMoney proto.InternalMessageInfo

func (m *CCSUsrMsg_AdjustMoney) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type CCSUsrMsg_ReportHit struct {
	PosX      float32 `protobuf:"fixed32,1,opt,name=pos_x,json=posX" json:"pos_x"`
	PosY      float32 `protobuf:"fixed32,2,opt,name=pos_y,json=posY" json:"pos_y"`
	Timestamp float32 `protobuf:"fixed32,4,opt,name=timestamp" json:"timestamp"`
	PosZ      float32 `protobuf:"fixed32,3,opt,name=pos_z,json=posZ" json:"pos_z"`
}

func (m *CCSUsrMsg_ReportHit) Reset()         { *m = CCSUsrMsg_ReportHit{} }
func (m *CCSUsrMsg_ReportHit) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ReportHit) ProtoMessage()    {}
func (*CCSUsrMsg_ReportHit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{30}
}
func (m *CCSUsrMsg_ReportHit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ReportHit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ReportHit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ReportHit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ReportHit.Merge(m, src)
}
func (m *CCSUsrMsg_ReportHit) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ReportHit) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ReportHit.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ReportHit proto.InternalMessageInfo

func (m *CCSUsrMsg_ReportHit) GetPosX() float32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *CCSUsrMsg_ReportHit) GetPosY() float32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *CCSUsrMsg_ReportHit) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CCSUsrMsg_ReportHit) GetPosZ() float32 {
	if m != nil {
		return m.PosZ
	}
	return 0
}

type CCSUsrMsg_KillCam struct {
	ObsMode      int32 `protobuf:"varint,1,opt,name=obs_mode,json=obsMode" json:"obs_mode"`
	FirstTarget  int32 `protobuf:"varint,2,opt,name=first_target,json=firstTarget" json:"first_target"`
	SecondTarget int32 `protobuf:"varint,3,opt,name=second_target,json=secondTarget" json:"second_target"`
}

func (m *CCSUsrMsg_KillCam) Reset()         { *m = CCSUsrMsg_KillCam{} }
func (m *CCSUsrMsg_KillCam) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_KillCam) ProtoMessage()    {}
func (*CCSUsrMsg_KillCam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{31}
}
func (m *CCSUsrMsg_KillCam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_KillCam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_KillCam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_KillCam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_KillCam.Merge(m, src)
}
func (m *CCSUsrMsg_KillCam) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_KillCam) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_KillCam.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_KillCam proto.InternalMessageInfo

func (m *CCSUsrMsg_KillCam) GetObsMode() int32 {
	if m != nil {
		return m.ObsMode
	}
	return 0
}

func (m *CCSUsrMsg_KillCam) GetFirstTarget() int32 {
	if m != nil {
		return m.FirstTarget
	}
	return 0
}

func (m *CCSUsrMsg_KillCam) GetSecondTarget() int32 {
	if m != nil {
		return m.SecondTarget
	}
	return 0
}

type CCSUsrMsg_DesiredTimescale struct {
	DesiredTimescale    float32 `protobuf:"fixed32,1,opt,name=desired_timescale,json=desiredTimescale" json:"desired_timescale"`
	DurationRealtimeSec float32 `protobuf:"fixed32,2,opt,name=duration_realtime_sec,json=durationRealtimeSec" json:"duration_realtime_sec"`
	InterpolatorType    int32   `protobuf:"varint,3,opt,name=interpolator_type,json=interpolatorType" json:"interpolator_type"`
	StartBlendTime      float32 `protobuf:"fixed32,4,opt,name=start_blend_time,json=startBlendTime" json:"start_blend_time"`
}

func (m *CCSUsrMsg_DesiredTimescale) Reset()         { *m = CCSUsrMsg_DesiredTimescale{} }
func (m *CCSUsrMsg_DesiredTimescale) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_DesiredTimescale) ProtoMessage()    {}
func (*CCSUsrMsg_DesiredTimescale) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{32}
}
func (m *CCSUsrMsg_DesiredTimescale) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_DesiredTimescale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_DesiredTimescale.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_DesiredTimescale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_DesiredTimescale.Merge(m, src)
}
func (m *CCSUsrMsg_DesiredTimescale) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_DesiredTimescale) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_DesiredTimescale.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_DesiredTimescale proto.InternalMessageInfo

func (m *CCSUsrMsg_DesiredTimescale) GetDesiredTimescale() float32 {
	if m != nil {
		return m.DesiredTimescale
	}
	return 0
}

func (m *CCSUsrMsg_DesiredTimescale) GetDurationRealtimeSec() float32 {
	if m != nil {
		return m.DurationRealtimeSec
	}
	return 0
}

func (m *CCSUsrMsg_DesiredTimescale) GetInterpolatorType() int32 {
	if m != nil {
		return m.InterpolatorType
	}
	return 0
}

func (m *CCSUsrMsg_DesiredTimescale) GetStartBlendTime() float32 {
	if m != nil {
		return m.StartBlendTime
	}
	return 0
}

type CCSUsrMsg_CurrentTimescale struct {
	CurTimescale float32 `protobuf:"fixed32,1,opt,name=cur_timescale,json=curTimescale" json:"cur_timescale"`
}

func (m *CCSUsrMsg_CurrentTimescale) Reset()         { *m = CCSUsrMsg_CurrentTimescale{} }
func (m *CCSUsrMsg_CurrentTimescale) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_CurrentTimescale) ProtoMessage()    {}
func (*CCSUsrMsg_CurrentTimescale) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{33}
}
func (m *CCSUsrMsg_CurrentTimescale) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_CurrentTimescale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_CurrentTimescale.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_CurrentTimescale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_CurrentTimescale.Merge(m, src)
}
func (m *CCSUsrMsg_CurrentTimescale) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_CurrentTimescale) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_CurrentTimescale.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_CurrentTimescale proto.InternalMessageInfo

func (m *CCSUsrMsg_CurrentTimescale) GetCurTimescale() float32 {
	if m != nil {
		return m.CurTimescale
	}
	return 0
}

type CCSUsrMsg_AchievementEvent struct {
	Achievement int32 `protobuf:"varint,1,opt,name=achievement" json:"achievement"`
	Count       int32 `protobuf:"varint,2,opt,name=count" json:"count"`
	UserId      int32 `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id"`
}

func (m *CCSUsrMsg_AchievementEvent) Reset()         { *m = CCSUsrMsg_AchievementEvent{} }
func (m *CCSUsrMsg_AchievementEvent) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_AchievementEvent) ProtoMessage()    {}
func (*CCSUsrMsg_AchievementEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{34}
}
func (m *CCSUsrMsg_AchievementEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_AchievementEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_AchievementEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_AchievementEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_AchievementEvent.Merge(m, src)
}
func (m *CCSUsrMsg_AchievementEvent) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_AchievementEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_AchievementEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_AchievementEvent proto.InternalMessageInfo

func (m *CCSUsrMsg_AchievementEvent) GetAchievement() int32 {
	if m != nil {
		return m.Achievement
	}
	return 0
}

func (m *CCSUsrMsg_AchievementEvent) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CCSUsrMsg_AchievementEvent) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CCSUsrMsg_MatchEndConditions struct {
	Fraglimit   int32 `protobuf:"varint,1,opt,name=fraglimit" json:"fraglimit"`
	MpMaxrounds int32 `protobuf:"varint,2,opt,name=mp_maxrounds,json=mpMaxrounds" json:"mp_maxrounds"`
	MpWinlimit  int32 `protobuf:"varint,3,opt,name=mp_winlimit,json=mpWinlimit" json:"mp_winlimit"`
	MpTimelimit int32 `protobuf:"varint,4,opt,name=mp_timelimit,json=mpTimelimit" json:"mp_timelimit"`
}

func (m *CCSUsrMsg_MatchEndConditions) Reset()         { *m = CCSUsrMsg_MatchEndConditions{} }
func (m *CCSUsrMsg_MatchEndConditions) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_MatchEndConditions) ProtoMessage()    {}
func (*CCSUsrMsg_MatchEndConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{35}
}
func (m *CCSUsrMsg_MatchEndConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_MatchEndConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_MatchEndConditions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_MatchEndConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_MatchEndConditions.Merge(m, src)
}
func (m *CCSUsrMsg_MatchEndConditions) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_MatchEndConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_MatchEndConditions.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_MatchEndConditions proto.InternalMessageInfo

func (m *CCSUsrMsg_MatchEndConditions) GetFraglimit() int32 {
	if m != nil {
		return m.Fraglimit
	}
	return 0
}

func (m *CCSUsrMsg_MatchEndConditions) GetMpMaxrounds() int32 {
	if m != nil {
		return m.MpMaxrounds
	}
	return 0
}

func (m *CCSUsrMsg_MatchEndConditions) GetMpWinlimit() int32 {
	if m != nil {
		return m.MpWinlimit
	}
	return 0
}

func (m *CCSUsrMsg_MatchEndConditions) GetMpTimelimit() int32 {
	if m != nil {
		return m.MpTimelimit
	}
	return 0
}

type CCSUsrMsg_PlayerStatsUpdate struct {
	Version int32                               `protobuf:"varint,1,opt,name=version" json:"version"`
	Stats   []*CCSUsrMsg_PlayerStatsUpdate_Stat `protobuf:"bytes,4,rep,name=stats" json:"stats,omitempty"`
	UserId  int32                               `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id"`
	Crc     int32                               `protobuf:"varint,6,opt,name=crc" json:"crc"`
}

func (m *CCSUsrMsg_PlayerStatsUpdate) Reset()         { *m = CCSUsrMsg_PlayerStatsUpdate{} }
func (m *CCSUsrMsg_PlayerStatsUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_PlayerStatsUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_PlayerStatsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{36}
}
func (m *CCSUsrMsg_PlayerStatsUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_PlayerStatsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_PlayerStatsUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_PlayerStatsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_PlayerStatsUpdate.Merge(m, src)
}
func (m *CCSUsrMsg_PlayerStatsUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_PlayerStatsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_PlayerStatsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_PlayerStatsUpdate proto.InternalMessageInfo

func (m *CCSUsrMsg_PlayerStatsUpdate) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CCSUsrMsg_PlayerStatsUpdate) GetStats() []*CCSUsrMsg_PlayerStatsUpdate_Stat {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *CCSUsrMsg_PlayerStatsUpdate) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CCSUsrMsg_PlayerStatsUpdate) GetCrc() int32 {
	if m != nil {
		return m.Crc
	}
	return 0
}

type CCSUsrMsg_PlayerStatsUpdate_Stat struct {
	Idx   int32 `protobuf:"varint,1,opt,name=idx" json:"idx"`
	Delta int32 `protobuf:"varint,2,opt,name=delta" json:"delta"`
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) Reset()         { *m = CCSUsrMsg_PlayerStatsUpdate_Stat{} }
func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_PlayerStatsUpdate_Stat) ProtoMessage()    {}
func (*CCSUsrMsg_PlayerStatsUpdate_Stat) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{36, 0}
}
func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_PlayerStatsUpdate_Stat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_PlayerStatsUpdate_Stat.Merge(m, src)
}
func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_PlayerStatsUpdate_Stat.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_PlayerStatsUpdate_Stat proto.InternalMessageInfo

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) GetIdx() int32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) GetDelta() int32 {
	if m != nil {
		return m.Delta
	}
	return 0
}

type CCSUsrMsg_DisplayInventory struct {
	Display bool  `protobuf:"varint,1,opt,name=display" json:"display"`
	UserId  int32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id"`
}

func (m *CCSUsrMsg_DisplayInventory) Reset()         { *m = CCSUsrMsg_DisplayInventory{} }
func (m *CCSUsrMsg_DisplayInventory) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_DisplayInventory) ProtoMessage()    {}
func (*CCSUsrMsg_DisplayInventory) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{37}
}
func (m *CCSUsrMsg_DisplayInventory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_DisplayInventory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_DisplayInventory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_DisplayInventory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_DisplayInventory.Merge(m, src)
}
func (m *CCSUsrMsg_DisplayInventory) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_DisplayInventory) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_DisplayInventory.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_DisplayInventory proto.InternalMessageInfo

func (m *CCSUsrMsg_DisplayInventory) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

func (m *CCSUsrMsg_DisplayInventory) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CCSUsrMsg_QuestProgress struct {
	QuestId      uint32 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id"`
	NormalPoints uint32 `protobuf:"varint,2,opt,name=normal_points,json=normalPoints" json:"normal_points"`
	BonusPoints  uint32 `protobuf:"varint,3,opt,name=bonus_points,json=bonusPoints" json:"bonus_points"`
	IsEventQuest bool   `protobuf:"varint,4,opt,name=is_event_quest,json=isEventQuest" json:"is_event_quest"`
}

func (m *CCSUsrMsg_QuestProgress) Reset()         { *m = CCSUsrMsg_QuestProgress{} }
func (m *CCSUsrMsg_QuestProgress) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_QuestProgress) ProtoMessage()    {}
func (*CCSUsrMsg_QuestProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{38}
}
func (m *CCSUsrMsg_QuestProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_QuestProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_QuestProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_QuestProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_QuestProgress.Merge(m, src)
}
func (m *CCSUsrMsg_QuestProgress) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_QuestProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_QuestProgress.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_QuestProgress proto.InternalMessageInfo

func (m *CCSUsrMsg_QuestProgress) GetQuestId() uint32 {
	if m != nil {
		return m.QuestId
	}
	return 0
}

func (m *CCSUsrMsg_QuestProgress) GetNormalPoints() uint32 {
	if m != nil {
		return m.NormalPoints
	}
	return 0
}

func (m *CCSUsrMsg_QuestProgress) GetBonusPoints() uint32 {
	if m != nil {
		return m.BonusPoints
	}
	return 0
}

func (m *CCSUsrMsg_QuestProgress) GetIsEventQuest() bool {
	if m != nil {
		return m.IsEventQuest
	}
	return false
}

type CCSUsrMsg_ScoreLeaderboardData struct {
	Data *ScoreLeaderboardData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CCSUsrMsg_ScoreLeaderboardData) Reset()         { *m = CCSUsrMsg_ScoreLeaderboardData{} }
func (m *CCSUsrMsg_ScoreLeaderboardData) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ScoreLeaderboardData) ProtoMessage()    {}
func (*CCSUsrMsg_ScoreLeaderboardData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{39}
}
func (m *CCSUsrMsg_ScoreLeaderboardData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ScoreLeaderboardData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ScoreLeaderboardData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ScoreLeaderboardData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ScoreLeaderboardData.Merge(m, src)
}
func (m *CCSUsrMsg_ScoreLeaderboardData) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ScoreLeaderboardData) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ScoreLeaderboardData.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ScoreLeaderboardData proto.InternalMessageInfo

func (m *CCSUsrMsg_ScoreLeaderboardData) GetData() *ScoreLeaderboardData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CCSUsrMsg_PlayerDecalDigitalSignature struct {
	Data *PlayerDecalDigitalSignature `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CCSUsrMsg_PlayerDecalDigitalSignature) Reset()         { *m = CCSUsrMsg_PlayerDecalDigitalSignature{} }
func (m *CCSUsrMsg_PlayerDecalDigitalSignature) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_PlayerDecalDigitalSignature) ProtoMessage()    {}
func (*CCSUsrMsg_PlayerDecalDigitalSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{40}
}
func (m *CCSUsrMsg_PlayerDecalDigitalSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_PlayerDecalDigitalSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_PlayerDecalDigitalSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_PlayerDecalDigitalSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_PlayerDecalDigitalSignature.Merge(m, src)
}
func (m *CCSUsrMsg_PlayerDecalDigitalSignature) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_PlayerDecalDigitalSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_PlayerDecalDigitalSignature.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_PlayerDecalDigitalSignature proto.InternalMessageInfo

func (m *CCSUsrMsg_PlayerDecalDigitalSignature) GetData() *PlayerDecalDigitalSignature {
	if m != nil {
		return m.Data
	}
	return nil
}

type CCSUsrMsg_XRankGet struct {
	ModeIdx    int32 `protobuf:"varint,1,opt,name=mode_idx,json=modeIdx" json:"mode_idx"`
	Controller int32 `protobuf:"varint,2,opt,name=controller" json:"controller"`
}

func (m *CCSUsrMsg_XRankGet) Reset()         { *m = CCSUsrMsg_XRankGet{} }
func (m *CCSUsrMsg_XRankGet) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_XRankGet) ProtoMessage()    {}
func (*CCSUsrMsg_XRankGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{41}
}
func (m *CCSUsrMsg_XRankGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_XRankGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_XRankGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_XRankGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_XRankGet.Merge(m, src)
}
func (m *CCSUsrMsg_XRankGet) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_XRankGet) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_XRankGet.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_XRankGet proto.InternalMessageInfo

func (m *CCSUsrMsg_XRankGet) GetModeIdx() int32 {
	if m != nil {
		return m.ModeIdx
	}
	return 0
}

func (m *CCSUsrMsg_XRankGet) GetController() int32 {
	if m != nil {
		return m.Controller
	}
	return 0
}

type CCSUsrMsg_XRankUpd struct {
	ModeIdx    int32 `protobuf:"varint,1,opt,name=mode_idx,json=modeIdx" json:"mode_idx"`
	Controller int32 `protobuf:"varint,2,opt,name=controller" json:"controller"`
	Ranking    int32 `protobuf:"varint,3,opt,name=ranking" json:"ranking"`
}

func (m *CCSUsrMsg_XRankUpd) Reset()         { *m = CCSUsrMsg_XRankUpd{} }
func (m *CCSUsrMsg_XRankUpd) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_XRankUpd) ProtoMessage()    {}
func (*CCSUsrMsg_XRankUpd) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{42}
}
func (m *CCSUsrMsg_XRankUpd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_XRankUpd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_XRankUpd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_XRankUpd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_XRankUpd.Merge(m, src)
}
func (m *CCSUsrMsg_XRankUpd) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_XRankUpd) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_XRankUpd.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_XRankUpd proto.InternalMessageInfo

func (m *CCSUsrMsg_XRankUpd) GetModeIdx() int32 {
	if m != nil {
		return m.ModeIdx
	}
	return 0
}

func (m *CCSUsrMsg_XRankUpd) GetController() int32 {
	if m != nil {
		return m.Controller
	}
	return 0
}

func (m *CCSUsrMsg_XRankUpd) GetRanking() int32 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

type CCSUsrMsg_CallVoteFailed struct {
	Reason int32 `protobuf:"varint,1,opt,name=reason" json:"reason"`
	Time   int32 `protobuf:"varint,2,opt,name=time" json:"time"`
}

func (m *CCSUsrMsg_CallVoteFailed) Reset()         { *m = CCSUsrMsg_CallVoteFailed{} }
func (m *CCSUsrMsg_CallVoteFailed) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_CallVoteFailed) ProtoMessage()    {}
func (*CCSUsrMsg_CallVoteFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{43}
}
func (m *CCSUsrMsg_CallVoteFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_CallVoteFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_CallVoteFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_CallVoteFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_CallVoteFailed.Merge(m, src)
}
func (m *CCSUsrMsg_CallVoteFailed) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_CallVoteFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_CallVoteFailed.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_CallVoteFailed proto.InternalMessageInfo

func (m *CCSUsrMsg_CallVoteFailed) GetReason() int32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

func (m *CCSUsrMsg_CallVoteFailed) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type CCSUsrMsg_VoteStart struct {
	Team         int32  `protobuf:"varint,1,opt,name=team" json:"team"`
	EntIdx       int32  `protobuf:"varint,2,opt,name=ent_idx,json=entIdx" json:"ent_idx"`
	VoteType     int32  `protobuf:"varint,3,opt,name=vote_type,json=voteType" json:"vote_type"`
	DispStr      string `protobuf:"bytes,4,opt,name=disp_str,json=dispStr" json:"disp_str"`
	DetailsStr   string `protobuf:"bytes,5,opt,name=details_str,json=detailsStr" json:"details_str"`
	OtherTeamStr string `protobuf:"bytes,6,opt,name=other_team_str,json=otherTeamStr" json:"other_team_str"`
	IsYesNoVote  bool   `protobuf:"varint,7,opt,name=is_yes_no_vote,json=isYesNoVote" json:"is_yes_no_vote"`
	EntidxTarget int32  `protobuf:"varint,8,opt,name=entidx_target,json=entidxTarget" json:"entidx_target"`
}

func (m *CCSUsrMsg_VoteStart) Reset()         { *m = CCSUsrMsg_VoteStart{} }
func (m *CCSUsrMsg_VoteStart) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VoteStart) ProtoMessage()    {}
func (*CCSUsrMsg_VoteStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{44}
}
func (m *CCSUsrMsg_VoteStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_VoteStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_VoteStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_VoteStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_VoteStart.Merge(m, src)
}
func (m *CCSUsrMsg_VoteStart) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_VoteStart) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_VoteStart.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_VoteStart proto.InternalMessageInfo

func (m *CCSUsrMsg_VoteStart) GetTeam() int32 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *CCSUsrMsg_VoteStart) GetEntIdx() int32 {
	if m != nil {
		return m.EntIdx
	}
	return 0
}

func (m *CCSUsrMsg_VoteStart) GetVoteType() int32 {
	if m != nil {
		return m.VoteType
	}
	return 0
}

func (m *CCSUsrMsg_VoteStart) GetDispStr() string {
	if m != nil {
		return m.DispStr
	}
	return ""
}

func (m *CCSUsrMsg_VoteStart) GetDetailsStr() string {
	if m != nil {
		return m.DetailsStr
	}
	return ""
}

func (m *CCSUsrMsg_VoteStart) GetOtherTeamStr() string {
	if m != nil {
		return m.OtherTeamStr
	}
	return ""
}

func (m *CCSUsrMsg_VoteStart) GetIsYesNoVote() bool {
	if m != nil {
		return m.IsYesNoVote
	}
	return false
}

func (m *CCSUsrMsg_VoteStart) GetEntidxTarget() int32 {
	if m != nil {
		return m.EntidxTarget
	}
	return 0
}

type CCSUsrMsg_VotePass struct {
	Team       int32  `protobuf:"varint,1,opt,name=team" json:"team"`
	VoteType   int32  `protobuf:"varint,2,opt,name=vote_type,json=voteType" json:"vote_type"`
	DispStr    string `protobuf:"bytes,3,opt,name=disp_str,json=dispStr" json:"disp_str"`
	DetailsStr string `protobuf:"bytes,4,opt,name=details_str,json=detailsStr" json:"details_str"`
}

func (m *CCSUsrMsg_VotePass) Reset()         { *m = CCSUsrMsg_VotePass{} }
func (m *CCSUsrMsg_VotePass) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VotePass) ProtoMessage()    {}
func (*CCSUsrMsg_VotePass) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{45}
}
func (m *CCSUsrMsg_VotePass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_VotePass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_VotePass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_VotePass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_VotePass.Merge(m, src)
}
func (m *CCSUsrMsg_VotePass) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_VotePass) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_VotePass.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_VotePass proto.InternalMessageInfo

func (m *CCSUsrMsg_VotePass) GetTeam() int32 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *CCSUsrMsg_VotePass) GetVoteType() int32 {
	if m != nil {
		return m.VoteType
	}
	return 0
}

func (m *CCSUsrMsg_VotePass) GetDispStr() string {
	if m != nil {
		return m.DispStr
	}
	return ""
}

func (m *CCSUsrMsg_VotePass) GetDetailsStr() string {
	if m != nil {
		return m.DetailsStr
	}
	return ""
}

type CCSUsrMsg_VoteFailed struct {
	Team   int32 `protobuf:"varint,1,opt,name=team" json:"team"`
	Reason int32 `protobuf:"varint,2,opt,name=reason" json:"reason"`
}

func (m *CCSUsrMsg_VoteFailed) Reset()         { *m = CCSUsrMsg_VoteFailed{} }
func (m *CCSUsrMsg_VoteFailed) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VoteFailed) ProtoMessage()    {}
func (*CCSUsrMsg_VoteFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{46}
}
func (m *CCSUsrMsg_VoteFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_VoteFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_VoteFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_VoteFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_VoteFailed.Merge(m, src)
}
func (m *CCSUsrMsg_VoteFailed) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_VoteFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_VoteFailed.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_VoteFailed proto.InternalMessageInfo

func (m *CCSUsrMsg_VoteFailed) GetTeam() int32 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *CCSUsrMsg_VoteFailed) GetReason() int32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type CCSUsrMsg_VoteSetup struct {
	PotentialIssues []string `protobuf:"bytes,1,rep,name=potential_issues,json=potentialIssues" json:"potential_issues,omitempty"`
}

func (m *CCSUsrMsg_VoteSetup) Reset()         { *m = CCSUsrMsg_VoteSetup{} }
func (m *CCSUsrMsg_VoteSetup) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_VoteSetup) ProtoMessage()    {}
func (*CCSUsrMsg_VoteSetup) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{47}
}
func (m *CCSUsrMsg_VoteSetup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_VoteSetup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_VoteSetup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_VoteSetup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_VoteSetup.Merge(m, src)
}
func (m *CCSUsrMsg_VoteSetup) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_VoteSetup) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_VoteSetup.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_VoteSetup proto.InternalMessageInfo

func (m *CCSUsrMsg_VoteSetup) GetPotentialIssues() []string {
	if m != nil {
		return m.PotentialIssues
	}
	return nil
}

type CCSUsrMsg_SendLastKillerDamageToClient struct {
	NumHitsGiven int32 `protobuf:"varint,1,opt,name=num_hits_given,json=numHitsGiven" json:"num_hits_given"`
	DamageGiven  int32 `protobuf:"varint,2,opt,name=damage_given,json=damageGiven" json:"damage_given"`
	NumHitsTaken int32 `protobuf:"varint,3,opt,name=num_hits_taken,json=numHitsTaken" json:"num_hits_taken"`
	DamageTaken  int32 `protobuf:"varint,4,opt,name=damage_taken,json=damageTaken" json:"damage_taken"`
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) Reset() {
	*m = CCSUsrMsg_SendLastKillerDamageToClient{}
}
func (m *CCSUsrMsg_SendLastKillerDamageToClient) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SendLastKillerDamageToClient) ProtoMessage()    {}
func (*CCSUsrMsg_SendLastKillerDamageToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{48}
}
func (m *CCSUsrMsg_SendLastKillerDamageToClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_SendLastKillerDamageToClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_SendLastKillerDamageToClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_SendLastKillerDamageToClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_SendLastKillerDamageToClient.Merge(m, src)
}
func (m *CCSUsrMsg_SendLastKillerDamageToClient) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_SendLastKillerDamageToClient) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_SendLastKillerDamageToClient.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_SendLastKillerDamageToClient proto.InternalMessageInfo

func (m *CCSUsrMsg_SendLastKillerDamageToClient) GetNumHitsGiven() int32 {
	if m != nil {
		return m.NumHitsGiven
	}
	return 0
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) GetDamageGiven() int32 {
	if m != nil {
		return m.DamageGiven
	}
	return 0
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) GetNumHitsTaken() int32 {
	if m != nil {
		return m.NumHitsTaken
	}
	return 0
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) GetDamageTaken() int32 {
	if m != nil {
		return m.DamageTaken
	}
	return 0
}

type CCSUsrMsg_ServerRankUpdate struct {
	RankUpdate []*CCSUsrMsg_ServerRankUpdate_RankUpdate `protobuf:"bytes,1,rep,name=rank_update,json=rankUpdate" json:"rank_update,omitempty"`
}

func (m *CCSUsrMsg_ServerRankUpdate) Reset()         { *m = CCSUsrMsg_ServerRankUpdate{} }
func (m *CCSUsrMsg_ServerRankUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ServerRankUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_ServerRankUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{49}
}
func (m *CCSUsrMsg_ServerRankUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ServerRankUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ServerRankUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ServerRankUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ServerRankUpdate.Merge(m, src)
}
func (m *CCSUsrMsg_ServerRankUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ServerRankUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ServerRankUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ServerRankUpdate proto.InternalMessageInfo

func (m *CCSUsrMsg_ServerRankUpdate) GetRankUpdate() []*CCSUsrMsg_ServerRankUpdate_RankUpdate {
	if m != nil {
		return m.RankUpdate
	}
	return nil
}

type CCSUsrMsg_ServerRankUpdate_RankUpdate struct {
	AccountId  int32   `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	RankOld    int32   `protobuf:"varint,2,opt,name=rank_old,json=rankOld" json:"rank_old"`
	RankNew    int32   `protobuf:"varint,3,opt,name=rank_new,json=rankNew" json:"rank_new"`
	NumWins    int32   `protobuf:"varint,4,opt,name=num_wins,json=numWins" json:"num_wins"`
	RankChange float32 `protobuf:"fixed32,5,opt,name=rank_change,json=rankChange" json:"rank_change"`
	RankTypeId int32   `protobuf:"varint,6,opt,name=rank_type_id,json=rankTypeId" json:"rank_type_id"`
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) Reset()         { *m = CCSUsrMsg_ServerRankUpdate_RankUpdate{} }
func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ServerRankUpdate_RankUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_ServerRankUpdate_RankUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{49, 0}
}
func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ServerRankUpdate_RankUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ServerRankUpdate_RankUpdate.Merge(m, src)
}
func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ServerRankUpdate_RankUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ServerRankUpdate_RankUpdate proto.InternalMessageInfo

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) GetRankOld() int32 {
	if m != nil {
		return m.RankOld
	}
	return 0
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) GetRankNew() int32 {
	if m != nil {
		return m.RankNew
	}
	return 0
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) GetNumWins() int32 {
	if m != nil {
		return m.NumWins
	}
	return 0
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) GetRankChange() float32 {
	if m != nil {
		return m.RankChange
	}
	return 0
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) GetRankTypeId() int32 {
	if m != nil {
		return m.RankTypeId
	}
	return 0
}

type CCSUsrMsg_XpUpdate struct {
	Data *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *CCSUsrMsg_XpUpdate) Reset()         { *m = CCSUsrMsg_XpUpdate{} }
func (m *CCSUsrMsg_XpUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_XpUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_XpUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{50}
}
func (m *CCSUsrMsg_XpUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_XpUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_XpUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_XpUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_XpUpdate.Merge(m, src)
}
func (m *CCSUsrMsg_XpUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_XpUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_XpUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_XpUpdate proto.InternalMessageInfo

func (m *CCSUsrMsg_XpUpdate) GetData() *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded {
	if m != nil {
		return m.Data
	}
	return nil
}

type CCSUsrMsg_ItemPickup struct {
	Item string `protobuf:"bytes,1,opt,name=item" json:"item"`
}

func (m *CCSUsrMsg_ItemPickup) Reset()         { *m = CCSUsrMsg_ItemPickup{} }
func (m *CCSUsrMsg_ItemPickup) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ItemPickup) ProtoMessage()    {}
func (*CCSUsrMsg_ItemPickup) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{51}
}
func (m *CCSUsrMsg_ItemPickup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ItemPickup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ItemPickup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ItemPickup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ItemPickup.Merge(m, src)
}
func (m *CCSUsrMsg_ItemPickup) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ItemPickup) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ItemPickup.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ItemPickup proto.InternalMessageInfo

func (m *CCSUsrMsg_ItemPickup) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

type CCSUsrMsg_ShowMenu struct {
	BitsValidSlots int32  `protobuf:"varint,1,opt,name=bits_valid_slots,json=bitsValidSlots" json:"bits_valid_slots"`
	DisplayTime    int32  `protobuf:"varint,2,opt,name=display_time,json=displayTime" json:"display_time"`
	MenuString     string `protobuf:"bytes,3,opt,name=menu_string,json=menuString" json:"menu_string"`
}

func (m *CCSUsrMsg_ShowMenu) Reset()         { *m = CCSUsrMsg_ShowMenu{} }
func (m *CCSUsrMsg_ShowMenu) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ShowMenu) ProtoMessage()    {}
func (*CCSUsrMsg_ShowMenu) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{52}
}
func (m *CCSUsrMsg_ShowMenu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ShowMenu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ShowMenu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ShowMenu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ShowMenu.Merge(m, src)
}
func (m *CCSUsrMsg_ShowMenu) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ShowMenu) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ShowMenu.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ShowMenu proto.InternalMessageInfo

func (m *CCSUsrMsg_ShowMenu) GetBitsValidSlots() int32 {
	if m != nil {
		return m.BitsValidSlots
	}
	return 0
}

func (m *CCSUsrMsg_ShowMenu) GetDisplayTime() int32 {
	if m != nil {
		return m.DisplayTime
	}
	return 0
}

func (m *CCSUsrMsg_ShowMenu) GetMenuString() string {
	if m != nil {
		return m.MenuString
	}
	return ""
}

type CCSUsrMsg_BarTime struct {
	Time string `protobuf:"bytes,1,opt,name=time" json:"time"`
}

func (m *CCSUsrMsg_BarTime) Reset()         { *m = CCSUsrMsg_BarTime{} }
func (m *CCSUsrMsg_BarTime) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_BarTime) ProtoMessage()    {}
func (*CCSUsrMsg_BarTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{53}
}
func (m *CCSUsrMsg_BarTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_BarTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_BarTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_BarTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_BarTime.Merge(m, src)
}
func (m *CCSUsrMsg_BarTime) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_BarTime) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_BarTime.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_BarTime proto.InternalMessageInfo

func (m *CCSUsrMsg_BarTime) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type CCSUsrMsg_AmmoDenied struct {
	AmmoIdx int32 `protobuf:"varint,1,opt,name=ammoIdx" json:"ammoIdx"`
}

func (m *CCSUsrMsg_AmmoDenied) Reset()         { *m = CCSUsrMsg_AmmoDenied{} }
func (m *CCSUsrMsg_AmmoDenied) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_AmmoDenied) ProtoMessage()    {}
func (*CCSUsrMsg_AmmoDenied) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{54}
}
func (m *CCSUsrMsg_AmmoDenied) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_AmmoDenied) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_AmmoDenied.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_AmmoDenied) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_AmmoDenied.Merge(m, src)
}
func (m *CCSUsrMsg_AmmoDenied) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_AmmoDenied) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_AmmoDenied.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_AmmoDenied proto.InternalMessageInfo

func (m *CCSUsrMsg_AmmoDenied) GetAmmoIdx() int32 {
	if m != nil {
		return m.AmmoIdx
	}
	return 0
}

type CCSUsrMsg_MarkAchievement struct {
	Achievement string `protobuf:"bytes,1,opt,name=achievement" json:"achievement"`
}

func (m *CCSUsrMsg_MarkAchievement) Reset()         { *m = CCSUsrMsg_MarkAchievement{} }
func (m *CCSUsrMsg_MarkAchievement) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_MarkAchievement) ProtoMessage()    {}
func (*CCSUsrMsg_MarkAchievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{55}
}
func (m *CCSUsrMsg_MarkAchievement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_MarkAchievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_MarkAchievement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_MarkAchievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_MarkAchievement.Merge(m, src)
}
func (m *CCSUsrMsg_MarkAchievement) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_MarkAchievement) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_MarkAchievement.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_MarkAchievement proto.InternalMessageInfo

func (m *CCSUsrMsg_MarkAchievement) GetAchievement() string {
	if m != nil {
		return m.Achievement
	}
	return ""
}

type CCSUsrMsg_MatchStatsUpdate struct {
	Update string `protobuf:"bytes,1,opt,name=update" json:"update"`
}

func (m *CCSUsrMsg_MatchStatsUpdate) Reset()         { *m = CCSUsrMsg_MatchStatsUpdate{} }
func (m *CCSUsrMsg_MatchStatsUpdate) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_MatchStatsUpdate) ProtoMessage()    {}
func (*CCSUsrMsg_MatchStatsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{56}
}
func (m *CCSUsrMsg_MatchStatsUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_MatchStatsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_MatchStatsUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_MatchStatsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_MatchStatsUpdate.Merge(m, src)
}
func (m *CCSUsrMsg_MatchStatsUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_MatchStatsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_MatchStatsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_MatchStatsUpdate proto.InternalMessageInfo

func (m *CCSUsrMsg_MatchStatsUpdate) GetUpdate() string {
	if m != nil {
		return m.Update
	}
	return ""
}

type CCSUsrMsg_ItemDrop struct {
	Itemid int64 `protobuf:"varint,1,opt,name=itemid" json:"itemid"`
	Death  bool  `protobuf:"varint,2,opt,name=death" json:"death"`
}

func (m *CCSUsrMsg_ItemDrop) Reset()         { *m = CCSUsrMsg_ItemDrop{} }
func (m *CCSUsrMsg_ItemDrop) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ItemDrop) ProtoMessage()    {}
func (*CCSUsrMsg_ItemDrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{57}
}
func (m *CCSUsrMsg_ItemDrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ItemDrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ItemDrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ItemDrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ItemDrop.Merge(m, src)
}
func (m *CCSUsrMsg_ItemDrop) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ItemDrop) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ItemDrop.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ItemDrop proto.InternalMessageInfo

func (m *CCSUsrMsg_ItemDrop) GetItemid() int64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *CCSUsrMsg_ItemDrop) GetDeath() bool {
	if m != nil {
		return m.Death
	}
	return false
}

type CCSUsrMsg_GlowPropTurnOff struct {
	Entidx int32 `protobuf:"varint,1,opt,name=entidx" json:"entidx"`
}

func (m *CCSUsrMsg_GlowPropTurnOff) Reset()         { *m = CCSUsrMsg_GlowPropTurnOff{} }
func (m *CCSUsrMsg_GlowPropTurnOff) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_GlowPropTurnOff) ProtoMessage()    {}
func (*CCSUsrMsg_GlowPropTurnOff) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{58}
}
func (m *CCSUsrMsg_GlowPropTurnOff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_GlowPropTurnOff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_GlowPropTurnOff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_GlowPropTurnOff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_GlowPropTurnOff.Merge(m, src)
}
func (m *CCSUsrMsg_GlowPropTurnOff) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_GlowPropTurnOff) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_GlowPropTurnOff.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_GlowPropTurnOff proto.InternalMessageInfo

func (m *CCSUsrMsg_GlowPropTurnOff) GetEntidx() int32 {
	if m != nil {
		return m.Entidx
	}
	return 0
}

type CCSUsrMsg_RoundBackupFilenames struct {
	Count    int32  `protobuf:"varint,1,opt,name=count" json:"count"`
	Index    int32  `protobuf:"varint,2,opt,name=index" json:"index"`
	Filename string `protobuf:"bytes,3,opt,name=filename" json:"filename"`
	Nicename string `protobuf:"bytes,4,opt,name=nicename" json:"nicename"`
}

func (m *CCSUsrMsg_RoundBackupFilenames) Reset()         { *m = CCSUsrMsg_RoundBackupFilenames{} }
func (m *CCSUsrMsg_RoundBackupFilenames) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_RoundBackupFilenames) ProtoMessage()    {}
func (*CCSUsrMsg_RoundBackupFilenames) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{59}
}
func (m *CCSUsrMsg_RoundBackupFilenames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RoundBackupFilenames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RoundBackupFilenames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RoundBackupFilenames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RoundBackupFilenames.Merge(m, src)
}
func (m *CCSUsrMsg_RoundBackupFilenames) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RoundBackupFilenames) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RoundBackupFilenames.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RoundBackupFilenames proto.InternalMessageInfo

func (m *CCSUsrMsg_RoundBackupFilenames) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CCSUsrMsg_RoundBackupFilenames) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CCSUsrMsg_RoundBackupFilenames) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *CCSUsrMsg_RoundBackupFilenames) GetNicename() string {
	if m != nil {
		return m.Nicename
	}
	return ""
}

type CCSUsrMsg_SSUI struct {
	Show      bool    `protobuf:"varint,1,opt,name=show" json:"show"`
	StartTime float32 `protobuf:"fixed32,2,opt,name=start_time,json=startTime" json:"start_time"`
	EndTime   float32 `protobuf:"fixed32,3,opt,name=end_time,json=endTime" json:"end_time"`
}

func (m *CCSUsrMsg_SSUI) Reset()         { *m = CCSUsrMsg_SSUI{} }
func (m *CCSUsrMsg_SSUI) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SSUI) ProtoMessage()    {}
func (*CCSUsrMsg_SSUI) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{60}
}
func (m *CCSUsrMsg_SSUI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_SSUI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_SSUI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_SSUI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_SSUI.Merge(m, src)
}
func (m *CCSUsrMsg_SSUI) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_SSUI) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_SSUI.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_SSUI proto.InternalMessageInfo

func (m *CCSUsrMsg_SSUI) GetShow() bool {
	if m != nil {
		return m.Show
	}
	return false
}

func (m *CCSUsrMsg_SSUI) GetStartTime() float32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *CCSUsrMsg_SSUI) GetEndTime() float32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type CCSUsrMsg_SurvivalStats struct {
	Xuid       uint64                               `protobuf:"varint,1,opt,name=xuid" json:"xuid"`
	Facts      []*CCSUsrMsg_SurvivalStats_Fact      `protobuf:"bytes,2,rep,name=facts" json:"facts,omitempty"`
	Users      []*CCSUsrMsg_SurvivalStats_Placement `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	Damages    []*CCSUsrMsg_SurvivalStats_Damage    `protobuf:"bytes,5,rep,name=damages" json:"damages,omitempty"`
	Ticknumber int32                                `protobuf:"varint,4,opt,name=ticknumber" json:"ticknumber"`
}

func (m *CCSUsrMsg_SurvivalStats) Reset()         { *m = CCSUsrMsg_SurvivalStats{} }
func (m *CCSUsrMsg_SurvivalStats) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SurvivalStats) ProtoMessage()    {}
func (*CCSUsrMsg_SurvivalStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{61}
}
func (m *CCSUsrMsg_SurvivalStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_SurvivalStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_SurvivalStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_SurvivalStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_SurvivalStats.Merge(m, src)
}
func (m *CCSUsrMsg_SurvivalStats) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_SurvivalStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_SurvivalStats.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_SurvivalStats proto.InternalMessageInfo

func (m *CCSUsrMsg_SurvivalStats) GetXuid() uint64 {
	if m != nil {
		return m.Xuid
	}
	return 0
}

func (m *CCSUsrMsg_SurvivalStats) GetFacts() []*CCSUsrMsg_SurvivalStats_Fact {
	if m != nil {
		return m.Facts
	}
	return nil
}

func (m *CCSUsrMsg_SurvivalStats) GetUsers() []*CCSUsrMsg_SurvivalStats_Placement {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *CCSUsrMsg_SurvivalStats) GetDamages() []*CCSUsrMsg_SurvivalStats_Damage {
	if m != nil {
		return m.Damages
	}
	return nil
}

func (m *CCSUsrMsg_SurvivalStats) GetTicknumber() int32 {
	if m != nil {
		return m.Ticknumber
	}
	return 0
}

type CCSUsrMsg_SurvivalStats_Fact struct {
	Type            int32   `protobuf:"varint,1,opt,name=type" json:"type"`
	Display         int32   `protobuf:"varint,2,opt,name=display" json:"display"`
	Value           int32   `protobuf:"varint,3,opt,name=value" json:"value"`
	Interestingness float32 `protobuf:"fixed32,4,opt,name=interestingness" json:"interestingness"`
}

func (m *CCSUsrMsg_SurvivalStats_Fact) Reset()         { *m = CCSUsrMsg_SurvivalStats_Fact{} }
func (m *CCSUsrMsg_SurvivalStats_Fact) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SurvivalStats_Fact) ProtoMessage()    {}
func (*CCSUsrMsg_SurvivalStats_Fact) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{61, 0}
}
func (m *CCSUsrMsg_SurvivalStats_Fact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_SurvivalStats_Fact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_SurvivalStats_Fact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_SurvivalStats_Fact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_SurvivalStats_Fact.Merge(m, src)
}
func (m *CCSUsrMsg_SurvivalStats_Fact) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_SurvivalStats_Fact) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_SurvivalStats_Fact.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_SurvivalStats_Fact proto.InternalMessageInfo

func (m *CCSUsrMsg_SurvivalStats_Fact) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CCSUsrMsg_SurvivalStats_Fact) GetDisplay() int32 {
	if m != nil {
		return m.Display
	}
	return 0
}

func (m *CCSUsrMsg_SurvivalStats_Fact) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CCSUsrMsg_SurvivalStats_Fact) GetInterestingness() float32 {
	if m != nil {
		return m.Interestingness
	}
	return 0
}

type CCSUsrMsg_SurvivalStats_Placement struct {
	Xuid       uint64 `protobuf:"varint,1,opt,name=xuid" json:"xuid"`
	Teamnumber int32  `protobuf:"varint,2,opt,name=teamnumber" json:"teamnumber"`
	Placement  int32  `protobuf:"varint,3,opt,name=placement" json:"placement"`
}

func (m *CCSUsrMsg_SurvivalStats_Placement) Reset()         { *m = CCSUsrMsg_SurvivalStats_Placement{} }
func (m *CCSUsrMsg_SurvivalStats_Placement) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SurvivalStats_Placement) ProtoMessage()    {}
func (*CCSUsrMsg_SurvivalStats_Placement) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{61, 1}
}
func (m *CCSUsrMsg_SurvivalStats_Placement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_SurvivalStats_Placement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_SurvivalStats_Placement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_SurvivalStats_Placement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_SurvivalStats_Placement.Merge(m, src)
}
func (m *CCSUsrMsg_SurvivalStats_Placement) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_SurvivalStats_Placement) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_SurvivalStats_Placement.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_SurvivalStats_Placement proto.InternalMessageInfo

func (m *CCSUsrMsg_SurvivalStats_Placement) GetXuid() uint64 {
	if m != nil {
		return m.Xuid
	}
	return 0
}

func (m *CCSUsrMsg_SurvivalStats_Placement) GetTeamnumber() int32 {
	if m != nil {
		return m.Teamnumber
	}
	return 0
}

func (m *CCSUsrMsg_SurvivalStats_Placement) GetPlacement() int32 {
	if m != nil {
		return m.Placement
	}
	return 0
}

type CCSUsrMsg_SurvivalStats_Damage struct {
	Xuid     uint64 `protobuf:"varint,1,opt,name=xuid" json:"xuid"`
	To       int32  `protobuf:"varint,2,opt,name=to" json:"to"`
	ToHits   int32  `protobuf:"varint,3,opt,name=to_hits,json=toHits" json:"to_hits"`
	From     int32  `protobuf:"varint,4,opt,name=from" json:"from"`
	FromHits int32  `protobuf:"varint,5,opt,name=from_hits,json=fromHits" json:"from_hits"`
}

func (m *CCSUsrMsg_SurvivalStats_Damage) Reset()         { *m = CCSUsrMsg_SurvivalStats_Damage{} }
func (m *CCSUsrMsg_SurvivalStats_Damage) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_SurvivalStats_Damage) ProtoMessage()    {}
func (*CCSUsrMsg_SurvivalStats_Damage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{61, 2}
}
func (m *CCSUsrMsg_SurvivalStats_Damage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_SurvivalStats_Damage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_SurvivalStats_Damage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_SurvivalStats_Damage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_SurvivalStats_Damage.Merge(m, src)
}
func (m *CCSUsrMsg_SurvivalStats_Damage) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_SurvivalStats_Damage) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_SurvivalStats_Damage.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_SurvivalStats_Damage proto.InternalMessageInfo

func (m *CCSUsrMsg_SurvivalStats_Damage) GetXuid() uint64 {
	if m != nil {
		return m.Xuid
	}
	return 0
}

func (m *CCSUsrMsg_SurvivalStats_Damage) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *CCSUsrMsg_SurvivalStats_Damage) GetToHits() int32 {
	if m != nil {
		return m.ToHits
	}
	return 0
}

func (m *CCSUsrMsg_SurvivalStats_Damage) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *CCSUsrMsg_SurvivalStats_Damage) GetFromHits() int32 {
	if m != nil {
		return m.FromHits
	}
	return 0
}

type CCSUsrMsg_EndOfMatchAllPlayersData struct {
	Allplayerdata []*CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData `protobuf:"bytes,1,rep,name=allplayerdata" json:"allplayerdata,omitempty"`
	Scene         int32                                            `protobuf:"varint,2,opt,name=scene" json:"scene"`
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData) Reset()         { *m = CCSUsrMsg_EndOfMatchAllPlayersData{} }
func (m *CCSUsrMsg_EndOfMatchAllPlayersData) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_EndOfMatchAllPlayersData) ProtoMessage()    {}
func (*CCSUsrMsg_EndOfMatchAllPlayersData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{62}
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData.Merge(m, src)
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData proto.InternalMessageInfo

func (m *CCSUsrMsg_EndOfMatchAllPlayersData) GetAllplayerdata() []*CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData {
	if m != nil {
		return m.Allplayerdata
	}
	return nil
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData) GetScene() int32 {
	if m != nil {
		return m.Scene
	}
	return 0
}

type CCSUsrMsg_EndOfMatchAllPlayersData_Accolade struct {
	Eaccolade int32   `protobuf:"varint,1,opt,name=eaccolade" json:"eaccolade"`
	Value     float32 `protobuf:"fixed32,2,opt,name=value" json:"value"`
	Position  int32   `protobuf:"varint,3,opt,name=position" json:"position"`
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) Reset() {
	*m = CCSUsrMsg_EndOfMatchAllPlayersData_Accolade{}
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) String() string {
	return proto.CompactTextString(m)
}
func (*CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) ProtoMessage() {}
func (*CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{62, 0}
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData_Accolade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData_Accolade.Merge(m, src)
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData_Accolade.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData_Accolade proto.InternalMessageInfo

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) GetEaccolade() int32 {
	if m != nil {
		return m.Eaccolade
	}
	return 0
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData struct {
	Entindex    int32                                        `protobuf:"varint,1,opt,name=entindex" json:"entindex"`
	Xuid        uint64                                       `protobuf:"varint,2,opt,name=xuid" json:"xuid"`
	Name        string                                       `protobuf:"bytes,3,opt,name=name" json:"name"`
	Teamnumber  int32                                        `protobuf:"varint,4,opt,name=teamnumber" json:"teamnumber"`
	Nomination  *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade `protobuf:"bytes,5,opt,name=nomination" json:"nomination,omitempty"`
	Items       []*CEconItemPreviewDataBlock                 `protobuf:"bytes,6,rep,name=items" json:"items,omitempty"`
	Playercolor int32                                        `protobuf:"varint,7,opt,name=playercolor" json:"playercolor"`
	Isbot       bool                                         `protobuf:"varint,8,opt,name=isbot" json:"isbot"`
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) Reset() {
	*m = CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData{}
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) String() string {
	return proto.CompactTextString(m)
}
func (*CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) ProtoMessage() {}
func (*CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{62, 1}
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData.Merge(m, src)
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData proto.InternalMessageInfo

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) GetEntindex() int32 {
	if m != nil {
		return m.Entindex
	}
	return 0
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) GetXuid() uint64 {
	if m != nil {
		return m.Xuid
	}
	return 0
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) GetTeamnumber() int32 {
	if m != nil {
		return m.Teamnumber
	}
	return 0
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) GetNomination() *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade {
	if m != nil {
		return m.Nomination
	}
	return nil
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) GetItems() []*CEconItemPreviewDataBlock {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) GetPlayercolor() int32 {
	if m != nil {
		return m.Playercolor
	}
	return 0
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) GetIsbot() bool {
	if m != nil {
		return m.Isbot
	}
	return false
}

type CCSUsrMsg_RoundImpactScoreData struct {
	InitConditions  *CCSUsrMsg_RoundImpactScoreData_InitialConditions `protobuf:"bytes,1,opt,name=init_conditions,json=initConditions" json:"init_conditions,omitempty"`
	AllRisEventData []*CCSUsrMsg_RoundImpactScoreData_RisEvent        `protobuf:"bytes,2,rep,name=all_ris_event_data,json=allRisEventData" json:"all_ris_event_data,omitempty"`
}

func (m *CCSUsrMsg_RoundImpactScoreData) Reset()         { *m = CCSUsrMsg_RoundImpactScoreData{} }
func (m *CCSUsrMsg_RoundImpactScoreData) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_RoundImpactScoreData) ProtoMessage()    {}
func (*CCSUsrMsg_RoundImpactScoreData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{63}
}
func (m *CCSUsrMsg_RoundImpactScoreData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RoundImpactScoreData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RoundImpactScoreData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData.Merge(m, src)
}
func (m *CCSUsrMsg_RoundImpactScoreData) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RoundImpactScoreData) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData proto.InternalMessageInfo

func (m *CCSUsrMsg_RoundImpactScoreData) GetInitConditions() *CCSUsrMsg_RoundImpactScoreData_InitialConditions {
	if m != nil {
		return m.InitConditions
	}
	return nil
}

func (m *CCSUsrMsg_RoundImpactScoreData) GetAllRisEventData() []*CCSUsrMsg_RoundImpactScoreData_RisEvent {
	if m != nil {
		return m.AllRisEventData
	}
	return nil
}

type CCSUsrMsg_RoundImpactScoreData_RisEvent struct {
	Timestamp     float32                                            `protobuf:"fixed32,1,opt,name=timestamp" json:"timestamp"`
	TerroristOdds int32                                              `protobuf:"varint,2,opt,name=terrorist_odds,json=terroristOdds" json:"terrorist_odds"`
	CtAlive       int32                                              `protobuf:"varint,3,opt,name=ct_alive,json=ctAlive" json:"ct_alive"`
	TAlive        int32                                              `protobuf:"varint,4,opt,name=t_alive,json=tAlive" json:"t_alive"`
	VictimData    *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim    `protobuf:"bytes,5,opt,name=victim_data,json=victimData" json:"victim_data,omitempty"`
	ObjectiveData *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective `protobuf:"bytes,6,opt,name=objective_data,json=objectiveData" json:"objective_data,omitempty"`
	AllDamageData []*CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage  `protobuf:"bytes,7,rep,name=all_damage_data,json=allDamageData" json:"all_damage_data,omitempty"`
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) Reset() {
	*m = CCSUsrMsg_RoundImpactScoreData_RisEvent{}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_RoundImpactScoreData_RisEvent) ProtoMessage()    {}
func (*CCSUsrMsg_RoundImpactScoreData_RisEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{63, 0}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent.Merge(m, src)
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent proto.InternalMessageInfo

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) GetTimestamp() float32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) GetTerroristOdds() int32 {
	if m != nil {
		return m.TerroristOdds
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) GetCtAlive() int32 {
	if m != nil {
		return m.CtAlive
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) GetTAlive() int32 {
	if m != nil {
		return m.TAlive
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) GetVictimData() *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim {
	if m != nil {
		return m.VictimData
	}
	return nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) GetObjectiveData() *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective {
	if m != nil {
		return m.ObjectiveData
	}
	return nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) GetAllDamageData() []*CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage {
	if m != nil {
		return m.AllDamageData
	}
	return nil
}

type CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim struct {
	TeamNumber int32  `protobuf:"varint,1,opt,name=team_number,json=teamNumber" json:"team_number"`
	Entindex   int32  `protobuf:"varint,2,opt,name=entindex" json:"entindex"`
	Xuid       uint64 `protobuf:"varint,3,opt,name=xuid" json:"xuid"`
	Color      int32  `protobuf:"varint,4,opt,name=color" json:"color"`
	IsBot      bool   `protobuf:"varint,5,opt,name=is_bot,json=isBot" json:"is_bot"`
	IsDead     bool   `protobuf:"varint,6,opt,name=is_dead,json=isDead" json:"is_dead"`
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) Reset() {
	*m = CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim{}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) String() string {
	return proto.CompactTextString(m)
}
func (*CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) ProtoMessage() {}
func (*CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{63, 0, 0}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim.Merge(m, src)
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim proto.InternalMessageInfo

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) GetTeamNumber() int32 {
	if m != nil {
		return m.TeamNumber
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) GetEntindex() int32 {
	if m != nil {
		return m.Entindex
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) GetXuid() uint64 {
	if m != nil {
		return m.Xuid
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) GetColor() int32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) GetIsBot() bool {
	if m != nil {
		return m.IsBot
	}
	return false
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) GetIsDead() bool {
	if m != nil {
		return m.IsDead
	}
	return false
}

type CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective struct {
	Type int32 `protobuf:"varint,1,opt,name=type" json:"type"`
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) Reset() {
	*m = CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective{}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) String() string {
	return proto.CompactTextString(m)
}
func (*CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) ProtoMessage() {}
func (*CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{63, 0, 1}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective.Merge(m, src)
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective proto.InternalMessageInfo

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage struct {
	TargetEntindex      int32  `protobuf:"varint,1,opt,name=target_entindex,json=targetEntindex" json:"target_entindex"`
	TargetXuid          uint64 `protobuf:"varint,2,opt,name=target_xuid,json=targetXuid" json:"target_xuid"`
	HealthRemoved       int32  `protobuf:"varint,3,opt,name=health_removed,json=healthRemoved" json:"health_removed"`
	NumHits             int32  `protobuf:"varint,4,opt,name=num_hits,json=numHits" json:"num_hits"`
	ReturnHealthRemoved int32  `protobuf:"varint,5,opt,name=return_health_removed,json=returnHealthRemoved" json:"return_health_removed"`
	NumReturnHits       int32  `protobuf:"varint,6,opt,name=num_return_hits,json=numReturnHits" json:"num_return_hits"`
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) Reset() {
	*m = CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage{}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) String() string {
	return proto.CompactTextString(m)
}
func (*CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) ProtoMessage() {}
func (*CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{63, 0, 2}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage.Merge(m, src)
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage proto.InternalMessageInfo

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) GetTargetEntindex() int32 {
	if m != nil {
		return m.TargetEntindex
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) GetTargetXuid() uint64 {
	if m != nil {
		return m.TargetXuid
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) GetHealthRemoved() int32 {
	if m != nil {
		return m.HealthRemoved
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) GetNumHits() int32 {
	if m != nil {
		return m.NumHits
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) GetReturnHealthRemoved() int32 {
	if m != nil {
		return m.ReturnHealthRemoved
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) GetNumReturnHits() int32 {
	if m != nil {
		return m.NumReturnHits
	}
	return 0
}

type CCSUsrMsg_RoundImpactScoreData_InitialConditions struct {
	CtEquipValue  int32 `protobuf:"varint,1,opt,name=ct_equip_value,json=ctEquipValue" json:"ct_equip_value"`
	TEquipValue   int32 `protobuf:"varint,2,opt,name=t_equip_value,json=tEquipValue" json:"t_equip_value"`
	TerroristOdds int32 `protobuf:"varint,3,opt,name=terrorist_odds,json=terroristOdds" json:"terrorist_odds"`
}

func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) Reset() {
	*m = CCSUsrMsg_RoundImpactScoreData_InitialConditions{}
}
func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) String() string {
	return proto.CompactTextString(m)
}
func (*CCSUsrMsg_RoundImpactScoreData_InitialConditions) ProtoMessage() {}
func (*CCSUsrMsg_RoundImpactScoreData_InitialConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{63, 1}
}
func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_InitialConditions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_InitialConditions.Merge(m, src)
}
func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_InitialConditions.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RoundImpactScoreData_InitialConditions proto.InternalMessageInfo

func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) GetCtEquipValue() int32 {
	if m != nil {
		return m.CtEquipValue
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) GetTEquipValue() int32 {
	if m != nil {
		return m.TEquipValue
	}
	return 0
}

func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) GetTerroristOdds() int32 {
	if m != nil {
		return m.TerroristOdds
	}
	return 0
}

type CCSUsrMsg_CurrentRoundOdds struct {
	Odds int32 `protobuf:"varint,1,opt,name=odds" json:"odds"`
}

func (m *CCSUsrMsg_CurrentRoundOdds) Reset()         { *m = CCSUsrMsg_CurrentRoundOdds{} }
func (m *CCSUsrMsg_CurrentRoundOdds) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_CurrentRoundOdds) ProtoMessage()    {}
func (*CCSUsrMsg_CurrentRoundOdds) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{64}
}
func (m *CCSUsrMsg_CurrentRoundOdds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_CurrentRoundOdds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_CurrentRoundOdds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_CurrentRoundOdds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_CurrentRoundOdds.Merge(m, src)
}
func (m *CCSUsrMsg_CurrentRoundOdds) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_CurrentRoundOdds) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_CurrentRoundOdds.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_CurrentRoundOdds proto.InternalMessageInfo

func (m *CCSUsrMsg_CurrentRoundOdds) GetOdds() int32 {
	if m != nil {
		return m.Odds
	}
	return 0
}

type CCSUsrMsg_DeepStats struct {
	Stats *CMsgGCCStrike15_ClientDeepStats `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
}

func (m *CCSUsrMsg_DeepStats) Reset()         { *m = CCSUsrMsg_DeepStats{} }
func (m *CCSUsrMsg_DeepStats) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_DeepStats) ProtoMessage()    {}
func (*CCSUsrMsg_DeepStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{65}
}
func (m *CCSUsrMsg_DeepStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_DeepStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_DeepStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_DeepStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_DeepStats.Merge(m, src)
}
func (m *CCSUsrMsg_DeepStats) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_DeepStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_DeepStats.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_DeepStats proto.InternalMessageInfo

func (m *CCSUsrMsg_DeepStats) GetStats() *CMsgGCCStrike15_ClientDeepStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type CCSUsrMsg_ResetHud struct {
	Reset_ bool `protobuf:"varint,1,opt,name=reset" json:"reset"`
}

func (m *CCSUsrMsg_ResetHud) Reset()         { *m = CCSUsrMsg_ResetHud{} }
func (m *CCSUsrMsg_ResetHud) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ResetHud) ProtoMessage()    {}
func (*CCSUsrMsg_ResetHud) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{66}
}
func (m *CCSUsrMsg_ResetHud) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ResetHud) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ResetHud.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ResetHud) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ResetHud.Merge(m, src)
}
func (m *CCSUsrMsg_ResetHud) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ResetHud) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ResetHud.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ResetHud proto.InternalMessageInfo

func (m *CCSUsrMsg_ResetHud) GetReset_() bool {
	if m != nil {
		return m.Reset_
	}
	return false
}

type CCSUsrMsg_GameTitle struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_GameTitle) Reset()         { *m = CCSUsrMsg_GameTitle{} }
func (m *CCSUsrMsg_GameTitle) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_GameTitle) ProtoMessage()    {}
func (*CCSUsrMsg_GameTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{67}
}
func (m *CCSUsrMsg_GameTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_GameTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_GameTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_GameTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_GameTitle.Merge(m, src)
}
func (m *CCSUsrMsg_GameTitle) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_GameTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_GameTitle.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_GameTitle proto.InternalMessageInfo

func (m *CCSUsrMsg_GameTitle) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_RequestState struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_RequestState) Reset()         { *m = CCSUsrMsg_RequestState{} }
func (m *CCSUsrMsg_RequestState) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_RequestState) ProtoMessage()    {}
func (*CCSUsrMsg_RequestState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{68}
}
func (m *CCSUsrMsg_RequestState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_RequestState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_RequestState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_RequestState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_RequestState.Merge(m, src)
}
func (m *CCSUsrMsg_RequestState) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_RequestState) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_RequestState.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_RequestState proto.InternalMessageInfo

func (m *CCSUsrMsg_RequestState) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_StopSpectatorMode struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_StopSpectatorMode) Reset()         { *m = CCSUsrMsg_StopSpectatorMode{} }
func (m *CCSUsrMsg_StopSpectatorMode) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_StopSpectatorMode) ProtoMessage()    {}
func (*CCSUsrMsg_StopSpectatorMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{69}
}
func (m *CCSUsrMsg_StopSpectatorMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_StopSpectatorMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_StopSpectatorMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_StopSpectatorMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_StopSpectatorMode.Merge(m, src)
}
func (m *CCSUsrMsg_StopSpectatorMode) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_StopSpectatorMode) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_StopSpectatorMode.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_StopSpectatorMode proto.InternalMessageInfo

func (m *CCSUsrMsg_StopSpectatorMode) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_DisconnectToLobby struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_DisconnectToLobby) Reset()         { *m = CCSUsrMsg_DisconnectToLobby{} }
func (m *CCSUsrMsg_DisconnectToLobby) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_DisconnectToLobby) ProtoMessage()    {}
func (*CCSUsrMsg_DisconnectToLobby) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{70}
}
func (m *CCSUsrMsg_DisconnectToLobby) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_DisconnectToLobby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_DisconnectToLobby.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_DisconnectToLobby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_DisconnectToLobby.Merge(m, src)
}
func (m *CCSUsrMsg_DisconnectToLobby) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_DisconnectToLobby) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_DisconnectToLobby.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_DisconnectToLobby proto.InternalMessageInfo

func (m *CCSUsrMsg_DisconnectToLobby) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_WarmupHasEnded struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_WarmupHasEnded) Reset()         { *m = CCSUsrMsg_WarmupHasEnded{} }
func (m *CCSUsrMsg_WarmupHasEnded) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_WarmupHasEnded) ProtoMessage()    {}
func (*CCSUsrMsg_WarmupHasEnded) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{71}
}
func (m *CCSUsrMsg_WarmupHasEnded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_WarmupHasEnded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_WarmupHasEnded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_WarmupHasEnded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_WarmupHasEnded.Merge(m, src)
}
func (m *CCSUsrMsg_WarmupHasEnded) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_WarmupHasEnded) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_WarmupHasEnded.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_WarmupHasEnded proto.InternalMessageInfo

func (m *CCSUsrMsg_WarmupHasEnded) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_ClientInfo struct {
	Dummy int32 `protobuf:"varint,1,opt,name=dummy" json:"dummy"`
}

func (m *CCSUsrMsg_ClientInfo) Reset()         { *m = CCSUsrMsg_ClientInfo{} }
func (m *CCSUsrMsg_ClientInfo) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ClientInfo) ProtoMessage()    {}
func (*CCSUsrMsg_ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{72}
}
func (m *CCSUsrMsg_ClientInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ClientInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ClientInfo.Merge(m, src)
}
func (m *CCSUsrMsg_ClientInfo) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ClientInfo proto.InternalMessageInfo

func (m *CCSUsrMsg_ClientInfo) GetDummy() int32 {
	if m != nil {
		return m.Dummy
	}
	return 0
}

type CCSUsrMsg_ServerRankRevealAll struct {
	SecondsTillShutdown int32                                          `protobuf:"varint,1,opt,name=seconds_till_shutdown,json=secondsTillShutdown" json:"seconds_till_shutdown"`
	Reservation         *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
}

func (m *CCSUsrMsg_ServerRankRevealAll) Reset()         { *m = CCSUsrMsg_ServerRankRevealAll{} }
func (m *CCSUsrMsg_ServerRankRevealAll) String() string { return proto.CompactTextString(m) }
func (*CCSUsrMsg_ServerRankRevealAll) ProtoMessage()    {}
func (*CCSUsrMsg_ServerRankRevealAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_0083c6368998e800, []int{73}
}
func (m *CCSUsrMsg_ServerRankRevealAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCSUsrMsg_ServerRankRevealAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCSUsrMsg_ServerRankRevealAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCSUsrMsg_ServerRankRevealAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSUsrMsg_ServerRankRevealAll.Merge(m, src)
}
func (m *CCSUsrMsg_ServerRankRevealAll) XXX_Size() int {
	return m.Size()
}
func (m *CCSUsrMsg_ServerRankRevealAll) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSUsrMsg_ServerRankRevealAll.DiscardUnknown(m)
}

var xxx_messageInfo_CCSUsrMsg_ServerRankRevealAll proto.InternalMessageInfo

func (m *CCSUsrMsg_ServerRankRevealAll) GetSecondsTillShutdown() int32 {
	if m != nil {
		return m.SecondsTillShutdown
	}
	return 0
}

func (m *CCSUsrMsg_ServerRankRevealAll) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func init() {
	proto.RegisterEnum("ECstrike15UserMessages", ECstrike15UserMessages_name, ECstrike15UserMessages_value)
	proto.RegisterEnum("ECSUsrMsg_DisconnectToLobby_Action", ECSUsrMsg_DisconnectToLobby_Action_name, ECSUsrMsg_DisconnectToLobby_Action_value)
	proto.RegisterType((*CCSUsrMsg_VGUIMenu)(nil), "CCSUsrMsg_VGUIMenu")
	proto.RegisterType((*CCSUsrMsg_VGUIMenu_Subkey)(nil), "CCSUsrMsg_VGUIMenu.Subkey")
	proto.RegisterType((*CCSUsrMsg_Geiger)(nil), "CCSUsrMsg_Geiger")
	proto.RegisterType((*CCSUsrMsg_Train)(nil), "CCSUsrMsg_Train")
	proto.RegisterType((*CCSUsrMsg_HudText)(nil), "CCSUsrMsg_HudText")
	proto.RegisterType((*CCSUsrMsg_SayText)(nil), "CCSUsrMsg_SayText")
	proto.RegisterType((*CCSUsrMsg_SayText2)(nil), "CCSUsrMsg_SayText2")
	proto.RegisterType((*CCSUsrMsg_TextMsg)(nil), "CCSUsrMsg_TextMsg")
	proto.RegisterType((*CCSUsrMsg_HudMsg)(nil), "CCSUsrMsg_HudMsg")
	proto.RegisterType((*CCSUsrMsg_Shake)(nil), "CCSUsrMsg_Shake")
	proto.RegisterType((*CCSUsrMsg_Fade)(nil), "CCSUsrMsg_Fade")
	proto.RegisterType((*CCSUsrMsg_Rumble)(nil), "CCSUsrMsg_Rumble")
	proto.RegisterType((*CCSUsrMsg_CloseCaption)(nil), "CCSUsrMsg_CloseCaption")
	proto.RegisterType((*CCSUsrMsg_CloseCaptionDirect)(nil), "CCSUsrMsg_CloseCaptionDirect")
	proto.RegisterType((*CCSUsrMsg_SendAudio)(nil), "CCSUsrMsg_SendAudio")
	proto.RegisterType((*CCSUsrMsg_RawAudio)(nil), "CCSUsrMsg_RawAudio")
	proto.RegisterType((*CCSUsrMsg_VoiceMask)(nil), "CCSUsrMsg_VoiceMask")
	proto.RegisterType((*CCSUsrMsg_VoiceMask_PlayerMask)(nil), "CCSUsrMsg_VoiceMask.PlayerMask")
	proto.RegisterType((*CCSUsrMsg_Damage)(nil), "CCSUsrMsg_Damage")
	proto.RegisterType((*CCSUsrMsg_RadioText)(nil), "CCSUsrMsg_RadioText")
	proto.RegisterType((*CCSUsrMsg_HintText)(nil), "CCSUsrMsg_HintText")
	proto.RegisterType((*CCSUsrMsg_KeyHintText)(nil), "CCSUsrMsg_KeyHintText")
	proto.RegisterType((*CCSUsrMsg_ProcessSpottedEntityUpdate)(nil), "CCSUsrMsg_ProcessSpottedEntityUpdate")
	proto.RegisterType((*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate)(nil), "CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate")
	proto.RegisterType((*CCSUsrMsg_SendPlayerItemDrops)(nil), "CCSUsrMsg_SendPlayerItemDrops")
	proto.RegisterType((*CCSUsrMsg_SendPlayerItemFound)(nil), "CCSUsrMsg_SendPlayerItemFound")
	proto.RegisterType((*CCSUsrMsg_RetakeUpdatePlayerCardList)(nil), "CCSUsrMsg_RetakeUpdatePlayerCardList")
	proto.RegisterType((*CCSUsrMsg_RetakeUpdatePlayerCardSelection)(nil), "CCSUsrMsg_RetakeUpdatePlayerCardSelection")
	proto.RegisterType((*CCSUsrMsg_ReloadEffect)(nil), "CCSUsrMsg_ReloadEffect")
	proto.RegisterType((*CCSUsrMsg_WeaponSound)(nil), "CCSUsrMsg_WeaponSound")
	proto.RegisterType((*CCSUsrMsg_UpdateScreenHealthBar)(nil), "CCSUsrMsg_UpdateScreenHealthBar")
	proto.RegisterType((*CCSUsrMsg_EntityOutlineHighlight)(nil), "CCSUsrMsg_EntityOutlineHighlight")
	proto.RegisterType((*CCSUsrMsg_AdjustMoney)(nil), "CCSUsrMsg_AdjustMoney")
	proto.RegisterType((*CCSUsrMsg_ReportHit)(nil), "CCSUsrMsg_ReportHit")
	proto.RegisterType((*CCSUsrMsg_KillCam)(nil), "CCSUsrMsg_KillCam")
	proto.RegisterType((*CCSUsrMsg_DesiredTimescale)(nil), "CCSUsrMsg_DesiredTimescale")
	proto.RegisterType((*CCSUsrMsg_CurrentTimescale)(nil), "CCSUsrMsg_CurrentTimescale")
	proto.RegisterType((*CCSUsrMsg_AchievementEvent)(nil), "CCSUsrMsg_AchievementEvent")
	proto.RegisterType((*CCSUsrMsg_MatchEndConditions)(nil), "CCSUsrMsg_MatchEndConditions")
	proto.RegisterType((*CCSUsrMsg_PlayerStatsUpdate)(nil), "CCSUsrMsg_PlayerStatsUpdate")
	proto.RegisterType((*CCSUsrMsg_PlayerStatsUpdate_Stat)(nil), "CCSUsrMsg_PlayerStatsUpdate.Stat")
	proto.RegisterType((*CCSUsrMsg_DisplayInventory)(nil), "CCSUsrMsg_DisplayInventory")
	proto.RegisterType((*CCSUsrMsg_QuestProgress)(nil), "CCSUsrMsg_QuestProgress")
	proto.RegisterType((*CCSUsrMsg_ScoreLeaderboardData)(nil), "CCSUsrMsg_ScoreLeaderboardData")
	proto.RegisterType((*CCSUsrMsg_PlayerDecalDigitalSignature)(nil), "CCSUsrMsg_PlayerDecalDigitalSignature")
	proto.RegisterType((*CCSUsrMsg_XRankGet)(nil), "CCSUsrMsg_XRankGet")
	proto.RegisterType((*CCSUsrMsg_XRankUpd)(nil), "CCSUsrMsg_XRankUpd")
	proto.RegisterType((*CCSUsrMsg_CallVoteFailed)(nil), "CCSUsrMsg_CallVoteFailed")
	proto.RegisterType((*CCSUsrMsg_VoteStart)(nil), "CCSUsrMsg_VoteStart")
	proto.RegisterType((*CCSUsrMsg_VotePass)(nil), "CCSUsrMsg_VotePass")
	proto.RegisterType((*CCSUsrMsg_VoteFailed)(nil), "CCSUsrMsg_VoteFailed")
	proto.RegisterType((*CCSUsrMsg_VoteSetup)(nil), "CCSUsrMsg_VoteSetup")
	proto.RegisterType((*CCSUsrMsg_SendLastKillerDamageToClient)(nil), "CCSUsrMsg_SendLastKillerDamageToClient")
	proto.RegisterType((*CCSUsrMsg_ServerRankUpdate)(nil), "CCSUsrMsg_ServerRankUpdate")
	proto.RegisterType((*CCSUsrMsg_ServerRankUpdate_RankUpdate)(nil), "CCSUsrMsg_ServerRankUpdate.RankUpdate")
	proto.RegisterType((*CCSUsrMsg_XpUpdate)(nil), "CCSUsrMsg_XpUpdate")
	proto.RegisterType((*CCSUsrMsg_ItemPickup)(nil), "CCSUsrMsg_ItemPickup")
	proto.RegisterType((*CCSUsrMsg_ShowMenu)(nil), "CCSUsrMsg_ShowMenu")
	proto.RegisterType((*CCSUsrMsg_BarTime)(nil), "CCSUsrMsg_BarTime")
	proto.RegisterType((*CCSUsrMsg_AmmoDenied)(nil), "CCSUsrMsg_AmmoDenied")
	proto.RegisterType((*CCSUsrMsg_MarkAchievement)(nil), "CCSUsrMsg_MarkAchievement")
	proto.RegisterType((*CCSUsrMsg_MatchStatsUpdate)(nil), "CCSUsrMsg_MatchStatsUpdate")
	proto.RegisterType((*CCSUsrMsg_ItemDrop)(nil), "CCSUsrMsg_ItemDrop")
	proto.RegisterType((*CCSUsrMsg_GlowPropTurnOff)(nil), "CCSUsrMsg_GlowPropTurnOff")
	proto.RegisterType((*CCSUsrMsg_RoundBackupFilenames)(nil), "CCSUsrMsg_RoundBackupFilenames")
	proto.RegisterType((*CCSUsrMsg_SSUI)(nil), "CCSUsrMsg_SSUI")
	proto.RegisterType((*CCSUsrMsg_SurvivalStats)(nil), "CCSUsrMsg_SurvivalStats")
	proto.RegisterType((*CCSUsrMsg_SurvivalStats_Fact)(nil), "CCSUsrMsg_SurvivalStats.Fact")
	proto.RegisterType((*CCSUsrMsg_SurvivalStats_Placement)(nil), "CCSUsrMsg_SurvivalStats.Placement")
	proto.RegisterType((*CCSUsrMsg_SurvivalStats_Damage)(nil), "CCSUsrMsg_SurvivalStats.Damage")
	proto.RegisterType((*CCSUsrMsg_EndOfMatchAllPlayersData)(nil), "CCSUsrMsg_EndOfMatchAllPlayersData")
	proto.RegisterType((*CCSUsrMsg_EndOfMatchAllPlayersData_Accolade)(nil), "CCSUsrMsg_EndOfMatchAllPlayersData.Accolade")
	proto.RegisterType((*CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData)(nil), "CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData")
	proto.RegisterType((*CCSUsrMsg_RoundImpactScoreData)(nil), "CCSUsrMsg_RoundImpactScoreData")
	proto.RegisterType((*CCSUsrMsg_RoundImpactScoreData_RisEvent)(nil), "CCSUsrMsg_RoundImpactScoreData.RisEvent")
	proto.RegisterType((*CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim)(nil), "CCSUsrMsg_RoundImpactScoreData.RisEvent.Victim")
	proto.RegisterType((*CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective)(nil), "CCSUsrMsg_RoundImpactScoreData.RisEvent.Objective")
	proto.RegisterType((*CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage)(nil), "CCSUsrMsg_RoundImpactScoreData.RisEvent.Damage")
	proto.RegisterType((*CCSUsrMsg_RoundImpactScoreData_InitialConditions)(nil), "CCSUsrMsg_RoundImpactScoreData.InitialConditions")
	proto.RegisterType((*CCSUsrMsg_CurrentRoundOdds)(nil), "CCSUsrMsg_CurrentRoundOdds")
	proto.RegisterType((*CCSUsrMsg_DeepStats)(nil), "CCSUsrMsg_DeepStats")
	proto.RegisterType((*CCSUsrMsg_ResetHud)(nil), "CCSUsrMsg_ResetHud")
	proto.RegisterType((*CCSUsrMsg_GameTitle)(nil), "CCSUsrMsg_GameTitle")
	proto.RegisterType((*CCSUsrMsg_RequestState)(nil), "CCSUsrMsg_RequestState")
	proto.RegisterType((*CCSUsrMsg_StopSpectatorMode)(nil), "CCSUsrMsg_StopSpectatorMode")
	proto.RegisterType((*CCSUsrMsg_DisconnectToLobby)(nil), "CCSUsrMsg_DisconnectToLobby")
	proto.RegisterType((*CCSUsrMsg_WarmupHasEnded)(nil), "CCSUsrMsg_WarmupHasEnded")
	proto.RegisterType((*CCSUsrMsg_ClientInfo)(nil), "CCSUsrMsg_ClientInfo")
	proto.RegisterType((*CCSUsrMsg_ServerRankRevealAll)(nil), "CCSUsrMsg_ServerRankRevealAll")
}

func init() { proto.RegisterFile("cstrike15_usermessages.proto", fileDescriptor_0083c6368998e800) }

var fileDescriptor_0083c6368998e800 = []byte{
	// 4950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x3a, 0x4b, 0x6f, 0x1c, 0x47,
	0x7a, 0x9a, 0x07, 0x5f, 0xc5, 0x57, 0xab, 0xf5, 0x30, 0x35, 0x92, 0x48, 0xaa, 0x6d, 0x69, 0x25,
	0xdb, 0x1a, 0x4b, 0xb4, 0x2d, 0xbf, 0x36, 0xc9, 0xf2, 0x25, 0x92, 0x6b, 0x51, 0xa2, 0x67, 0x28,
	0xc9, 0xd2, 0x22, 0xe8, 0x14, 0xbb, 0x6b, 0x66, 0x6a, 0xd9, 0xdd, 0xd5, 0xee, 0xaa, 0x1e, 0x8a,
	0x9b, 0x43, 0x36, 0xb7, 0x45, 0x36, 0x08, 0x72, 0x30, 0x02, 0x24, 0xd9, 0x3d, 0x26, 0xa7, 0x20,
	0xd7, 0x20, 0xbb, 0xc7, 0x5c, 0x16, 0x48, 0x0e, 0x8b, 0xe4, 0xb2, 0x40, 0x90, 0x20, 0xb0, 0x4f,
	0x09, 0xf2, 0x23, 0x82, 0xaf, 0xaa, 0x1f, 0x55, 0x33, 0x43, 0x52, 0x08, 0x92, 0xdb, 0xcc, 0xf7,
	0xaa, 0xaf, 0xbf, 0xfa, 0xea, 0xab, 0xef, 0x51, 0xe8, 0x9a, 0xc7, 0x45, 0x42, 0x0f, 0xc9, 0xfd,
	0x0f, 0xdd, 0x94, 0x93, 0x24, 0x24, 0x9c, 0xe3, 0x2e, 0xe1, 0xcd, 0x38, 0x61, 0x82, 0x35, 0x96,
	0xbb, 0x8c, 0x75, 0x03, 0xf2, 0x9e, 0xfc, 0x77, 0x90, 0x76, 0xde, 0xf3, 0x09, 0xf7, 0x12, 0x1a,
	0x0b, 0x96, 0x64, 0x14, 0xe7, 0x23, 0x22, 0x06, 0x98, 0x1a, 0xa5, 0xc8, 0xae, 0x67, 0xe2, 0x9c,
	0x5f, 0x54, 0x90, 0xbd, 0xbe, 0xde, 0x7e, 0xca, 0x93, 0x5d, 0xde, 0x75, 0x9f, 0x6d, 0x3d, 0xdd,
	0xd9, 0x25, 0x51, 0x6a, 0x2f, 0xa0, 0x7a, 0x84, 0x43, 0xb2, 0x50, 0x59, 0xae, 0xdc, 0x9e, 0x5a,
	0xab, 0xff, 0xea, 0xdf, 0x97, 0xce, 0xb5, 0x24, 0x04, 0x30, 0xbc, 0xc7, 0x8e, 0x16, 0xaa, 0xcb,
	0x95, 0xdb, 0x93, 0x39, 0x06, 0x20, 0xf6, 0x07, 0x68, 0x82, 0xa7, 0x07, 0x87, 0xe4, 0x98, 0x2f,
	0xd4, 0x96, 0x6b, 0xb7, 0xa7, 0x57, 0x1a, 0xcd, 0x61, 0xc9, 0xcd, 0xb6, 0x24, 0x69, 0xe5, 0xa4,
	0x8d, 0x4f, 0xd1, 0xb8, 0x02, 0x9d, 0xb2, 0xe6, 0x65, 0x54, 0xe3, 0x22, 0x91, 0x4b, 0xe6, 0x08,
	0x00, 0x38, 0x4d, 0x64, 0x95, 0x2b, 0x6c, 0x11, 0xda, 0x25, 0x89, 0xdd, 0x40, 0x63, 0x09, 0x8e,
	0xba, 0x4a, 0xcc, 0x58, 0x46, 0xad, 0x40, 0xce, 0x5d, 0x34, 0x5f, 0xd2, 0xef, 0x27, 0x98, 0x46,
	0x40, 0x2e, 0xe0, 0x87, 0x49, 0x2e, 0x41, 0xce, 0x5d, 0x74, 0xbe, 0x24, 0xdf, 0x4e, 0xfd, 0x7d,
	0xf2, 0x4a, 0x80, 0x96, 0x82, 0xbc, 0x12, 0xa6, 0x96, 0x00, 0x71, 0xfe, 0xa4, 0xa2, 0xd3, 0xb7,
	0xf1, 0xb1, 0xa4, 0xbf, 0x8e, 0x26, 0x48, 0x24, 0x5c, 0xea, 0xbf, 0x32, 0x96, 0x18, 0x27, 0x91,
	0xd8, 0xf1, 0x5f, 0x15, 0xe2, 0xaa, 0x83, 0xe2, 0x00, 0xe3, 0xf5, 0xb0, 0x58, 0xa8, 0xe9, 0x86,
	0x06, 0x88, 0x7d, 0x0b, 0x4d, 0x03, 0x05, 0x0e, 0x02, 0x49, 0x50, 0xd7, 0x08, 0x74, 0x84, 0xf3,
	0xb7, 0xc6, 0xde, 0x66, 0x0a, 0xad, 0xbc, 0x86, 0x46, 0x52, 0x6c, 0x75, 0x68, 0xdd, 0x25, 0x34,
	0x19, 0xf2, 0xae, 0x2b, 0x37, 0xa9, 0xa6, 0xe9, 0x3b, 0x11, 0xf2, 0xee, 0x63, 0xb5, 0x4f, 0xe3,
	0x31, 0x4e, 0x70, 0xc8, 0x17, 0xea, 0xcb, 0xb5, 0xdb, 0x53, 0xad, 0xec, 0xdf, 0xa0, 0xc2, 0x63,
	0x27, 0x29, 0xfc, 0x7d, 0xdd, 0x80, 0xa0, 0xec, 0x2e, 0xef, 0x82, 0xba, 0xb0, 0xaa, 0xcf, 0x85,
	0xa9, 0x6e, 0xc8, 0xbb, 0x1b, 0x5c, 0x68, 0x6b, 0xd6, 0xf4, 0x35, 0x9d, 0x7f, 0xab, 0xea, 0xce,
	0xb1, 0x9d, 0xfa, 0x20, 0x6b, 0x11, 0x4d, 0x78, 0x3d, 0x1c, 0x45, 0x24, 0x30, 0x64, 0xe5, 0x40,
	0x7b, 0x09, 0xd5, 0x62, 0xc6, 0xe5, 0xa7, 0x4f, 0xaf, 0xcc, 0x36, 0xd7, 0x77, 0x79, 0xf7, 0x19,
	0xf1, 0x04, 0x4b, 0x56, 0x36, 0x5a, 0x80, 0xb1, 0xaf, 0xa3, 0xba, 0x17, 0x24, 0xf7, 0xe5, 0xe7,
	0x4f, 0xaf, 0x4c, 0x49, 0x8a, 0xd6, 0xd6, 0xda, 0x6a, 0x4b, 0x82, 0x33, 0xf4, 0x8a, 0xdc, 0x92,
	0x21, 0xf4, 0x8a, 0x7d, 0x0d, 0x8d, 0x93, 0x4e, 0x87, 0x78, 0xca, 0x04, 0xa5, 0xe1, 0x25, 0xcc,
	0xbe, 0x85, 0x66, 0x3a, 0xd8, 0x27, 0x2e, 0x8d, 0x5c, 0x41, 0x43, 0xb2, 0x30, 0xbe, 0x5c, 0xb9,
	0x5d, 0xcd, 0x68, 0x10, 0x60, 0x76, 0xa2, 0x7d, 0x1a, 0x12, 0xfb, 0x36, 0x9a, 0x95, 0x74, 0x2c,
	0x15, 0x8a, 0x70, 0x42, 0x23, 0x9c, 0x06, 0xd4, 0x93, 0x54, 0x48, 0xca, 0x1b, 0x68, 0xaa, 0xc7,
	0x02, 0x5f, 0x51, 0x4d, 0x69, 0x54, 0x93, 0x00, 0x96, 0x24, 0xd7, 0xd1, 0x44, 0xe7, 0x95, 0x22,
	0x40, 0x1a, 0xc1, 0x78, 0xe7, 0x95, 0x44, 0xe7, 0xee, 0x39, 0x3d, 0xe4, 0xed, 0x7f, 0x5d, 0xd1,
	0x0f, 0x53, 0xbb, 0x87, 0x0f, 0x89, 0x34, 0x2f, 0x0b, 0x43, 0x1c, 0xf9, 0x03, 0xe6, 0x55, 0x40,
	0xfb, 0x2e, 0x9a, 0x0f, 0x98, 0x87, 0x03, 0x17, 0x87, 0x71, 0x40, 0x45, 0xea, 0x13, 0x69, 0xea,
	0x7c, 0xd1, 0x39, 0x89, 0x5c, 0xcd, 0x71, 0xb6, 0x83, 0xa6, 0x3a, 0x09, 0xf9, 0x2a, 0x25, 0x91,
	0x77, 0x2c, 0x2d, 0x9e, 0x13, 0x96, 0x60, 0x7b, 0x19, 0x4d, 0xfa, 0x69, 0x82, 0x05, 0x65, 0x91,
	0xb4, 0x7a, 0xf1, 0x85, 0x39, 0x14, 0x8e, 0xe5, 0x5c, 0xa9, 0xe8, 0x43, 0xec, 0x13, 0x83, 0x49,
	0x57, 0xb4, 0x80, 0x9a, 0x96, 0xab, 0xea, 0x24, 0x85, 0xe5, 0x1a, 0x68, 0xac, 0x13, 0xe0, 0x2e,
	0x97, 0x9a, 0x15, 0x91, 0x43, 0x82, 0xec, 0xab, 0xa8, 0xe6, 0x05, 0xc9, 0xb0, 0x1b, 0x00, 0xd4,
	0xf1, 0x75, 0xc7, 0x6c, 0xa5, 0xe1, 0x41, 0x20, 0x85, 0xd1, 0xc8, 0x27, 0xe6, 0x89, 0x54, 0x20,
	0xd8, 0x03, 0x1f, 0x0b, 0x6c, 0xa8, 0x21, 0x21, 0xa7, 0xa9, 0xe0, 0xfc, 0x65, 0x05, 0x5d, 0x2e,
	0x97, 0x59, 0x0f, 0x18, 0x27, 0xeb, 0x38, 0x96, 0x1f, 0xb7, 0x80, 0xea, 0x3d, 0xcc, 0x7b, 0x72,
	0xad, 0xd9, 0x5c, 0x20, 0x40, 0x0c, 0xc3, 0x54, 0x47, 0x1a, 0xe6, 0x26, 0x9a, 0xee, 0x24, 0x2c,
	0x74, 0xe3, 0x00, 0x1f, 0x93, 0xc4, 0x08, 0x4e, 0x08, 0x10, 0x7b, 0x12, 0x2e, 0x3d, 0xc1, 0x13,
	0xec, 0x90, 0xa8, 0x5d, 0x29, 0x22, 0x45, 0x06, 0x74, 0xfe, 0xb0, 0x82, 0xae, 0x8d, 0xd6, 0x6e,
	0x83, 0x26, 0x70, 0x18, 0xfe, 0xff, 0x75, 0x74, 0xbe, 0x8b, 0x2e, 0x68, 0x0e, 0x4c, 0x22, 0x7f,
	0x35, 0xf5, 0x29, 0x03, 0xee, 0x04, 0xfb, 0x94, 0xb9, 0x9c, 0xa5, 0x99, 0x23, 0xe7, 0xea, 0x23,
	0x89, 0x68, 0x03, 0xdc, 0xf9, 0xb9, 0x11, 0x5c, 0x5b, 0xf8, 0x48, 0x71, 0x37, 0xd0, 0x58, 0x4c,
	0x85, 0xd7, 0x33, 0x37, 0x52, 0x82, 0xe4, 0xf1, 0x8f, 0x04, 0xc4, 0xdd, 0xea, 0x40, 0xdc, 0xa5,
	0xfe, 0x2b, 0xe3, 0xbb, 0x6a, 0xa3, 0x3c, 0xd9, 0x7e, 0x07, 0xcd, 0xf5, 0x19, 0xf5, 0x88, 0xdb,
	0xa1, 0x01, 0x91, 0x51, 0x58, 0xb7, 0xed, 0xac, 0xc4, 0x3d, 0xcc, 0x50, 0xce, 0x7f, 0x55, 0xf4,
	0xcf, 0x7b, 0x06, 0xb8, 0x5d, 0xcc, 0x0f, 0xed, 0x35, 0x34, 0xa3, 0xec, 0xe2, 0x86, 0x98, 0x1f,
	0xf2, 0x85, 0x8a, 0xbc, 0xaa, 0x97, 0x9a, 0x23, 0x68, 0x9b, 0xca, 0x50, 0xf0, 0xb3, 0x35, 0x1d,
	0x17, 0xbf, 0xb9, 0x7d, 0x0f, 0x9d, 0xcf, 0x65, 0x30, 0xdf, 0x25, 0x11, 0x3e, 0x08, 0x88, 0x71,
	0x5f, 0xcc, 0x67, 0xd4, 0xcc, 0xdf, 0x94, 0xc8, 0xc6, 0xef, 0x22, 0x54, 0x0a, 0xb3, 0xdf, 0x45,
	0xf3, 0x5d, 0x1c, 0x12, 0x37, 0x49, 0x03, 0xc2, 0xa5, 0x1e, 0x86, 0xb9, 0x66, 0x01, 0xd9, 0x02,
	0x9c, 0xa4, 0xbe, 0x81, 0xa6, 0x0e, 0x70, 0x94, 0xa9, 0x6b, 0xec, 0xf8, 0x01, 0x8e, 0xa4, 0x42,
	0xce, 0xcf, 0x2a, 0xfa, 0x99, 0xda, 0xc0, 0x21, 0xee, 0x12, 0x30, 0x37, 0x0e, 0x59, 0x1a, 0x0d,
	0xdc, 0x1b, 0x0a, 0x66, 0x7f, 0x86, 0x2e, 0xd0, 0xa8, 0x13, 0x50, 0x88, 0xee, 0xee, 0x11, 0x4b,
	0x02, 0xdf, 0x2d, 0x43, 0xff, 0xb4, 0x16, 0xfa, 0x5b, 0xe7, 0x0b, 0xba, 0xe7, 0x40, 0xb6, 0xc7,
	0x38, 0x04, 0xb2, 0x3e, 0xf5, 0x04, 0x0d, 0x5d, 0xd8, 0x3c, 0x79, 0x70, 0xf5, 0x23, 0x38, 0xa7,
	0x90, 0x9b, 0x19, 0xce, 0xf9, 0xa9, 0xb1, 0x17, 0x2d, 0x70, 0xa2, 0x3c, 0x37, 0x38, 0xed, 0x6a,
	0xbb, 0x86, 0xc6, 0xbd, 0x80, 0x92, 0x48, 0x98, 0xfe, 0xa2, 0x60, 0xff, 0xeb, 0xdb, 0xd8, 0x69,
	0xea, 0x8e, 0xbb, 0x4d, 0x23, 0x71, 0x46, 0x5e, 0x73, 0x17, 0x5d, 0x2a, 0xe9, 0x3f, 0x27, 0xc7,
	0x05, 0xcb, 0x45, 0x34, 0xd6, 0xa3, 0x91, 0x50, 0x3e, 0x34, 0xd5, 0x52, 0x7f, 0x9c, 0x9f, 0xd6,
	0xd1, 0x5b, 0x25, 0xfd, 0x5e, 0xc2, 0x3c, 0xc2, 0x79, 0x3b, 0x66, 0x42, 0x10, 0x1f, 0x2c, 0x22,
	0x8e, 0x9f, 0xc6, 0x3e, 0x16, 0xc4, 0x7e, 0x13, 0xa1, 0x88, 0x1c, 0xb9, 0xa9, 0xfc, 0x27, 0xd7,
	0xcd, 0xdd, 0x67, 0x2a, 0x22, 0x47, 0x19, 0xd1, 0xef, 0xa1, 0x39, 0x22, 0x99, 0x32, 0x3a, 0xd8,
	0x21, 0x70, 0xd8, 0x4f, 0x9a, 0xaf, 0xb3, 0x46, 0x73, 0x04, 0xac, 0x35, 0x4b, 0xb4, 0x7f, 0xbc,
	0xf1, 0xaf, 0x55, 0x74, 0xe1, 0x04, 0xf5, 0xb2, 0x95, 0x07, 0x33, 0xa5, 0x29, 0x05, 0x87, 0x64,
	0x69, 0x09, 0x4d, 0x7a, 0x01, 0xe6, 0xdc, 0xa5, 0xbe, 0xb1, 0x49, 0x13, 0x12, 0xba, 0xe3, 0x03,
	0x01, 0x4b, 0x68, 0x97, 0x46, 0xae, 0xe9, 0x22, 0x13, 0x0a, 0xfa, 0xa5, 0x46, 0x70, 0x2c, 0x8f,
	0xf3, 0x00, 0xc1, 0x0b, 0x8d, 0xe0, 0x47, 0x46, 0xda, 0x90, 0x11, 0xbc, 0x04, 0x2f, 0xc2, 0x51,
	0x37, 0x20, 0xee, 0xb1, 0x4c, 0x19, 0x4a, 0x47, 0x07, 0xe0, 0x0b, 0x08, 0xc5, 0x3e, 0xe9, 0x40,
	0x2d, 0x21, 0x13, 0x85, 0xdc, 0xc6, 0x39, 0xd0, 0x5e, 0x41, 0x76, 0x76, 0x98, 0x7b, 0x98, 0xbb,
	0x39, 0xe9, 0xa4, 0x46, 0x6a, 0x29, 0xfc, 0x36, 0xe6, 0x1b, 0x19, 0xcf, 0x6d, 0x34, 0xab, 0xf1,
	0x78, 0x1f, 0xc8, 0xe4, 0xa2, 0x48, 0xe9, 0x0a, 0xf2, 0xf5, 0x0f, 0x9c, 0x03, 0x74, 0xdd, 0x0c,
	0xb2, 0x2a, 0x0c, 0xec, 0x08, 0x12, 0x6e, 0x24, 0x2c, 0xe6, 0xf6, 0xea, 0xd0, 0x06, 0x57, 0xf2,
	0xe2, 0x61, 0xd3, 0x63, 0x11, 0x10, 0xee, 0x25, 0xa4, 0x4f, 0xc9, 0xd1, 0x06, 0x16, 0x78, 0x2d,
	0x60, 0xde, 0xe1, 0xc0, 0x0e, 0x3a, 0xc7, 0x27, 0xaf, 0xf1, 0x10, 0x62, 0xb5, 0xfd, 0x00, 0x4d,
	0x52, 0x41, 0x42, 0x1a, 0x75, 0x98, 0xdc, 0xc8, 0xd3, 0xa5, 0x17, 0xb4, 0x10, 0x92, 0x8b, 0xf3,
	0x6d, 0x04, 0x9e, 0x1c, 0xea, 0xfc, 0xbc, 0xa6, 0x3b, 0x7b, 0x8b, 0x08, 0x7c, 0x48, 0x94, 0x5a,
	0x4a, 0x87, 0x75, 0x9c, 0xf8, 0x8f, 0x28, 0x17, 0xe0, 0x4d, 0xca, 0xb4, 0xee, 0x21, 0x15, 0xa6,
	0xb3, 0x2b, 0xf8, 0xe7, 0x54, 0xd8, 0x57, 0xd1, 0x54, 0x02, 0x0a, 0xbb, 0xea, 0x8e, 0xa8, 0xdd,
	0x1e, 0x6b, 0x4d, 0x4a, 0x80, 0x72, 0xb5, 0xe9, 0x80, 0x61, 0x1f, 0xb2, 0x3e, 0x40, 0xd7, 0x24,
	0x1a, 0x65, 0x20, 0x20, 0xb8, 0x82, 0x26, 0x3d, 0x9c, 0x28, 0xe6, 0xba, 0xc4, 0x4e, 0xc0, 0xff,
	0x0c, 0x25, 0x8e, 0x63, 0x22, 0x51, 0x63, 0x0a, 0x05, 0xff, 0x01, 0xf5, 0x3e, 0xba, 0x10, 0xf6,
	0x63, 0xf7, 0x80, 0x31, 0x2e, 0xdc, 0x72, 0x75, 0xdd, 0x93, 0xac, 0xb0, 0x1f, 0xaf, 0x01, 0xbe,
	0x95, 0xeb, 0xf2, 0x11, 0xba, 0x54, 0x32, 0xe9, 0x5a, 0x4d, 0x68, 0x6c, 0x76, 0xce, 0xf6, 0xa8,
	0xd4, 0xf1, 0x3e, 0xb2, 0x4b, 0xc6, 0x42, 0xdb, 0x49, 0x8d, 0x6b, 0x3e, 0xe7, 0x5a, 0xcf, 0x74,
	0xff, 0x0c, 0xbd, 0x51, 0xb2, 0x90, 0x57, 0x22, 0xc1, 0x6e, 0x2a, 0x68, 0x40, 0xc5, 0xb1, 0xf4,
	0xba, 0x9c, 0xef, 0x62, 0xce, 0xb7, 0x09, 0x24, 0x4f, 0x15, 0x85, 0xf3, 0x77, 0x15, 0x74, 0xe7,
	0xac, 0xfd, 0x69, 0x93, 0x80, 0x78, 0x79, 0xd6, 0x57, 0x5a, 0xc0, 0x48, 0x0c, 0x8b, 0x5d, 0xb8,
	0x69, 0xee, 0x82, 0xee, 0x15, 0xfa, 0x5e, 0x2c, 0x69, 0x7b, 0x61, 0x1c, 0xfb, 0x7c, 0x47, 0x96,
	0xb4, 0x1d, 0x31, 0x8e, 0x7d, 0xb6, 0x2f, 0xce, 0xdf, 0x1b, 0xf9, 0x5b, 0x8b, 0x80, 0xf0, 0x4d,
	0x55, 0x28, 0x94, 0x79, 0x44, 0x65, 0x44, 0x1e, 0xb1, 0x88, 0x26, 0xb0, 0x27, 0x70, 0x44, 0x43,
	0x33, 0x22, 0x65, 0xc0, 0xa1, 0x88, 0x54, 0x3d, 0x2b, 0x22, 0x55, 0xcf, 0x8a, 0x48, 0x03, 0x04,
	0x2f, 0x9d, 0xdf, 0x54, 0xf4, 0x2b, 0xe3, 0x39, 0xc1, 0x31, 0x8b, 0x64, 0xd6, 0x74, 0x86, 0xea,
	0xba, 0x6a, 0xd5, 0xb3, 0x54, 0xab, 0x9d, 0xa5, 0xda, 0x08, 0xdd, 0x5f, 0x42, 0x7e, 0xa6, 0xf2,
	0xba, 0x31, 0xed, 0x9e, 0x53, 0x20, 0xa8, 0x37, 0x20, 0xdf, 0xe7, 0x02, 0x87, 0xb1, 0x51, 0x7d,
	0x95, 0x60, 0xd8, 0x96, 0xa5, 0xf2, 0xd3, 0x94, 0x2b, 0xb5, 0xbd, 0x84, 0x90, 0x68, 0x9b, 0xe0,
	0x40, 0xf4, 0xd6, 0x70, 0x72, 0xc6, 0x47, 0xde, 0x45, 0xf3, 0x3d, 0x49, 0x2a, 0xb3, 0x3a, 0x97,
	0x05, 0xbe, 0x59, 0x04, 0x69, 0xc8, 0x27, 0x81, 0x3f, 0x48, 0x1e, 0x91, 0x23, 0xe3, 0xcb, 0x75,
	0xf2, 0xc7, 0xe4, 0x48, 0x7e, 0x9f, 0x38, 0x0e, 0x88, 0xe1, 0x54, 0x0a, 0xe4, 0xc4, 0x68, 0xb9,
	0x54, 0x5d, 0xdd, 0x75, 0x4f, 0x52, 0x11, 0xd0, 0x88, 0x6c, 0xd3, 0x6e, 0x2f, 0xa0, 0xdd, 0xde,
	0x59, 0xbe, 0xd5, 0x44, 0xf3, 0x09, 0x09, 0x59, 0x9f, 0xf4, 0x72, 0x06, 0x33, 0xed, 0x1b, 0x40,
	0x3a, 0x1f, 0xea, 0x7e, 0xb0, 0xea, 0xff, 0x30, 0xe5, 0x62, 0x97, 0x45, 0xe4, 0xf8, 0xf4, 0xdc,
	0xcc, 0xf9, 0x23, 0x33, 0x5f, 0x22, 0x31, 0x4b, 0xc4, 0x36, 0x15, 0xf6, 0x15, 0x34, 0x16, 0x33,
	0xee, 0x2a, 0xdd, 0x72, 0x0b, 0xd4, 0x63, 0xc6, 0xbf, 0xcc, 0x51, 0xc7, 0x86, 0x2d, 0x01, 0xf5,
	0xc2, 0xdc, 0xd6, 0xfa, 0xc8, 0x6d, 0xcd, 0xd9, 0x7f, 0x64, 0xd8, 0x16, 0xd8, 0x5f, 0x3a, 0x3f,
	0x31, 0xda, 0x3a, 0x9f, 0xd3, 0x20, 0x58, 0xc7, 0xea, 0x14, 0x1d, 0x70, 0xc8, 0x7f, 0xcd, 0x4e,
	0xd3, 0x04, 0x3b, 0xe0, 0xbb, 0xcc, 0x27, 0xf6, 0x77, 0xd0, 0x4c, 0x87, 0x26, 0x5c, 0xb8, 0x02,
	0x27, 0x5d, 0x62, 0xa6, 0x70, 0xd3, 0x12, 0xb3, 0x2f, 0x11, 0xf6, 0x1d, 0x34, 0xcb, 0x89, 0xc7,
	0x22, 0x3f, 0xa7, 0xd4, 0xe3, 0xc5, 0x8c, 0x42, 0x29, 0x52, 0xe7, 0xbf, 0x2b, 0xa8, 0xa1, 0xa5,
	0xb9, 0x84, 0xd3, 0x84, 0xc8, 0x62, 0x94, 0x7b, 0x38, 0x20, 0xf6, 0x7d, 0x74, 0xde, 0x57, 0x30,
	0x59, 0xb7, 0x4a, 0xa0, 0x61, 0x2a, 0xcb, 0x1f, 0x64, 0xf9, 0x18, 0x5d, 0xca, 0xcb, 0x0b, 0x37,
	0x01, 0x4f, 0xa2, 0x21, 0x71, 0x39, 0xf1, 0x0c, 0x33, 0x5e, 0xc8, 0x49, 0x5a, 0x19, 0x45, 0x9b,
	0x78, 0xb0, 0x18, 0x8d, 0x04, 0x49, 0x62, 0x16, 0x60, 0x48, 0xa1, 0x21, 0x6e, 0x19, 0xaa, 0x5b,
	0x3a, 0x7a, 0xff, 0x38, 0x26, 0x76, 0x13, 0x59, 0x5c, 0xe0, 0x44, 0xb8, 0x07, 0x01, 0x89, 0xb2,
	0xda, 0x5a, 0xdf, 0x8f, 0x39, 0x89, 0x5d, 0x03, 0x24, 0x68, 0xe8, 0x6c, 0xe9, 0x5f, 0xbb, 0x9e,
	0x26, 0x09, 0x89, 0x44, 0xa9, 0xfa, 0x1d, 0x34, 0xeb, 0xa5, 0xc9, 0x09, 0x5f, 0x3a, 0xe3, 0xa5,
	0x49, 0x41, 0xea, 0xfc, 0x81, 0x2e, 0x68, 0xd5, 0xeb, 0x51, 0xd2, 0x27, 0x21, 0x89, 0xc4, 0x66,
	0x1f, 0x12, 0xe9, 0x5b, 0x68, 0x1a, 0x97, 0x30, 0x63, 0x37, 0x75, 0x04, 0x1c, 0x2d, 0x4f, 0xba,
	0xac, 0xbe, 0x95, 0x0a, 0x04, 0x39, 0x18, 0x24, 0x46, 0x90, 0x06, 0xea, 0x36, 0x18, 0x07, 0xe0,
	0x8e, 0xef, 0xfc, 0xd2, 0x28, 0x77, 0x77, 0xb1, 0xf0, 0x7a, 0x9b, 0x91, 0xbf, 0xce, 0x22, 0x9f,
	0x82, 0x5d, 0xb9, 0x6a, 0x75, 0xe0, 0x6e, 0x40, 0x43, 0x6a, 0x6a, 0x50, 0x82, 0xc1, 0xa3, 0xc2,
	0xd8, 0x0d, 0xf1, 0x2b, 0x79, 0x19, 0x99, 0xa5, 0xd0, 0x74, 0x18, 0xef, 0xe6, 0x08, 0xb8, 0xa3,
	0xc2, 0xd8, 0x3d, 0xa2, 0x91, 0x12, 0xa7, 0x2b, 0x84, 0xc2, 0xf8, 0x79, 0x06, 0xcf, 0xe4, 0x81,
	0xfd, 0x14, 0x5d, 0xdd, 0x94, 0xb7, 0x9f, 0x23, 0x9c, 0xff, 0xac, 0xa0, 0xab, 0x5a, 0xb6, 0x2d,
	0x2f, 0xce, 0xb6, 0xc0, 0x82, 0x67, 0x99, 0xf2, 0x22, 0x9a, 0xe8, 0x93, 0x84, 0x0f, 0x76, 0x53,
	0x72, 0xa0, 0xfd, 0x11, 0xc4, 0x24, 0x2c, 0x54, 0x1d, 0x32, 0xbd, 0x72, 0xa3, 0x79, 0x8a, 0xb0,
	0x26, 0xfc, 0x6e, 0x29, 0x7a, 0xdd, 0xaa, 0x63, 0xc3, 0x56, 0xb5, 0x2f, 0xa3, 0x9a, 0x97, 0x78,
	0x46, 0xaa, 0x02, 0x80, 0xc6, 0xa7, 0xa8, 0x0e, 0x52, 0x00, 0x3f, 0x18, 0xc8, 0x00, 0x00, 0x1b,
	0xe9, 0x93, 0x60, 0xa0, 0xa3, 0xa2, 0x40, 0xce, 0x0f, 0x8c, 0x13, 0x46, 0x39, 0xe4, 0xb2, 0x3b,
	0x11, 0xf8, 0x09, 0x4b, 0x8e, 0x65, 0x2e, 0xad, 0x60, 0x46, 0x0a, 0x97, 0x03, 0x75, 0x85, 0xab,
	0x23, 0xdc, 0xe0, 0x17, 0x15, 0xf4, 0x46, 0x29, 0xfd, 0x8b, 0x94, 0x70, 0xb1, 0x97, 0xb0, 0x6e,
	0x42, 0x38, 0x87, 0x80, 0xf2, 0x15, 0x00, 0x80, 0x57, 0x6f, 0x7a, 0x4c, 0x48, 0xe8, 0x8e, 0x0f,
	0xfe, 0x1e, 0xb1, 0x24, 0xc4, 0x81, 0x1b, 0x33, 0x59, 0x75, 0x55, 0x35, 0xaa, 0x19, 0x85, 0xda,
	0x93, 0x18, 0xd8, 0xd9, 0x03, 0x16, 0xa5, 0x3c, 0xa7, 0xac, 0x69, 0x94, 0xd3, 0x12, 0x93, 0x11,
	0xbe, 0x8d, 0xe6, 0x28, 0x77, 0x09, 0x7c, 0x9e, 0x2b, 0xd7, 0x31, 0x9a, 0xc9, 0x33, 0x94, 0xcb,
	0x13, 0x22, 0x15, 0x75, 0x3e, 0x47, 0x8b, 0x5a, 0x96, 0xed, 0xb1, 0x84, 0x3c, 0x22, 0xd8, 0x27,
	0xc9, 0x01, 0xc3, 0x89, 0x0f, 0xd9, 0xb3, 0x7d, 0x27, 0x6b, 0x54, 0xa9, 0x14, 0xfb, 0x52, 0x73,
	0x14, 0x91, 0xea, 0x5c, 0x39, 0x2f, 0xd0, 0xcd, 0x41, 0x27, 0xd8, 0x20, 0x1e, 0x0e, 0x36, 0x68,
	0x97, 0x0a, 0x1c, 0xb4, 0x69, 0x37, 0xc2, 0x22, 0x4d, 0x88, 0x7d, 0xcf, 0x90, 0x79, 0xad, 0x79,
	0x0a, 0x6d, 0x26, 0xfa, 0x07, 0x7a, 0x79, 0xfb, 0x65, 0x0b, 0x47, 0x87, 0x5b, 0x44, 0x55, 0xcb,
	0xcc, 0x27, 0x43, 0x99, 0xdd, 0x04, 0x40, 0x21, 0x21, 0x7b, 0x0b, 0x21, 0x8f, 0x45, 0x22, 0x61,
	0x41, 0x40, 0x12, 0x33, 0xaf, 0x2b, 0xe1, 0xce, 0xef, 0x0f, 0x09, 0x7f, 0x1a, 0xfb, 0xff, 0x47,
	0xc2, 0xc1, 0xbb, 0x12, 0x1c, 0x1d, 0xd2, 0xa8, 0x6b, 0xe6, 0x8c, 0x19, 0xd0, 0x69, 0xa1, 0x05,
	0x2d, 0x1e, 0xe2, 0x20, 0x78, 0xc6, 0x04, 0x79, 0x88, 0x69, 0x40, 0x64, 0x62, 0x95, 0x10, 0xcc,
	0x07, 0x8e, 0x60, 0x06, 0x93, 0xc5, 0xfd, 0x60, 0x27, 0x53, 0x42, 0x9c, 0x5f, 0x56, 0xcd, 0x36,
	0x91, 0x20, 0x6d, 0x08, 0xc2, 0xaa, 0x1d, 0x80, 0x43, 0x43, 0x9a, 0x84, 0xe8, 0xe3, 0x83, 0xea,
	0x88, 0xf1, 0xc1, 0x0d, 0x34, 0xd5, 0x67, 0x82, 0x0c, 0xdf, 0x07, 0x93, 0x00, 0x96, 0xf7, 0xc0,
	0x12, 0x9a, 0x84, 0x03, 0xe3, 0x72, 0x91, 0x98, 0xdd, 0x41, 0x80, 0xb6, 0x45, 0x02, 0x01, 0xcc,
	0x27, 0x02, 0xd3, 0x80, 0x4b, 0x1a, 0x3d, 0x55, 0x43, 0x19, 0x02, 0xc8, 0xde, 0x46, 0x73, 0x4c,
	0xf4, 0x48, 0xe2, 0x82, 0x5e, 0x92, 0x72, 0x5c, 0xa3, 0x9c, 0x91, 0xb8, 0x7d, 0x82, 0x43, 0xa0,
	0xbd, 0x23, 0x3d, 0xfd, 0x98, 0x70, 0x37, 0x62, 0x2e, 0x68, 0x62, 0x14, 0xc3, 0xd3, 0x94, 0xbf,
	0x20, 0xfc, 0x31, 0x83, 0xef, 0x87, 0x83, 0xa6, 0xd2, 0x9d, 0xfc, 0x42, 0xd6, 0xcb, 0x93, 0x19,
	0x85, 0xca, 0x2e, 0xe4, 0x3f, 0x37, 0xa7, 0x67, 0x4c, 0x90, 0x3d, 0xcc, 0xf9, 0x29, 0xc6, 0x33,
	0xac, 0x53, 0x3d, 0xd3, 0x3a, 0xb5, 0xd7, 0xb0, 0x4e, 0x7d, 0xb4, 0x75, 0x9c, 0xc7, 0xe8, 0xa2,
	0xa9, 0x5a, 0xe6, 0x29, 0x27, 0x2b, 0x57, 0xfa, 0x50, 0x75, 0xd8, 0x87, 0x9c, 0xef, 0x0d, 0x39,
	0x0a, 0x11, 0x69, 0x6c, 0xdf, 0x41, 0x56, 0xcc, 0x04, 0x58, 0x05, 0x07, 0x2e, 0xe5, 0x3c, 0x25,
	0x79, 0x3f, 0x68, 0xbe, 0x80, 0xef, 0x48, 0xb0, 0xf3, 0xcf, 0x15, 0x74, 0xcb, 0x2c, 0xd4, 0x1f,
	0x61, 0x2e, 0x20, 0xa3, 0x22, 0x89, 0xea, 0xd9, 0xed, 0xb3, 0x75, 0xd5, 0xdc, 0x7a, 0x1b, 0xcd,
	0x45, 0x69, 0xe8, 0xf6, 0xa8, 0xe0, 0x6e, 0x97, 0xf6, 0x89, 0xe9, 0xd6, 0x33, 0x51, 0x1a, 0x6e,
	0x53, 0xc1, 0xb7, 0x00, 0x03, 0xd1, 0xce, 0x97, 0xdc, 0x19, 0xa5, 0x71, 0x2f, 0x2a, 0x8c, 0x22,
	0xd4, 0x85, 0x42, 0x21, 0x18, 0x99, 0xa9, 0x56, 0x26, 0x74, 0x1f, 0x30, 0x9a, 0x50, 0x45, 0x59,
	0x1f, 0x16, 0x2a, 0x09, 0x9d, 0x7f, 0xac, 0xea, 0x37, 0x46, 0x9b, 0x24, 0x7d, 0x92, 0x64, 0x71,
	0x01, 0xee, 0xc6, 0x2d, 0x34, 0x0d, 0xc7, 0xb7, 0xec, 0x72, 0xc1, 0x0d, 0x78, 0xab, 0x79, 0x32,
	0x47, 0xb3, 0xfc, 0xd9, 0x42, 0x49, 0xf1, 0xbb, 0xf1, 0x6d, 0x05, 0x21, 0x4d, 0xee, 0x9b, 0x08,
	0x61, 0x4f, 0xe6, 0x1e, 0xf9, 0x85, 0x51, 0x64, 0x0c, 0x19, 0x5c, 0x35, 0x9f, 0xe4, 0xe2, 0x79,
	0x8d, 0x61, 0x44, 0x14, 0x28, 0x2e, 0x72, 0x82, 0xbc, 0xaa, 0x30, 0x08, 0xa0, 0x9c, 0x58, 0x42,
	0x93, 0x60, 0xb2, 0x23, 0x1a, 0x71, 0xb3, 0x4c, 0x8d, 0xd2, 0xf0, 0x39, 0x8d, 0xb8, 0xea, 0x96,
	0x47, 0x87, 0xae, 0xd7, 0x93, 0x43, 0x57, 0xbd, 0x1c, 0x94, 0xda, 0xaf, 0x4b, 0xb8, 0x7d, 0x0b,
	0xcd, 0x48, 0xb2, 0xac, 0xe6, 0x35, 0xee, 0x6c, 0x49, 0xb7, 0x2f, 0xcb, 0x5e, 0xe7, 0xb9, 0x11,
	0x5f, 0xe3, 0xec, 0x63, 0x57, 0x8d, 0x4b, 0xe0, 0xae, 0x6c, 0xce, 0x6e, 0xad, 0xaf, 0x17, 0x53,
	0xed, 0xfe, 0x8a, 0xbb, 0xb5, 0xbe, 0xa2, 0x2c, 0xf9, 0x98, 0x09, 0xda, 0x39, 0xfe, 0x72, 0xaf,
	0x45, 0x8e, 0x70, 0xe2, 0x13, 0x3f, 0xbb, 0x15, 0xee, 0xe9, 0xa7, 0x41, 0xb6, 0x7d, 0xa8, 0x77,
	0x98, 0xc6, 0x70, 0x1a, 0xa8, 0x20, 0xa1, 0xd9, 0xf6, 0x04, 0x88, 0xf3, 0xb5, 0x39, 0x3d, 0xed,
	0xb1, 0x23, 0x39, 0x19, 0x6f, 0x22, 0xeb, 0x00, 0x1c, 0xa8, 0x8f, 0x03, 0xea, 0xbb, 0x3c, 0x60,
	0xb2, 0xff, 0xa9, 0xf5, 0x7e, 0x01, 0xfb, 0x0c, 0x90, 0x6d, 0xc0, 0x49, 0x47, 0x52, 0xd9, 0xc1,
	0xf0, 0x30, 0x69, 0x3a, 0xc3, 0xc8, 0x79, 0x12, 0x64, 0x6d, 0x24, 0x4a, 0xe1, 0x4c, 0xe7, 0x37,
	0x40, 0x71, 0xac, 0x01, 0xd1, 0x96, 0x70, 0x73, 0x28, 0xbd, 0x86, 0x93, 0x62, 0x4c, 0x47, 0x07,
	0x47, 0xe7, 0x32, 0xbe, 0x3f, 0xd0, 0xbf, 0x7b, 0x35, 0x0c, 0xd9, 0x06, 0x89, 0x28, 0xf1, 0x65,
	0x97, 0x20, 0x0c, 0xd9, 0xce, 0xe0, 0x8d, 0x95, 0x01, 0x9d, 0x75, 0x74, 0x45, 0x4f, 0x58, 0x93,
	0x43, 0x2d, 0x6d, 0x1e, 0x95, 0x31, 0x4f, 0x8d, 0xc8, 0x98, 0x9d, 0x4f, 0xf5, 0xa3, 0x21, 0xb3,
	0x5e, 0x3d, 0x6d, 0xbc, 0x86, 0xc6, 0xb5, 0xde, 0xef, 0x54, 0x91, 0x2b, 0x49, 0x98, 0xf3, 0x58,
	0xb7, 0x7e, 0xde, 0x2e, 0x04, 0x1e, 0xd9, 0x9d, 0x53, 0x2e, 0x5f, 0xcb, 0x79, 0x14, 0x4c, 0x25,
	0x76, 0x58, 0xf4, 0x8c, 0xa2, 0x54, 0x81, 0x9c, 0x4f, 0xf4, 0x0f, 0xda, 0x0a, 0xd8, 0xd1, 0x5e,
	0xc2, 0xe2, 0xfd, 0x34, 0x89, 0x9e, 0x74, 0x3a, 0xa7, 0x57, 0xbd, 0xce, 0xcf, 0x2a, 0x7a, 0xea,
	0x23, 0x9b, 0x60, 0x6b, 0x18, 0xbc, 0x27, 0x1f, 0xb6, 0xf0, 0xb2, 0x36, 0xa8, 0x0c, 0xd7, 0x06,
	0xc5, 0x6c, 0xaf, 0x3a, 0x3c, 0xdb, 0x5b, 0x46, 0x93, 0xc5, 0x30, 0x47, 0xdf, 0xf1, 0x02, 0x0a,
	0x14, 0x11, 0xf5, 0x86, 0xc7, 0x3d, 0x05, 0xd4, 0x89, 0xf5, 0xf9, 0x66, 0xbb, 0xfd, 0x74, 0xa7,
	0x78, 0xa3, 0x51, 0x19, 0x7a, 0xa3, 0xf1, 0x26, 0x42, 0xaa, 0x04, 0x2b, 0x7c, 0xb1, 0x28, 0x86,
	0x25, 0x5c, 0x7a, 0xd3, 0x12, 0x9a, 0x2c, 0xea, 0x33, 0xa3, 0xcb, 0x92, 0x17, 0x66, 0x7f, 0x31,
	0xa6, 0xe7, 0xb1, 0xed, 0x34, 0xe9, 0xd3, 0x3e, 0x0e, 0xe4, 0xde, 0xc2, 0xda, 0xaf, 0xd2, 0x6c,
	0x7f, 0xea, 0xf9, 0xda, 0x00, 0xb1, 0xdf, 0x47, 0x63, 0x1d, 0xec, 0x89, 0xbc, 0x83, 0x7f, 0xbd,
	0x79, 0x82, 0x88, 0xe6, 0x43, 0xec, 0x89, 0x96, 0xa2, 0xb5, 0x3f, 0x46, 0x63, 0x90, 0x3c, 0xe7,
	0x4f, 0x4a, 0x9c, 0x13, 0x99, 0xf6, 0x02, 0xec, 0x49, 0xaf, 0x6b, 0x29, 0x06, 0xfb, 0x13, 0x34,
	0xa1, 0xe2, 0x34, 0x97, 0x2d, 0x4f, 0x73, 0xc6, 0x65, 0xf2, 0xaa, 0xcb, 0xa7, 0x95, 0xd3, 0x43,
	0xba, 0x26, 0xa8, 0x77, 0x18, 0xa5, 0xe1, 0x01, 0x49, 0x8c, 0xb8, 0xa7, 0xc1, 0x1b, 0x7f, 0x5c,
	0x41, 0x75, 0x50, 0x55, 0x9e, 0x3e, 0xb8, 0xcf, 0xcd, 0x1b, 0x15, 0xee, 0x72, 0xad, 0x5e, 0x30,
	0xe2, 0x6f, 0x5e, 0x2f, 0x34, 0xd0, 0x58, 0x1f, 0x07, 0xa9, 0x99, 0x28, 0x29, 0x90, 0xdd, 0x44,
	0xf3, 0xb2, 0x82, 0x26, 0x5c, 0xd0, 0xa8, 0x1b, 0x11, 0xce, 0x8d, 0x62, 0x79, 0x10, 0xd9, 0x60,
	0x68, 0xaa, 0xb0, 0xc1, 0x29, 0xbb, 0x00, 0xdf, 0x46, 0x70, 0x98, 0x7d, 0x9b, 0x91, 0x8a, 0x96,
	0x70, 0xa8, 0x47, 0xe3, 0x5c, 0x98, 0xa1, 0x5c, 0x09, 0x6e, 0x7c, 0x5d, 0x41, 0xe3, 0xd9, 0xa8,
	0xed, 0xe4, 0xe5, 0x2e, 0xa2, 0xaa, 0x60, 0xc6, 0x32, 0x55, 0xc1, 0x20, 0x87, 0x14, 0x4c, 0x5e,
	0xc4, 0x66, 0xb9, 0x2c, 0x18, 0xdc, 0xc0, 0x20, 0xae, 0x93, 0xb0, 0xd0, 0xb0, 0xbc, 0x84, 0x40,
	0xfe, 0x24, 0x47, 0xbb, 0x92, 0x55, 0xaf, 0x09, 0x27, 0x01, 0x0c, 0xcc, 0xce, 0xbf, 0xd4, 0x91,
	0xa3, 0xb7, 0xb9, 0xfc, 0x27, 0x1d, 0x19, 0x7a, 0x56, 0x83, 0x40, 0x15, 0x0f, 0x5c, 0x16, 0x2b,
	0xfb, 0x68, 0x16, 0x07, 0x81, 0x1a, 0x55, 0x64, 0x97, 0x0b, 0x38, 0x49, 0xb3, 0x79, 0x36, 0x6f,
	0x5e, 0x84, 0x40, 0x39, 0x63, 0x0a, 0x91, 0xed, 0x37, 0x8f, 0x44, 0x66, 0x98, 0x57, 0xa0, 0x46,
	0x80, 0x26, 0x57, 0x3d, 0x8f, 0x05, 0x58, 0x3d, 0x6d, 0x20, 0x38, 0xfb, 0x33, 0x30, 0x5b, 0xca,
	0xc1, 0xa5, 0x73, 0xe8, 0xc7, 0x34, 0x73, 0x8e, 0x65, 0x34, 0x19, 0x33, 0x4e, 0x8b, 0x61, 0x71,
	0x61, 0x86, 0x1c, 0xda, 0xf8, 0xa7, 0x6a, 0x3e, 0x72, 0x95, 0x9f, 0xab, 0x8f, 0x32, 0x2a, 0xa3,
	0x46, 0x19, 0xc5, 0x1e, 0x56, 0x87, 0xf6, 0x30, 0x7f, 0x98, 0x55, 0x1b, 0x7a, 0x98, 0x65, 0x3a,
	0x53, 0xfd, 0x04, 0x67, 0x7a, 0x84, 0x50, 0xc4, 0x42, 0x1a, 0xa9, 0xd9, 0xf6, 0x98, 0xbc, 0xc4,
	0xdf, 0x7d, 0x1d, 0x3b, 0xe7, 0xe6, 0x6a, 0x69, 0xfc, 0xf6, 0x3d, 0x34, 0x06, 0xe1, 0x9e, 0x2f,
	0x8c, 0x9f, 0x39, 0x27, 0x52, 0x84, 0x70, 0x5d, 0xa9, 0x2d, 0xf2, 0x58, 0xc0, 0x12, 0x63, 0x46,
	0xa1, 0x23, 0x64, 0xa0, 0xe6, 0x07, 0x4c, 0x18, 0xc3, 0x2f, 0x05, 0x72, 0xbe, 0x46, 0x43, 0x77,
	0xc0, 0x4e, 0x18, 0x63, 0x4f, 0xc8, 0x22, 0x57, 0x9a, 0xf8, 0x25, 0x1c, 0x58, 0x2a, 0x5c, 0xaf,
	0x68, 0xeb, 0x64, 0x09, 0xcb, 0xfd, 0xe6, 0xe9, 0x9c, 0xcd, 0x9d, 0x88, 0x42, 0x9a, 0x5c, 0xf6,
	0x83, 0x5a, 0x73, 0x20, 0x49, 0xeb, 0x0f, 0x3d, 0x45, 0x36, 0x0e, 0x02, 0x37, 0x29, 0xaa, 0xf5,
	0xec, 0x45, 0x08, 0x58, 0xe0, 0xf6, 0x59, 0xe2, 0x5b, 0x59, 0x1d, 0xdf, 0x9a, 0xc7, 0x41, 0x90,
	0xff, 0x01, 0x4c, 0xe3, 0xaf, 0x26, 0xd0, 0x64, 0x0e, 0x30, 0xfb, 0xa4, 0x95, 0xd1, 0x7d, 0xd2,
	0x77, 0xd0, 0x9c, 0x20, 0x49, 0xc2, 0x12, 0xca, 0x85, 0xcb, 0xfc, 0x81, 0x2e, 0xd4, 0x6c, 0x81,
	0x7b, 0xe2, 0xfb, 0xb2, 0xa5, 0xe1, 0x09, 0x17, 0x07, 0xb4, 0x4f, 0x06, 0x86, 0x20, 0x62, 0x15,
	0x80, 0x32, 0x0c, 0x64, 0xf8, 0xba, 0x11, 0x06, 0x14, 0x7a, 0x0f, 0x4d, 0x67, 0x53, 0x76, 0xf9,
	0xb5, 0xca, 0x71, 0xde, 0x7b, 0xdd, 0xaf, 0x6d, 0x3e, 0x93, 0xbc, 0x2d, 0xa4, 0x64, 0xc8, 0x2d,
	0x7a, 0x81, 0xe6, 0xd8, 0xc1, 0x0f, 0x89, 0x27, 0x68, 0x9f, 0x28, 0xa1, 0xe3, 0x52, 0xe8, 0xca,
	0x6b, 0x0b, 0x7d, 0x92, 0xb3, 0xb7, 0x66, 0x0b, 0x49, 0x52, 0xf4, 0x73, 0x04, 0xd6, 0x75, 0xb3,
	0xa2, 0x41, 0xca, 0x9e, 0x90, 0xdb, 0xf3, 0xfa, 0x0a, 0x67, 0xd7, 0x10, 0x84, 0x14, 0xf5, 0x53,
	0xee, 0xd1, 0x3f, 0x54, 0xd0, 0xb8, 0xfa, 0x14, 0x48, 0x11, 0x65, 0xa9, 0x9b, 0x9d, 0xb7, 0xca,
	0xe0, 0x79, 0x7b, 0xac, 0xce, 0xdb, 0x99, 0x63, 0xcb, 0xe2, 0xac, 0xd7, 0x86, 0xce, 0xba, 0x4c,
	0x64, 0xe0, 0x94, 0xd4, 0xcd, 0x44, 0x06, 0xce, 0xc7, 0x55, 0x34, 0x4e, 0xb9, 0x0b, 0x07, 0x64,
	0xcc, 0x3c, 0x20, 0x6b, 0x4c, 0x76, 0x40, 0x29, 0x77, 0x7d, 0x82, 0x55, 0x72, 0x3f, 0x59, 0xa4,
	0x66, 0x7c, 0x83, 0x60, 0xbf, 0x71, 0x13, 0x4d, 0x15, 0xa6, 0x3b, 0xf9, 0xc2, 0x6c, 0x7c, 0x5d,
	0x2d, 0xee, 0x94, 0xbb, 0x68, 0x5e, 0xd5, 0xdf, 0xee, 0xc8, 0xc0, 0x35, 0xa7, 0x90, 0xf9, 0x1b,
	0x0b, 0x69, 0x1b, 0x45, 0x3e, 0x14, 0xc5, 0x90, 0x42, 0x7c, 0x09, 0xdf, 0xf7, 0x0e, 0xca, 0x26,
	0x26, 0xae, 0x9a, 0x55, 0x98, 0xfd, 0xda, 0x59, 0x85, 0x6b, 0x29, 0x54, 0x5e, 0xfd, 0xc8, 0xcb,
	0x66, 0xb0, 0xfa, 0x91, 0x17, 0xd5, 0xc7, 0xe8, 0x52, 0x42, 0x44, 0x9a, 0x44, 0xee, 0x80, 0x50,
	0xfd, 0x6a, 0xba, 0xa0, 0x48, 0xb6, 0x0d, 0xd1, 0xef, 0xa2, 0x79, 0x10, 0x9d, 0x73, 0xc3, 0x0a,
	0x7a, 0x4d, 0x34, 0x1b, 0xa5, 0x61, 0x4b, 0xb1, 0x51, 0xc1, 0x1b, 0x7f, 0x56, 0x41, 0xe7, 0x87,
	0x82, 0x04, 0xd4, 0xb3, 0x9e, 0x70, 0xc9, 0x57, 0x29, 0x8d, 0x5d, 0x75, 0x53, 0x18, 0x45, 0xb2,
	0x27, 0x36, 0x01, 0xf5, 0x4c, 0x5e, 0x18, 0xb7, 0xd1, 0xac, 0x49, 0x6a, 0xd4, 0x21, 0x3a, 0xe5,
	0xf0, 0x11, 0xaf, 0x9d, 0x78, 0xc4, 0x9d, 0x07, 0x23, 0x5a, 0xf4, 0xd2, 0xc9, 0x65, 0x00, 0x58,
	0x40, 0x75, 0x29, 0xc0, 0xd8, 0x67, 0x80, 0x38, 0xbb, 0x7a, 0x33, 0x61, 0x83, 0x90, 0x58, 0x25,
	0x8f, 0x0f, 0xf2, 0x4e, 0xb1, 0x0a, 0x9c, 0xcb, 0x79, 0xa5, 0xd7, 0xce, 0x2b, 0x3d, 0xd5, 0x1e,
	0x28, 0x18, 0xb2, 0x46, 0xb1, 0x73, 0xcf, 0x78, 0x8b, 0x45, 0x38, 0x11, 0xdb, 0xa9, 0xf4, 0xe5,
	0x04, 0x7e, 0x1b, 0x79, 0xb0, 0x02, 0x39, 0xf7, 0x75, 0x05, 0xb6, 0x70, 0x48, 0xf6, 0xa9, 0x50,
	0xef, 0xf0, 0xfc, 0x34, 0x0c, 0x8f, 0xcd, 0x3c, 0x5e, 0x82, 0x9c, 0x0f, 0xcc, 0x81, 0xac, 0xec,
	0x97, 0x82, 0x16, 0xa7, 0x73, 0x7d, 0xa2, 0xf7, 0xce, 0xdb, 0x82, 0xc5, 0xed, 0x98, 0x78, 0x02,
	0x0b, 0x96, 0xc8, 0x31, 0xd1, 0x6b, 0xb3, 0x6e, 0x50, 0xee, 0xb1, 0x28, 0x22, 0x9e, 0xd8, 0x67,
	0x8f, 0xd8, 0xc1, 0xc1, 0xf1, 0xa9, 0xac, 0x0f, 0xf4, 0x56, 0xe1, 0x73, 0x9c, 0x84, 0x69, 0xbc,
	0x8d, 0xf9, 0x66, 0xe4, 0x13, 0xff, 0x54, 0xbe, 0x15, 0xbd, 0x5c, 0x54, 0xc6, 0xde, 0x89, 0x3a,
	0xec, 0x54, 0x9e, 0xbf, 0xa9, 0x98, 0xef, 0x2f, 0xf2, 0x7e, 0x46, 0x8b, 0xf4, 0x09, 0x0e, 0x56,
	0x83, 0x00, 0x8e, 0x89, 0x9a, 0x63, 0x71, 0x57, 0xd0, 0x20, 0x70, 0x79, 0x2f, 0x15, 0x3e, 0x3b,
	0x32, 0x9b, 0x3a, 0x17, 0x32, 0x92, 0x7d, 0x1a, 0x04, 0xed, 0x8c, 0xc0, 0xfe, 0x02, 0x4d, 0xc3,
	0x7e, 0x25, 0xfd, 0xf2, 0xbd, 0x9f, 0x8c, 0xa8, 0x03, 0x6e, 0xd1, 0x5f, 0x51, 0xe5, 0x65, 0x88,
	0x0f, 0x69, 0xd4, 0x2d, 0x7a, 0x01, 0x2d, 0xc9, 0x4a, 0x5a, 0xba, 0x8c, 0xb7, 0x7f, 0x3c, 0x8f,
	0x2e, 0x6f, 0x16, 0xbd, 0x83, 0xa7, 0x9c, 0x24, 0xbb, 0xd9, 0x93, 0x78, 0xdb, 0x46, 0x73, 0xeb,
	0x6d, 0xf7, 0xe9, 0x6e, 0xf1, 0x5a, 0xdd, 0xaa, 0xd8, 0x16, 0x9a, 0x51, 0x30, 0xf5, 0xbe, 0xdc,
	0xaa, 0xda, 0xf3, 0x68, 0x5a, 0x41, 0xe4, 0x0b, 0x72, 0xab, 0x66, 0x9f, 0x47, 0xb3, 0x0a, 0x90,
	0xbd, 0x11, 0xb7, 0xea, 0x25, 0x28, 0x7b, 0x75, 0x6d, 0x8d, 0x95, 0xc2, 0xf3, 0x87, 0xd8, 0xd6,
	0x78, 0x49, 0x96, 0x3d, 0x76, 0xb6, 0x26, 0xca, 0xf5, 0xd4, 0x93, 0x65, 0x6b, 0xb2, 0x64, 0xcc,
	0x1d, 0xdb, 0x9a, 0xb2, 0x2f, 0xa0, 0xf9, 0x4c, 0xab, 0xdc, 0x75, 0x2d, 0x54, 0x2a, 0x26, 0x5f,
	0xe3, 0x5a, 0x33, 0xf6, 0x1c, 0x42, 0x0a, 0xf0, 0x10, 0xfb, 0xc4, 0x9a, 0x2d, 0x65, 0xab, 0x57,
	0xa7, 0xd6, 0x9c, 0x7d, 0x19, 0xd9, 0x0a, 0xa2, 0x3f, 0xc1, 0xb4, 0xe6, 0xed, 0x6b, 0x68, 0x61,
	0x18, 0xae, 0x9e, 0x66, 0x5a, 0x56, 0xb9, 0x7a, 0xf1, 0x6a, 0xd2, 0x3a, 0xaf, 0xa9, 0x99, 0xbd,
	0x85, 0xb4, 0xec, 0x92, 0xb0, 0x78, 0x53, 0x68, 0x5d, 0x28, 0xd7, 0xd4, 0xcf, 0x90, 0x75, 0xb1,
	0xd4, 0x4e, 0x5d, 0x00, 0xd6, 0xa5, 0x92, 0xbd, 0x78, 0x32, 0x67, 0x5d, 0x2e, 0xd7, 0xc9, 0xdf,
	0xa1, 0x59, 0x6f, 0xd8, 0x97, 0xd0, 0x79, 0x05, 0xd3, 0x9e, 0xa7, 0x59, 0x0b, 0xf6, 0x5b, 0x68,
	0x59, 0x81, 0x4f, 0x7e, 0x21, 0x66, 0x5d, 0xd1, 0xf5, 0x29, 0x1f, 0x59, 0x58, 0x8d, 0x52, 0xa8,
	0x36, 0xb8, 0xb6, 0xae, 0xda, 0x57, 0xd0, 0x25, 0x05, 0x56, 0x02, 0xf6, 0x09, 0x0e, 0x15, 0xea,
	0x9a, 0x7d, 0x15, 0xbd, 0x91, 0xd9, 0x65, 0xf0, 0x9c, 0x5b, 0xd7, 0xcb, 0xbd, 0xce, 0x46, 0xc8,
	0xd6, 0xa2, 0xdd, 0x40, 0x97, 0xb3, 0x2f, 0x1e, 0x98, 0xcb, 0x5a, 0x4b, 0x25, 0x6e, 0x70, 0xf0,
	0x69, 0x2d, 0x97, 0xb8, 0xc1, 0x59, 0xa6, 0x75, 0xa3, 0xdc, 0xb9, 0xe1, 0x29, 0xa3, 0xe5, 0x94,
	0x1a, 0x0e, 0x85, 0x13, 0xeb, 0xcd, 0x12, 0x39, 0x34, 0x95, 0xb3, 0xde, 0xd2, 0x74, 0x1d, 0x18,
	0x8a, 0x59, 0x37, 0xed, 0x05, 0x74, 0x51, 0xe1, 0xcc, 0x48, 0x63, 0xdd, 0xb2, 0x2f, 0x22, 0x2b,
	0xf7, 0xa3, 0x3c, 0x96, 0x58, 0xdf, 0x29, 0xb7, 0x30, 0x1f, 0xcf, 0x58, 0xb7, 0x07, 0x60, 0x4f,
	0x63, 0xdf, 0xba, 0x53, 0xca, 0x35, 0x87, 0x1d, 0xd6, 0x5d, 0xdd, 0xb1, 0xb2, 0x89, 0x85, 0xd5,
	0xd4, 0x8e, 0x6f, 0xd6, 0x88, 0xb7, 0xde, 0x2b, 0x15, 0xd0, 0xd8, 0xef, 0x0d, 0xb0, 0x13, 0x91,
	0xc6, 0xd6, 0x7d, 0xfb, 0x3a, 0xba, 0x92, 0x7b, 0xf5, 0x50, 0x08, 0xb3, 0x56, 0xec, 0x5b, 0xc8,
	0x29, 0x9d, 0xfe, 0xa4, 0xc6, 0xb5, 0xf5, 0x7e, 0x69, 0xa8, 0xc1, 0xce, 0xae, 0xf5, 0x41, 0xa9,
	0x4d, 0xd9, 0x81, 0xb4, 0x3e, 0xd4, 0x22, 0x43, 0xd6, 0x64, 0xb4, 0x1e, 0x94, 0xde, 0x92, 0xb5,
	0xf8, 0xac, 0x8f, 0x4a, 0xe6, 0xb2, 0x8d, 0x67, 0x7d, 0x5c, 0xba, 0xe3, 0x40, 0x93, 0xce, 0xfa,
	0xa4, 0xd4, 0x64, 0xb0, 0xf5, 0x66, 0x7d, 0x5a, 0xae, 0x99, 0xb7, 0xd6, 0xac, 0xcf, 0x4a, 0x51,
	0x03, 0xed, 0x31, 0xeb, 0xbb, 0xba, 0x6d, 0x86, 0x9e, 0xf0, 0x59, 0xbf, 0x65, 0x2f, 0xa2, 0x46,
	0x76, 0x84, 0x46, 0x34, 0xc7, 0xac, 0xdf, 0x3e, 0x89, 0x5d, 0xbe, 0xce, 0xb3, 0x7e, 0x47, 0x3b,
	0xe7, 0xf9, 0x53, 0x0f, 0xeb, 0x7b, 0x9a, 0x43, 0x64, 0x6d, 0x60, 0x6b, 0xd5, 0x7e, 0x03, 0x5d,
	0x50, 0x30, 0x63, 0x76, 0x6a, 0xad, 0x95, 0x0a, 0x8c, 0x9a, 0x39, 0x5a, 0xeb, 0xf6, 0x4d, 0x74,
	0x43, 0x77, 0xed, 0x91, 0xf3, 0x43, 0x6b, 0xa3, 0x3c, 0xf2, 0xda, 0x9b, 0x25, 0x6b, 0xd3, 0x5e,
	0x42, 0x57, 0xf5, 0x23, 0x3f, 0xf0, 0xde, 0xc7, 0x7a, 0x68, 0x2f, 0xa3, 0x6b, 0x8a, 0x60, 0xf4,
	0xab, 0x1a, 0x6b, 0xab, 0x0c, 0xc5, 0xed, 0xf6, 0xd3, 0x1d, 0x6b, 0xbb, 0xfc, 0x12, 0xa3, 0x13,
	0x65, 0xed, 0x94, 0xe7, 0x77, 0xe8, 0x84, 0xae, 0x58, 0xdf, 0xb7, 0x1d, 0xb4, 0x98, 0x2f, 0x34,
	0xba, 0x66, 0xb6, 0x3e, 0x2f, 0xa3, 0xde, 0xc9, 0xcf, 0x11, 0xad, 0x5d, 0xfb, 0x0e, 0xba, 0x79,
	0x1a, 0x55, 0xf1, 0x28, 0xce, 0x7a, 0x3c, 0xb0, 0xbb, 0x03, 0xe5, 0x8b, 0xf5, 0x64, 0x28, 0x54,
	0x15, 0x09, 0xa0, 0xb5, 0x57, 0x6e, 0x6d, 0x91, 0xb3, 0x59, 0x5f, 0xbc, 0xfd, 0x93, 0x0a, 0x72,
	0x36, 0x4f, 0xce, 0x6c, 0xdc, 0x55, 0x2f, 0xab, 0xf4, 0xdf, 0x3d, 0x74, 0xcf, 0xa6, 0x73, 0x37,
	0x48, 0x07, 0xa7, 0x81, 0xb0, 0xce, 0xbd, 0x36, 0xc7, 0x16, 0xfb, 0x22, 0x25, 0x29, 0xb1, 0x2a,
	0x6b, 0xce, 0xaf, 0xbe, 0x59, 0xac, 0xfc, 0xfa, 0x9b, 0xc5, 0xca, 0x7f, 0x7c, 0xb3, 0x58, 0xf9,
	0xd3, 0x6f, 0x17, 0xcf, 0xfd, 0xfa, 0xdb, 0xc5, 0x73, 0xbf, 0xf9, 0x76, 0xf1, 0xdc, 0x76, 0xe5,
	0x65, 0x2d, 0xe4, 0xdd, 0x1f, 0x57, 0xce, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x3d,
	0xbb, 0x73, 0x93, 0x37, 0x00, 0x00,
}

func (m *CCSUsrMsg_VGUIMenu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VGUIMenu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_VGUIMenu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subkeys) > 0 {
		for iNdEx := len(m.Subkeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subkeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i--
	if m.Show {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Str)
	copy(dAtA[i:], m.Str)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Str)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_Geiger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Geiger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_Geiger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Range))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_Train) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Train) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_Train) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Train))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_HudText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_HudText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_HudText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_SayText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SayText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_SayText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Textallchat {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i--
	if m.Chat {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.EntIdx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_SayText2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SayText2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_SayText2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Textallchat {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Params[iNdEx])
			copy(dAtA[i:], m.Params[iNdEx])
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Params[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.MsgName)
	copy(dAtA[i:], m.MsgName)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.MsgName)))
	i--
	dAtA[i] = 0x1a
	i--
	if m.Chat {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.EntIdx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_TextMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_TextMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_TextMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Params[iNdEx])
			copy(dAtA[i:], m.Params[iNdEx])
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Params[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MsgDst))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_HudMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_HudMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_HudMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0x5a
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FxTime))))
	i--
	dAtA[i] = 0x55
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HoldTime))))
	i--
	dAtA[i] = 0x4d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FadeOutTime))))
	i--
	dAtA[i] = 0x3d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FadeInTime))))
	i--
	dAtA[i] = 0x35
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Effect))
	i--
	dAtA[i] = 0x28
	if m.Clr2 != nil {
		{
			size, err := m.Clr2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Clr1 != nil {
		{
			size, err := m.Clr1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Channel))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_Shake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Shake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_Shake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Duration))))
	i--
	dAtA[i] = 0x25
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Frequency))))
	i--
	dAtA[i] = 0x1d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LocalAmplitude))))
	i--
	dAtA[i] = 0x15
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Command))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_Fade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Fade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_Fade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clr != nil {
		{
			size, err := m.Clr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Flags))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.HoldTime))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Duration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_Rumble) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Rumble) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_Rumble) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Flags))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Data))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_CloseCaption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_CloseCaption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_CloseCaption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Cctoken)
	copy(dAtA[i:], m.Cctoken)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Cctoken)))
	i--
	dAtA[i] = 0x22
	i--
	if m.FromPlayer {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Duration))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Hash))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_CloseCaptionDirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_CloseCaptionDirect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_CloseCaptionDirect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.FromPlayer {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Duration))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Hash))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_SendAudio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SendAudio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_SendAudio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.RadioSound)
	copy(dAtA[i:], m.RadioSound)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.RadioSound)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RawAudio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RawAudio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RawAudio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.VoiceFilename)
	copy(dAtA[i:], m.VoiceFilename)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.VoiceFilename)))
	i--
	dAtA[i] = 0x22
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Duration))))
	i--
	dAtA[i] = 0x1d
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entidx))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Pitch))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_VoiceMask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VoiceMask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_VoiceMask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.PlayerModEnable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	if len(m.PlayerMasks) > 0 {
		for iNdEx := len(m.PlayerMasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayerMasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.BanMasks))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.GameRulesMask))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_Damage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_Damage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_Damage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.VictimEntindex))
	i--
	dAtA[i] = 0x18
	if m.InflictorWorldPos != nil {
		{
			size, err := m.InflictorWorldPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Amount))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RadioText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RadioText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RadioText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Params[iNdEx])
			copy(dAtA[i:], m.Params[iNdEx])
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Params[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.MsgName)
	copy(dAtA[i:], m.MsgName)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.MsgName)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Client))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MsgDst))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_HintText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_HintText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_HintText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_KeyHintText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_KeyHintText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_KeyHintText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hints) > 0 {
		for iNdEx := len(m.Hints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hints[iNdEx])
			copy(dAtA[i:], m.Hints[iNdEx])
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Hints[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntityUpdates) > 0 {
		for iNdEx := len(m.EntityUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EntityUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i--
	if m.NewUpdate {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.PlayerHasC4 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	i--
	if m.PlayerHasDefuser {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x40
	i--
	if m.Defuser {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.AngleY))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.OriginZ))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.OriginY))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.OriginX))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.ClassId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.EntityIdx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_SendPlayerItemDrops) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SendPlayerItemDrops) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_SendPlayerItemDrops) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntityUpdates) > 0 {
		for iNdEx := len(m.EntityUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EntityUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_SendPlayerItemFound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SendPlayerItemFound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_SendPlayerItemFound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entindex))
	i--
	dAtA[i] = 0x10
	if m.Iteminfo != nil {
		{
			size, err := m.Iteminfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MvpBoostExtraUtility))
	i--
	dAtA[i] = 0x48
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MvpBoostCardIdx))
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MvpBoostLoadoutIdx))
	i--
	dAtA[i] = 0x38
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MvpBoostRoundIdx))
	i--
	dAtA[i] = 0x30
	if len(m.TypeIdx) > 0 {
		for iNdEx := len(m.TypeIdx) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.TypeIdx[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	if len(m.CardIdx) > 0 {
		for iNdEx := len(m.CardIdx) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.CardIdx[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if len(m.LoadoutIdx) > 0 {
		for iNdEx := len(m.LoadoutIdx) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.LoadoutIdx[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if len(m.RoundIdx) > 0 {
		for iNdEx := len(m.RoundIdx) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.RoundIdx[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	i--
	if m.DefuseKit {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.TypeIdx))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.CardIdx))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.LoadoutIdx))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.RoundIdx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ReloadEffect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ReloadEffect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ReloadEffect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OriginZ))))
	i--
	dAtA[i] = 0x2d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OriginY))))
	i--
	dAtA[i] = 0x25
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OriginX))))
	i--
	dAtA[i] = 0x1d
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Actanim))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entidx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_WeaponSound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_WeaponSound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_WeaponSound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Timestamp))))
	i--
	dAtA[i] = 0x35
	i -= len(m.Sound)
	copy(dAtA[i:], m.Sound)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Sound)))
	i--
	dAtA[i] = 0x2a
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OriginZ))))
	i--
	dAtA[i] = 0x25
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OriginY))))
	i--
	dAtA[i] = 0x1d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OriginX))))
	i--
	dAtA[i] = 0x15
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entidx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_UpdateScreenHealthBar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_UpdateScreenHealthBar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_UpdateScreenHealthBar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Style))
	i--
	dAtA[i] = 0x20
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HealthratioNew))))
	i--
	dAtA[i] = 0x1d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HealthratioOld))))
	i--
	dAtA[i] = 0x15
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entidx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_EntityOutlineHighlight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_EntityOutlineHighlight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_EntityOutlineHighlight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Removehighlight {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entidx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_AdjustMoney) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_AdjustMoney) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_AdjustMoney) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Amount))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ReportHit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ReportHit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ReportHit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Timestamp))))
	i--
	dAtA[i] = 0x25
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PosZ))))
	i--
	dAtA[i] = 0x1d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PosY))))
	i--
	dAtA[i] = 0x15
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PosX))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_KillCam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_KillCam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_KillCam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.SecondTarget))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.FirstTarget))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.ObsMode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_DesiredTimescale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_DesiredTimescale) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_DesiredTimescale) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.StartBlendTime))))
	i--
	dAtA[i] = 0x25
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.InterpolatorType))
	i--
	dAtA[i] = 0x18
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DurationRealtimeSec))))
	i--
	dAtA[i] = 0x15
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DesiredTimescale))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_CurrentTimescale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_CurrentTimescale) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_CurrentTimescale) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CurTimescale))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_AchievementEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_AchievementEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_AchievementEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.UserId))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Achievement))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_MatchEndConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_MatchEndConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_MatchEndConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MpTimelimit))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MpWinlimit))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.MpMaxrounds))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Fraglimit))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_PlayerStatsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_PlayerStatsUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_PlayerStatsUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Crc))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.UserId))
	i--
	dAtA[i] = 0x28
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Delta))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Idx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_DisplayInventory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_DisplayInventory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_DisplayInventory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.UserId))
	i--
	dAtA[i] = 0x10
	i--
	if m.Display {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_QuestProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_QuestProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_QuestProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.IsEventQuest {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.BonusPoints))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.NormalPoints))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.QuestId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ScoreLeaderboardData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ScoreLeaderboardData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ScoreLeaderboardData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_PlayerDecalDigitalSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_PlayerDecalDigitalSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_PlayerDecalDigitalSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_XRankGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_XRankGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_XRankGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Controller))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.ModeIdx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_XRankUpd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_XRankUpd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_XRankUpd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Ranking))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Controller))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.ModeIdx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_CallVoteFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_CallVoteFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_CallVoteFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Time))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Reason))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_VoteStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VoteStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_VoteStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.EntidxTarget))
	i--
	dAtA[i] = 0x40
	i--
	if m.IsYesNoVote {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i -= len(m.OtherTeamStr)
	copy(dAtA[i:], m.OtherTeamStr)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.OtherTeamStr)))
	i--
	dAtA[i] = 0x32
	i -= len(m.DetailsStr)
	copy(dAtA[i:], m.DetailsStr)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.DetailsStr)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.DispStr)
	copy(dAtA[i:], m.DispStr)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.DispStr)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.VoteType))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.EntIdx))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Team))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_VotePass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VotePass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_VotePass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.DetailsStr)
	copy(dAtA[i:], m.DetailsStr)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.DetailsStr)))
	i--
	dAtA[i] = 0x22
	i -= len(m.DispStr)
	copy(dAtA[i:], m.DispStr)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.DispStr)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.VoteType))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Team))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_VoteFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VoteFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_VoteFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Reason))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Team))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_VoteSetup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_VoteSetup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_VoteSetup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PotentialIssues) > 0 {
		for iNdEx := len(m.PotentialIssues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PotentialIssues[iNdEx])
			copy(dAtA[i:], m.PotentialIssues[iNdEx])
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.PotentialIssues[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.DamageTaken))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.NumHitsTaken))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.DamageGiven))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.NumHitsGiven))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ServerRankUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ServerRankUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ServerRankUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankUpdate) > 0 {
		for iNdEx := len(m.RankUpdate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankUpdate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.RankTypeId))
	i--
	dAtA[i] = 0x30
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RankChange))))
	i--
	dAtA[i] = 0x2d
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.NumWins))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.RankNew))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.RankOld))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.AccountId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_XpUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_XpUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_XpUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ItemPickup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ItemPickup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ItemPickup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Item)
	copy(dAtA[i:], m.Item)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Item)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ShowMenu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ShowMenu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ShowMenu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.MenuString)
	copy(dAtA[i:], m.MenuString)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.MenuString)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.DisplayTime))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.BitsValidSlots))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_BarTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_BarTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_BarTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Time)
	copy(dAtA[i:], m.Time)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Time)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_AmmoDenied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_AmmoDenied) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_AmmoDenied) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.AmmoIdx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_MarkAchievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_MarkAchievement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_MarkAchievement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Achievement)
	copy(dAtA[i:], m.Achievement)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Achievement)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_MatchStatsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_MatchStatsUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_MatchStatsUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Update)
	copy(dAtA[i:], m.Update)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Update)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ItemDrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ItemDrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ItemDrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Death {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Itemid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_GlowPropTurnOff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_GlowPropTurnOff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_GlowPropTurnOff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entidx))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RoundBackupFilenames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RoundBackupFilenames) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RoundBackupFilenames) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Nicename)
	copy(dAtA[i:], m.Nicename)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Nicename)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Filename)
	copy(dAtA[i:], m.Filename)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Filename)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_SSUI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SSUI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_SSUI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EndTime))))
	i--
	dAtA[i] = 0x1d
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.StartTime))))
	i--
	dAtA[i] = 0x15
	i--
	if m.Show {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_SurvivalStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SurvivalStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_SurvivalStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Damages) > 0 {
		for iNdEx := len(m.Damages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Damages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Ticknumber))
	i--
	dAtA[i] = 0x20
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Facts) > 0 {
		for iNdEx := len(m.Facts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Facts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Xuid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_SurvivalStats_Fact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SurvivalStats_Fact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_SurvivalStats_Fact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Interestingness))))
	i--
	dAtA[i] = 0x25
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Value))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Display))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_SurvivalStats_Placement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SurvivalStats_Placement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_SurvivalStats_Placement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Placement))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Teamnumber))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Xuid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_SurvivalStats_Damage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_SurvivalStats_Damage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_SurvivalStats_Damage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.FromHits))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.From))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.ToHits))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.To))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Xuid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Scene))
	i--
	dAtA[i] = 0x10
	if len(m.Allplayerdata) > 0 {
		for iNdEx := len(m.Allplayerdata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Allplayerdata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Position))
	i--
	dAtA[i] = 0x18
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
	i--
	dAtA[i] = 0x15
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Eaccolade))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Isbot {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x40
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Playercolor))
	i--
	dAtA[i] = 0x38
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Nomination != nil {
		{
			size, err := m.Nomination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Teamnumber))
	i--
	dAtA[i] = 0x20
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Xuid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entindex))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RoundImpactScoreData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RoundImpactScoreData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RoundImpactScoreData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllRisEventData) > 0 {
		for iNdEx := len(m.AllRisEventData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllRisEventData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.InitConditions != nil {
		{
			size, err := m.InitConditions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllDamageData) > 0 {
		for iNdEx := len(m.AllDamageData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllDamageData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ObjectiveData != nil {
		{
			size, err := m.ObjectiveData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.VictimData != nil {
		{
			size, err := m.VictimData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.TAlive))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.CtAlive))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.TerroristOdds))
	i--
	dAtA[i] = 0x10
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Timestamp))))
	i--
	dAtA[i] = 0xd
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.IsDead {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i--
	if m.IsBot {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Color))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Xuid))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Entindex))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.TeamNumber))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.NumReturnHits))
	i--
	dAtA[i] = 0x30
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.ReturnHealthRemoved))
	i--
	dAtA[i] = 0x28
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.NumHits))
	i--
	dAtA[i] = 0x20
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.HealthRemoved))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.TargetXuid))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.TargetEntindex))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.TerroristOdds))
	i--
	dAtA[i] = 0x18
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.TEquipValue))
	i--
	dAtA[i] = 0x10
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.CtEquipValue))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_CurrentRoundOdds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_CurrentRoundOdds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_CurrentRoundOdds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Odds))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_DeepStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_DeepStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_DeepStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ResetHud) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ResetHud) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ResetHud) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Reset_ {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_GameTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_GameTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_GameTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_RequestState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_RequestState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_RequestState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_StopSpectatorMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_StopSpectatorMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_StopSpectatorMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_DisconnectToLobby) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_DisconnectToLobby) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_DisconnectToLobby) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_WarmupHasEnded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_WarmupHasEnded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_WarmupHasEnded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ClientInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ClientInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.Dummy))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CCSUsrMsg_ServerRankRevealAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSUsrMsg_ServerRankRevealAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCSUsrMsg_ServerRankRevealAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reservation != nil {
		{
			size, err := m.Reservation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintCstrike15Usermessages(dAtA, i, uint64(m.SecondsTillShutdown))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintCstrike15Usermessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovCstrike15Usermessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CCSUsrMsg_VGUIMenu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	n += 2
	if len(m.Subkeys) > 0 {
		for _, e := range m.Subkeys {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_VGUIMenu_Subkey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	l = len(m.Str)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_Geiger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Range))
	return n
}

func (m *CCSUsrMsg_Train) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Train))
	return n
}

func (m *CCSUsrMsg_HudText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_SayText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.EntIdx))
	l = len(m.Text)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	n += 2
	n += 2
	return n
}

func (m *CCSUsrMsg_SayText2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.EntIdx))
	n += 2
	l = len(m.MsgName)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *CCSUsrMsg_TextMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.MsgDst))
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_HudMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Channel))
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	if m.Clr1 != nil {
		l = m.Clr1.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	if m.Clr2 != nil {
		l = m.Clr2.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.Effect))
	n += 5
	n += 5
	n += 5
	n += 5
	l = len(m.Text)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_Shake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Command))
	n += 5
	n += 5
	n += 5
	return n
}

func (m *CCSUsrMsg_Fade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Duration))
	n += 1 + sovCstrike15Usermessages(uint64(m.HoldTime))
	n += 1 + sovCstrike15Usermessages(uint64(m.Flags))
	if m.Clr != nil {
		l = m.Clr.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	return n
}

func (m *CCSUsrMsg_Rumble) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Index))
	n += 1 + sovCstrike15Usermessages(uint64(m.Data))
	n += 1 + sovCstrike15Usermessages(uint64(m.Flags))
	return n
}

func (m *CCSUsrMsg_CloseCaption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Hash))
	n += 1 + sovCstrike15Usermessages(uint64(m.Duration))
	n += 2
	l = len(m.Cctoken)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_CloseCaptionDirect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Hash))
	n += 1 + sovCstrike15Usermessages(uint64(m.Duration))
	n += 2
	return n
}

func (m *CCSUsrMsg_SendAudio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RadioSound)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_RawAudio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Pitch))
	n += 1 + sovCstrike15Usermessages(uint64(m.Entidx))
	n += 5
	l = len(m.VoiceFilename)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_VoiceMask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerMasks) > 0 {
		for _, e := range m.PlayerMasks {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *CCSUsrMsg_VoiceMask_PlayerMask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.GameRulesMask))
	n += 1 + sovCstrike15Usermessages(uint64(m.BanMasks))
	return n
}

func (m *CCSUsrMsg_Damage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Amount))
	if m.InflictorWorldPos != nil {
		l = m.InflictorWorldPos.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.VictimEntindex))
	return n
}

func (m *CCSUsrMsg_RadioText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.MsgDst))
	n += 1 + sovCstrike15Usermessages(uint64(m.Client))
	l = len(m.MsgName)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_HintText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_KeyHintText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hints) > 0 {
		for _, s := range m.Hints {
			l = len(s)
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	if len(m.EntityUpdates) > 0 {
		for _, e := range m.EntityUpdates {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.EntityIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.ClassId))
	n += 1 + sovCstrike15Usermessages(uint64(m.OriginX))
	n += 1 + sovCstrike15Usermessages(uint64(m.OriginY))
	n += 1 + sovCstrike15Usermessages(uint64(m.OriginZ))
	n += 1 + sovCstrike15Usermessages(uint64(m.AngleY))
	n += 2
	n += 2
	n += 2
	return n
}

func (m *CCSUsrMsg_SendPlayerItemDrops) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EntityUpdates) > 0 {
		for _, e := range m.EntityUpdates {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_SendPlayerItemFound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iteminfo != nil {
		l = m.Iteminfo.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.Entindex))
	return n
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	if len(m.RoundIdx) > 0 {
		for _, e := range m.RoundIdx {
			n += 1 + sovCstrike15Usermessages(uint64(e))
		}
	}
	if len(m.LoadoutIdx) > 0 {
		for _, e := range m.LoadoutIdx {
			n += 1 + sovCstrike15Usermessages(uint64(e))
		}
	}
	if len(m.CardIdx) > 0 {
		for _, e := range m.CardIdx {
			n += 1 + sovCstrike15Usermessages(uint64(e))
		}
	}
	if len(m.TypeIdx) > 0 {
		for _, e := range m.TypeIdx {
			n += 1 + sovCstrike15Usermessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.MvpBoostRoundIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.MvpBoostLoadoutIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.MvpBoostCardIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.MvpBoostExtraUtility))
	return n
}

func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.RoundIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.LoadoutIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.CardIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.TypeIdx))
	return n
}

func (m *CCSUsrMsg_ReloadEffect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Entidx))
	n += 1 + sovCstrike15Usermessages(uint64(m.Actanim))
	n += 5
	n += 5
	n += 5
	return n
}

func (m *CCSUsrMsg_WeaponSound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Entidx))
	n += 5
	n += 5
	n += 5
	l = len(m.Sound)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	n += 5
	return n
}

func (m *CCSUsrMsg_UpdateScreenHealthBar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Entidx))
	n += 5
	n += 5
	n += 1 + sovCstrike15Usermessages(uint64(m.Style))
	return n
}

func (m *CCSUsrMsg_EntityOutlineHighlight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Entidx))
	n += 2
	return n
}

func (m *CCSUsrMsg_AdjustMoney) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Amount))
	return n
}

func (m *CCSUsrMsg_ReportHit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 5
	n += 5
	n += 5
	return n
}

func (m *CCSUsrMsg_KillCam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.ObsMode))
	n += 1 + sovCstrike15Usermessages(uint64(m.FirstTarget))
	n += 1 + sovCstrike15Usermessages(uint64(m.SecondTarget))
	return n
}

func (m *CCSUsrMsg_DesiredTimescale) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 5
	n += 1 + sovCstrike15Usermessages(uint64(m.InterpolatorType))
	n += 5
	return n
}

func (m *CCSUsrMsg_CurrentTimescale) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}

func (m *CCSUsrMsg_AchievementEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Achievement))
	n += 1 + sovCstrike15Usermessages(uint64(m.Count))
	n += 1 + sovCstrike15Usermessages(uint64(m.UserId))
	return n
}

func (m *CCSUsrMsg_MatchEndConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Fraglimit))
	n += 1 + sovCstrike15Usermessages(uint64(m.MpMaxrounds))
	n += 1 + sovCstrike15Usermessages(uint64(m.MpWinlimit))
	n += 1 + sovCstrike15Usermessages(uint64(m.MpTimelimit))
	return n
}

func (m *CCSUsrMsg_PlayerStatsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Version))
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.UserId))
	n += 1 + sovCstrike15Usermessages(uint64(m.Crc))
	return n
}

func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Idx))
	n += 1 + sovCstrike15Usermessages(uint64(m.Delta))
	return n
}

func (m *CCSUsrMsg_DisplayInventory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 1 + sovCstrike15Usermessages(uint64(m.UserId))
	return n
}

func (m *CCSUsrMsg_QuestProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.QuestId))
	n += 1 + sovCstrike15Usermessages(uint64(m.NormalPoints))
	n += 1 + sovCstrike15Usermessages(uint64(m.BonusPoints))
	n += 2
	return n
}

func (m *CCSUsrMsg_ScoreLeaderboardData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	return n
}

func (m *CCSUsrMsg_PlayerDecalDigitalSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	return n
}

func (m *CCSUsrMsg_XRankGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.ModeIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.Controller))
	return n
}

func (m *CCSUsrMsg_XRankUpd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.ModeIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.Controller))
	n += 1 + sovCstrike15Usermessages(uint64(m.Ranking))
	return n
}

func (m *CCSUsrMsg_CallVoteFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Reason))
	n += 1 + sovCstrike15Usermessages(uint64(m.Time))
	return n
}

func (m *CCSUsrMsg_VoteStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Team))
	n += 1 + sovCstrike15Usermessages(uint64(m.EntIdx))
	n += 1 + sovCstrike15Usermessages(uint64(m.VoteType))
	l = len(m.DispStr)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	l = len(m.DetailsStr)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	l = len(m.OtherTeamStr)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	n += 2
	n += 1 + sovCstrike15Usermessages(uint64(m.EntidxTarget))
	return n
}

func (m *CCSUsrMsg_VotePass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Team))
	n += 1 + sovCstrike15Usermessages(uint64(m.VoteType))
	l = len(m.DispStr)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	l = len(m.DetailsStr)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_VoteFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Team))
	n += 1 + sovCstrike15Usermessages(uint64(m.Reason))
	return n
}

func (m *CCSUsrMsg_VoteSetup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PotentialIssues) > 0 {
		for _, s := range m.PotentialIssues {
			l = len(s)
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_SendLastKillerDamageToClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.NumHitsGiven))
	n += 1 + sovCstrike15Usermessages(uint64(m.DamageGiven))
	n += 1 + sovCstrike15Usermessages(uint64(m.NumHitsTaken))
	n += 1 + sovCstrike15Usermessages(uint64(m.DamageTaken))
	return n
}

func (m *CCSUsrMsg_ServerRankUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RankUpdate) > 0 {
		for _, e := range m.RankUpdate {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Usermessages(uint64(m.RankOld))
	n += 1 + sovCstrike15Usermessages(uint64(m.RankNew))
	n += 1 + sovCstrike15Usermessages(uint64(m.NumWins))
	n += 5
	n += 1 + sovCstrike15Usermessages(uint64(m.RankTypeId))
	return n
}

func (m *CCSUsrMsg_XpUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	return n
}

func (m *CCSUsrMsg_ItemPickup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Item)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_ShowMenu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.BitsValidSlots))
	n += 1 + sovCstrike15Usermessages(uint64(m.DisplayTime))
	l = len(m.MenuString)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_BarTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Time)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_AmmoDenied) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.AmmoIdx))
	return n
}

func (m *CCSUsrMsg_MarkAchievement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Achievement)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_MatchStatsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Update)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_ItemDrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Itemid))
	n += 2
	return n
}

func (m *CCSUsrMsg_GlowPropTurnOff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Entidx))
	return n
}

func (m *CCSUsrMsg_RoundBackupFilenames) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Count))
	n += 1 + sovCstrike15Usermessages(uint64(m.Index))
	l = len(m.Filename)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	l = len(m.Nicename)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	return n
}

func (m *CCSUsrMsg_SSUI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 5
	n += 5
	return n
}

func (m *CCSUsrMsg_SurvivalStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Xuid))
	if len(m.Facts) > 0 {
		for _, e := range m.Facts {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.Ticknumber))
	if len(m.Damages) > 0 {
		for _, e := range m.Damages {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_SurvivalStats_Fact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Type))
	n += 1 + sovCstrike15Usermessages(uint64(m.Display))
	n += 1 + sovCstrike15Usermessages(uint64(m.Value))
	n += 5
	return n
}

func (m *CCSUsrMsg_SurvivalStats_Placement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Xuid))
	n += 1 + sovCstrike15Usermessages(uint64(m.Teamnumber))
	n += 1 + sovCstrike15Usermessages(uint64(m.Placement))
	return n
}

func (m *CCSUsrMsg_SurvivalStats_Damage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Xuid))
	n += 1 + sovCstrike15Usermessages(uint64(m.To))
	n += 1 + sovCstrike15Usermessages(uint64(m.ToHits))
	n += 1 + sovCstrike15Usermessages(uint64(m.From))
	n += 1 + sovCstrike15Usermessages(uint64(m.FromHits))
	return n
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Allplayerdata) > 0 {
		for _, e := range m.Allplayerdata {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.Scene))
	return n
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Eaccolade))
	n += 5
	n += 1 + sovCstrike15Usermessages(uint64(m.Position))
	return n
}

func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Entindex))
	n += 1 + sovCstrike15Usermessages(uint64(m.Xuid))
	l = len(m.Name)
	n += 1 + l + sovCstrike15Usermessages(uint64(l))
	n += 1 + sovCstrike15Usermessages(uint64(m.Teamnumber))
	if m.Nomination != nil {
		l = m.Nomination.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Usermessages(uint64(m.Playercolor))
	n += 2
	return n
}

func (m *CCSUsrMsg_RoundImpactScoreData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InitConditions != nil {
		l = m.InitConditions.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	if len(m.AllRisEventData) > 0 {
		for _, e := range m.AllRisEventData {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	n += 1 + sovCstrike15Usermessages(uint64(m.TerroristOdds))
	n += 1 + sovCstrike15Usermessages(uint64(m.CtAlive))
	n += 1 + sovCstrike15Usermessages(uint64(m.TAlive))
	if m.VictimData != nil {
		l = m.VictimData.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	if m.ObjectiveData != nil {
		l = m.ObjectiveData.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	if len(m.AllDamageData) > 0 {
		for _, e := range m.AllDamageData {
			l = e.Size()
			n += 1 + l + sovCstrike15Usermessages(uint64(l))
		}
	}
	return n
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.TeamNumber))
	n += 1 + sovCstrike15Usermessages(uint64(m.Entindex))
	n += 1 + sovCstrike15Usermessages(uint64(m.Xuid))
	n += 1 + sovCstrike15Usermessages(uint64(m.Color))
	n += 2
	n += 2
	return n
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Type))
	return n
}

func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.TargetEntindex))
	n += 1 + sovCstrike15Usermessages(uint64(m.TargetXuid))
	n += 1 + sovCstrike15Usermessages(uint64(m.HealthRemoved))
	n += 1 + sovCstrike15Usermessages(uint64(m.NumHits))
	n += 1 + sovCstrike15Usermessages(uint64(m.ReturnHealthRemoved))
	n += 1 + sovCstrike15Usermessages(uint64(m.NumReturnHits))
	return n
}

func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.CtEquipValue))
	n += 1 + sovCstrike15Usermessages(uint64(m.TEquipValue))
	n += 1 + sovCstrike15Usermessages(uint64(m.TerroristOdds))
	return n
}

func (m *CCSUsrMsg_CurrentRoundOdds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Odds))
	return n
}

func (m *CCSUsrMsg_DeepStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	return n
}

func (m *CCSUsrMsg_ResetHud) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func (m *CCSUsrMsg_GameTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_RequestState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_StopSpectatorMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_DisconnectToLobby) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_WarmupHasEnded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_ClientInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.Dummy))
	return n
}

func (m *CCSUsrMsg_ServerRankRevealAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCstrike15Usermessages(uint64(m.SecondsTillShutdown))
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovCstrike15Usermessages(uint64(l))
	}
	return n
}

func sovCstrike15Usermessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCstrike15Usermessages(x uint64) (n int) {
	return sovCstrike15Usermessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CCSUsrMsg_VGUIMenu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VGUIMenu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VGUIMenu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Show = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subkeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subkeys = append(m.Subkeys, &CCSUsrMsg_VGUIMenu_Subkey{})
			if err := m.Subkeys[len(m.Subkeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VGUIMenu_Subkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Geiger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Geiger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Geiger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Train) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Train: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Train: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Train", wireType)
			}
			m.Train = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Train |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_HudText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_HudText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_HudText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SayText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SayText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SayText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntIdx", wireType)
			}
			m.EntIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Chat = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Textallchat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Textallchat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SayText2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SayText2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SayText2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntIdx", wireType)
			}
			m.EntIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Chat = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Textallchat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Textallchat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_TextMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_TextMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_TextMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDst", wireType)
			}
			m.MsgDst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgDst |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_HudMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_HudMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_HudMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CMsgVector2D{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clr1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clr1 == nil {
				m.Clr1 = &CMsgRGBA{}
			}
			if err := m.Clr1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clr2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clr2 == nil {
				m.Clr2 = &CMsgRGBA{}
			}
			if err := m.Clr2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			m.Effect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Effect |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FadeInTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FadeInTime = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FadeOutTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FadeOutTime = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HoldTime = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FxTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FxTime = float32(math.Float32frombits(v))
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Shake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Shake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Shake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAmplitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LocalAmplitude = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Frequency = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Duration = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Fade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Fade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Fade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldTime", wireType)
			}
			m.HoldTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clr == nil {
				m.Clr = &CMsgRGBA{}
			}
			if err := m.Clr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Rumble) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Rumble: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Rumble: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			m.Data = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Data |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_CloseCaption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_CloseCaption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_CloseCaption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPlayer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromPlayer = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cctoken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cctoken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_CloseCaptionDirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_CloseCaptionDirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_CloseCaptionDirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPlayer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromPlayer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SendAudio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SendAudio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SendAudio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadioSound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RadioSound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RawAudio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_RawAudio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_RawAudio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pitch", wireType)
			}
			m.Pitch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pitch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entidx", wireType)
			}
			m.Entidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entidx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Duration = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoiceFilename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoiceFilename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VoiceMask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VoiceMask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VoiceMask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerMasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerMasks = append(m.PlayerMasks, &CCSUsrMsg_VoiceMask_PlayerMask{})
			if err := m.PlayerMasks[len(m.PlayerMasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerModEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerModEnable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VoiceMask_PlayerMask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerMask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerMask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRulesMask", wireType)
			}
			m.GameRulesMask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameRulesMask |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanMasks", wireType)
			}
			m.BanMasks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BanMasks |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_Damage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_Damage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_Damage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflictorWorldPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InflictorWorldPos == nil {
				m.InflictorWorldPos = &CMsgVector{}
			}
			if err := m.InflictorWorldPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VictimEntindex", wireType)
			}
			m.VictimEntindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VictimEntindex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RadioText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_RadioText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_RadioText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDst", wireType)
			}
			m.MsgDst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgDst |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			m.Client = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Client |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_HintText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_HintText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_HintText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_KeyHintText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_KeyHintText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_KeyHintText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hints = append(m.Hints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ProcessSpottedEntityUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ProcessSpottedEntityUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewUpdate = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityUpdates = append(m.EntityUpdates, &CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate{})
			if err := m.EntityUpdates[len(m.EntityUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpottedEntityUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpottedEntityUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityIdx", wireType)
			}
			m.EntityIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntityIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginX", wireType)
			}
			m.OriginX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginY", wireType)
			}
			m.OriginY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginZ", wireType)
			}
			m.OriginZ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginZ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AngleY", wireType)
			}
			m.AngleY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AngleY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defuser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Defuser = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerHasDefuser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerHasDefuser = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerHasC4", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerHasC4 = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SendPlayerItemDrops) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SendPlayerItemDrops: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SendPlayerItemDrops: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityUpdates = append(m.EntityUpdates, &CEconItemPreviewDataBlock{})
			if err := m.EntityUpdates[len(m.EntityUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SendPlayerItemFound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SendPlayerItemFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SendPlayerItemFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iteminfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iteminfo == nil {
				m.Iteminfo = &CEconItemPreviewDataBlock{}
			}
			if err := m.Iteminfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entindex", wireType)
			}
			m.Entindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entindex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_RetakeUpdatePlayerCardList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_RetakeUpdatePlayerCardList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefuseKit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefuseKit = bool(v != 0)
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Usermessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoundIdx = append(m.RoundIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Usermessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Usermessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Usermessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoundIdx) == 0 {
					m.RoundIdx = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Usermessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoundIdx = append(m.RoundIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundIdx", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Usermessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoadoutIdx = append(m.LoadoutIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Usermessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Usermessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Usermessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LoadoutIdx) == 0 {
					m.LoadoutIdx = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Usermessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoadoutIdx = append(m.LoadoutIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadoutIdx", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Usermessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardIdx = append(m.CardIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Usermessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Usermessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Usermessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CardIdx) == 0 {
					m.CardIdx = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Usermessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardIdx = append(m.CardIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIdx", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Usermessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TypeIdx = append(m.TypeIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Usermessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Usermessages
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCstrike15Usermessages
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TypeIdx) == 0 {
					m.TypeIdx = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Usermessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TypeIdx = append(m.TypeIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeIdx", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MvpBoostRoundIdx", wireType)
			}
			m.MvpBoostRoundIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MvpBoostRoundIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MvpBoostLoadoutIdx", wireType)
			}
			m.MvpBoostLoadoutIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MvpBoostLoadoutIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MvpBoostCardIdx", wireType)
			}
			m.MvpBoostCardIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MvpBoostCardIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MvpBoostExtraUtility", wireType)
			}
			m.MvpBoostExtraUtility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MvpBoostExtraUtility |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RetakeUpdatePlayerCardSelection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_RetakeUpdatePlayerCardSelection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_RetakeUpdatePlayerCardSelection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundIdx", wireType)
			}
			m.RoundIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadoutIdx", wireType)
			}
			m.LoadoutIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadoutIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardIdx", wireType)
			}
			m.CardIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeIdx", wireType)
			}
			m.TypeIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ReloadEffect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ReloadEffect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ReloadEffect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entidx", wireType)
			}
			m.Entidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entidx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actanim", wireType)
			}
			m.Actanim = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Actanim |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OriginX = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OriginY = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OriginZ = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_WeaponSound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_WeaponSound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_WeaponSound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entidx", wireType)
			}
			m.Entidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entidx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OriginX = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OriginY = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OriginZ = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Timestamp = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_UpdateScreenHealthBar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_UpdateScreenHealthBar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_UpdateScreenHealthBar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entidx", wireType)
			}
			m.Entidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entidx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthratioOld", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HealthratioOld = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthratioNew", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HealthratioNew = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_EntityOutlineHighlight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_EntityOutlineHighlight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_EntityOutlineHighlight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entidx", wireType)
			}
			m.Entidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entidx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removehighlight", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removehighlight = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_AdjustMoney) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_AdjustMoney: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_AdjustMoney: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ReportHit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ReportHit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ReportHit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PosX = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PosY = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosZ", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PosZ = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Timestamp = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_KillCam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_KillCam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_KillCam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObsMode", wireType)
			}
			m.ObsMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObsMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTarget", wireType)
			}
			m.FirstTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstTarget |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondTarget", wireType)
			}
			m.SecondTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondTarget |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_DesiredTimescale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_DesiredTimescale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_DesiredTimescale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredTimescale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DesiredTimescale = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationRealtimeSec", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DurationRealtimeSec = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterpolatorType", wireType)
			}
			m.InterpolatorType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterpolatorType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlendTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.StartBlendTime = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_CurrentTimescale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_CurrentTimescale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_CurrentTimescale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurTimescale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CurTimescale = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_AchievementEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_AchievementEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_AchievementEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievement", wireType)
			}
			m.Achievement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Achievement |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_MatchEndConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_MatchEndConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_MatchEndConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fraglimit", wireType)
			}
			m.Fraglimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fraglimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpMaxrounds", wireType)
			}
			m.MpMaxrounds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MpMaxrounds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpWinlimit", wireType)
			}
			m.MpWinlimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MpWinlimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpTimelimit", wireType)
			}
			m.MpTimelimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MpTimelimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_PlayerStatsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_PlayerStatsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_PlayerStatsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &CCSUsrMsg_PlayerStatsUpdate_Stat{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc", wireType)
			}
			m.Crc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_PlayerStatsUpdate_Stat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			m.Delta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delta |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_DisplayInventory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_DisplayInventory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_DisplayInventory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Display = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_QuestProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_QuestProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_QuestProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestId", wireType)
			}
			m.QuestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalPoints", wireType)
			}
			m.NormalPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NormalPoints |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonusPoints", wireType)
			}
			m.BonusPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BonusPoints |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEventQuest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEventQuest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ScoreLeaderboardData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ScoreLeaderboardData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ScoreLeaderboardData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ScoreLeaderboardData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_PlayerDecalDigitalSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_PlayerDecalDigitalSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_PlayerDecalDigitalSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &PlayerDecalDigitalSignature{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_XRankGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_XRankGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_XRankGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeIdx", wireType)
			}
			m.ModeIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModeIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			m.Controller = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Controller |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_XRankUpd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_XRankUpd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_XRankUpd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeIdx", wireType)
			}
			m.ModeIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModeIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			m.Controller = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Controller |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_CallVoteFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_CallVoteFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_CallVoteFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VoteStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntIdx", wireType)
			}
			m.EntIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteType", wireType)
			}
			m.VoteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailsStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailsStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherTeamStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherTeamStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsYesNoVote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsYesNoVote = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntidxTarget", wireType)
			}
			m.EntidxTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntidxTarget |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VotePass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VotePass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VotePass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteType", wireType)
			}
			m.VoteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailsStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailsStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VoteFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_VoteSetup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteSetup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_VoteSetup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PotentialIssues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PotentialIssues = append(m.PotentialIssues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SendLastKillerDamageToClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SendLastKillerDamageToClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SendLastKillerDamageToClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumHitsGiven", wireType)
			}
			m.NumHitsGiven = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumHitsGiven |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageGiven", wireType)
			}
			m.DamageGiven = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageGiven |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumHitsTaken", wireType)
			}
			m.NumHitsTaken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumHitsTaken |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageTaken", wireType)
			}
			m.DamageTaken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageTaken |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ServerRankUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ServerRankUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ServerRankUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankUpdate = append(m.RankUpdate, &CCSUsrMsg_ServerRankUpdate_RankUpdate{})
			if err := m.RankUpdate[len(m.RankUpdate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ServerRankUpdate_RankUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankOld", wireType)
			}
			m.RankOld = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankOld |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankNew", wireType)
			}
			m.RankNew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankNew |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumWins", wireType)
			}
			m.NumWins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumWins |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankChange", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RankChange = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankTypeId", wireType)
			}
			m.RankTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankTypeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_XpUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_XpUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_XpUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ItemPickup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ItemPickup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ItemPickup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ShowMenu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ShowMenu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ShowMenu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitsValidSlots", wireType)
			}
			m.BitsValidSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitsValidSlots |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayTime", wireType)
			}
			m.DisplayTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MenuString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MenuString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_BarTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_BarTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_BarTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_AmmoDenied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_AmmoDenied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_AmmoDenied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmmoIdx", wireType)
			}
			m.AmmoIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmmoIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_MarkAchievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_MarkAchievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_MarkAchievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_MatchStatsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_MatchStatsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_MatchStatsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ItemDrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ItemDrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ItemDrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Death", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Death = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_GlowPropTurnOff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_GlowPropTurnOff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_GlowPropTurnOff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entidx", wireType)
			}
			m.Entidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entidx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RoundBackupFilenames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_RoundBackupFilenames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_RoundBackupFilenames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nicename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nicename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SSUI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SSUI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SSUI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Show = bool(v != 0)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.StartTime = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EndTime = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SurvivalStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_SurvivalStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_SurvivalStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xuid", wireType)
			}
			m.Xuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xuid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Facts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Facts = append(m.Facts, &CCSUsrMsg_SurvivalStats_Fact{})
			if err := m.Facts[len(m.Facts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &CCSUsrMsg_SurvivalStats_Placement{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticknumber", wireType)
			}
			m.Ticknumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticknumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Damages = append(m.Damages, &CCSUsrMsg_SurvivalStats_Damage{})
			if err := m.Damages[len(m.Damages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SurvivalStats_Fact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			m.Display = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Display |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interestingness", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Interestingness = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SurvivalStats_Placement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Placement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Placement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xuid", wireType)
			}
			m.Xuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xuid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teamnumber", wireType)
			}
			m.Teamnumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Teamnumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			m.Placement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Placement |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_SurvivalStats_Damage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Damage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Damage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xuid", wireType)
			}
			m.Xuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xuid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToHits", wireType)
			}
			m.ToHits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToHits |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromHits", wireType)
			}
			m.FromHits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromHits |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_EndOfMatchAllPlayersData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_EndOfMatchAllPlayersData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allplayerdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allplayerdata = append(m.Allplayerdata, &CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData{})
			if err := m.Allplayerdata[len(m.Allplayerdata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scene", wireType)
			}
			m.Scene = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scene |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_Accolade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Accolade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Accolade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eaccolade", wireType)
			}
			m.Eaccolade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eaccolade |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entindex", wireType)
			}
			m.Entindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entindex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xuid", wireType)
			}
			m.Xuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xuid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teamnumber", wireType)
			}
			m.Teamnumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Teamnumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nomination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nomination == nil {
				m.Nomination = &CCSUsrMsg_EndOfMatchAllPlayersData_Accolade{}
			}
			if err := m.Nomination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CEconItemPreviewDataBlock{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playercolor", wireType)
			}
			m.Playercolor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Playercolor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isbot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isbot = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RoundImpactScoreData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_RoundImpactScoreData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_RoundImpactScoreData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitConditions == nil {
				m.InitConditions = &CCSUsrMsg_RoundImpactScoreData_InitialConditions{}
			}
			if err := m.InitConditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllRisEventData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllRisEventData = append(m.AllRisEventData, &CCSUsrMsg_RoundImpactScoreData_RisEvent{})
			if err := m.AllRisEventData[len(m.AllRisEventData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RisEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RisEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Timestamp = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerroristOdds", wireType)
			}
			m.TerroristOdds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TerroristOdds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtAlive", wireType)
			}
			m.CtAlive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CtAlive |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TAlive", wireType)
			}
			m.TAlive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TAlive |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VictimData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VictimData == nil {
				m.VictimData = &CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim{}
			}
			if err := m.VictimData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectiveData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectiveData == nil {
				m.ObjectiveData = &CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective{}
			}
			if err := m.ObjectiveData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllDamageData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllDamageData = append(m.AllDamageData, &CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage{})
			if err := m.AllDamageData[len(m.AllDamageData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Victim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Victim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamNumber", wireType)
			}
			m.TeamNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entindex", wireType)
			}
			m.Entindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entindex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xuid", wireType)
			}
			m.Xuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xuid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBot = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDead = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Objective: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Objective: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Damage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Damage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetEntindex", wireType)
			}
			m.TargetEntindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetEntindex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetXuid", wireType)
			}
			m.TargetXuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetXuid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthRemoved", wireType)
			}
			m.HealthRemoved = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthRemoved |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumHits", wireType)
			}
			m.NumHits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumHits |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnHealthRemoved", wireType)
			}
			m.ReturnHealthRemoved = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnHealthRemoved |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumReturnHits", wireType)
			}
			m.NumReturnHits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumReturnHits |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RoundImpactScoreData_InitialConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitialConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitialConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtEquipValue", wireType)
			}
			m.CtEquipValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CtEquipValue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TEquipValue", wireType)
			}
			m.TEquipValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TEquipValue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerroristOdds", wireType)
			}
			m.TerroristOdds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TerroristOdds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_CurrentRoundOdds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_CurrentRoundOdds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_CurrentRoundOdds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			m.Odds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Odds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_DeepStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_DeepStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_DeepStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &CMsgGCCStrike15_ClientDeepStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ResetHud) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ResetHud: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ResetHud: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reset_ = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_GameTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_GameTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_GameTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_RequestState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_RequestState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_RequestState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_StopSpectatorMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_StopSpectatorMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_StopSpectatorMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_DisconnectToLobby) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_DisconnectToLobby: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_DisconnectToLobby: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_WarmupHasEnded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_WarmupHasEnded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_WarmupHasEnded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			m.Dummy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dummy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSUsrMsg_ServerRankRevealAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSUsrMsg_ServerRankRevealAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSUsrMsg_ServerRankRevealAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsTillShutdown", wireType)
			}
			m.SecondsTillShutdown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsTillShutdown |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Usermessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCstrike15Usermessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCstrike15Usermessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCstrike15Usermessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCstrike15Usermessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCstrike15Usermessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCstrike15Usermessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCstrike15Usermessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCstrike15Usermessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCstrike15Usermessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCstrike15Usermessages = fmt.Errorf("proto: unexpected end of group")
)
