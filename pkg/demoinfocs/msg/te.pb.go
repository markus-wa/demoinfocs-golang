// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v6.32.0
// source: te.proto

package msg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ETEProtobufIds int32

const (
	ETEProtobufIds_TE_EffectDispatchId ETEProtobufIds = 400
	ETEProtobufIds_TE_ArmorRicochetId  ETEProtobufIds = 401
	ETEProtobufIds_TE_BeamEntPointId   ETEProtobufIds = 402
	ETEProtobufIds_TE_BeamEntsId       ETEProtobufIds = 403
	ETEProtobufIds_TE_BeamPointsId     ETEProtobufIds = 404
	ETEProtobufIds_TE_BeamRingId       ETEProtobufIds = 405
	ETEProtobufIds_TE_BubblesId        ETEProtobufIds = 408
	ETEProtobufIds_TE_BubbleTrailId    ETEProtobufIds = 409
	ETEProtobufIds_TE_DecalId          ETEProtobufIds = 410
	ETEProtobufIds_TE_WorldDecalId     ETEProtobufIds = 411
	ETEProtobufIds_TE_EnergySplashId   ETEProtobufIds = 412
	ETEProtobufIds_TE_FizzId           ETEProtobufIds = 413
	ETEProtobufIds_TE_ShatterSurfaceId ETEProtobufIds = 414
	ETEProtobufIds_TE_GlowSpriteId     ETEProtobufIds = 415
	ETEProtobufIds_TE_ImpactId         ETEProtobufIds = 416
	ETEProtobufIds_TE_MuzzleFlashId    ETEProtobufIds = 417
	ETEProtobufIds_TE_BloodStreamId    ETEProtobufIds = 418
	ETEProtobufIds_TE_ExplosionId      ETEProtobufIds = 419
	ETEProtobufIds_TE_DustId           ETEProtobufIds = 420
	ETEProtobufIds_TE_LargeFunnelId    ETEProtobufIds = 421
	ETEProtobufIds_TE_SparksId         ETEProtobufIds = 422
	ETEProtobufIds_TE_PhysicsPropId    ETEProtobufIds = 423
	ETEProtobufIds_TE_SmokeId          ETEProtobufIds = 426
)

// Enum value maps for ETEProtobufIds.
var (
	ETEProtobufIds_name = map[int32]string{
		400: "TE_EffectDispatchId",
		401: "TE_ArmorRicochetId",
		402: "TE_BeamEntPointId",
		403: "TE_BeamEntsId",
		404: "TE_BeamPointsId",
		405: "TE_BeamRingId",
		408: "TE_BubblesId",
		409: "TE_BubbleTrailId",
		410: "TE_DecalId",
		411: "TE_WorldDecalId",
		412: "TE_EnergySplashId",
		413: "TE_FizzId",
		414: "TE_ShatterSurfaceId",
		415: "TE_GlowSpriteId",
		416: "TE_ImpactId",
		417: "TE_MuzzleFlashId",
		418: "TE_BloodStreamId",
		419: "TE_ExplosionId",
		420: "TE_DustId",
		421: "TE_LargeFunnelId",
		422: "TE_SparksId",
		423: "TE_PhysicsPropId",
		426: "TE_SmokeId",
	}
	ETEProtobufIds_value = map[string]int32{
		"TE_EffectDispatchId": 400,
		"TE_ArmorRicochetId":  401,
		"TE_BeamEntPointId":   402,
		"TE_BeamEntsId":       403,
		"TE_BeamPointsId":     404,
		"TE_BeamRingId":       405,
		"TE_BubblesId":        408,
		"TE_BubbleTrailId":    409,
		"TE_DecalId":          410,
		"TE_WorldDecalId":     411,
		"TE_EnergySplashId":   412,
		"TE_FizzId":           413,
		"TE_ShatterSurfaceId": 414,
		"TE_GlowSpriteId":     415,
		"TE_ImpactId":         416,
		"TE_MuzzleFlashId":    417,
		"TE_BloodStreamId":    418,
		"TE_ExplosionId":      419,
		"TE_DustId":           420,
		"TE_LargeFunnelId":    421,
		"TE_SparksId":         422,
		"TE_PhysicsPropId":    423,
		"TE_SmokeId":          426,
	}
)

func (x ETEProtobufIds) Enum() *ETEProtobufIds {
	p := new(ETEProtobufIds)
	*p = x
	return p
}

func (x ETEProtobufIds) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETEProtobufIds) Descriptor() protoreflect.EnumDescriptor {
	return file_te_proto_enumTypes[0].Descriptor()
}

func (ETEProtobufIds) Type() protoreflect.EnumType {
	return &file_te_proto_enumTypes[0]
}

func (x ETEProtobufIds) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETEProtobufIds) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETEProtobufIds(num)
	return nil
}

// Deprecated: Use ETEProtobufIds.Descriptor instead.
func (ETEProtobufIds) EnumDescriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{0}
}

type CMsgTEArmorRicochet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *CMsgVector            `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	Dir           *CMsgVector            `protobuf:"bytes,2,opt,name=dir" json:"dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEArmorRicochet) Reset() {
	*x = CMsgTEArmorRicochet{}
	mi := &file_te_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEArmorRicochet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEArmorRicochet) ProtoMessage() {}

func (x *CMsgTEArmorRicochet) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEArmorRicochet.ProtoReflect.Descriptor instead.
func (*CMsgTEArmorRicochet) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgTEArmorRicochet) GetPos() *CMsgVector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *CMsgTEArmorRicochet) GetDir() *CMsgVector {
	if x != nil {
		return x.Dir
	}
	return nil
}

type CMsgTEBaseBeam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Modelindex    *uint64                `protobuf:"fixed64,1,opt,name=modelindex" json:"modelindex,omitempty"`
	Haloindex     *uint64                `protobuf:"fixed64,2,opt,name=haloindex" json:"haloindex,omitempty"`
	Startframe    *uint32                `protobuf:"varint,3,opt,name=startframe" json:"startframe,omitempty"`
	Framerate     *uint32                `protobuf:"varint,4,opt,name=framerate" json:"framerate,omitempty"`
	Life          *float32               `protobuf:"fixed32,5,opt,name=life" json:"life,omitempty"`
	Width         *float32               `protobuf:"fixed32,6,opt,name=width" json:"width,omitempty"`
	Endwidth      *float32               `protobuf:"fixed32,7,opt,name=endwidth" json:"endwidth,omitempty"`
	Fadelength    *uint32                `protobuf:"varint,8,opt,name=fadelength" json:"fadelength,omitempty"`
	Amplitude     *float32               `protobuf:"fixed32,9,opt,name=amplitude" json:"amplitude,omitempty"`
	Color         *uint32                `protobuf:"fixed32,10,opt,name=color" json:"color,omitempty"`
	Speed         *uint32                `protobuf:"varint,11,opt,name=speed" json:"speed,omitempty"`
	Flags         *uint32                `protobuf:"varint,12,opt,name=flags" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEBaseBeam) Reset() {
	*x = CMsgTEBaseBeam{}
	mi := &file_te_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEBaseBeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEBaseBeam) ProtoMessage() {}

func (x *CMsgTEBaseBeam) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEBaseBeam.ProtoReflect.Descriptor instead.
func (*CMsgTEBaseBeam) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgTEBaseBeam) GetModelindex() uint64 {
	if x != nil && x.Modelindex != nil {
		return *x.Modelindex
	}
	return 0
}

func (x *CMsgTEBaseBeam) GetHaloindex() uint64 {
	if x != nil && x.Haloindex != nil {
		return *x.Haloindex
	}
	return 0
}

func (x *CMsgTEBaseBeam) GetStartframe() uint32 {
	if x != nil && x.Startframe != nil {
		return *x.Startframe
	}
	return 0
}

func (x *CMsgTEBaseBeam) GetFramerate() uint32 {
	if x != nil && x.Framerate != nil {
		return *x.Framerate
	}
	return 0
}

func (x *CMsgTEBaseBeam) GetLife() float32 {
	if x != nil && x.Life != nil {
		return *x.Life
	}
	return 0
}

func (x *CMsgTEBaseBeam) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CMsgTEBaseBeam) GetEndwidth() float32 {
	if x != nil && x.Endwidth != nil {
		return *x.Endwidth
	}
	return 0
}

func (x *CMsgTEBaseBeam) GetFadelength() uint32 {
	if x != nil && x.Fadelength != nil {
		return *x.Fadelength
	}
	return 0
}

func (x *CMsgTEBaseBeam) GetAmplitude() float32 {
	if x != nil && x.Amplitude != nil {
		return *x.Amplitude
	}
	return 0
}

func (x *CMsgTEBaseBeam) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *CMsgTEBaseBeam) GetSpeed() uint32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *CMsgTEBaseBeam) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type CMsgTEBeamEntPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *CMsgTEBaseBeam        `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Startentity   *uint32                `protobuf:"varint,2,opt,name=startentity" json:"startentity,omitempty"`
	Endentity     *uint32                `protobuf:"varint,3,opt,name=endentity" json:"endentity,omitempty"`
	Start         *CMsgVector            `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	End           *CMsgVector            `protobuf:"bytes,5,opt,name=end" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEBeamEntPoint) Reset() {
	*x = CMsgTEBeamEntPoint{}
	mi := &file_te_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEBeamEntPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEBeamEntPoint) ProtoMessage() {}

func (x *CMsgTEBeamEntPoint) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEBeamEntPoint.ProtoReflect.Descriptor instead.
func (*CMsgTEBeamEntPoint) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgTEBeamEntPoint) GetBase() *CMsgTEBaseBeam {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CMsgTEBeamEntPoint) GetStartentity() uint32 {
	if x != nil && x.Startentity != nil {
		return *x.Startentity
	}
	return 0
}

func (x *CMsgTEBeamEntPoint) GetEndentity() uint32 {
	if x != nil && x.Endentity != nil {
		return *x.Endentity
	}
	return 0
}

func (x *CMsgTEBeamEntPoint) GetStart() *CMsgVector {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CMsgTEBeamEntPoint) GetEnd() *CMsgVector {
	if x != nil {
		return x.End
	}
	return nil
}

type CMsgTEBeamEnts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *CMsgTEBaseBeam        `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Startentity   *uint32                `protobuf:"varint,2,opt,name=startentity" json:"startentity,omitempty"`
	Endentity     *uint32                `protobuf:"varint,3,opt,name=endentity" json:"endentity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEBeamEnts) Reset() {
	*x = CMsgTEBeamEnts{}
	mi := &file_te_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEBeamEnts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEBeamEnts) ProtoMessage() {}

func (x *CMsgTEBeamEnts) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEBeamEnts.ProtoReflect.Descriptor instead.
func (*CMsgTEBeamEnts) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgTEBeamEnts) GetBase() *CMsgTEBaseBeam {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CMsgTEBeamEnts) GetStartentity() uint32 {
	if x != nil && x.Startentity != nil {
		return *x.Startentity
	}
	return 0
}

func (x *CMsgTEBeamEnts) GetEndentity() uint32 {
	if x != nil && x.Endentity != nil {
		return *x.Endentity
	}
	return 0
}

type CMsgTEBeamPoints struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *CMsgTEBaseBeam        `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Start         *CMsgVector            `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	End           *CMsgVector            `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEBeamPoints) Reset() {
	*x = CMsgTEBeamPoints{}
	mi := &file_te_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEBeamPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEBeamPoints) ProtoMessage() {}

func (x *CMsgTEBeamPoints) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEBeamPoints.ProtoReflect.Descriptor instead.
func (*CMsgTEBeamPoints) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgTEBeamPoints) GetBase() *CMsgTEBaseBeam {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CMsgTEBeamPoints) GetStart() *CMsgVector {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CMsgTEBeamPoints) GetEnd() *CMsgVector {
	if x != nil {
		return x.End
	}
	return nil
}

type CMsgTEBeamRing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *CMsgTEBaseBeam        `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Startentity   *uint32                `protobuf:"varint,2,opt,name=startentity" json:"startentity,omitempty"`
	Endentity     *uint32                `protobuf:"varint,3,opt,name=endentity" json:"endentity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEBeamRing) Reset() {
	*x = CMsgTEBeamRing{}
	mi := &file_te_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEBeamRing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEBeamRing) ProtoMessage() {}

func (x *CMsgTEBeamRing) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEBeamRing.ProtoReflect.Descriptor instead.
func (*CMsgTEBeamRing) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgTEBeamRing) GetBase() *CMsgTEBaseBeam {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CMsgTEBeamRing) GetStartentity() uint32 {
	if x != nil && x.Startentity != nil {
		return *x.Startentity
	}
	return 0
}

func (x *CMsgTEBeamRing) GetEndentity() uint32 {
	if x != nil && x.Endentity != nil {
		return *x.Endentity
	}
	return 0
}

type CMsgTEBubbles struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mins          *CMsgVector            `protobuf:"bytes,1,opt,name=mins" json:"mins,omitempty"`
	Maxs          *CMsgVector            `protobuf:"bytes,2,opt,name=maxs" json:"maxs,omitempty"`
	Height        *float32               `protobuf:"fixed32,3,opt,name=height" json:"height,omitempty"`
	Count         *uint32                `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Speed         *float32               `protobuf:"fixed32,5,opt,name=speed" json:"speed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEBubbles) Reset() {
	*x = CMsgTEBubbles{}
	mi := &file_te_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEBubbles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEBubbles) ProtoMessage() {}

func (x *CMsgTEBubbles) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEBubbles.ProtoReflect.Descriptor instead.
func (*CMsgTEBubbles) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgTEBubbles) GetMins() *CMsgVector {
	if x != nil {
		return x.Mins
	}
	return nil
}

func (x *CMsgTEBubbles) GetMaxs() *CMsgVector {
	if x != nil {
		return x.Maxs
	}
	return nil
}

func (x *CMsgTEBubbles) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CMsgTEBubbles) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CMsgTEBubbles) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

type CMsgTEBubbleTrail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mins          *CMsgVector            `protobuf:"bytes,1,opt,name=mins" json:"mins,omitempty"`
	Maxs          *CMsgVector            `protobuf:"bytes,2,opt,name=maxs" json:"maxs,omitempty"`
	Waterz        *float32               `protobuf:"fixed32,3,opt,name=waterz" json:"waterz,omitempty"`
	Count         *uint32                `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Speed         *float32               `protobuf:"fixed32,5,opt,name=speed" json:"speed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEBubbleTrail) Reset() {
	*x = CMsgTEBubbleTrail{}
	mi := &file_te_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEBubbleTrail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEBubbleTrail) ProtoMessage() {}

func (x *CMsgTEBubbleTrail) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEBubbleTrail.ProtoReflect.Descriptor instead.
func (*CMsgTEBubbleTrail) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgTEBubbleTrail) GetMins() *CMsgVector {
	if x != nil {
		return x.Mins
	}
	return nil
}

func (x *CMsgTEBubbleTrail) GetMaxs() *CMsgVector {
	if x != nil {
		return x.Maxs
	}
	return nil
}

func (x *CMsgTEBubbleTrail) GetWaterz() float32 {
	if x != nil && x.Waterz != nil {
		return *x.Waterz
	}
	return 0
}

func (x *CMsgTEBubbleTrail) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CMsgTEBubbleTrail) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

type CMsgTEDecal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Start         *CMsgVector            `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	Entity        *int32                 `protobuf:"varint,3,opt,name=entity,def=-1" json:"entity,omitempty"`
	Hitbox        *uint32                `protobuf:"varint,4,opt,name=hitbox" json:"hitbox,omitempty"`
	Index         *uint32                `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgTEDecal fields.
const (
	Default_CMsgTEDecal_Entity = int32(-1)
)

func (x *CMsgTEDecal) Reset() {
	*x = CMsgTEDecal{}
	mi := &file_te_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEDecal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEDecal) ProtoMessage() {}

func (x *CMsgTEDecal) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEDecal.ProtoReflect.Descriptor instead.
func (*CMsgTEDecal) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgTEDecal) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTEDecal) GetStart() *CMsgVector {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CMsgTEDecal) GetEntity() int32 {
	if x != nil && x.Entity != nil {
		return *x.Entity
	}
	return Default_CMsgTEDecal_Entity
}

func (x *CMsgTEDecal) GetHitbox() uint32 {
	if x != nil && x.Hitbox != nil {
		return *x.Hitbox
	}
	return 0
}

func (x *CMsgTEDecal) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type CMsgEffectData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Origin          *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Start           *CMsgVector            `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	Normal          *CMsgVector            `protobuf:"bytes,3,opt,name=normal" json:"normal,omitempty"`
	Angles          *CMsgQAngle            `protobuf:"bytes,4,opt,name=angles" json:"angles,omitempty"`
	Entity          *uint32                `protobuf:"fixed32,5,opt,name=entity,def=16777215" json:"entity,omitempty"`
	Otherentity     *uint32                `protobuf:"fixed32,6,opt,name=otherentity,def=16777215" json:"otherentity,omitempty"`
	Scale           *float32               `protobuf:"fixed32,7,opt,name=scale" json:"scale,omitempty"`
	Magnitude       *float32               `protobuf:"fixed32,8,opt,name=magnitude" json:"magnitude,omitempty"`
	Radius          *float32               `protobuf:"fixed32,9,opt,name=radius" json:"radius,omitempty"`
	Surfaceprop     *uint32                `protobuf:"fixed32,10,opt,name=surfaceprop" json:"surfaceprop,omitempty"`
	Effectindex     *uint64                `protobuf:"fixed64,11,opt,name=effectindex" json:"effectindex,omitempty"`
	Damagetype      *uint32                `protobuf:"varint,12,opt,name=damagetype" json:"damagetype,omitempty"`
	Material        *uint32                `protobuf:"varint,13,opt,name=material" json:"material,omitempty"`
	Hitbox          *uint32                `protobuf:"varint,14,opt,name=hitbox" json:"hitbox,omitempty"`
	Color           *uint32                `protobuf:"varint,15,opt,name=color" json:"color,omitempty"`
	Flags           *uint32                `protobuf:"varint,16,opt,name=flags" json:"flags,omitempty"`
	Attachmentindex *int32                 `protobuf:"varint,17,opt,name=attachmentindex" json:"attachmentindex,omitempty"`
	Effectname      *uint32                `protobuf:"varint,18,opt,name=effectname" json:"effectname,omitempty"`
	Attachmentname  *uint32                `protobuf:"varint,19,opt,name=attachmentname" json:"attachmentname,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgEffectData fields.
const (
	Default_CMsgEffectData_Entity      = uint32(16777215)
	Default_CMsgEffectData_Otherentity = uint32(16777215)
)

func (x *CMsgEffectData) Reset() {
	*x = CMsgEffectData{}
	mi := &file_te_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgEffectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEffectData) ProtoMessage() {}

func (x *CMsgEffectData) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEffectData.ProtoReflect.Descriptor instead.
func (*CMsgEffectData) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgEffectData) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgEffectData) GetStart() *CMsgVector {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CMsgEffectData) GetNormal() *CMsgVector {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *CMsgEffectData) GetAngles() *CMsgQAngle {
	if x != nil {
		return x.Angles
	}
	return nil
}

func (x *CMsgEffectData) GetEntity() uint32 {
	if x != nil && x.Entity != nil {
		return *x.Entity
	}
	return Default_CMsgEffectData_Entity
}

func (x *CMsgEffectData) GetOtherentity() uint32 {
	if x != nil && x.Otherentity != nil {
		return *x.Otherentity
	}
	return Default_CMsgEffectData_Otherentity
}

func (x *CMsgEffectData) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *CMsgEffectData) GetMagnitude() float32 {
	if x != nil && x.Magnitude != nil {
		return *x.Magnitude
	}
	return 0
}

func (x *CMsgEffectData) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *CMsgEffectData) GetSurfaceprop() uint32 {
	if x != nil && x.Surfaceprop != nil {
		return *x.Surfaceprop
	}
	return 0
}

func (x *CMsgEffectData) GetEffectindex() uint64 {
	if x != nil && x.Effectindex != nil {
		return *x.Effectindex
	}
	return 0
}

func (x *CMsgEffectData) GetDamagetype() uint32 {
	if x != nil && x.Damagetype != nil {
		return *x.Damagetype
	}
	return 0
}

func (x *CMsgEffectData) GetMaterial() uint32 {
	if x != nil && x.Material != nil {
		return *x.Material
	}
	return 0
}

func (x *CMsgEffectData) GetHitbox() uint32 {
	if x != nil && x.Hitbox != nil {
		return *x.Hitbox
	}
	return 0
}

func (x *CMsgEffectData) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *CMsgEffectData) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgEffectData) GetAttachmentindex() int32 {
	if x != nil && x.Attachmentindex != nil {
		return *x.Attachmentindex
	}
	return 0
}

func (x *CMsgEffectData) GetEffectname() uint32 {
	if x != nil && x.Effectname != nil {
		return *x.Effectname
	}
	return 0
}

func (x *CMsgEffectData) GetAttachmentname() uint32 {
	if x != nil && x.Attachmentname != nil {
		return *x.Attachmentname
	}
	return 0
}

type CMsgTEEffectDispatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Effectdata    *CMsgEffectData        `protobuf:"bytes,1,opt,name=effectdata" json:"effectdata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEEffectDispatch) Reset() {
	*x = CMsgTEEffectDispatch{}
	mi := &file_te_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEEffectDispatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEEffectDispatch) ProtoMessage() {}

func (x *CMsgTEEffectDispatch) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEEffectDispatch.ProtoReflect.Descriptor instead.
func (*CMsgTEEffectDispatch) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgTEEffectDispatch) GetEffectdata() *CMsgEffectData {
	if x != nil {
		return x.Effectdata
	}
	return nil
}

type CMsgTEEnergySplash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *CMsgVector            `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	Dir           *CMsgVector            `protobuf:"bytes,2,opt,name=dir" json:"dir,omitempty"`
	Explosive     *bool                  `protobuf:"varint,3,opt,name=explosive" json:"explosive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEEnergySplash) Reset() {
	*x = CMsgTEEnergySplash{}
	mi := &file_te_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEEnergySplash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEEnergySplash) ProtoMessage() {}

func (x *CMsgTEEnergySplash) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEEnergySplash.ProtoReflect.Descriptor instead.
func (*CMsgTEEnergySplash) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgTEEnergySplash) GetPos() *CMsgVector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *CMsgTEEnergySplash) GetDir() *CMsgVector {
	if x != nil {
		return x.Dir
	}
	return nil
}

func (x *CMsgTEEnergySplash) GetExplosive() bool {
	if x != nil && x.Explosive != nil {
		return *x.Explosive
	}
	return false
}

type CMsgTEFizz struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entity        *int32                 `protobuf:"varint,1,opt,name=entity,def=-1" json:"entity,omitempty"`
	Density       *uint32                `protobuf:"varint,2,opt,name=density" json:"density,omitempty"`
	Current       *int32                 `protobuf:"varint,3,opt,name=current" json:"current,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgTEFizz fields.
const (
	Default_CMsgTEFizz_Entity = int32(-1)
)

func (x *CMsgTEFizz) Reset() {
	*x = CMsgTEFizz{}
	mi := &file_te_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEFizz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEFizz) ProtoMessage() {}

func (x *CMsgTEFizz) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEFizz.ProtoReflect.Descriptor instead.
func (*CMsgTEFizz) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgTEFizz) GetEntity() int32 {
	if x != nil && x.Entity != nil {
		return *x.Entity
	}
	return Default_CMsgTEFizz_Entity
}

func (x *CMsgTEFizz) GetDensity() uint32 {
	if x != nil && x.Density != nil {
		return *x.Density
	}
	return 0
}

func (x *CMsgTEFizz) GetCurrent() int32 {
	if x != nil && x.Current != nil {
		return *x.Current
	}
	return 0
}

type CMsgTEShatterSurface struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Angles        *CMsgQAngle            `protobuf:"bytes,2,opt,name=angles" json:"angles,omitempty"`
	Force         *CMsgVector            `protobuf:"bytes,3,opt,name=force" json:"force,omitempty"`
	Forcepos      *CMsgVector            `protobuf:"bytes,4,opt,name=forcepos" json:"forcepos,omitempty"`
	Width         *float32               `protobuf:"fixed32,5,opt,name=width" json:"width,omitempty"`
	Height        *float32               `protobuf:"fixed32,6,opt,name=height" json:"height,omitempty"`
	Shardsize     *float32               `protobuf:"fixed32,7,opt,name=shardsize" json:"shardsize,omitempty"`
	Surfacetype   *uint32                `protobuf:"varint,8,opt,name=surfacetype" json:"surfacetype,omitempty"`
	Frontcolor    *uint32                `protobuf:"fixed32,9,opt,name=frontcolor" json:"frontcolor,omitempty"`
	Backcolor     *uint32                `protobuf:"fixed32,10,opt,name=backcolor" json:"backcolor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEShatterSurface) Reset() {
	*x = CMsgTEShatterSurface{}
	mi := &file_te_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEShatterSurface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEShatterSurface) ProtoMessage() {}

func (x *CMsgTEShatterSurface) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEShatterSurface.ProtoReflect.Descriptor instead.
func (*CMsgTEShatterSurface) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgTEShatterSurface) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTEShatterSurface) GetAngles() *CMsgQAngle {
	if x != nil {
		return x.Angles
	}
	return nil
}

func (x *CMsgTEShatterSurface) GetForce() *CMsgVector {
	if x != nil {
		return x.Force
	}
	return nil
}

func (x *CMsgTEShatterSurface) GetForcepos() *CMsgVector {
	if x != nil {
		return x.Forcepos
	}
	return nil
}

func (x *CMsgTEShatterSurface) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CMsgTEShatterSurface) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CMsgTEShatterSurface) GetShardsize() float32 {
	if x != nil && x.Shardsize != nil {
		return *x.Shardsize
	}
	return 0
}

func (x *CMsgTEShatterSurface) GetSurfacetype() uint32 {
	if x != nil && x.Surfacetype != nil {
		return *x.Surfacetype
	}
	return 0
}

func (x *CMsgTEShatterSurface) GetFrontcolor() uint32 {
	if x != nil && x.Frontcolor != nil {
		return *x.Frontcolor
	}
	return 0
}

func (x *CMsgTEShatterSurface) GetBackcolor() uint32 {
	if x != nil && x.Backcolor != nil {
		return *x.Backcolor
	}
	return 0
}

type CMsgTEGlowSprite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Scale         *float32               `protobuf:"fixed32,2,opt,name=scale" json:"scale,omitempty"`
	Life          *float32               `protobuf:"fixed32,3,opt,name=life" json:"life,omitempty"`
	Brightness    *uint32                `protobuf:"varint,4,opt,name=brightness" json:"brightness,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEGlowSprite) Reset() {
	*x = CMsgTEGlowSprite{}
	mi := &file_te_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEGlowSprite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEGlowSprite) ProtoMessage() {}

func (x *CMsgTEGlowSprite) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEGlowSprite.ProtoReflect.Descriptor instead.
func (*CMsgTEGlowSprite) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgTEGlowSprite) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTEGlowSprite) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *CMsgTEGlowSprite) GetLife() float32 {
	if x != nil && x.Life != nil {
		return *x.Life
	}
	return 0
}

func (x *CMsgTEGlowSprite) GetBrightness() uint32 {
	if x != nil && x.Brightness != nil {
		return *x.Brightness
	}
	return 0
}

type CMsgTEImpact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Normal        *CMsgVector            `protobuf:"bytes,2,opt,name=normal" json:"normal,omitempty"`
	Type          *uint32                `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEImpact) Reset() {
	*x = CMsgTEImpact{}
	mi := &file_te_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEImpact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEImpact) ProtoMessage() {}

func (x *CMsgTEImpact) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEImpact.ProtoReflect.Descriptor instead.
func (*CMsgTEImpact) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgTEImpact) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTEImpact) GetNormal() *CMsgVector {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *CMsgTEImpact) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type CMsgTEMuzzleFlash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Angles        *CMsgQAngle            `protobuf:"bytes,2,opt,name=angles" json:"angles,omitempty"`
	Scale         *float32               `protobuf:"fixed32,3,opt,name=scale" json:"scale,omitempty"`
	Type          *uint32                `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEMuzzleFlash) Reset() {
	*x = CMsgTEMuzzleFlash{}
	mi := &file_te_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEMuzzleFlash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEMuzzleFlash) ProtoMessage() {}

func (x *CMsgTEMuzzleFlash) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEMuzzleFlash.ProtoReflect.Descriptor instead.
func (*CMsgTEMuzzleFlash) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgTEMuzzleFlash) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTEMuzzleFlash) GetAngles() *CMsgQAngle {
	if x != nil {
		return x.Angles
	}
	return nil
}

func (x *CMsgTEMuzzleFlash) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *CMsgTEMuzzleFlash) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type CMsgTEBloodStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Direction     *CMsgVector            `protobuf:"bytes,2,opt,name=direction" json:"direction,omitempty"`
	Color         *uint32                `protobuf:"fixed32,3,opt,name=color" json:"color,omitempty"`
	Amount        *uint32                `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEBloodStream) Reset() {
	*x = CMsgTEBloodStream{}
	mi := &file_te_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEBloodStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEBloodStream) ProtoMessage() {}

func (x *CMsgTEBloodStream) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEBloodStream.ProtoReflect.Descriptor instead.
func (*CMsgTEBloodStream) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgTEBloodStream) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTEBloodStream) GetDirection() *CMsgVector {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *CMsgTEBloodStream) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *CMsgTEBloodStream) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type CMsgTEExplosion struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Origin            *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Flags             *uint32                `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Normal            *CMsgVector            `protobuf:"bytes,4,opt,name=normal" json:"normal,omitempty"`
	Radius            *uint32                `protobuf:"varint,6,opt,name=radius" json:"radius,omitempty"`
	Magnitude         *uint32                `protobuf:"varint,7,opt,name=magnitude" json:"magnitude,omitempty"`
	AffectRagdolls    *bool                  `protobuf:"varint,9,opt,name=affect_ragdolls,json=affectRagdolls" json:"affect_ragdolls,omitempty"`
	SoundName         *string                `protobuf:"bytes,10,opt,name=sound_name,json=soundName" json:"sound_name,omitempty"`
	ExplosionType     *uint32                `protobuf:"varint,11,opt,name=explosion_type,json=explosionType" json:"explosion_type,omitempty"`
	CreateDebris      *bool                  `protobuf:"varint,12,opt,name=create_debris,json=createDebris" json:"create_debris,omitempty"`
	DebrisOrigin      *CMsgVector            `protobuf:"bytes,13,opt,name=debris_origin,json=debrisOrigin" json:"debris_origin,omitempty"`
	DebrisSurfaceprop *uint32                `protobuf:"fixed32,14,opt,name=debris_surfaceprop,json=debrisSurfaceprop" json:"debris_surfaceprop,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgTEExplosion) Reset() {
	*x = CMsgTEExplosion{}
	mi := &file_te_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEExplosion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEExplosion) ProtoMessage() {}

func (x *CMsgTEExplosion) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEExplosion.ProtoReflect.Descriptor instead.
func (*CMsgTEExplosion) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgTEExplosion) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTEExplosion) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgTEExplosion) GetNormal() *CMsgVector {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *CMsgTEExplosion) GetRadius() uint32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *CMsgTEExplosion) GetMagnitude() uint32 {
	if x != nil && x.Magnitude != nil {
		return *x.Magnitude
	}
	return 0
}

func (x *CMsgTEExplosion) GetAffectRagdolls() bool {
	if x != nil && x.AffectRagdolls != nil {
		return *x.AffectRagdolls
	}
	return false
}

func (x *CMsgTEExplosion) GetSoundName() string {
	if x != nil && x.SoundName != nil {
		return *x.SoundName
	}
	return ""
}

func (x *CMsgTEExplosion) GetExplosionType() uint32 {
	if x != nil && x.ExplosionType != nil {
		return *x.ExplosionType
	}
	return 0
}

func (x *CMsgTEExplosion) GetCreateDebris() bool {
	if x != nil && x.CreateDebris != nil {
		return *x.CreateDebris
	}
	return false
}

func (x *CMsgTEExplosion) GetDebrisOrigin() *CMsgVector {
	if x != nil {
		return x.DebrisOrigin
	}
	return nil
}

func (x *CMsgTEExplosion) GetDebrisSurfaceprop() uint32 {
	if x != nil && x.DebrisSurfaceprop != nil {
		return *x.DebrisSurfaceprop
	}
	return 0
}

type CMsgTEDust struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Size          *float32               `protobuf:"fixed32,2,opt,name=size" json:"size,omitempty"`
	Speed         *float32               `protobuf:"fixed32,3,opt,name=speed" json:"speed,omitempty"`
	Direction     *CMsgVector            `protobuf:"bytes,4,opt,name=direction" json:"direction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEDust) Reset() {
	*x = CMsgTEDust{}
	mi := &file_te_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEDust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEDust) ProtoMessage() {}

func (x *CMsgTEDust) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEDust.ProtoReflect.Descriptor instead.
func (*CMsgTEDust) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgTEDust) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTEDust) GetSize() float32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *CMsgTEDust) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *CMsgTEDust) GetDirection() *CMsgVector {
	if x != nil {
		return x.Direction
	}
	return nil
}

type CMsgTELargeFunnel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Reversed      *uint32                `protobuf:"varint,2,opt,name=reversed" json:"reversed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTELargeFunnel) Reset() {
	*x = CMsgTELargeFunnel{}
	mi := &file_te_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTELargeFunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTELargeFunnel) ProtoMessage() {}

func (x *CMsgTELargeFunnel) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTELargeFunnel.ProtoReflect.Descriptor instead.
func (*CMsgTELargeFunnel) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgTELargeFunnel) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTELargeFunnel) GetReversed() uint32 {
	if x != nil && x.Reversed != nil {
		return *x.Reversed
	}
	return 0
}

type CMsgTESparks struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Magnitude     *uint32                `protobuf:"varint,2,opt,name=magnitude" json:"magnitude,omitempty"`
	Length        *uint32                `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	Direction     *CMsgVector            `protobuf:"bytes,4,opt,name=direction" json:"direction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTESparks) Reset() {
	*x = CMsgTESparks{}
	mi := &file_te_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTESparks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTESparks) ProtoMessage() {}

func (x *CMsgTESparks) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTESparks.ProtoReflect.Descriptor instead.
func (*CMsgTESparks) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgTESparks) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTESparks) GetMagnitude() uint32 {
	if x != nil && x.Magnitude != nil {
		return *x.Magnitude
	}
	return 0
}

func (x *CMsgTESparks) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *CMsgTESparks) GetDirection() *CMsgVector {
	if x != nil {
		return x.Direction
	}
	return nil
}

type CMsgTEPhysicsProp struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Origin                     *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Velocity                   *CMsgVector            `protobuf:"bytes,2,opt,name=velocity" json:"velocity,omitempty"`
	Angles                     *CMsgQAngle            `protobuf:"bytes,3,opt,name=angles" json:"angles,omitempty"`
	Skin                       *uint32                `protobuf:"fixed32,4,opt,name=skin" json:"skin,omitempty"`
	Flags                      *uint32                `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	Effects                    *uint32                `protobuf:"varint,6,opt,name=effects" json:"effects,omitempty"`
	Color                      *uint32                `protobuf:"fixed32,7,opt,name=color" json:"color,omitempty"`
	Modelindex                 *uint64                `protobuf:"fixed64,8,opt,name=modelindex" json:"modelindex,omitempty"`
	UnusedBreakmodelsnottomake *uint32                `protobuf:"varint,9,opt,name=unused_breakmodelsnottomake,json=unusedBreakmodelsnottomake" json:"unused_breakmodelsnottomake,omitempty"`
	Scale                      *float32               `protobuf:"fixed32,10,opt,name=scale" json:"scale,omitempty"`
	Dmgpos                     *CMsgVector            `protobuf:"bytes,11,opt,name=dmgpos" json:"dmgpos,omitempty"`
	Dmgdir                     *CMsgVector            `protobuf:"bytes,12,opt,name=dmgdir" json:"dmgdir,omitempty"`
	Dmgtype                    *int32                 `protobuf:"varint,13,opt,name=dmgtype" json:"dmgtype,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CMsgTEPhysicsProp) Reset() {
	*x = CMsgTEPhysicsProp{}
	mi := &file_te_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEPhysicsProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEPhysicsProp) ProtoMessage() {}

func (x *CMsgTEPhysicsProp) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEPhysicsProp.ProtoReflect.Descriptor instead.
func (*CMsgTEPhysicsProp) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgTEPhysicsProp) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTEPhysicsProp) GetVelocity() *CMsgVector {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *CMsgTEPhysicsProp) GetAngles() *CMsgQAngle {
	if x != nil {
		return x.Angles
	}
	return nil
}

func (x *CMsgTEPhysicsProp) GetSkin() uint32 {
	if x != nil && x.Skin != nil {
		return *x.Skin
	}
	return 0
}

func (x *CMsgTEPhysicsProp) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgTEPhysicsProp) GetEffects() uint32 {
	if x != nil && x.Effects != nil {
		return *x.Effects
	}
	return 0
}

func (x *CMsgTEPhysicsProp) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *CMsgTEPhysicsProp) GetModelindex() uint64 {
	if x != nil && x.Modelindex != nil {
		return *x.Modelindex
	}
	return 0
}

func (x *CMsgTEPhysicsProp) GetUnusedBreakmodelsnottomake() uint32 {
	if x != nil && x.UnusedBreakmodelsnottomake != nil {
		return *x.UnusedBreakmodelsnottomake
	}
	return 0
}

func (x *CMsgTEPhysicsProp) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *CMsgTEPhysicsProp) GetDmgpos() *CMsgVector {
	if x != nil {
		return x.Dmgpos
	}
	return nil
}

func (x *CMsgTEPhysicsProp) GetDmgdir() *CMsgVector {
	if x != nil {
		return x.Dmgdir
	}
	return nil
}

func (x *CMsgTEPhysicsProp) GetDmgtype() int32 {
	if x != nil && x.Dmgtype != nil {
		return *x.Dmgtype
	}
	return 0
}

type CMsgTESmoke struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Scale         *float32               `protobuf:"fixed32,2,opt,name=scale" json:"scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTESmoke) Reset() {
	*x = CMsgTESmoke{}
	mi := &file_te_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTESmoke) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTESmoke) ProtoMessage() {}

func (x *CMsgTESmoke) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTESmoke.ProtoReflect.Descriptor instead.
func (*CMsgTESmoke) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgTESmoke) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTESmoke) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

type CMsgTEWorldDecal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *CMsgVector            `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Normal        *CMsgVector            `protobuf:"bytes,2,opt,name=normal" json:"normal,omitempty"`
	Index         *uint32                `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTEWorldDecal) Reset() {
	*x = CMsgTEWorldDecal{}
	mi := &file_te_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTEWorldDecal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTEWorldDecal) ProtoMessage() {}

func (x *CMsgTEWorldDecal) ProtoReflect() protoreflect.Message {
	mi := &file_te_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTEWorldDecal.ProtoReflect.Descriptor instead.
func (*CMsgTEWorldDecal) Descriptor() ([]byte, []int) {
	return file_te_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgTEWorldDecal) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgTEWorldDecal) GetNormal() *CMsgVector {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *CMsgTEWorldDecal) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

var File_te_proto protoreflect.FileDescriptor

var file_te_proto_rawDesc = string([]byte{
	0x0a, 0x08, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x53, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x41, 0x72, 0x6d, 0x6f,
	0x72, 0x52, 0x69, 0x63, 0x6f, 0x63, 0x68, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x03, 0x64, 0x69, 0x72, 0x22, 0xd2, 0x02, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67,
	0x54, 0x45, 0x42, 0x61, 0x73, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61,
	0x6c, 0x6f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x68,
	0x61, 0x6c, 0x6f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x61, 0x64, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x61, 0x64, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xbb, 0x01, 0x0a,
	0x12, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x42, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x42, 0x61, 0x73, 0x65, 0x42, 0x65,
	0x61, 0x6d, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x75, 0x0a, 0x0e, 0x43, 0x4d,
	0x73, 0x67, 0x54, 0x45, 0x42, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x45, 0x42, 0x61, 0x73, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x79, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x42, 0x65, 0x61, 0x6d, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x42, 0x61, 0x73, 0x65,
	0x42, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x75, 0x0a, 0x0e,
	0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x42, 0x65, 0x61, 0x6d, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x54, 0x45, 0x42, 0x61, 0x73, 0x65, 0x42, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x42, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x04, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x61, 0x78, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x11,
	0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6d, 0x69,
	0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x61, 0x78, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6d,
	0x61, 0x78, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x74, 0x65, 0x72, 0x7a, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x61, 0x74, 0x65, 0x72, 0x7a, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0b, 0x43, 0x4d, 0x73, 0x67,
	0x54, 0x45, 0x44, 0x65, 0x63, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x02, 0x2d, 0x31, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x69, 0x74, 0x62, 0x6f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x69, 0x74,
	0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xf2, 0x04, 0x0a, 0x0e, 0x43, 0x4d,
	0x73, 0x67, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x3a, 0x08,
	0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x35, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x2a, 0x0a, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x07, 0x3a, 0x08, 0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x35, 0x52,
	0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x73,
	0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x74, 0x62,
	0x6f, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x47,
	0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x54,
	0x45, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x03,
	0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x76, 0x65, 0x22, 0x5c, 0x0a, 0x0a, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x45, 0x46, 0x69, 0x7a, 0x7a, 0x12, 0x1a, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xd8, 0x02, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67,
	0x54, 0x45, 0x53, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67,
	0x6c, 0x65, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x47, 0x6c, 0x6f,
	0x77, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x6c, 0x0a, 0x0c, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x4d,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x23, 0x0a, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x9c, 0x03, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x23, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x67, 0x64, 0x6f, 0x6c, 0x6c, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x61, 0x67,
	0x64, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x72, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x72, 0x69, 0x73,
	0x12, 0x30, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x72, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x72, 0x69, 0x73, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x62, 0x72, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x07, 0x52, 0x11,
	0x64, 0x65, 0x62, 0x72, 0x69, 0x73, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70, 0x72, 0x6f,
	0x70, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x44, 0x75, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x11, 0x43, 0x4d,
	0x73, 0x67, 0x54, 0x45, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64,
	0x22, 0x94, 0x01, 0x0a, 0x0c, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x53, 0x70, 0x61, 0x72, 0x6b,
	0x73, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x03, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67,
	0x54, 0x45, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x23, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04,
	0x73, 0x6b, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x1b, 0x75, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x6e, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6b, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x6e, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6d, 0x67, 0x70, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x64, 0x6d, 0x67, 0x70, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x6d, 0x67, 0x64, 0x69, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x06, 0x64, 0x6d, 0x67, 0x64, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x6d, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x6d,
	0x67, 0x74, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x0b, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x53,
	0x6d, 0x6f, 0x6b, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22,
	0x72, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x45, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65,
	0x63, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2a, 0xf8, 0x03, 0x0a, 0x0e, 0x45, 0x54, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x13, 0x54, 0x45, 0x5f, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x10, 0x90, 0x03,
	0x12, 0x17, 0x0a, 0x12, 0x54, 0x45, 0x5f, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x69, 0x63, 0x6f,
	0x63, 0x68, 0x65, 0x74, 0x49, 0x64, 0x10, 0x91, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x45, 0x5f,
	0x42, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x10, 0x92,
	0x03, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x45, 0x5f, 0x42, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x73,
	0x49, 0x64, 0x10, 0x93, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x54, 0x45, 0x5f, 0x42, 0x65, 0x61, 0x6d,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x10, 0x94, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x54,
	0x45, 0x5f, 0x42, 0x65, 0x61, 0x6d, 0x52, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x10, 0x95, 0x03, 0x12,
	0x11, 0x0a, 0x0c, 0x54, 0x45, 0x5f, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x10,
	0x98, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x45, 0x5f, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x10, 0x99, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x54, 0x45, 0x5f,
	0x44, 0x65, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x10, 0x9a, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x54, 0x45,
	0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x10, 0x9b, 0x03,
	0x12, 0x16, 0x0a, 0x11, 0x54, 0x45, 0x5f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x70, 0x6c,
	0x61, 0x73, 0x68, 0x49, 0x64, 0x10, 0x9c, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x54, 0x45, 0x5f, 0x46,
	0x69, 0x7a, 0x7a, 0x49, 0x64, 0x10, 0x9d, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x54, 0x45, 0x5f, 0x53,
	0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x10,
	0x9e, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x54, 0x45, 0x5f, 0x47, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x72,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x10, 0x9f, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x45, 0x5f, 0x49,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x64, 0x10, 0xa0, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x45,
	0x5f, 0x4d, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x49, 0x64, 0x10, 0xa1,
	0x03, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x45, 0x5f, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x10, 0xa2, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x45, 0x5f, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x10, 0xa3, 0x03, 0x12, 0x0e, 0x0a,
	0x09, 0x54, 0x45, 0x5f, 0x44, 0x75, 0x73, 0x74, 0x49, 0x64, 0x10, 0xa4, 0x03, 0x12, 0x15, 0x0a,
	0x10, 0x54, 0x45, 0x5f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x10, 0xa5, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x45, 0x5f, 0x53, 0x70, 0x61, 0x72, 0x6b,
	0x73, 0x49, 0x64, 0x10, 0xa6, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x45, 0x5f, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x10, 0xa7, 0x03, 0x12, 0x0f, 0x0a,
	0x0a, 0x54, 0x45, 0x5f, 0x53, 0x6d, 0x6f, 0x6b, 0x65, 0x49, 0x64, 0x10, 0xaa, 0x03,
})

var (
	file_te_proto_rawDescOnce sync.Once
	file_te_proto_rawDescData []byte
)

func file_te_proto_rawDescGZIP() []byte {
	file_te_proto_rawDescOnce.Do(func() {
		file_te_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_te_proto_rawDesc), len(file_te_proto_rawDesc)))
	})
	return file_te_proto_rawDescData
}

var file_te_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_te_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_te_proto_goTypes = []any{
	(ETEProtobufIds)(0),          // 0: ETEProtobufIds
	(*CMsgTEArmorRicochet)(nil),  // 1: CMsgTEArmorRicochet
	(*CMsgTEBaseBeam)(nil),       // 2: CMsgTEBaseBeam
	(*CMsgTEBeamEntPoint)(nil),   // 3: CMsgTEBeamEntPoint
	(*CMsgTEBeamEnts)(nil),       // 4: CMsgTEBeamEnts
	(*CMsgTEBeamPoints)(nil),     // 5: CMsgTEBeamPoints
	(*CMsgTEBeamRing)(nil),       // 6: CMsgTEBeamRing
	(*CMsgTEBubbles)(nil),        // 7: CMsgTEBubbles
	(*CMsgTEBubbleTrail)(nil),    // 8: CMsgTEBubbleTrail
	(*CMsgTEDecal)(nil),          // 9: CMsgTEDecal
	(*CMsgEffectData)(nil),       // 10: CMsgEffectData
	(*CMsgTEEffectDispatch)(nil), // 11: CMsgTEEffectDispatch
	(*CMsgTEEnergySplash)(nil),   // 12: CMsgTEEnergySplash
	(*CMsgTEFizz)(nil),           // 13: CMsgTEFizz
	(*CMsgTEShatterSurface)(nil), // 14: CMsgTEShatterSurface
	(*CMsgTEGlowSprite)(nil),     // 15: CMsgTEGlowSprite
	(*CMsgTEImpact)(nil),         // 16: CMsgTEImpact
	(*CMsgTEMuzzleFlash)(nil),    // 17: CMsgTEMuzzleFlash
	(*CMsgTEBloodStream)(nil),    // 18: CMsgTEBloodStream
	(*CMsgTEExplosion)(nil),      // 19: CMsgTEExplosion
	(*CMsgTEDust)(nil),           // 20: CMsgTEDust
	(*CMsgTELargeFunnel)(nil),    // 21: CMsgTELargeFunnel
	(*CMsgTESparks)(nil),         // 22: CMsgTESparks
	(*CMsgTEPhysicsProp)(nil),    // 23: CMsgTEPhysicsProp
	(*CMsgTESmoke)(nil),          // 24: CMsgTESmoke
	(*CMsgTEWorldDecal)(nil),     // 25: CMsgTEWorldDecal
	(*CMsgVector)(nil),           // 26: CMsgVector
	(*CMsgQAngle)(nil),           // 27: CMsgQAngle
}
var file_te_proto_depIdxs = []int32{
	26, // 0: CMsgTEArmorRicochet.pos:type_name -> CMsgVector
	26, // 1: CMsgTEArmorRicochet.dir:type_name -> CMsgVector
	2,  // 2: CMsgTEBeamEntPoint.base:type_name -> CMsgTEBaseBeam
	26, // 3: CMsgTEBeamEntPoint.start:type_name -> CMsgVector
	26, // 4: CMsgTEBeamEntPoint.end:type_name -> CMsgVector
	2,  // 5: CMsgTEBeamEnts.base:type_name -> CMsgTEBaseBeam
	2,  // 6: CMsgTEBeamPoints.base:type_name -> CMsgTEBaseBeam
	26, // 7: CMsgTEBeamPoints.start:type_name -> CMsgVector
	26, // 8: CMsgTEBeamPoints.end:type_name -> CMsgVector
	2,  // 9: CMsgTEBeamRing.base:type_name -> CMsgTEBaseBeam
	26, // 10: CMsgTEBubbles.mins:type_name -> CMsgVector
	26, // 11: CMsgTEBubbles.maxs:type_name -> CMsgVector
	26, // 12: CMsgTEBubbleTrail.mins:type_name -> CMsgVector
	26, // 13: CMsgTEBubbleTrail.maxs:type_name -> CMsgVector
	26, // 14: CMsgTEDecal.origin:type_name -> CMsgVector
	26, // 15: CMsgTEDecal.start:type_name -> CMsgVector
	26, // 16: CMsgEffectData.origin:type_name -> CMsgVector
	26, // 17: CMsgEffectData.start:type_name -> CMsgVector
	26, // 18: CMsgEffectData.normal:type_name -> CMsgVector
	27, // 19: CMsgEffectData.angles:type_name -> CMsgQAngle
	10, // 20: CMsgTEEffectDispatch.effectdata:type_name -> CMsgEffectData
	26, // 21: CMsgTEEnergySplash.pos:type_name -> CMsgVector
	26, // 22: CMsgTEEnergySplash.dir:type_name -> CMsgVector
	26, // 23: CMsgTEShatterSurface.origin:type_name -> CMsgVector
	27, // 24: CMsgTEShatterSurface.angles:type_name -> CMsgQAngle
	26, // 25: CMsgTEShatterSurface.force:type_name -> CMsgVector
	26, // 26: CMsgTEShatterSurface.forcepos:type_name -> CMsgVector
	26, // 27: CMsgTEGlowSprite.origin:type_name -> CMsgVector
	26, // 28: CMsgTEImpact.origin:type_name -> CMsgVector
	26, // 29: CMsgTEImpact.normal:type_name -> CMsgVector
	26, // 30: CMsgTEMuzzleFlash.origin:type_name -> CMsgVector
	27, // 31: CMsgTEMuzzleFlash.angles:type_name -> CMsgQAngle
	26, // 32: CMsgTEBloodStream.origin:type_name -> CMsgVector
	26, // 33: CMsgTEBloodStream.direction:type_name -> CMsgVector
	26, // 34: CMsgTEExplosion.origin:type_name -> CMsgVector
	26, // 35: CMsgTEExplosion.normal:type_name -> CMsgVector
	26, // 36: CMsgTEExplosion.debris_origin:type_name -> CMsgVector
	26, // 37: CMsgTEDust.origin:type_name -> CMsgVector
	26, // 38: CMsgTEDust.direction:type_name -> CMsgVector
	26, // 39: CMsgTELargeFunnel.origin:type_name -> CMsgVector
	26, // 40: CMsgTESparks.origin:type_name -> CMsgVector
	26, // 41: CMsgTESparks.direction:type_name -> CMsgVector
	26, // 42: CMsgTEPhysicsProp.origin:type_name -> CMsgVector
	26, // 43: CMsgTEPhysicsProp.velocity:type_name -> CMsgVector
	27, // 44: CMsgTEPhysicsProp.angles:type_name -> CMsgQAngle
	26, // 45: CMsgTEPhysicsProp.dmgpos:type_name -> CMsgVector
	26, // 46: CMsgTEPhysicsProp.dmgdir:type_name -> CMsgVector
	26, // 47: CMsgTESmoke.origin:type_name -> CMsgVector
	26, // 48: CMsgTEWorldDecal.origin:type_name -> CMsgVector
	26, // 49: CMsgTEWorldDecal.normal:type_name -> CMsgVector
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_te_proto_init() }
func file_te_proto_init() {
	if File_te_proto != nil {
		return
	}
	file_networkbasetypes_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_te_proto_rawDesc), len(file_te_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_te_proto_goTypes,
		DependencyIndexes: file_te_proto_depIdxs,
		EnumInfos:         file_te_proto_enumTypes,
		MessageInfos:      file_te_proto_msgTypes,
	}.Build()
	File_te_proto = out.File
	file_te_proto_goTypes = nil
	file_te_proto_depIdxs = nil
}
