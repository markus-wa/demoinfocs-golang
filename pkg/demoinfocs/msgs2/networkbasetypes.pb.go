// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: s2/networkbasetypes.proto

package msgs2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignonStateT int32

const (
	SignonStateT_SIGNONSTATE_NONE        SignonStateT = 0
	SignonStateT_SIGNONSTATE_CHALLENGE   SignonStateT = 1
	SignonStateT_SIGNONSTATE_CONNECTED   SignonStateT = 2
	SignonStateT_SIGNONSTATE_NEW         SignonStateT = 3
	SignonStateT_SIGNONSTATE_PRESPAWN    SignonStateT = 4
	SignonStateT_SIGNONSTATE_SPAWN       SignonStateT = 5
	SignonStateT_SIGNONSTATE_FULL        SignonStateT = 6
	SignonStateT_SIGNONSTATE_CHANGELEVEL SignonStateT = 7
)

// Enum value maps for SignonStateT.
var (
	SignonStateT_name = map[int32]string{
		0: "SIGNONSTATE_NONE",
		1: "SIGNONSTATE_CHALLENGE",
		2: "SIGNONSTATE_CONNECTED",
		3: "SIGNONSTATE_NEW",
		4: "SIGNONSTATE_PRESPAWN",
		5: "SIGNONSTATE_SPAWN",
		6: "SIGNONSTATE_FULL",
		7: "SIGNONSTATE_CHANGELEVEL",
	}
	SignonStateT_value = map[string]int32{
		"SIGNONSTATE_NONE":        0,
		"SIGNONSTATE_CHALLENGE":   1,
		"SIGNONSTATE_CONNECTED":   2,
		"SIGNONSTATE_NEW":         3,
		"SIGNONSTATE_PRESPAWN":    4,
		"SIGNONSTATE_SPAWN":       5,
		"SIGNONSTATE_FULL":        6,
		"SIGNONSTATE_CHANGELEVEL": 7,
	}
)

func (x SignonStateT) Enum() *SignonStateT {
	p := new(SignonStateT)
	*p = x
	return p
}

func (x SignonStateT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignonStateT) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_networkbasetypes_proto_enumTypes[0].Descriptor()
}

func (SignonStateT) Type() protoreflect.EnumType {
	return &file_s2_networkbasetypes_proto_enumTypes[0]
}

func (x SignonStateT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SignonStateT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SignonStateT(num)
	return nil
}

// Deprecated: Use SignonStateT.Descriptor instead.
func (SignonStateT) EnumDescriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{0}
}

type NET_Messages int32

const (
	NET_Messages_net_NOP                        NET_Messages = 0
	NET_Messages_net_Disconnect                 NET_Messages = 1
	NET_Messages_net_SplitScreenUser            NET_Messages = 3
	NET_Messages_net_Tick                       NET_Messages = 4
	NET_Messages_net_StringCmd                  NET_Messages = 5
	NET_Messages_net_SetConVar                  NET_Messages = 6
	NET_Messages_net_SignonState                NET_Messages = 7
	NET_Messages_net_SpawnGroup_Load            NET_Messages = 8
	NET_Messages_net_SpawnGroup_ManifestUpdate  NET_Messages = 9
	NET_Messages_net_SpawnGroup_SetCreationTick NET_Messages = 11
	NET_Messages_net_SpawnGroup_Unload          NET_Messages = 12
	NET_Messages_net_SpawnGroup_LoadCompleted   NET_Messages = 13
	NET_Messages_net_DebugOverlay               NET_Messages = 15
)

// Enum value maps for NET_Messages.
var (
	NET_Messages_name = map[int32]string{
		0:  "net_NOP",
		1:  "net_Disconnect",
		3:  "net_SplitScreenUser",
		4:  "net_Tick",
		5:  "net_StringCmd",
		6:  "net_SetConVar",
		7:  "net_SignonState",
		8:  "net_SpawnGroup_Load",
		9:  "net_SpawnGroup_ManifestUpdate",
		11: "net_SpawnGroup_SetCreationTick",
		12: "net_SpawnGroup_Unload",
		13: "net_SpawnGroup_LoadCompleted",
		15: "net_DebugOverlay",
	}
	NET_Messages_value = map[string]int32{
		"net_NOP":                        0,
		"net_Disconnect":                 1,
		"net_SplitScreenUser":            3,
		"net_Tick":                       4,
		"net_StringCmd":                  5,
		"net_SetConVar":                  6,
		"net_SignonState":                7,
		"net_SpawnGroup_Load":            8,
		"net_SpawnGroup_ManifestUpdate":  9,
		"net_SpawnGroup_SetCreationTick": 11,
		"net_SpawnGroup_Unload":          12,
		"net_SpawnGroup_LoadCompleted":   13,
		"net_DebugOverlay":               15,
	}
)

func (x NET_Messages) Enum() *NET_Messages {
	p := new(NET_Messages)
	*p = x
	return p
}

func (x NET_Messages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NET_Messages) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_networkbasetypes_proto_enumTypes[1].Descriptor()
}

func (NET_Messages) Type() protoreflect.EnumType {
	return &file_s2_networkbasetypes_proto_enumTypes[1]
}

func (x NET_Messages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NET_Messages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NET_Messages(num)
	return nil
}

// Deprecated: Use NET_Messages.Descriptor instead.
func (NET_Messages) EnumDescriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{1}
}

type SpawnGroupFlagsT int32

const (
	SpawnGroupFlagsT_SPAWN_GROUP_LOAD_ENTITIES_FROM_SAVE     SpawnGroupFlagsT = 1
	SpawnGroupFlagsT_SPAWN_GROUP_DONT_SPAWN_ENTITIES         SpawnGroupFlagsT = 2
	SpawnGroupFlagsT_SPAWN_GROUP_SYNCHRONOUS_SPAWN           SpawnGroupFlagsT = 4
	SpawnGroupFlagsT_SPAWN_GROUP_IS_INITIAL_SPAWN_GROUP      SpawnGroupFlagsT = 8
	SpawnGroupFlagsT_SPAWN_GROUP_CREATE_CLIENT_ONLY_ENTITIES SpawnGroupFlagsT = 16
	SpawnGroupFlagsT_SPAWN_GROUP_BLOCK_UNTIL_LOADED          SpawnGroupFlagsT = 64
	SpawnGroupFlagsT_SPAWN_GROUP_LOAD_STREAMING_DATA         SpawnGroupFlagsT = 128
	SpawnGroupFlagsT_SPAWN_GROUP_CREATE_NEW_SCENE_WORLD      SpawnGroupFlagsT = 256
)

// Enum value maps for SpawnGroupFlagsT.
var (
	SpawnGroupFlagsT_name = map[int32]string{
		1:   "SPAWN_GROUP_LOAD_ENTITIES_FROM_SAVE",
		2:   "SPAWN_GROUP_DONT_SPAWN_ENTITIES",
		4:   "SPAWN_GROUP_SYNCHRONOUS_SPAWN",
		8:   "SPAWN_GROUP_IS_INITIAL_SPAWN_GROUP",
		16:  "SPAWN_GROUP_CREATE_CLIENT_ONLY_ENTITIES",
		64:  "SPAWN_GROUP_BLOCK_UNTIL_LOADED",
		128: "SPAWN_GROUP_LOAD_STREAMING_DATA",
		256: "SPAWN_GROUP_CREATE_NEW_SCENE_WORLD",
	}
	SpawnGroupFlagsT_value = map[string]int32{
		"SPAWN_GROUP_LOAD_ENTITIES_FROM_SAVE":     1,
		"SPAWN_GROUP_DONT_SPAWN_ENTITIES":         2,
		"SPAWN_GROUP_SYNCHRONOUS_SPAWN":           4,
		"SPAWN_GROUP_IS_INITIAL_SPAWN_GROUP":      8,
		"SPAWN_GROUP_CREATE_CLIENT_ONLY_ENTITIES": 16,
		"SPAWN_GROUP_BLOCK_UNTIL_LOADED":          64,
		"SPAWN_GROUP_LOAD_STREAMING_DATA":         128,
		"SPAWN_GROUP_CREATE_NEW_SCENE_WORLD":      256,
	}
)

func (x SpawnGroupFlagsT) Enum() *SpawnGroupFlagsT {
	p := new(SpawnGroupFlagsT)
	*p = x
	return p
}

func (x SpawnGroupFlagsT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpawnGroupFlagsT) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_networkbasetypes_proto_enumTypes[2].Descriptor()
}

func (SpawnGroupFlagsT) Type() protoreflect.EnumType {
	return &file_s2_networkbasetypes_proto_enumTypes[2]
}

func (x SpawnGroupFlagsT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SpawnGroupFlagsT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SpawnGroupFlagsT(num)
	return nil
}

// Deprecated: Use SpawnGroupFlagsT.Descriptor instead.
func (SpawnGroupFlagsT) EnumDescriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{2}
}

type CMsgVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
	W *float32 `protobuf:"fixed32,4,opt,name=w" json:"w,omitempty"`
}

func (x *CMsgVector) Reset() {
	*x = CMsgVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgVector) ProtoMessage() {}

func (x *CMsgVector) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgVector.ProtoReflect.Descriptor instead.
func (*CMsgVector) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgVector) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgVector) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgVector) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *CMsgVector) GetW() float32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

type CMsgVector2D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
}

func (x *CMsgVector2D) Reset() {
	*x = CMsgVector2D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgVector2D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgVector2D) ProtoMessage() {}

func (x *CMsgVector2D) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgVector2D.ProtoReflect.Descriptor instead.
func (*CMsgVector2D) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgVector2D) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgVector2D) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type CMsgQAngle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (x *CMsgQAngle) Reset() {
	*x = CMsgQAngle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQAngle) ProtoMessage() {}

func (x *CMsgQAngle) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQAngle.ProtoReflect.Descriptor instead.
func (*CMsgQAngle) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgQAngle) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgQAngle) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgQAngle) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type CMsgQuaternion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
	W *float32 `protobuf:"fixed32,4,opt,name=w" json:"w,omitempty"`
}

func (x *CMsgQuaternion) Reset() {
	*x = CMsgQuaternion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuaternion) ProtoMessage() {}

func (x *CMsgQuaternion) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuaternion.ProtoReflect.Descriptor instead.
func (*CMsgQuaternion) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgQuaternion) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgQuaternion) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgQuaternion) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *CMsgQuaternion) GetW() float32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

type CMsgTransform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position    *CMsgVector     `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	Scale       *float32        `protobuf:"fixed32,2,opt,name=scale" json:"scale,omitempty"`
	Orientation *CMsgQuaternion `protobuf:"bytes,3,opt,name=orientation" json:"orientation,omitempty"`
}

func (x *CMsgTransform) Reset() {
	*x = CMsgTransform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTransform) ProtoMessage() {}

func (x *CMsgTransform) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTransform.ProtoReflect.Descriptor instead.
func (*CMsgTransform) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgTransform) GetPosition() *CMsgVector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CMsgTransform) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *CMsgTransform) GetOrientation() *CMsgQuaternion {
	if x != nil {
		return x.Orientation
	}
	return nil
}

type CMsgRGBA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R *int32 `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	G *int32 `protobuf:"varint,2,opt,name=g" json:"g,omitempty"`
	B *int32 `protobuf:"varint,3,opt,name=b" json:"b,omitempty"`
	A *int32 `protobuf:"varint,4,opt,name=a" json:"a,omitempty"`
}

func (x *CMsgRGBA) Reset() {
	*x = CMsgRGBA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRGBA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRGBA) ProtoMessage() {}

func (x *CMsgRGBA) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRGBA.ProtoReflect.Descriptor instead.
func (*CMsgRGBA) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgRGBA) GetR() int32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *CMsgRGBA) GetG() int32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return 0
}

func (x *CMsgRGBA) GetB() int32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

func (x *CMsgRGBA) GetA() int32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

type CMsgPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Xuid       *uint64 `protobuf:"fixed64,2,opt,name=xuid" json:"xuid,omitempty"`
	Userid     *int32  `protobuf:"varint,3,opt,name=userid" json:"userid,omitempty"`
	Steamid    *uint64 `protobuf:"fixed64,4,opt,name=steamid" json:"steamid,omitempty"`
	Fakeplayer *bool   `protobuf:"varint,5,opt,name=fakeplayer" json:"fakeplayer,omitempty"`
	Ishltv     *bool   `protobuf:"varint,6,opt,name=ishltv" json:"ishltv,omitempty"`
}

func (x *CMsgPlayerInfo) Reset() {
	*x = CMsgPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerInfo) ProtoMessage() {}

func (x *CMsgPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerInfo.ProtoReflect.Descriptor instead.
func (*CMsgPlayerInfo) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgPlayerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgPlayerInfo) GetXuid() uint64 {
	if x != nil && x.Xuid != nil {
		return *x.Xuid
	}
	return 0
}

func (x *CMsgPlayerInfo) GetUserid() int32 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return 0
}

func (x *CMsgPlayerInfo) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgPlayerInfo) GetFakeplayer() bool {
	if x != nil && x.Fakeplayer != nil {
		return *x.Fakeplayer
	}
	return false
}

func (x *CMsgPlayerInfo) GetIshltv() bool {
	if x != nil && x.Ishltv != nil {
		return *x.Ishltv
	}
	return false
}

type CEntityMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetEntity *uint32 `protobuf:"varint,1,opt,name=target_entity,json=targetEntity,def=16777215" json:"target_entity,omitempty"`
}

// Default values for CEntityMsg fields.
const (
	Default_CEntityMsg_TargetEntity = uint32(16777215)
)

func (x *CEntityMsg) Reset() {
	*x = CEntityMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEntityMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEntityMsg) ProtoMessage() {}

func (x *CEntityMsg) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEntityMsg.ProtoReflect.Descriptor instead.
func (*CEntityMsg) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{7}
}

func (x *CEntityMsg) GetTargetEntity() uint32 {
	if x != nil && x.TargetEntity != nil {
		return *x.TargetEntity
	}
	return Default_CEntityMsg_TargetEntity
}

type CMsg_CVars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cvars []*CMsg_CVars_CVar `protobuf:"bytes,1,rep,name=cvars" json:"cvars,omitempty"`
}

func (x *CMsg_CVars) Reset() {
	*x = CMsg_CVars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsg_CVars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsg_CVars) ProtoMessage() {}

func (x *CMsg_CVars) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsg_CVars.ProtoReflect.Descriptor instead.
func (*CMsg_CVars) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{8}
}

func (x *CMsg_CVars) GetCvars() []*CMsg_CVars_CVar {
	if x != nil {
		return x.Cvars
	}
	return nil
}

type CNETMsg_NOP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CNETMsg_NOP) Reset() {
	*x = CNETMsg_NOP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_NOP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_NOP) ProtoMessage() {}

func (x *CNETMsg_NOP) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_NOP.ProtoReflect.Descriptor instead.
func (*CNETMsg_NOP) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{9}
}

type CNETMsg_SplitScreenUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot *int32 `protobuf:"varint,1,opt,name=slot" json:"slot,omitempty"`
}

func (x *CNETMsg_SplitScreenUser) Reset() {
	*x = CNETMsg_SplitScreenUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_SplitScreenUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_SplitScreenUser) ProtoMessage() {}

func (x *CNETMsg_SplitScreenUser) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_SplitScreenUser.ProtoReflect.Descriptor instead.
func (*CNETMsg_SplitScreenUser) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{10}
}

func (x *CNETMsg_SplitScreenUser) GetSlot() int32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

type CNETMsg_Disconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason *ENetworkDisconnectionReason `protobuf:"varint,2,opt,name=reason,enum=com.github.markus_wa.demoinfocs_golang.s2.ENetworkDisconnectionReason,def=0" json:"reason,omitempty"`
}

// Default values for CNETMsg_Disconnect fields.
const (
	Default_CNETMsg_Disconnect_Reason = ENetworkDisconnectionReason_NETWORK_DISCONNECT_INVALID
)

func (x *CNETMsg_Disconnect) Reset() {
	*x = CNETMsg_Disconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_Disconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_Disconnect) ProtoMessage() {}

func (x *CNETMsg_Disconnect) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_Disconnect.ProtoReflect.Descriptor instead.
func (*CNETMsg_Disconnect) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{11}
}

func (x *CNETMsg_Disconnect) GetReason() ENetworkDisconnectionReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return Default_CNETMsg_Disconnect_Reason
}

type CNETMsg_Tick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tick                            *uint32 `protobuf:"varint,1,opt,name=tick" json:"tick,omitempty"`
	HostFrametime                   *uint32 `protobuf:"varint,2,opt,name=host_frametime,json=hostFrametime" json:"host_frametime,omitempty"`
	HostFrametimeStdDeviation       *uint32 `protobuf:"varint,3,opt,name=host_frametime_std_deviation,json=hostFrametimeStdDeviation" json:"host_frametime_std_deviation,omitempty"`
	HostComputationtime             *uint32 `protobuf:"varint,4,opt,name=host_computationtime,json=hostComputationtime" json:"host_computationtime,omitempty"`
	HostComputationtimeStdDeviation *uint32 `protobuf:"varint,5,opt,name=host_computationtime_std_deviation,json=hostComputationtimeStdDeviation" json:"host_computationtime_std_deviation,omitempty"`
	HostFramestarttimeStdDeviation  *uint32 `protobuf:"varint,6,opt,name=host_framestarttime_std_deviation,json=hostFramestarttimeStdDeviation" json:"host_framestarttime_std_deviation,omitempty"`
	HostLoss                        *uint32 `protobuf:"varint,7,opt,name=host_loss,json=hostLoss" json:"host_loss,omitempty"`
	HostUnfilteredFrametime         *uint32 `protobuf:"varint,8,opt,name=host_unfiltered_frametime,json=hostUnfilteredFrametime" json:"host_unfiltered_frametime,omitempty"`
	HltvReplayFlags                 *uint32 `protobuf:"varint,9,opt,name=hltv_replay_flags,json=hltvReplayFlags" json:"hltv_replay_flags,omitempty"`
	ExpectedLongTick                *uint32 `protobuf:"varint,10,opt,name=expected_long_tick,json=expectedLongTick" json:"expected_long_tick,omitempty"`
	ExpectedLongTickReason          *string `protobuf:"bytes,11,opt,name=expected_long_tick_reason,json=expectedLongTickReason" json:"expected_long_tick_reason,omitempty"`
}

func (x *CNETMsg_Tick) Reset() {
	*x = CNETMsg_Tick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_Tick) ProtoMessage() {}

func (x *CNETMsg_Tick) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_Tick.ProtoReflect.Descriptor instead.
func (*CNETMsg_Tick) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{12}
}

func (x *CNETMsg_Tick) GetTick() uint32 {
	if x != nil && x.Tick != nil {
		return *x.Tick
	}
	return 0
}

func (x *CNETMsg_Tick) GetHostFrametime() uint32 {
	if x != nil && x.HostFrametime != nil {
		return *x.HostFrametime
	}
	return 0
}

func (x *CNETMsg_Tick) GetHostFrametimeStdDeviation() uint32 {
	if x != nil && x.HostFrametimeStdDeviation != nil {
		return *x.HostFrametimeStdDeviation
	}
	return 0
}

func (x *CNETMsg_Tick) GetHostComputationtime() uint32 {
	if x != nil && x.HostComputationtime != nil {
		return *x.HostComputationtime
	}
	return 0
}

func (x *CNETMsg_Tick) GetHostComputationtimeStdDeviation() uint32 {
	if x != nil && x.HostComputationtimeStdDeviation != nil {
		return *x.HostComputationtimeStdDeviation
	}
	return 0
}

func (x *CNETMsg_Tick) GetHostFramestarttimeStdDeviation() uint32 {
	if x != nil && x.HostFramestarttimeStdDeviation != nil {
		return *x.HostFramestarttimeStdDeviation
	}
	return 0
}

func (x *CNETMsg_Tick) GetHostLoss() uint32 {
	if x != nil && x.HostLoss != nil {
		return *x.HostLoss
	}
	return 0
}

func (x *CNETMsg_Tick) GetHostUnfilteredFrametime() uint32 {
	if x != nil && x.HostUnfilteredFrametime != nil {
		return *x.HostUnfilteredFrametime
	}
	return 0
}

func (x *CNETMsg_Tick) GetHltvReplayFlags() uint32 {
	if x != nil && x.HltvReplayFlags != nil {
		return *x.HltvReplayFlags
	}
	return 0
}

func (x *CNETMsg_Tick) GetExpectedLongTick() uint32 {
	if x != nil && x.ExpectedLongTick != nil {
		return *x.ExpectedLongTick
	}
	return 0
}

func (x *CNETMsg_Tick) GetExpectedLongTickReason() string {
	if x != nil && x.ExpectedLongTickReason != nil {
		return *x.ExpectedLongTickReason
	}
	return ""
}

type CNETMsg_StringCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command        *string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	PredictionSync *uint32 `protobuf:"varint,2,opt,name=prediction_sync,json=predictionSync" json:"prediction_sync,omitempty"`
}

func (x *CNETMsg_StringCmd) Reset() {
	*x = CNETMsg_StringCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_StringCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_StringCmd) ProtoMessage() {}

func (x *CNETMsg_StringCmd) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_StringCmd.ProtoReflect.Descriptor instead.
func (*CNETMsg_StringCmd) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{13}
}

func (x *CNETMsg_StringCmd) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

func (x *CNETMsg_StringCmd) GetPredictionSync() uint32 {
	if x != nil && x.PredictionSync != nil {
		return *x.PredictionSync
	}
	return 0
}

type CNETMsg_SetConVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Convars *CMsg_CVars `protobuf:"bytes,1,opt,name=convars" json:"convars,omitempty"`
}

func (x *CNETMsg_SetConVar) Reset() {
	*x = CNETMsg_SetConVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_SetConVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_SetConVar) ProtoMessage() {}

func (x *CNETMsg_SetConVar) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_SetConVar.ProtoReflect.Descriptor instead.
func (*CNETMsg_SetConVar) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{14}
}

func (x *CNETMsg_SetConVar) GetConvars() *CMsg_CVars {
	if x != nil {
		return x.Convars
	}
	return nil
}

type CNETMsg_SignonState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignonState       *SignonStateT `protobuf:"varint,1,opt,name=signon_state,json=signonState,enum=com.github.markus_wa.demoinfocs_golang.s2.SignonStateT,def=0" json:"signon_state,omitempty"`
	SpawnCount        *uint32       `protobuf:"varint,2,opt,name=spawn_count,json=spawnCount" json:"spawn_count,omitempty"`
	NumServerPlayers  *uint32       `protobuf:"varint,3,opt,name=num_server_players,json=numServerPlayers" json:"num_server_players,omitempty"`
	PlayersNetworkids []string      `protobuf:"bytes,4,rep,name=players_networkids,json=playersNetworkids" json:"players_networkids,omitempty"`
	MapName           *string       `protobuf:"bytes,5,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
	Addons            *string       `protobuf:"bytes,6,opt,name=addons" json:"addons,omitempty"`
}

// Default values for CNETMsg_SignonState fields.
const (
	Default_CNETMsg_SignonState_SignonState = SignonStateT_SIGNONSTATE_NONE
)

func (x *CNETMsg_SignonState) Reset() {
	*x = CNETMsg_SignonState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_SignonState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_SignonState) ProtoMessage() {}

func (x *CNETMsg_SignonState) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_SignonState.ProtoReflect.Descriptor instead.
func (*CNETMsg_SignonState) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{15}
}

func (x *CNETMsg_SignonState) GetSignonState() SignonStateT {
	if x != nil && x.SignonState != nil {
		return *x.SignonState
	}
	return Default_CNETMsg_SignonState_SignonState
}

func (x *CNETMsg_SignonState) GetSpawnCount() uint32 {
	if x != nil && x.SpawnCount != nil {
		return *x.SpawnCount
	}
	return 0
}

func (x *CNETMsg_SignonState) GetNumServerPlayers() uint32 {
	if x != nil && x.NumServerPlayers != nil {
		return *x.NumServerPlayers
	}
	return 0
}

func (x *CNETMsg_SignonState) GetPlayersNetworkids() []string {
	if x != nil {
		return x.PlayersNetworkids
	}
	return nil
}

func (x *CNETMsg_SignonState) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

func (x *CNETMsg_SignonState) GetAddons() string {
	if x != nil && x.Addons != nil {
		return *x.Addons
	}
	return ""
}

type CSVCMsg_GameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName *string                  `protobuf:"bytes,1,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	Eventid   *int32                   `protobuf:"varint,2,opt,name=eventid" json:"eventid,omitempty"`
	Keys      []*CSVCMsg_GameEventKeyT `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
}

func (x *CSVCMsg_GameEvent) Reset() {
	*x = CSVCMsg_GameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_GameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_GameEvent) ProtoMessage() {}

func (x *CSVCMsg_GameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_GameEvent.ProtoReflect.Descriptor instead.
func (*CSVCMsg_GameEvent) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{16}
}

func (x *CSVCMsg_GameEvent) GetEventName() string {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return ""
}

func (x *CSVCMsg_GameEvent) GetEventid() int32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

func (x *CSVCMsg_GameEvent) GetKeys() []*CSVCMsg_GameEventKeyT {
	if x != nil {
		return x.Keys
	}
	return nil
}

type CSVCMsgList_GameEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*CSVCMsgList_GameEventsEventT `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (x *CSVCMsgList_GameEvents) Reset() {
	*x = CSVCMsgList_GameEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsgList_GameEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsgList_GameEvents) ProtoMessage() {}

func (x *CSVCMsgList_GameEvents) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsgList_GameEvents.ProtoReflect.Descriptor instead.
func (*CSVCMsgList_GameEvents) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{17}
}

func (x *CSVCMsgList_GameEvents) GetEvents() []*CSVCMsgList_GameEventsEventT {
	if x != nil {
		return x.Events
	}
	return nil
}

type CNETMsg_SpawnGroup_Load struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Worldname              *string     `protobuf:"bytes,1,opt,name=worldname" json:"worldname,omitempty"`
	Entitylumpname         *string     `protobuf:"bytes,2,opt,name=entitylumpname" json:"entitylumpname,omitempty"`
	Entityfiltername       *string     `protobuf:"bytes,3,opt,name=entityfiltername" json:"entityfiltername,omitempty"`
	Spawngrouphandle       *uint32     `protobuf:"varint,4,opt,name=spawngrouphandle" json:"spawngrouphandle,omitempty"`
	Spawngroupownerhandle  *uint32     `protobuf:"varint,5,opt,name=spawngroupownerhandle" json:"spawngroupownerhandle,omitempty"`
	WorldOffsetPos         *CMsgVector `protobuf:"bytes,6,opt,name=world_offset_pos,json=worldOffsetPos" json:"world_offset_pos,omitempty"`
	WorldOffsetAngle       *CMsgQAngle `protobuf:"bytes,7,opt,name=world_offset_angle,json=worldOffsetAngle" json:"world_offset_angle,omitempty"`
	Spawngroupmanifest     []byte      `protobuf:"bytes,8,opt,name=spawngroupmanifest" json:"spawngroupmanifest,omitempty"`
	Flags                  *uint32     `protobuf:"varint,9,opt,name=flags" json:"flags,omitempty"`
	Tickcount              *int32      `protobuf:"varint,10,opt,name=tickcount" json:"tickcount,omitempty"`
	Manifestincomplete     *bool       `protobuf:"varint,11,opt,name=manifestincomplete" json:"manifestincomplete,omitempty"`
	Localnamefixup         *string     `protobuf:"bytes,12,opt,name=localnamefixup" json:"localnamefixup,omitempty"`
	Parentnamefixup        *string     `protobuf:"bytes,13,opt,name=parentnamefixup" json:"parentnamefixup,omitempty"`
	Manifestloadpriority   *int32      `protobuf:"varint,14,opt,name=manifestloadpriority" json:"manifestloadpriority,omitempty"`
	Worldgroupid           *uint32     `protobuf:"varint,15,opt,name=worldgroupid" json:"worldgroupid,omitempty"`
	Creationsequence       *uint32     `protobuf:"varint,16,opt,name=creationsequence" json:"creationsequence,omitempty"`
	Savegamefilename       *string     `protobuf:"bytes,17,opt,name=savegamefilename" json:"savegamefilename,omitempty"`
	Spawngroupparenthandle *uint32     `protobuf:"varint,18,opt,name=spawngroupparenthandle" json:"spawngroupparenthandle,omitempty"`
	Leveltransition        *bool       `protobuf:"varint,19,opt,name=leveltransition" json:"leveltransition,omitempty"`
	Worldgroupname         *string     `protobuf:"bytes,20,opt,name=worldgroupname" json:"worldgroupname,omitempty"`
}

func (x *CNETMsg_SpawnGroup_Load) Reset() {
	*x = CNETMsg_SpawnGroup_Load{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_SpawnGroup_Load) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_SpawnGroup_Load) ProtoMessage() {}

func (x *CNETMsg_SpawnGroup_Load) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_SpawnGroup_Load.ProtoReflect.Descriptor instead.
func (*CNETMsg_SpawnGroup_Load) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{18}
}

func (x *CNETMsg_SpawnGroup_Load) GetWorldname() string {
	if x != nil && x.Worldname != nil {
		return *x.Worldname
	}
	return ""
}

func (x *CNETMsg_SpawnGroup_Load) GetEntitylumpname() string {
	if x != nil && x.Entitylumpname != nil {
		return *x.Entitylumpname
	}
	return ""
}

func (x *CNETMsg_SpawnGroup_Load) GetEntityfiltername() string {
	if x != nil && x.Entityfiltername != nil {
		return *x.Entityfiltername
	}
	return ""
}

func (x *CNETMsg_SpawnGroup_Load) GetSpawngrouphandle() uint32 {
	if x != nil && x.Spawngrouphandle != nil {
		return *x.Spawngrouphandle
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_Load) GetSpawngroupownerhandle() uint32 {
	if x != nil && x.Spawngroupownerhandle != nil {
		return *x.Spawngroupownerhandle
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_Load) GetWorldOffsetPos() *CMsgVector {
	if x != nil {
		return x.WorldOffsetPos
	}
	return nil
}

func (x *CNETMsg_SpawnGroup_Load) GetWorldOffsetAngle() *CMsgQAngle {
	if x != nil {
		return x.WorldOffsetAngle
	}
	return nil
}

func (x *CNETMsg_SpawnGroup_Load) GetSpawngroupmanifest() []byte {
	if x != nil {
		return x.Spawngroupmanifest
	}
	return nil
}

func (x *CNETMsg_SpawnGroup_Load) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_Load) GetTickcount() int32 {
	if x != nil && x.Tickcount != nil {
		return *x.Tickcount
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_Load) GetManifestincomplete() bool {
	if x != nil && x.Manifestincomplete != nil {
		return *x.Manifestincomplete
	}
	return false
}

func (x *CNETMsg_SpawnGroup_Load) GetLocalnamefixup() string {
	if x != nil && x.Localnamefixup != nil {
		return *x.Localnamefixup
	}
	return ""
}

func (x *CNETMsg_SpawnGroup_Load) GetParentnamefixup() string {
	if x != nil && x.Parentnamefixup != nil {
		return *x.Parentnamefixup
	}
	return ""
}

func (x *CNETMsg_SpawnGroup_Load) GetManifestloadpriority() int32 {
	if x != nil && x.Manifestloadpriority != nil {
		return *x.Manifestloadpriority
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_Load) GetWorldgroupid() uint32 {
	if x != nil && x.Worldgroupid != nil {
		return *x.Worldgroupid
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_Load) GetCreationsequence() uint32 {
	if x != nil && x.Creationsequence != nil {
		return *x.Creationsequence
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_Load) GetSavegamefilename() string {
	if x != nil && x.Savegamefilename != nil {
		return *x.Savegamefilename
	}
	return ""
}

func (x *CNETMsg_SpawnGroup_Load) GetSpawngroupparenthandle() uint32 {
	if x != nil && x.Spawngroupparenthandle != nil {
		return *x.Spawngroupparenthandle
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_Load) GetLeveltransition() bool {
	if x != nil && x.Leveltransition != nil {
		return *x.Leveltransition
	}
	return false
}

func (x *CNETMsg_SpawnGroup_Load) GetWorldgroupname() string {
	if x != nil && x.Worldgroupname != nil {
		return *x.Worldgroupname
	}
	return ""
}

type CNETMsg_SpawnGroup_ManifestUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spawngrouphandle   *uint32 `protobuf:"varint,1,opt,name=spawngrouphandle" json:"spawngrouphandle,omitempty"`
	Spawngroupmanifest []byte  `protobuf:"bytes,2,opt,name=spawngroupmanifest" json:"spawngroupmanifest,omitempty"`
	Manifestincomplete *bool   `protobuf:"varint,3,opt,name=manifestincomplete" json:"manifestincomplete,omitempty"`
}

func (x *CNETMsg_SpawnGroup_ManifestUpdate) Reset() {
	*x = CNETMsg_SpawnGroup_ManifestUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_SpawnGroup_ManifestUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_SpawnGroup_ManifestUpdate) ProtoMessage() {}

func (x *CNETMsg_SpawnGroup_ManifestUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_SpawnGroup_ManifestUpdate.ProtoReflect.Descriptor instead.
func (*CNETMsg_SpawnGroup_ManifestUpdate) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{19}
}

func (x *CNETMsg_SpawnGroup_ManifestUpdate) GetSpawngrouphandle() uint32 {
	if x != nil && x.Spawngrouphandle != nil {
		return *x.Spawngrouphandle
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_ManifestUpdate) GetSpawngroupmanifest() []byte {
	if x != nil {
		return x.Spawngroupmanifest
	}
	return nil
}

func (x *CNETMsg_SpawnGroup_ManifestUpdate) GetManifestincomplete() bool {
	if x != nil && x.Manifestincomplete != nil {
		return *x.Manifestincomplete
	}
	return false
}

type CNETMsg_SpawnGroup_SetCreationTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spawngrouphandle *uint32 `protobuf:"varint,1,opt,name=spawngrouphandle" json:"spawngrouphandle,omitempty"`
	Tickcount        *int32  `protobuf:"varint,2,opt,name=tickcount" json:"tickcount,omitempty"`
	Creationsequence *uint32 `protobuf:"varint,3,opt,name=creationsequence" json:"creationsequence,omitempty"`
}

func (x *CNETMsg_SpawnGroup_SetCreationTick) Reset() {
	*x = CNETMsg_SpawnGroup_SetCreationTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_SpawnGroup_SetCreationTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_SpawnGroup_SetCreationTick) ProtoMessage() {}

func (x *CNETMsg_SpawnGroup_SetCreationTick) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_SpawnGroup_SetCreationTick.ProtoReflect.Descriptor instead.
func (*CNETMsg_SpawnGroup_SetCreationTick) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{20}
}

func (x *CNETMsg_SpawnGroup_SetCreationTick) GetSpawngrouphandle() uint32 {
	if x != nil && x.Spawngrouphandle != nil {
		return *x.Spawngrouphandle
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_SetCreationTick) GetTickcount() int32 {
	if x != nil && x.Tickcount != nil {
		return *x.Tickcount
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_SetCreationTick) GetCreationsequence() uint32 {
	if x != nil && x.Creationsequence != nil {
		return *x.Creationsequence
	}
	return 0
}

type CNETMsg_SpawnGroup_Unload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spawngrouphandle *uint32 `protobuf:"varint,1,opt,name=spawngrouphandle" json:"spawngrouphandle,omitempty"`
	Flags            *uint32 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	Tickcount        *int32  `protobuf:"varint,3,opt,name=tickcount" json:"tickcount,omitempty"`
}

func (x *CNETMsg_SpawnGroup_Unload) Reset() {
	*x = CNETMsg_SpawnGroup_Unload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_SpawnGroup_Unload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_SpawnGroup_Unload) ProtoMessage() {}

func (x *CNETMsg_SpawnGroup_Unload) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_SpawnGroup_Unload.ProtoReflect.Descriptor instead.
func (*CNETMsg_SpawnGroup_Unload) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{21}
}

func (x *CNETMsg_SpawnGroup_Unload) GetSpawngrouphandle() uint32 {
	if x != nil && x.Spawngrouphandle != nil {
		return *x.Spawngrouphandle
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_Unload) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CNETMsg_SpawnGroup_Unload) GetTickcount() int32 {
	if x != nil && x.Tickcount != nil {
		return *x.Tickcount
	}
	return 0
}

type CNETMsg_SpawnGroup_LoadCompleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spawngrouphandle *uint32 `protobuf:"varint,1,opt,name=spawngrouphandle" json:"spawngrouphandle,omitempty"`
}

func (x *CNETMsg_SpawnGroup_LoadCompleted) Reset() {
	*x = CNETMsg_SpawnGroup_LoadCompleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_SpawnGroup_LoadCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_SpawnGroup_LoadCompleted) ProtoMessage() {}

func (x *CNETMsg_SpawnGroup_LoadCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_SpawnGroup_LoadCompleted.ProtoReflect.Descriptor instead.
func (*CNETMsg_SpawnGroup_LoadCompleted) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{22}
}

func (x *CNETMsg_SpawnGroup_LoadCompleted) GetSpawngrouphandle() uint32 {
	if x != nil && x.Spawngrouphandle != nil {
		return *x.Spawngrouphandle
	}
	return 0
}

type CSVCMsg_GameSessionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMultiplayer   *bool   `protobuf:"varint,1,opt,name=is_multiplayer,json=isMultiplayer" json:"is_multiplayer,omitempty"`
	IsLoadsavegame  *bool   `protobuf:"varint,2,opt,name=is_loadsavegame,json=isLoadsavegame" json:"is_loadsavegame,omitempty"`
	IsBackgroundMap *bool   `protobuf:"varint,3,opt,name=is_background_map,json=isBackgroundMap" json:"is_background_map,omitempty"`
	IsHeadless      *bool   `protobuf:"varint,4,opt,name=is_headless,json=isHeadless" json:"is_headless,omitempty"`
	MinClientLimit  *uint32 `protobuf:"varint,5,opt,name=min_client_limit,json=minClientLimit" json:"min_client_limit,omitempty"`
	MaxClientLimit  *uint32 `protobuf:"varint,6,opt,name=max_client_limit,json=maxClientLimit" json:"max_client_limit,omitempty"`
	MaxClients      *uint32 `protobuf:"varint,7,opt,name=max_clients,json=maxClients" json:"max_clients,omitempty"`
	TickInterval    *uint32 `protobuf:"fixed32,8,opt,name=tick_interval,json=tickInterval" json:"tick_interval,omitempty"`
	Hostname        *string `protobuf:"bytes,9,opt,name=hostname" json:"hostname,omitempty"`
	Savegamename    *string `protobuf:"bytes,10,opt,name=savegamename" json:"savegamename,omitempty"`
	S1Mapname       *string `protobuf:"bytes,11,opt,name=s1_mapname,json=s1Mapname" json:"s1_mapname,omitempty"`
	Gamemode        *string `protobuf:"bytes,12,opt,name=gamemode" json:"gamemode,omitempty"`
	ServerIpAddress *string `protobuf:"bytes,13,opt,name=server_ip_address,json=serverIpAddress" json:"server_ip_address,omitempty"`
	Data            []byte  `protobuf:"bytes,14,opt,name=data" json:"data,omitempty"`
	IsLocalonly     *bool   `protobuf:"varint,15,opt,name=is_localonly,json=isLocalonly" json:"is_localonly,omitempty"`
	NoSteamServer   *bool   `protobuf:"varint,19,opt,name=no_steam_server,json=noSteamServer" json:"no_steam_server,omitempty"`
	IsTransition    *bool   `protobuf:"varint,16,opt,name=is_transition,json=isTransition" json:"is_transition,omitempty"`
	Previouslevel   *string `protobuf:"bytes,17,opt,name=previouslevel" json:"previouslevel,omitempty"`
	Landmarkname    *string `protobuf:"bytes,18,opt,name=landmarkname" json:"landmarkname,omitempty"`
}

func (x *CSVCMsg_GameSessionConfiguration) Reset() {
	*x = CSVCMsg_GameSessionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_GameSessionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_GameSessionConfiguration) ProtoMessage() {}

func (x *CSVCMsg_GameSessionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_GameSessionConfiguration.ProtoReflect.Descriptor instead.
func (*CSVCMsg_GameSessionConfiguration) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{23}
}

func (x *CSVCMsg_GameSessionConfiguration) GetIsMultiplayer() bool {
	if x != nil && x.IsMultiplayer != nil {
		return *x.IsMultiplayer
	}
	return false
}

func (x *CSVCMsg_GameSessionConfiguration) GetIsLoadsavegame() bool {
	if x != nil && x.IsLoadsavegame != nil {
		return *x.IsLoadsavegame
	}
	return false
}

func (x *CSVCMsg_GameSessionConfiguration) GetIsBackgroundMap() bool {
	if x != nil && x.IsBackgroundMap != nil {
		return *x.IsBackgroundMap
	}
	return false
}

func (x *CSVCMsg_GameSessionConfiguration) GetIsHeadless() bool {
	if x != nil && x.IsHeadless != nil {
		return *x.IsHeadless
	}
	return false
}

func (x *CSVCMsg_GameSessionConfiguration) GetMinClientLimit() uint32 {
	if x != nil && x.MinClientLimit != nil {
		return *x.MinClientLimit
	}
	return 0
}

func (x *CSVCMsg_GameSessionConfiguration) GetMaxClientLimit() uint32 {
	if x != nil && x.MaxClientLimit != nil {
		return *x.MaxClientLimit
	}
	return 0
}

func (x *CSVCMsg_GameSessionConfiguration) GetMaxClients() uint32 {
	if x != nil && x.MaxClients != nil {
		return *x.MaxClients
	}
	return 0
}

func (x *CSVCMsg_GameSessionConfiguration) GetTickInterval() uint32 {
	if x != nil && x.TickInterval != nil {
		return *x.TickInterval
	}
	return 0
}

func (x *CSVCMsg_GameSessionConfiguration) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *CSVCMsg_GameSessionConfiguration) GetSavegamename() string {
	if x != nil && x.Savegamename != nil {
		return *x.Savegamename
	}
	return ""
}

func (x *CSVCMsg_GameSessionConfiguration) GetS1Mapname() string {
	if x != nil && x.S1Mapname != nil {
		return *x.S1Mapname
	}
	return ""
}

func (x *CSVCMsg_GameSessionConfiguration) GetGamemode() string {
	if x != nil && x.Gamemode != nil {
		return *x.Gamemode
	}
	return ""
}

func (x *CSVCMsg_GameSessionConfiguration) GetServerIpAddress() string {
	if x != nil && x.ServerIpAddress != nil {
		return *x.ServerIpAddress
	}
	return ""
}

func (x *CSVCMsg_GameSessionConfiguration) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CSVCMsg_GameSessionConfiguration) GetIsLocalonly() bool {
	if x != nil && x.IsLocalonly != nil {
		return *x.IsLocalonly
	}
	return false
}

func (x *CSVCMsg_GameSessionConfiguration) GetNoSteamServer() bool {
	if x != nil && x.NoSteamServer != nil {
		return *x.NoSteamServer
	}
	return false
}

func (x *CSVCMsg_GameSessionConfiguration) GetIsTransition() bool {
	if x != nil && x.IsTransition != nil {
		return *x.IsTransition
	}
	return false
}

func (x *CSVCMsg_GameSessionConfiguration) GetPreviouslevel() string {
	if x != nil && x.Previouslevel != nil {
		return *x.Previouslevel
	}
	return ""
}

func (x *CSVCMsg_GameSessionConfiguration) GetLandmarkname() string {
	if x != nil && x.Landmarkname != nil {
		return *x.Landmarkname
	}
	return ""
}

type CNETMsg_DebugOverlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etype      *int32        `protobuf:"varint,1,opt,name=etype" json:"etype,omitempty"`
	Vectors    []*CMsgVector `protobuf:"bytes,2,rep,name=vectors" json:"vectors,omitempty"`
	Colors     []*CMsgRGBA   `protobuf:"bytes,3,rep,name=colors" json:"colors,omitempty"`
	Dimensions []float32     `protobuf:"fixed32,4,rep,name=dimensions" json:"dimensions,omitempty"`
	Times      []float32     `protobuf:"fixed32,5,rep,name=times" json:"times,omitempty"`
	Bools      []bool        `protobuf:"varint,6,rep,name=bools" json:"bools,omitempty"`
	Uint64S    []uint64      `protobuf:"varint,7,rep,name=uint64s" json:"uint64s,omitempty"`
	Strings    []string      `protobuf:"bytes,8,rep,name=strings" json:"strings,omitempty"`
}

func (x *CNETMsg_DebugOverlay) Reset() {
	*x = CNETMsg_DebugOverlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNETMsg_DebugOverlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNETMsg_DebugOverlay) ProtoMessage() {}

func (x *CNETMsg_DebugOverlay) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNETMsg_DebugOverlay.ProtoReflect.Descriptor instead.
func (*CNETMsg_DebugOverlay) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{24}
}

func (x *CNETMsg_DebugOverlay) GetEtype() int32 {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return 0
}

func (x *CNETMsg_DebugOverlay) GetVectors() []*CMsgVector {
	if x != nil {
		return x.Vectors
	}
	return nil
}

func (x *CNETMsg_DebugOverlay) GetColors() []*CMsgRGBA {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *CNETMsg_DebugOverlay) GetDimensions() []float32 {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *CNETMsg_DebugOverlay) GetTimes() []float32 {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *CNETMsg_DebugOverlay) GetBools() []bool {
	if x != nil {
		return x.Bools
	}
	return nil
}

func (x *CNETMsg_DebugOverlay) GetUint64S() []uint64 {
	if x != nil {
		return x.Uint64S
	}
	return nil
}

func (x *CNETMsg_DebugOverlay) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type CMsg_CVars_CVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsg_CVars_CVar) Reset() {
	*x = CMsg_CVars_CVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsg_CVars_CVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsg_CVars_CVar) ProtoMessage() {}

func (x *CMsg_CVars_CVar) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsg_CVars_CVar.ProtoReflect.Descriptor instead.
func (*CMsg_CVars_CVar) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsg_CVars_CVar) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsg_CVars_CVar) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CSVCMsg_GameEventKeyT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *int32   `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	ValString *string  `protobuf:"bytes,2,opt,name=val_string,json=valString" json:"val_string,omitempty"`
	ValFloat  *float32 `protobuf:"fixed32,3,opt,name=val_float,json=valFloat" json:"val_float,omitempty"`
	ValLong   *int32   `protobuf:"varint,4,opt,name=val_long,json=valLong" json:"val_long,omitempty"`
	ValShort  *int32   `protobuf:"varint,5,opt,name=val_short,json=valShort" json:"val_short,omitempty"`
	ValByte   *int32   `protobuf:"varint,6,opt,name=val_byte,json=valByte" json:"val_byte,omitempty"`
	ValBool   *bool    `protobuf:"varint,7,opt,name=val_bool,json=valBool" json:"val_bool,omitempty"`
	ValUint64 *uint64  `protobuf:"varint,8,opt,name=val_uint64,json=valUint64" json:"val_uint64,omitempty"`
}

func (x *CSVCMsg_GameEventKeyT) Reset() {
	*x = CSVCMsg_GameEventKeyT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsg_GameEventKeyT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsg_GameEventKeyT) ProtoMessage() {}

func (x *CSVCMsg_GameEventKeyT) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsg_GameEventKeyT.ProtoReflect.Descriptor instead.
func (*CSVCMsg_GameEventKeyT) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CSVCMsg_GameEventKeyT) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CSVCMsg_GameEventKeyT) GetValString() string {
	if x != nil && x.ValString != nil {
		return *x.ValString
	}
	return ""
}

func (x *CSVCMsg_GameEventKeyT) GetValFloat() float32 {
	if x != nil && x.ValFloat != nil {
		return *x.ValFloat
	}
	return 0
}

func (x *CSVCMsg_GameEventKeyT) GetValLong() int32 {
	if x != nil && x.ValLong != nil {
		return *x.ValLong
	}
	return 0
}

func (x *CSVCMsg_GameEventKeyT) GetValShort() int32 {
	if x != nil && x.ValShort != nil {
		return *x.ValShort
	}
	return 0
}

func (x *CSVCMsg_GameEventKeyT) GetValByte() int32 {
	if x != nil && x.ValByte != nil {
		return *x.ValByte
	}
	return 0
}

func (x *CSVCMsg_GameEventKeyT) GetValBool() bool {
	if x != nil && x.ValBool != nil {
		return *x.ValBool
	}
	return false
}

func (x *CSVCMsg_GameEventKeyT) GetValUint64() uint64 {
	if x != nil && x.ValUint64 != nil {
		return *x.ValUint64
	}
	return 0
}

type CSVCMsgList_GameEventsEventT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tick  *int32             `protobuf:"varint,1,opt,name=tick" json:"tick,omitempty"`
	Event *CSVCMsg_GameEvent `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (x *CSVCMsgList_GameEventsEventT) Reset() {
	*x = CSVCMsgList_GameEventsEventT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_networkbasetypes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVCMsgList_GameEventsEventT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVCMsgList_GameEventsEventT) ProtoMessage() {}

func (x *CSVCMsgList_GameEventsEventT) ProtoReflect() protoreflect.Message {
	mi := &file_s2_networkbasetypes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVCMsgList_GameEventsEventT.ProtoReflect.Descriptor instead.
func (*CSVCMsgList_GameEventsEventT) Descriptor() ([]byte, []int) {
	return file_s2_networkbasetypes_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CSVCMsgList_GameEventsEventT) GetTick() int32 {
	if x != nil && x.Tick != nil {
		return *x.Tick
	}
	return 0
}

func (x *CSVCMsgList_GameEventsEventT) GetEvent() *CSVCMsg_GameEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

var File_s2_networkbasetypes_proto protoreflect.FileDescriptor

var file_s2_networkbasetypes_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x32, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77,
	0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x1a, 0x1b, 0x73, 0x32, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x0a, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x77, 0x22, 0x2a, 0x0a, 0x0c, 0x43, 0x4d, 0x73,
	0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0x36, 0x0a, 0x0a, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x48, 0x0a,
	0x0e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x77, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x43, 0x4d, 0x73, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x42, 0x0a, 0x08, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x47, 0x42, 0x41, 0x12, 0x0c, 0x0a, 0x01, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x61, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x04, 0x78, 0x75, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x61, 0x6b, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x68, 0x6c, 0x74, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x68, 0x6c, 0x74, 0x76, 0x22, 0x3b, 0x0a, 0x0a, 0x43, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x08, 0x31,
	0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x35, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43,
	0x56, 0x61, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x05, 0x63, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x56, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x56, 0x61, 0x72, 0x52,
	0x05, 0x63, 0x76, 0x61, 0x72, 0x73, 0x1a, 0x30, 0x0a, 0x04, 0x43, 0x56, 0x61, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x43, 0x4e, 0x45, 0x54,
	0x4d, 0x73, 0x67, 0x5f, 0x4e, 0x4f, 0x50, 0x22, 0x2d, 0x0a, 0x17, 0x43, 0x4e, 0x45, 0x54, 0x4d,
	0x73, 0x67, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x43, 0x4e, 0x45, 0x54, 0x4d,
	0x73, 0x67, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x7a, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x45, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xc3, 0x04, 0x0a, 0x0c, 0x43, 0x4e,
	0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x25,
	0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x22, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1e, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x3a,
	0x0a, 0x19, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x6c,
	0x74, 0x76, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x6c, 0x74, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x6e, 0x67,
	0x54, 0x69, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x56, 0x0a, 0x11, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6d, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x64, 0x0a, 0x11, 0x43, 0x4e, 0x45, 0x54, 0x4d,
	0x73, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x12, 0x4f, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43,
	0x56, 0x61, 0x72, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x61, 0x72, 0x73, 0x22, 0xb5, 0x02,
	0x0a, 0x13, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x3a, 0x10, 0x53, 0x49, 0x47, 0x4e, 0x4f, 0x4e, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x77, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x11, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73,
	0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43,
	0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x1a, 0xe4, 0x01, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x61,
	0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x6f,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x6e,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x61, 0x6c,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x22, 0xee, 0x01, 0x0a, 0x16, 0x43, 0x53, 0x56, 0x43, 0x4d, 0x73, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x61,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x53, 0x56, 0x43, 0x4d,
	0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x71, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b,
	0x12, 0x52, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x53, 0x56, 0x43,
	0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0xd3, 0x07, 0x0a, 0x17, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67,
	0x5f, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x4c, 0x6f, 0x61, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6c, 0x75, 0x6d, 0x70, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6c, 0x75,
	0x6d, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x70,
	0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73,
	0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x63, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x70,
	0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x66, 0x69, 0x78, 0x75, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x66, 0x69, 0x78, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x66, 0x69, 0x78, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x66, 0x69, 0x78, 0x75, 0x70,
	0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x64,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x21, 0x43,
	0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x73, 0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x9a, 0x01, 0x0a,
	0x22, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x7b, 0x0a, 0x19, 0x43, 0x4e, 0x45,
	0x54, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63,
	0x6b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x20, 0x43, 0x4e, 0x45, 0x54, 0x4d, 0x73,
	0x67, 0x5f, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x4c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70,
	0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0xce, 0x05, 0x0a, 0x20, 0x43, 0x53, 0x56, 0x43, 0x4d,
	0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x61, 0x76,
	0x65, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4c,
	0x6f, 0x61, 0x64, 0x73, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x31, 0x5f, 0x6d, 0x61, 0x70, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x31, 0x4d, 0x61, 0x70, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x6f, 0x6e, 0x6c, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x64, 0x6d,
	0x61, 0x72, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x14, 0x43, 0x4e, 0x45, 0x54,
	0x4d, 0x73, 0x67, 0x5f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x47, 0x42, 0x41, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x2a, 0xd4, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x47, 0x4e, 0x4f, 0x4e,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x49, 0x47, 0x4e, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x49, 0x47, 0x4e, 0x4f,
	0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x47, 0x4e, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49, 0x47, 0x4e, 0x4f,
	0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x47, 0x4e, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x47, 0x4e,
	0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x49, 0x47, 0x4e, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x07, 0x2a, 0xc4, 0x02, 0x0a, 0x0c,
	0x4e, 0x45, 0x54, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x5f, 0x4e, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x6e, 0x65, 0x74,
	0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x6e, 0x65, 0x74, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x54, 0x69,
	0x63, 0x6b, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x6d, 0x64, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x6e, 0x65,
	0x74, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x07, 0x12,
	0x17, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x5f, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x6e, 0x65, 0x74, 0x5f,
	0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x6e,
	0x65, 0x74, 0x5f, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x53, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x10, 0x0b, 0x12,
	0x19, 0x0a, 0x15, 0x6e, 0x65, 0x74, 0x5f, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x6e, 0x65,
	0x74, 0x5f, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x4c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10,
	0x6e, 0x65, 0x74, 0x5f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x10, 0x0f, 0x2a, 0xcc, 0x02, 0x0a, 0x11, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x74, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x50, 0x41, 0x57,
	0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x44, 0x4f, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x49, 0x45, 0x53, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55,
	0x53, 0x5f, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x50, 0x41,
	0x57, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x08, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x10, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44,
	0x10, 0x40, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x80, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x50, 0x41, 0x57,
	0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x45, 0x57, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x80,
	0x02,
}

var (
	file_s2_networkbasetypes_proto_rawDescOnce sync.Once
	file_s2_networkbasetypes_proto_rawDescData = file_s2_networkbasetypes_proto_rawDesc
)

func file_s2_networkbasetypes_proto_rawDescGZIP() []byte {
	file_s2_networkbasetypes_proto_rawDescOnce.Do(func() {
		file_s2_networkbasetypes_proto_rawDescData = protoimpl.X.CompressGZIP(file_s2_networkbasetypes_proto_rawDescData)
	})
	return file_s2_networkbasetypes_proto_rawDescData
}

var file_s2_networkbasetypes_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_s2_networkbasetypes_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_s2_networkbasetypes_proto_goTypes = []interface{}{
	(SignonStateT)(0),                          // 0: com.github.markus_wa.demoinfocs_golang.s2.SignonState_t
	(NET_Messages)(0),                          // 1: com.github.markus_wa.demoinfocs_golang.s2.NET_Messages
	(SpawnGroupFlagsT)(0),                      // 2: com.github.markus_wa.demoinfocs_golang.s2.SpawnGroupFlags_t
	(*CMsgVector)(nil),                         // 3: com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	(*CMsgVector2D)(nil),                       // 4: com.github.markus_wa.demoinfocs_golang.s2.CMsgVector2D
	(*CMsgQAngle)(nil),                         // 5: com.github.markus_wa.demoinfocs_golang.s2.CMsgQAngle
	(*CMsgQuaternion)(nil),                     // 6: com.github.markus_wa.demoinfocs_golang.s2.CMsgQuaternion
	(*CMsgTransform)(nil),                      // 7: com.github.markus_wa.demoinfocs_golang.s2.CMsgTransform
	(*CMsgRGBA)(nil),                           // 8: com.github.markus_wa.demoinfocs_golang.s2.CMsgRGBA
	(*CMsgPlayerInfo)(nil),                     // 9: com.github.markus_wa.demoinfocs_golang.s2.CMsgPlayerInfo
	(*CEntityMsg)(nil),                         // 10: com.github.markus_wa.demoinfocs_golang.s2.CEntityMsg
	(*CMsg_CVars)(nil),                         // 11: com.github.markus_wa.demoinfocs_golang.s2.CMsg_CVars
	(*CNETMsg_NOP)(nil),                        // 12: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_NOP
	(*CNETMsg_SplitScreenUser)(nil),            // 13: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SplitScreenUser
	(*CNETMsg_Disconnect)(nil),                 // 14: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_Disconnect
	(*CNETMsg_Tick)(nil),                       // 15: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_Tick
	(*CNETMsg_StringCmd)(nil),                  // 16: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_StringCmd
	(*CNETMsg_SetConVar)(nil),                  // 17: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SetConVar
	(*CNETMsg_SignonState)(nil),                // 18: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SignonState
	(*CSVCMsg_GameEvent)(nil),                  // 19: com.github.markus_wa.demoinfocs_golang.s2.CSVCMsg_GameEvent
	(*CSVCMsgList_GameEvents)(nil),             // 20: com.github.markus_wa.demoinfocs_golang.s2.CSVCMsgList_GameEvents
	(*CNETMsg_SpawnGroup_Load)(nil),            // 21: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SpawnGroup_Load
	(*CNETMsg_SpawnGroup_ManifestUpdate)(nil),  // 22: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SpawnGroup_ManifestUpdate
	(*CNETMsg_SpawnGroup_SetCreationTick)(nil), // 23: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SpawnGroup_SetCreationTick
	(*CNETMsg_SpawnGroup_Unload)(nil),          // 24: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SpawnGroup_Unload
	(*CNETMsg_SpawnGroup_LoadCompleted)(nil),   // 25: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SpawnGroup_LoadCompleted
	(*CSVCMsg_GameSessionConfiguration)(nil),   // 26: com.github.markus_wa.demoinfocs_golang.s2.CSVCMsg_GameSessionConfiguration
	(*CNETMsg_DebugOverlay)(nil),               // 27: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_DebugOverlay
	(*CMsg_CVars_CVar)(nil),                    // 28: com.github.markus_wa.demoinfocs_golang.s2.CMsg_CVars.CVar
	(*CSVCMsg_GameEventKeyT)(nil),              // 29: com.github.markus_wa.demoinfocs_golang.s2.CSVCMsg_GameEvent.key_t
	(*CSVCMsgList_GameEventsEventT)(nil),       // 30: com.github.markus_wa.demoinfocs_golang.s2.CSVCMsgList_GameEvents.event_t
	(ENetworkDisconnectionReason)(0),           // 31: com.github.markus_wa.demoinfocs_golang.s2.ENetworkDisconnectionReason
}
var file_s2_networkbasetypes_proto_depIdxs = []int32{
	3,  // 0: com.github.markus_wa.demoinfocs_golang.s2.CMsgTransform.position:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	6,  // 1: com.github.markus_wa.demoinfocs_golang.s2.CMsgTransform.orientation:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgQuaternion
	28, // 2: com.github.markus_wa.demoinfocs_golang.s2.CMsg_CVars.cvars:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsg_CVars.CVar
	31, // 3: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_Disconnect.reason:type_name -> com.github.markus_wa.demoinfocs_golang.s2.ENetworkDisconnectionReason
	11, // 4: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SetConVar.convars:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsg_CVars
	0,  // 5: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SignonState.signon_state:type_name -> com.github.markus_wa.demoinfocs_golang.s2.SignonState_t
	29, // 6: com.github.markus_wa.demoinfocs_golang.s2.CSVCMsg_GameEvent.keys:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CSVCMsg_GameEvent.key_t
	30, // 7: com.github.markus_wa.demoinfocs_golang.s2.CSVCMsgList_GameEvents.events:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CSVCMsgList_GameEvents.event_t
	3,  // 8: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SpawnGroup_Load.world_offset_pos:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	5,  // 9: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_SpawnGroup_Load.world_offset_angle:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgQAngle
	3,  // 10: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_DebugOverlay.vectors:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	8,  // 11: com.github.markus_wa.demoinfocs_golang.s2.CNETMsg_DebugOverlay.colors:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgRGBA
	19, // 12: com.github.markus_wa.demoinfocs_golang.s2.CSVCMsgList_GameEvents.event_t.event:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CSVCMsg_GameEvent
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_s2_networkbasetypes_proto_init() }
func file_s2_networkbasetypes_proto_init() {
	if File_s2_networkbasetypes_proto != nil {
		return
	}
	file_s2_network_connection_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_s2_networkbasetypes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgVector2D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgQAngle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgQuaternion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTransform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRGBA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEntityMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsg_CVars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_NOP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_SplitScreenUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_Disconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_Tick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_StringCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_SetConVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_SignonState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_GameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsgList_GameEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_SpawnGroup_Load); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_SpawnGroup_ManifestUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_SpawnGroup_SetCreationTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_SpawnGroup_Unload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_SpawnGroup_LoadCompleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_GameSessionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNETMsg_DebugOverlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsg_CVars_CVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsg_GameEventKeyT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_networkbasetypes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVCMsgList_GameEventsEventT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s2_networkbasetypes_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_s2_networkbasetypes_proto_goTypes,
		DependencyIndexes: file_s2_networkbasetypes_proto_depIdxs,
		EnumInfos:         file_s2_networkbasetypes_proto_enumTypes,
		MessageInfos:      file_s2_networkbasetypes_proto_msgTypes,
	}.Build()
	File_s2_networkbasetypes_proto = out.File
	file_s2_networkbasetypes_proto_rawDesc = nil
	file_s2_networkbasetypes_proto_goTypes = nil
	file_s2_networkbasetypes_proto_depIdxs = nil
}
