// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: s2/usermessages.proto

package msgs2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EBaseUserMessages int32

const (
	EBaseUserMessages_UM_AchievementEvent        EBaseUserMessages = 101
	EBaseUserMessages_UM_CloseCaption            EBaseUserMessages = 102
	EBaseUserMessages_UM_CloseCaptionDirect      EBaseUserMessages = 103
	EBaseUserMessages_UM_CurrentTimescale        EBaseUserMessages = 104
	EBaseUserMessages_UM_DesiredTimescale        EBaseUserMessages = 105
	EBaseUserMessages_UM_Fade                    EBaseUserMessages = 106
	EBaseUserMessages_UM_GameTitle               EBaseUserMessages = 107
	EBaseUserMessages_UM_HudMsg                  EBaseUserMessages = 110
	EBaseUserMessages_UM_HudText                 EBaseUserMessages = 111
	EBaseUserMessages_UM_ColoredText             EBaseUserMessages = 113
	EBaseUserMessages_UM_RequestState            EBaseUserMessages = 114
	EBaseUserMessages_UM_ResetHUD                EBaseUserMessages = 115
	EBaseUserMessages_UM_Rumble                  EBaseUserMessages = 116
	EBaseUserMessages_UM_SayText                 EBaseUserMessages = 117
	EBaseUserMessages_UM_SayText2                EBaseUserMessages = 118
	EBaseUserMessages_UM_SayTextChannel          EBaseUserMessages = 119
	EBaseUserMessages_UM_Shake                   EBaseUserMessages = 120
	EBaseUserMessages_UM_ShakeDir                EBaseUserMessages = 121
	EBaseUserMessages_UM_WaterShake              EBaseUserMessages = 122
	EBaseUserMessages_UM_TextMsg                 EBaseUserMessages = 124
	EBaseUserMessages_UM_ScreenTilt              EBaseUserMessages = 125
	EBaseUserMessages_UM_VoiceMask               EBaseUserMessages = 128
	EBaseUserMessages_UM_SendAudio               EBaseUserMessages = 130
	EBaseUserMessages_UM_ItemPickup              EBaseUserMessages = 131
	EBaseUserMessages_UM_AmmoDenied              EBaseUserMessages = 132
	EBaseUserMessages_UM_ShowMenu                EBaseUserMessages = 134
	EBaseUserMessages_UM_CreditsMsg              EBaseUserMessages = 135
	EBaseUserMessages_UM_CloseCaptionPlaceholder EBaseUserMessages = 142
	EBaseUserMessages_UM_CameraTransition        EBaseUserMessages = 143
	EBaseUserMessages_UM_AudioParameter          EBaseUserMessages = 144
	EBaseUserMessages_UM_ParticleManager         EBaseUserMessages = 145
	EBaseUserMessages_UM_HudError                EBaseUserMessages = 146
	EBaseUserMessages_UM_CustomGameEvent         EBaseUserMessages = 148
	EBaseUserMessages_UM_AnimGraphUpdate         EBaseUserMessages = 149
	EBaseUserMessages_UM_HapticsManagerPulse     EBaseUserMessages = 150
	EBaseUserMessages_UM_HapticsManagerEffect    EBaseUserMessages = 151
	EBaseUserMessages_UM_CommandQueueState       EBaseUserMessages = 152
	EBaseUserMessages_UM_UpdateCssClasses        EBaseUserMessages = 153
	EBaseUserMessages_UM_ServerFrameTime         EBaseUserMessages = 154
	EBaseUserMessages_UM_LagCompensationError    EBaseUserMessages = 155
	EBaseUserMessages_UM_RequestDllStatus        EBaseUserMessages = 156
	EBaseUserMessages_UM_RequestUtilAction       EBaseUserMessages = 157
	EBaseUserMessages_UM_UtilActionResponse      EBaseUserMessages = 158
	EBaseUserMessages_UM_DllStatusResponse       EBaseUserMessages = 159
	EBaseUserMessages_UM_RequestInventory        EBaseUserMessages = 160
	EBaseUserMessages_UM_InventoryResponse       EBaseUserMessages = 161
	EBaseUserMessages_UM_RequestDiagnostic       EBaseUserMessages = 162
	EBaseUserMessages_UM_DiagnosticResponse      EBaseUserMessages = 163
	EBaseUserMessages_UM_ExtraUserData           EBaseUserMessages = 164
	EBaseUserMessages_UM_MAX_BASE                EBaseUserMessages = 200
)

// Enum value maps for EBaseUserMessages.
var (
	EBaseUserMessages_name = map[int32]string{
		101: "UM_AchievementEvent",
		102: "UM_CloseCaption",
		103: "UM_CloseCaptionDirect",
		104: "UM_CurrentTimescale",
		105: "UM_DesiredTimescale",
		106: "UM_Fade",
		107: "UM_GameTitle",
		110: "UM_HudMsg",
		111: "UM_HudText",
		113: "UM_ColoredText",
		114: "UM_RequestState",
		115: "UM_ResetHUD",
		116: "UM_Rumble",
		117: "UM_SayText",
		118: "UM_SayText2",
		119: "UM_SayTextChannel",
		120: "UM_Shake",
		121: "UM_ShakeDir",
		122: "UM_WaterShake",
		124: "UM_TextMsg",
		125: "UM_ScreenTilt",
		128: "UM_VoiceMask",
		130: "UM_SendAudio",
		131: "UM_ItemPickup",
		132: "UM_AmmoDenied",
		134: "UM_ShowMenu",
		135: "UM_CreditsMsg",
		142: "UM_CloseCaptionPlaceholder",
		143: "UM_CameraTransition",
		144: "UM_AudioParameter",
		145: "UM_ParticleManager",
		146: "UM_HudError",
		148: "UM_CustomGameEvent",
		149: "UM_AnimGraphUpdate",
		150: "UM_HapticsManagerPulse",
		151: "UM_HapticsManagerEffect",
		152: "UM_CommandQueueState",
		153: "UM_UpdateCssClasses",
		154: "UM_ServerFrameTime",
		155: "UM_LagCompensationError",
		156: "UM_RequestDllStatus",
		157: "UM_RequestUtilAction",
		158: "UM_UtilActionResponse",
		159: "UM_DllStatusResponse",
		160: "UM_RequestInventory",
		161: "UM_InventoryResponse",
		162: "UM_RequestDiagnostic",
		163: "UM_DiagnosticResponse",
		164: "UM_ExtraUserData",
		200: "UM_MAX_BASE",
	}
	EBaseUserMessages_value = map[string]int32{
		"UM_AchievementEvent":        101,
		"UM_CloseCaption":            102,
		"UM_CloseCaptionDirect":      103,
		"UM_CurrentTimescale":        104,
		"UM_DesiredTimescale":        105,
		"UM_Fade":                    106,
		"UM_GameTitle":               107,
		"UM_HudMsg":                  110,
		"UM_HudText":                 111,
		"UM_ColoredText":             113,
		"UM_RequestState":            114,
		"UM_ResetHUD":                115,
		"UM_Rumble":                  116,
		"UM_SayText":                 117,
		"UM_SayText2":                118,
		"UM_SayTextChannel":          119,
		"UM_Shake":                   120,
		"UM_ShakeDir":                121,
		"UM_WaterShake":              122,
		"UM_TextMsg":                 124,
		"UM_ScreenTilt":              125,
		"UM_VoiceMask":               128,
		"UM_SendAudio":               130,
		"UM_ItemPickup":              131,
		"UM_AmmoDenied":              132,
		"UM_ShowMenu":                134,
		"UM_CreditsMsg":              135,
		"UM_CloseCaptionPlaceholder": 142,
		"UM_CameraTransition":        143,
		"UM_AudioParameter":          144,
		"UM_ParticleManager":         145,
		"UM_HudError":                146,
		"UM_CustomGameEvent":         148,
		"UM_AnimGraphUpdate":         149,
		"UM_HapticsManagerPulse":     150,
		"UM_HapticsManagerEffect":    151,
		"UM_CommandQueueState":       152,
		"UM_UpdateCssClasses":        153,
		"UM_ServerFrameTime":         154,
		"UM_LagCompensationError":    155,
		"UM_RequestDllStatus":        156,
		"UM_RequestUtilAction":       157,
		"UM_UtilActionResponse":      158,
		"UM_DllStatusResponse":       159,
		"UM_RequestInventory":        160,
		"UM_InventoryResponse":       161,
		"UM_RequestDiagnostic":       162,
		"UM_DiagnosticResponse":      163,
		"UM_ExtraUserData":           164,
		"UM_MAX_BASE":                200,
	}
)

func (x EBaseUserMessages) Enum() *EBaseUserMessages {
	p := new(EBaseUserMessages)
	*p = x
	return p
}

func (x EBaseUserMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBaseUserMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_usermessages_proto_enumTypes[0].Descriptor()
}

func (EBaseUserMessages) Type() protoreflect.EnumType {
	return &file_s2_usermessages_proto_enumTypes[0]
}

func (x EBaseUserMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBaseUserMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBaseUserMessages(num)
	return nil
}

// Deprecated: Use EBaseUserMessages.Descriptor instead.
func (EBaseUserMessages) EnumDescriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{0}
}

type EBaseEntityMessages int32

const (
	EBaseEntityMessages_EM_PlayJingle      EBaseEntityMessages = 136
	EBaseEntityMessages_EM_ScreenOverlay   EBaseEntityMessages = 137
	EBaseEntityMessages_EM_RemoveAllDecals EBaseEntityMessages = 138
	EBaseEntityMessages_EM_PropagateForce  EBaseEntityMessages = 139
	EBaseEntityMessages_EM_DoSpark         EBaseEntityMessages = 140
	EBaseEntityMessages_EM_FixAngle        EBaseEntityMessages = 141
)

// Enum value maps for EBaseEntityMessages.
var (
	EBaseEntityMessages_name = map[int32]string{
		136: "EM_PlayJingle",
		137: "EM_ScreenOverlay",
		138: "EM_RemoveAllDecals",
		139: "EM_PropagateForce",
		140: "EM_DoSpark",
		141: "EM_FixAngle",
	}
	EBaseEntityMessages_value = map[string]int32{
		"EM_PlayJingle":      136,
		"EM_ScreenOverlay":   137,
		"EM_RemoveAllDecals": 138,
		"EM_PropagateForce":  139,
		"EM_DoSpark":         140,
		"EM_FixAngle":        141,
	}
)

func (x EBaseEntityMessages) Enum() *EBaseEntityMessages {
	p := new(EBaseEntityMessages)
	*p = x
	return p
}

func (x EBaseEntityMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBaseEntityMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_usermessages_proto_enumTypes[1].Descriptor()
}

func (EBaseEntityMessages) Type() protoreflect.EnumType {
	return &file_s2_usermessages_proto_enumTypes[1]
}

func (x EBaseEntityMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBaseEntityMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBaseEntityMessages(num)
	return nil
}

// Deprecated: Use EBaseEntityMessages.Descriptor instead.
func (EBaseEntityMessages) EnumDescriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{1}
}

type ERollType int32

const (
	ERollType_ROLL_NONE           ERollType = -1
	ERollType_ROLL_STATS          ERollType = 0
	ERollType_ROLL_CREDITS        ERollType = 1
	ERollType_ROLL_LATE_JOIN_LOGO ERollType = 2
	ERollType_ROLL_OUTTRO         ERollType = 3
)

// Enum value maps for ERollType.
var (
	ERollType_name = map[int32]string{
		-1: "ROLL_NONE",
		0:  "ROLL_STATS",
		1:  "ROLL_CREDITS",
		2:  "ROLL_LATE_JOIN_LOGO",
		3:  "ROLL_OUTTRO",
	}
	ERollType_value = map[string]int32{
		"ROLL_NONE":           -1,
		"ROLL_STATS":          0,
		"ROLL_CREDITS":        1,
		"ROLL_LATE_JOIN_LOGO": 2,
		"ROLL_OUTTRO":         3,
	}
)

func (x ERollType) Enum() *ERollType {
	p := new(ERollType)
	*p = x
	return p
}

func (x ERollType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERollType) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_usermessages_proto_enumTypes[2].Descriptor()
}

func (ERollType) Type() protoreflect.EnumType {
	return &file_s2_usermessages_proto_enumTypes[2]
}

func (x ERollType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERollType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERollType(num)
	return nil
}

// Deprecated: Use ERollType.Descriptor instead.
func (ERollType) EnumDescriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{2}
}

type PARTICLE_MESSAGE int32

const (
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_CREATE                          PARTICLE_MESSAGE = 0
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_UPDATE                          PARTICLE_MESSAGE = 1
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD                  PARTICLE_MESSAGE = 2
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION              PARTICLE_MESSAGE = 3
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK                 PARTICLE_MESSAGE = 4
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_UPDATE_ENT                      PARTICLE_MESSAGE = 5
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET                   PARTICLE_MESSAGE = 6
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_DESTROY                         PARTICLE_MESSAGE = 7
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING               PARTICLE_MESSAGE = 8
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_RELEASE                         PARTICLE_MESSAGE = 9
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_LATENCY                         PARTICLE_MESSAGE = 10
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_SHOULD_DRAW                     PARTICLE_MESSAGE = 11
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_FROZEN                          PARTICLE_MESSAGE = 12
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_CHANGE_CONTROL_POINT_ATTACHMENT PARTICLE_MESSAGE = 13
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_UPDATE_ENTITY_POSITION          PARTICLE_MESSAGE = 14
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_SET_FOW_PROPERTIES              PARTICLE_MESSAGE = 15
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_SET_TEXT                        PARTICLE_MESSAGE = 16
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_SET_SHOULD_CHECK_FOW            PARTICLE_MESSAGE = 17
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_SET_CONTROL_POINT_MODEL         PARTICLE_MESSAGE = 18
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_SET_CONTROL_POINT_SNAPSHOT      PARTICLE_MESSAGE = 19
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_SET_TEXTURE_ATTRIBUTE           PARTICLE_MESSAGE = 20
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_SET_SCENE_OBJECT_GENERIC_FLAG   PARTICLE_MESSAGE = 21
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_SET_SCENE_OBJECT_TINT_AND_DESAT PARTICLE_MESSAGE = 22
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_DESTROY_NAMED                   PARTICLE_MESSAGE = 23
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_SKIP_TO_TIME                    PARTICLE_MESSAGE = 24
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_CAN_FREEZE                      PARTICLE_MESSAGE = 25
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_SET_NAMED_VALUE_CONTEXT         PARTICLE_MESSAGE = 26
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_UPDATE_TRANSFORM                PARTICLE_MESSAGE = 27
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_FREEZE_TRANSITION_OVERRIDE      PARTICLE_MESSAGE = 28
	PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_FREEZE_INVOLVING                PARTICLE_MESSAGE = 29
)

// Enum value maps for PARTICLE_MESSAGE.
var (
	PARTICLE_MESSAGE_name = map[int32]string{
		0:  "GAME_PARTICLE_MANAGER_EVENT_CREATE",
		1:  "GAME_PARTICLE_MANAGER_EVENT_UPDATE",
		2:  "GAME_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD",
		3:  "GAME_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION",
		4:  "GAME_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK",
		5:  "GAME_PARTICLE_MANAGER_EVENT_UPDATE_ENT",
		6:  "GAME_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET",
		7:  "GAME_PARTICLE_MANAGER_EVENT_DESTROY",
		8:  "GAME_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING",
		9:  "GAME_PARTICLE_MANAGER_EVENT_RELEASE",
		10: "GAME_PARTICLE_MANAGER_EVENT_LATENCY",
		11: "GAME_PARTICLE_MANAGER_EVENT_SHOULD_DRAW",
		12: "GAME_PARTICLE_MANAGER_EVENT_FROZEN",
		13: "GAME_PARTICLE_MANAGER_EVENT_CHANGE_CONTROL_POINT_ATTACHMENT",
		14: "GAME_PARTICLE_MANAGER_EVENT_UPDATE_ENTITY_POSITION",
		15: "GAME_PARTICLE_MANAGER_EVENT_SET_FOW_PROPERTIES",
		16: "GAME_PARTICLE_MANAGER_EVENT_SET_TEXT",
		17: "GAME_PARTICLE_MANAGER_EVENT_SET_SHOULD_CHECK_FOW",
		18: "GAME_PARTICLE_MANAGER_EVENT_SET_CONTROL_POINT_MODEL",
		19: "GAME_PARTICLE_MANAGER_EVENT_SET_CONTROL_POINT_SNAPSHOT",
		20: "GAME_PARTICLE_MANAGER_EVENT_SET_TEXTURE_ATTRIBUTE",
		21: "GAME_PARTICLE_MANAGER_EVENT_SET_SCENE_OBJECT_GENERIC_FLAG",
		22: "GAME_PARTICLE_MANAGER_EVENT_SET_SCENE_OBJECT_TINT_AND_DESAT",
		23: "GAME_PARTICLE_MANAGER_EVENT_DESTROY_NAMED",
		24: "GAME_PARTICLE_MANAGER_EVENT_SKIP_TO_TIME",
		25: "GAME_PARTICLE_MANAGER_EVENT_CAN_FREEZE",
		26: "GAME_PARTICLE_MANAGER_EVENT_SET_NAMED_VALUE_CONTEXT",
		27: "GAME_PARTICLE_MANAGER_EVENT_UPDATE_TRANSFORM",
		28: "GAME_PARTICLE_MANAGER_EVENT_FREEZE_TRANSITION_OVERRIDE",
		29: "GAME_PARTICLE_MANAGER_EVENT_FREEZE_INVOLVING",
	}
	PARTICLE_MESSAGE_value = map[string]int32{
		"GAME_PARTICLE_MANAGER_EVENT_CREATE":                          0,
		"GAME_PARTICLE_MANAGER_EVENT_UPDATE":                          1,
		"GAME_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD":                  2,
		"GAME_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION":              3,
		"GAME_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK":                 4,
		"GAME_PARTICLE_MANAGER_EVENT_UPDATE_ENT":                      5,
		"GAME_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET":                   6,
		"GAME_PARTICLE_MANAGER_EVENT_DESTROY":                         7,
		"GAME_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING":               8,
		"GAME_PARTICLE_MANAGER_EVENT_RELEASE":                         9,
		"GAME_PARTICLE_MANAGER_EVENT_LATENCY":                         10,
		"GAME_PARTICLE_MANAGER_EVENT_SHOULD_DRAW":                     11,
		"GAME_PARTICLE_MANAGER_EVENT_FROZEN":                          12,
		"GAME_PARTICLE_MANAGER_EVENT_CHANGE_CONTROL_POINT_ATTACHMENT": 13,
		"GAME_PARTICLE_MANAGER_EVENT_UPDATE_ENTITY_POSITION":          14,
		"GAME_PARTICLE_MANAGER_EVENT_SET_FOW_PROPERTIES":              15,
		"GAME_PARTICLE_MANAGER_EVENT_SET_TEXT":                        16,
		"GAME_PARTICLE_MANAGER_EVENT_SET_SHOULD_CHECK_FOW":            17,
		"GAME_PARTICLE_MANAGER_EVENT_SET_CONTROL_POINT_MODEL":         18,
		"GAME_PARTICLE_MANAGER_EVENT_SET_CONTROL_POINT_SNAPSHOT":      19,
		"GAME_PARTICLE_MANAGER_EVENT_SET_TEXTURE_ATTRIBUTE":           20,
		"GAME_PARTICLE_MANAGER_EVENT_SET_SCENE_OBJECT_GENERIC_FLAG":   21,
		"GAME_PARTICLE_MANAGER_EVENT_SET_SCENE_OBJECT_TINT_AND_DESAT": 22,
		"GAME_PARTICLE_MANAGER_EVENT_DESTROY_NAMED":                   23,
		"GAME_PARTICLE_MANAGER_EVENT_SKIP_TO_TIME":                    24,
		"GAME_PARTICLE_MANAGER_EVENT_CAN_FREEZE":                      25,
		"GAME_PARTICLE_MANAGER_EVENT_SET_NAMED_VALUE_CONTEXT":         26,
		"GAME_PARTICLE_MANAGER_EVENT_UPDATE_TRANSFORM":                27,
		"GAME_PARTICLE_MANAGER_EVENT_FREEZE_TRANSITION_OVERRIDE":      28,
		"GAME_PARTICLE_MANAGER_EVENT_FREEZE_INVOLVING":                29,
	}
)

func (x PARTICLE_MESSAGE) Enum() *PARTICLE_MESSAGE {
	p := new(PARTICLE_MESSAGE)
	*p = x
	return p
}

func (x PARTICLE_MESSAGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PARTICLE_MESSAGE) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_usermessages_proto_enumTypes[3].Descriptor()
}

func (PARTICLE_MESSAGE) Type() protoreflect.EnumType {
	return &file_s2_usermessages_proto_enumTypes[3]
}

func (x PARTICLE_MESSAGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PARTICLE_MESSAGE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PARTICLE_MESSAGE(num)
	return nil
}

// Deprecated: Use PARTICLE_MESSAGE.Descriptor instead.
func (PARTICLE_MESSAGE) EnumDescriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{3}
}

type EHapticPulseType int32

const (
	EHapticPulseType_VR_HAND_HAPTIC_PULSE_LIGHT  EHapticPulseType = 0
	EHapticPulseType_VR_HAND_HAPTIC_PULSE_MEDIUM EHapticPulseType = 1
	EHapticPulseType_VR_HAND_HAPTIC_PULSE_STRONG EHapticPulseType = 2
)

// Enum value maps for EHapticPulseType.
var (
	EHapticPulseType_name = map[int32]string{
		0: "VR_HAND_HAPTIC_PULSE_LIGHT",
		1: "VR_HAND_HAPTIC_PULSE_MEDIUM",
		2: "VR_HAND_HAPTIC_PULSE_STRONG",
	}
	EHapticPulseType_value = map[string]int32{
		"VR_HAND_HAPTIC_PULSE_LIGHT":  0,
		"VR_HAND_HAPTIC_PULSE_MEDIUM": 1,
		"VR_HAND_HAPTIC_PULSE_STRONG": 2,
	}
)

func (x EHapticPulseType) Enum() *EHapticPulseType {
	p := new(EHapticPulseType)
	*p = x
	return p
}

func (x EHapticPulseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHapticPulseType) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_usermessages_proto_enumTypes[4].Descriptor()
}

func (EHapticPulseType) Type() protoreflect.EnumType {
	return &file_s2_usermessages_proto_enumTypes[4]
}

func (x EHapticPulseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHapticPulseType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHapticPulseType(num)
	return nil
}

// Deprecated: Use EHapticPulseType.Descriptor instead.
func (EHapticPulseType) EnumDescriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{4}
}

type CUserMessageAchievementEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Achievement *uint32 `protobuf:"varint,1,opt,name=achievement" json:"achievement,omitempty"`
}

func (x *CUserMessageAchievementEvent) Reset() {
	*x = CUserMessageAchievementEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageAchievementEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageAchievementEvent) ProtoMessage() {}

func (x *CUserMessageAchievementEvent) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageAchievementEvent.ProtoReflect.Descriptor instead.
func (*CUserMessageAchievementEvent) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{0}
}

func (x *CUserMessageAchievementEvent) GetAchievement() uint32 {
	if x != nil && x.Achievement != nil {
		return *x.Achievement
	}
	return 0
}

type CUserMessageCloseCaption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash       *uint32  `protobuf:"fixed32,1,opt,name=hash" json:"hash,omitempty"`
	Duration   *float32 `protobuf:"fixed32,2,opt,name=duration" json:"duration,omitempty"`
	FromPlayer *bool    `protobuf:"varint,3,opt,name=from_player,json=fromPlayer" json:"from_player,omitempty"`
	EntIndex   *int32   `protobuf:"varint,4,opt,name=ent_index,json=entIndex,def=-1" json:"ent_index,omitempty"`
}

// Default values for CUserMessageCloseCaption fields.
const (
	Default_CUserMessageCloseCaption_EntIndex = int32(-1)
)

func (x *CUserMessageCloseCaption) Reset() {
	*x = CUserMessageCloseCaption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageCloseCaption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageCloseCaption) ProtoMessage() {}

func (x *CUserMessageCloseCaption) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageCloseCaption.ProtoReflect.Descriptor instead.
func (*CUserMessageCloseCaption) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{1}
}

func (x *CUserMessageCloseCaption) GetHash() uint32 {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return 0
}

func (x *CUserMessageCloseCaption) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CUserMessageCloseCaption) GetFromPlayer() bool {
	if x != nil && x.FromPlayer != nil {
		return *x.FromPlayer
	}
	return false
}

func (x *CUserMessageCloseCaption) GetEntIndex() int32 {
	if x != nil && x.EntIndex != nil {
		return *x.EntIndex
	}
	return Default_CUserMessageCloseCaption_EntIndex
}

type CUserMessageCloseCaptionDirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash       *uint32  `protobuf:"fixed32,1,opt,name=hash" json:"hash,omitempty"`
	Duration   *float32 `protobuf:"fixed32,2,opt,name=duration" json:"duration,omitempty"`
	FromPlayer *bool    `protobuf:"varint,3,opt,name=from_player,json=fromPlayer" json:"from_player,omitempty"`
	EntIndex   *int32   `protobuf:"varint,4,opt,name=ent_index,json=entIndex,def=-1" json:"ent_index,omitempty"`
}

// Default values for CUserMessageCloseCaptionDirect fields.
const (
	Default_CUserMessageCloseCaptionDirect_EntIndex = int32(-1)
)

func (x *CUserMessageCloseCaptionDirect) Reset() {
	*x = CUserMessageCloseCaptionDirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageCloseCaptionDirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageCloseCaptionDirect) ProtoMessage() {}

func (x *CUserMessageCloseCaptionDirect) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageCloseCaptionDirect.ProtoReflect.Descriptor instead.
func (*CUserMessageCloseCaptionDirect) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{2}
}

func (x *CUserMessageCloseCaptionDirect) GetHash() uint32 {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return 0
}

func (x *CUserMessageCloseCaptionDirect) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CUserMessageCloseCaptionDirect) GetFromPlayer() bool {
	if x != nil && x.FromPlayer != nil {
		return *x.FromPlayer
	}
	return false
}

func (x *CUserMessageCloseCaptionDirect) GetEntIndex() int32 {
	if x != nil && x.EntIndex != nil {
		return *x.EntIndex
	}
	return Default_CUserMessageCloseCaptionDirect_EntIndex
}

type CUserMessageCloseCaptionPlaceholder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_    *string  `protobuf:"bytes,1,opt,name=string" json:"string,omitempty"`
	Duration   *float32 `protobuf:"fixed32,2,opt,name=duration" json:"duration,omitempty"`
	FromPlayer *bool    `protobuf:"varint,3,opt,name=from_player,json=fromPlayer" json:"from_player,omitempty"`
	EntIndex   *int32   `protobuf:"varint,4,opt,name=ent_index,json=entIndex,def=-1" json:"ent_index,omitempty"`
}

// Default values for CUserMessageCloseCaptionPlaceholder fields.
const (
	Default_CUserMessageCloseCaptionPlaceholder_EntIndex = int32(-1)
)

func (x *CUserMessageCloseCaptionPlaceholder) Reset() {
	*x = CUserMessageCloseCaptionPlaceholder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageCloseCaptionPlaceholder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageCloseCaptionPlaceholder) ProtoMessage() {}

func (x *CUserMessageCloseCaptionPlaceholder) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageCloseCaptionPlaceholder.ProtoReflect.Descriptor instead.
func (*CUserMessageCloseCaptionPlaceholder) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{3}
}

func (x *CUserMessageCloseCaptionPlaceholder) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *CUserMessageCloseCaptionPlaceholder) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CUserMessageCloseCaptionPlaceholder) GetFromPlayer() bool {
	if x != nil && x.FromPlayer != nil {
		return *x.FromPlayer
	}
	return false
}

func (x *CUserMessageCloseCaptionPlaceholder) GetEntIndex() int32 {
	if x != nil && x.EntIndex != nil {
		return *x.EntIndex
	}
	return Default_CUserMessageCloseCaptionPlaceholder_EntIndex
}

type CUserMessageCurrentTimescale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current *float32 `protobuf:"fixed32,1,opt,name=current" json:"current,omitempty"`
}

func (x *CUserMessageCurrentTimescale) Reset() {
	*x = CUserMessageCurrentTimescale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageCurrentTimescale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageCurrentTimescale) ProtoMessage() {}

func (x *CUserMessageCurrentTimescale) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageCurrentTimescale.ProtoReflect.Descriptor instead.
func (*CUserMessageCurrentTimescale) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{4}
}

func (x *CUserMessageCurrentTimescale) GetCurrent() float32 {
	if x != nil && x.Current != nil {
		return *x.Current
	}
	return 0
}

type CUserMessageDesiredTimescale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desired              *float32 `protobuf:"fixed32,1,opt,name=desired" json:"desired,omitempty"`
	Acceleration         *float32 `protobuf:"fixed32,2,opt,name=acceleration" json:"acceleration,omitempty"`
	Minblendrate         *float32 `protobuf:"fixed32,3,opt,name=minblendrate" json:"minblendrate,omitempty"`
	Blenddeltamultiplier *float32 `protobuf:"fixed32,4,opt,name=blenddeltamultiplier" json:"blenddeltamultiplier,omitempty"`
}

func (x *CUserMessageDesiredTimescale) Reset() {
	*x = CUserMessageDesiredTimescale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageDesiredTimescale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageDesiredTimescale) ProtoMessage() {}

func (x *CUserMessageDesiredTimescale) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageDesiredTimescale.ProtoReflect.Descriptor instead.
func (*CUserMessageDesiredTimescale) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{5}
}

func (x *CUserMessageDesiredTimescale) GetDesired() float32 {
	if x != nil && x.Desired != nil {
		return *x.Desired
	}
	return 0
}

func (x *CUserMessageDesiredTimescale) GetAcceleration() float32 {
	if x != nil && x.Acceleration != nil {
		return *x.Acceleration
	}
	return 0
}

func (x *CUserMessageDesiredTimescale) GetMinblendrate() float32 {
	if x != nil && x.Minblendrate != nil {
		return *x.Minblendrate
	}
	return 0
}

func (x *CUserMessageDesiredTimescale) GetBlenddeltamultiplier() float32 {
	if x != nil && x.Blenddeltamultiplier != nil {
		return *x.Blenddeltamultiplier
	}
	return 0
}

type CUserMessageFade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *uint32 `protobuf:"varint,1,opt,name=duration" json:"duration,omitempty"`
	HoldTime *uint32 `protobuf:"varint,2,opt,name=hold_time,json=holdTime" json:"hold_time,omitempty"`
	Flags    *uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Color    *uint32 `protobuf:"fixed32,4,opt,name=color" json:"color,omitempty"`
}

func (x *CUserMessageFade) Reset() {
	*x = CUserMessageFade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageFade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageFade) ProtoMessage() {}

func (x *CUserMessageFade) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageFade.ProtoReflect.Descriptor instead.
func (*CUserMessageFade) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{6}
}

func (x *CUserMessageFade) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CUserMessageFade) GetHoldTime() uint32 {
	if x != nil && x.HoldTime != nil {
		return *x.HoldTime
	}
	return 0
}

func (x *CUserMessageFade) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CUserMessageFade) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

type CUserMessageShake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command   *uint32  `protobuf:"varint,1,opt,name=command" json:"command,omitempty"`
	Amplitude *float32 `protobuf:"fixed32,2,opt,name=amplitude" json:"amplitude,omitempty"`
	Frequency *float32 `protobuf:"fixed32,3,opt,name=frequency" json:"frequency,omitempty"`
	Duration  *float32 `protobuf:"fixed32,4,opt,name=duration" json:"duration,omitempty"`
}

func (x *CUserMessageShake) Reset() {
	*x = CUserMessageShake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageShake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageShake) ProtoMessage() {}

func (x *CUserMessageShake) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageShake.ProtoReflect.Descriptor instead.
func (*CUserMessageShake) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{7}
}

func (x *CUserMessageShake) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *CUserMessageShake) GetAmplitude() float32 {
	if x != nil && x.Amplitude != nil {
		return *x.Amplitude
	}
	return 0
}

func (x *CUserMessageShake) GetFrequency() float32 {
	if x != nil && x.Frequency != nil {
		return *x.Frequency
	}
	return 0
}

func (x *CUserMessageShake) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CUserMessageShakeDir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shake     *CUserMessageShake `protobuf:"bytes,1,opt,name=shake" json:"shake,omitempty"`
	Direction *CMsgVector        `protobuf:"bytes,2,opt,name=direction" json:"direction,omitempty"`
}

func (x *CUserMessageShakeDir) Reset() {
	*x = CUserMessageShakeDir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageShakeDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageShakeDir) ProtoMessage() {}

func (x *CUserMessageShakeDir) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageShakeDir.ProtoReflect.Descriptor instead.
func (*CUserMessageShakeDir) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{8}
}

func (x *CUserMessageShakeDir) GetShake() *CUserMessageShake {
	if x != nil {
		return x.Shake
	}
	return nil
}

func (x *CUserMessageShakeDir) GetDirection() *CMsgVector {
	if x != nil {
		return x.Direction
	}
	return nil
}

type CUserMessageWaterShake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command   *uint32  `protobuf:"varint,1,opt,name=command" json:"command,omitempty"`
	Amplitude *float32 `protobuf:"fixed32,2,opt,name=amplitude" json:"amplitude,omitempty"`
	Frequency *float32 `protobuf:"fixed32,3,opt,name=frequency" json:"frequency,omitempty"`
	Duration  *float32 `protobuf:"fixed32,4,opt,name=duration" json:"duration,omitempty"`
}

func (x *CUserMessageWaterShake) Reset() {
	*x = CUserMessageWaterShake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageWaterShake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageWaterShake) ProtoMessage() {}

func (x *CUserMessageWaterShake) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageWaterShake.ProtoReflect.Descriptor instead.
func (*CUserMessageWaterShake) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{9}
}

func (x *CUserMessageWaterShake) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *CUserMessageWaterShake) GetAmplitude() float32 {
	if x != nil && x.Amplitude != nil {
		return *x.Amplitude
	}
	return 0
}

func (x *CUserMessageWaterShake) GetFrequency() float32 {
	if x != nil && x.Frequency != nil {
		return *x.Frequency
	}
	return 0
}

func (x *CUserMessageWaterShake) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CUserMessageScreenTilt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command   *uint32     `protobuf:"varint,1,opt,name=command" json:"command,omitempty"`
	EaseInOut *bool       `protobuf:"varint,2,opt,name=ease_in_out,json=easeInOut" json:"ease_in_out,omitempty"`
	Angle     *CMsgVector `protobuf:"bytes,3,opt,name=angle" json:"angle,omitempty"`
	Duration  *float32    `protobuf:"fixed32,4,opt,name=duration" json:"duration,omitempty"`
	Time      *float32    `protobuf:"fixed32,5,opt,name=time" json:"time,omitempty"`
}

func (x *CUserMessageScreenTilt) Reset() {
	*x = CUserMessageScreenTilt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageScreenTilt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageScreenTilt) ProtoMessage() {}

func (x *CUserMessageScreenTilt) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageScreenTilt.ProtoReflect.Descriptor instead.
func (*CUserMessageScreenTilt) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{10}
}

func (x *CUserMessageScreenTilt) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *CUserMessageScreenTilt) GetEaseInOut() bool {
	if x != nil && x.EaseInOut != nil {
		return *x.EaseInOut
	}
	return false
}

func (x *CUserMessageScreenTilt) GetAngle() *CMsgVector {
	if x != nil {
		return x.Angle
	}
	return nil
}

func (x *CUserMessageScreenTilt) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CUserMessageScreenTilt) GetTime() float32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type CUserMessageSayText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playerindex *int32  `protobuf:"varint,1,opt,name=playerindex,def=-1" json:"playerindex,omitempty"`
	Text        *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Chat        *bool   `protobuf:"varint,3,opt,name=chat" json:"chat,omitempty"`
}

// Default values for CUserMessageSayText fields.
const (
	Default_CUserMessageSayText_Playerindex = int32(-1)
)

func (x *CUserMessageSayText) Reset() {
	*x = CUserMessageSayText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageSayText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageSayText) ProtoMessage() {}

func (x *CUserMessageSayText) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageSayText.ProtoReflect.Descriptor instead.
func (*CUserMessageSayText) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{11}
}

func (x *CUserMessageSayText) GetPlayerindex() int32 {
	if x != nil && x.Playerindex != nil {
		return *x.Playerindex
	}
	return Default_CUserMessageSayText_Playerindex
}

func (x *CUserMessageSayText) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CUserMessageSayText) GetChat() bool {
	if x != nil && x.Chat != nil {
		return *x.Chat
	}
	return false
}

type CUserMessageSayText2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entityindex *int32  `protobuf:"varint,1,opt,name=entityindex,def=-1" json:"entityindex,omitempty"`
	Chat        *bool   `protobuf:"varint,2,opt,name=chat" json:"chat,omitempty"`
	Messagename *string `protobuf:"bytes,3,opt,name=messagename" json:"messagename,omitempty"`
	Param1      *string `protobuf:"bytes,4,opt,name=param1" json:"param1,omitempty"`
	Param2      *string `protobuf:"bytes,5,opt,name=param2" json:"param2,omitempty"`
	Param3      *string `protobuf:"bytes,6,opt,name=param3" json:"param3,omitempty"`
	Param4      *string `protobuf:"bytes,7,opt,name=param4" json:"param4,omitempty"`
}

// Default values for CUserMessageSayText2 fields.
const (
	Default_CUserMessageSayText2_Entityindex = int32(-1)
)

func (x *CUserMessageSayText2) Reset() {
	*x = CUserMessageSayText2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageSayText2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageSayText2) ProtoMessage() {}

func (x *CUserMessageSayText2) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageSayText2.ProtoReflect.Descriptor instead.
func (*CUserMessageSayText2) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{12}
}

func (x *CUserMessageSayText2) GetEntityindex() int32 {
	if x != nil && x.Entityindex != nil {
		return *x.Entityindex
	}
	return Default_CUserMessageSayText2_Entityindex
}

func (x *CUserMessageSayText2) GetChat() bool {
	if x != nil && x.Chat != nil {
		return *x.Chat
	}
	return false
}

func (x *CUserMessageSayText2) GetMessagename() string {
	if x != nil && x.Messagename != nil {
		return *x.Messagename
	}
	return ""
}

func (x *CUserMessageSayText2) GetParam1() string {
	if x != nil && x.Param1 != nil {
		return *x.Param1
	}
	return ""
}

func (x *CUserMessageSayText2) GetParam2() string {
	if x != nil && x.Param2 != nil {
		return *x.Param2
	}
	return ""
}

func (x *CUserMessageSayText2) GetParam3() string {
	if x != nil && x.Param3 != nil {
		return *x.Param3
	}
	return ""
}

func (x *CUserMessageSayText2) GetParam4() string {
	if x != nil && x.Param4 != nil {
		return *x.Param4
	}
	return ""
}

type CUserMessageHudMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *uint32  `protobuf:"varint,1,opt,name=channel" json:"channel,omitempty"`
	X       *float32 `protobuf:"fixed32,2,opt,name=x" json:"x,omitempty"`
	Y       *float32 `protobuf:"fixed32,3,opt,name=y" json:"y,omitempty"`
	Color1  *uint32  `protobuf:"fixed32,4,opt,name=color1" json:"color1,omitempty"`
	Color2  *uint32  `protobuf:"fixed32,5,opt,name=color2" json:"color2,omitempty"`
	Effect  *uint32  `protobuf:"varint,6,opt,name=effect" json:"effect,omitempty"`
	Message *string  `protobuf:"bytes,11,opt,name=message" json:"message,omitempty"`
}

func (x *CUserMessageHudMsg) Reset() {
	*x = CUserMessageHudMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageHudMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageHudMsg) ProtoMessage() {}

func (x *CUserMessageHudMsg) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageHudMsg.ProtoReflect.Descriptor instead.
func (*CUserMessageHudMsg) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{13}
}

func (x *CUserMessageHudMsg) GetChannel() uint32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *CUserMessageHudMsg) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CUserMessageHudMsg) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CUserMessageHudMsg) GetColor1() uint32 {
	if x != nil && x.Color1 != nil {
		return *x.Color1
	}
	return 0
}

func (x *CUserMessageHudMsg) GetColor2() uint32 {
	if x != nil && x.Color2 != nil {
		return *x.Color2
	}
	return 0
}

func (x *CUserMessageHudMsg) GetEffect() uint32 {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return 0
}

func (x *CUserMessageHudMsg) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CUserMessageHudText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (x *CUserMessageHudText) Reset() {
	*x = CUserMessageHudText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageHudText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageHudText) ProtoMessage() {}

func (x *CUserMessageHudText) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageHudText.ProtoReflect.Descriptor instead.
func (*CUserMessageHudText) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{14}
}

func (x *CUserMessageHudText) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CUserMessageTextMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dest  *uint32  `protobuf:"varint,1,opt,name=dest" json:"dest,omitempty"`
	Param []string `protobuf:"bytes,2,rep,name=param" json:"param,omitempty"`
}

func (x *CUserMessageTextMsg) Reset() {
	*x = CUserMessageTextMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageTextMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageTextMsg) ProtoMessage() {}

func (x *CUserMessageTextMsg) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageTextMsg.ProtoReflect.Descriptor instead.
func (*CUserMessageTextMsg) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{15}
}

func (x *CUserMessageTextMsg) GetDest() uint32 {
	if x != nil && x.Dest != nil {
		return *x.Dest
	}
	return 0
}

func (x *CUserMessageTextMsg) GetParam() []string {
	if x != nil {
		return x.Param
	}
	return nil
}

type CUserMessageGameTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CUserMessageGameTitle) Reset() {
	*x = CUserMessageGameTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageGameTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageGameTitle) ProtoMessage() {}

func (x *CUserMessageGameTitle) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageGameTitle.ProtoReflect.Descriptor instead.
func (*CUserMessageGameTitle) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{16}
}

type CUserMessageResetHUD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CUserMessageResetHUD) Reset() {
	*x = CUserMessageResetHUD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageResetHUD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageResetHUD) ProtoMessage() {}

func (x *CUserMessageResetHUD) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageResetHUD.ProtoReflect.Descriptor instead.
func (*CUserMessageResetHUD) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{17}
}

type CUserMessageSendAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Soundname *string `protobuf:"bytes,1,opt,name=soundname" json:"soundname,omitempty"`
	Stop      *bool   `protobuf:"varint,2,opt,name=stop" json:"stop,omitempty"`
}

func (x *CUserMessageSendAudio) Reset() {
	*x = CUserMessageSendAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageSendAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageSendAudio) ProtoMessage() {}

func (x *CUserMessageSendAudio) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageSendAudio.ProtoReflect.Descriptor instead.
func (*CUserMessageSendAudio) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{18}
}

func (x *CUserMessageSendAudio) GetSoundname() string {
	if x != nil && x.Soundname != nil {
		return *x.Soundname
	}
	return ""
}

func (x *CUserMessageSendAudio) GetStop() bool {
	if x != nil && x.Stop != nil {
		return *x.Stop
	}
	return false
}

type CUserMessageAudioParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParameterType *uint32  `protobuf:"varint,1,opt,name=parameter_type,json=parameterType" json:"parameter_type,omitempty"`
	NameHashCode  *uint32  `protobuf:"varint,2,opt,name=name_hash_code,json=nameHashCode" json:"name_hash_code,omitempty"`
	Value         *float32 `protobuf:"fixed32,3,opt,name=value" json:"value,omitempty"`
	IntValue      *uint32  `protobuf:"varint,4,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
}

func (x *CUserMessageAudioParameter) Reset() {
	*x = CUserMessageAudioParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageAudioParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageAudioParameter) ProtoMessage() {}

func (x *CUserMessageAudioParameter) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageAudioParameter.ProtoReflect.Descriptor instead.
func (*CUserMessageAudioParameter) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{19}
}

func (x *CUserMessageAudioParameter) GetParameterType() uint32 {
	if x != nil && x.ParameterType != nil {
		return *x.ParameterType
	}
	return 0
}

func (x *CUserMessageAudioParameter) GetNameHashCode() uint32 {
	if x != nil && x.NameHashCode != nil {
		return *x.NameHashCode
	}
	return 0
}

func (x *CUserMessageAudioParameter) GetValue() float32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CUserMessageAudioParameter) GetIntValue() uint32 {
	if x != nil && x.IntValue != nil {
		return *x.IntValue
	}
	return 0
}

type CUserMessageVoiceMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamerulesMasks []uint32 `protobuf:"varint,1,rep,name=gamerules_masks,json=gamerulesMasks" json:"gamerules_masks,omitempty"`
	BanMasks       []uint32 `protobuf:"varint,2,rep,name=ban_masks,json=banMasks" json:"ban_masks,omitempty"`
	ModEnable      *bool    `protobuf:"varint,3,opt,name=mod_enable,json=modEnable" json:"mod_enable,omitempty"`
}

func (x *CUserMessageVoiceMask) Reset() {
	*x = CUserMessageVoiceMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageVoiceMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageVoiceMask) ProtoMessage() {}

func (x *CUserMessageVoiceMask) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageVoiceMask.ProtoReflect.Descriptor instead.
func (*CUserMessageVoiceMask) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{20}
}

func (x *CUserMessageVoiceMask) GetGamerulesMasks() []uint32 {
	if x != nil {
		return x.GamerulesMasks
	}
	return nil
}

func (x *CUserMessageVoiceMask) GetBanMasks() []uint32 {
	if x != nil {
		return x.BanMasks
	}
	return nil
}

func (x *CUserMessageVoiceMask) GetModEnable() bool {
	if x != nil && x.ModEnable != nil {
		return *x.ModEnable
	}
	return false
}

type CUserMessageRequestState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CUserMessageRequestState) Reset() {
	*x = CUserMessageRequestState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageRequestState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageRequestState) ProtoMessage() {}

func (x *CUserMessageRequestState) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageRequestState.ProtoReflect.Descriptor instead.
func (*CUserMessageRequestState) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{21}
}

type CUserMessageRumble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Data  *int32 `protobuf:"varint,2,opt,name=data" json:"data,omitempty"`
	Flags *int32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
}

func (x *CUserMessageRumble) Reset() {
	*x = CUserMessageRumble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageRumble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageRumble) ProtoMessage() {}

func (x *CUserMessageRumble) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageRumble.ProtoReflect.Descriptor instead.
func (*CUserMessageRumble) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{22}
}

func (x *CUserMessageRumble) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CUserMessageRumble) GetData() int32 {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return 0
}

func (x *CUserMessageRumble) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type CUserMessageSayTextChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player  *int32  `protobuf:"varint,1,opt,name=player" json:"player,omitempty"`
	Channel *int32  `protobuf:"varint,2,opt,name=channel" json:"channel,omitempty"`
	Text    *string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
}

func (x *CUserMessageSayTextChannel) Reset() {
	*x = CUserMessageSayTextChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageSayTextChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageSayTextChannel) ProtoMessage() {}

func (x *CUserMessageSayTextChannel) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageSayTextChannel.ProtoReflect.Descriptor instead.
func (*CUserMessageSayTextChannel) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{23}
}

func (x *CUserMessageSayTextChannel) GetPlayer() int32 {
	if x != nil && x.Player != nil {
		return *x.Player
	}
	return 0
}

func (x *CUserMessageSayTextChannel) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *CUserMessageSayTextChannel) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CUserMessageColoredText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color             *uint32 `protobuf:"varint,1,opt,name=color" json:"color,omitempty"`
	Text              *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Reset_            *bool   `protobuf:"varint,3,opt,name=reset" json:"reset,omitempty"`
	ContextPlayerSlot *int32  `protobuf:"varint,4,opt,name=context_player_slot,json=contextPlayerSlot,def=-1" json:"context_player_slot,omitempty"`
	ContextValue      *int32  `protobuf:"varint,5,opt,name=context_value,json=contextValue" json:"context_value,omitempty"`
	ContextTeamId     *int32  `protobuf:"varint,6,opt,name=context_team_id,json=contextTeamId" json:"context_team_id,omitempty"`
}

// Default values for CUserMessageColoredText fields.
const (
	Default_CUserMessageColoredText_ContextPlayerSlot = int32(-1)
)

func (x *CUserMessageColoredText) Reset() {
	*x = CUserMessageColoredText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageColoredText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageColoredText) ProtoMessage() {}

func (x *CUserMessageColoredText) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageColoredText.ProtoReflect.Descriptor instead.
func (*CUserMessageColoredText) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{24}
}

func (x *CUserMessageColoredText) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *CUserMessageColoredText) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CUserMessageColoredText) GetReset_() bool {
	if x != nil && x.Reset_ != nil {
		return *x.Reset_
	}
	return false
}

func (x *CUserMessageColoredText) GetContextPlayerSlot() int32 {
	if x != nil && x.ContextPlayerSlot != nil {
		return *x.ContextPlayerSlot
	}
	return Default_CUserMessageColoredText_ContextPlayerSlot
}

func (x *CUserMessageColoredText) GetContextValue() int32 {
	if x != nil && x.ContextValue != nil {
		return *x.ContextValue
	}
	return 0
}

func (x *CUserMessageColoredText) GetContextTeamId() int32 {
	if x != nil && x.ContextTeamId != nil {
		return *x.ContextTeamId
	}
	return 0
}

type CUserMessageItemPickup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemname *string `protobuf:"bytes,1,opt,name=itemname" json:"itemname,omitempty"`
}

func (x *CUserMessageItemPickup) Reset() {
	*x = CUserMessageItemPickup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageItemPickup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageItemPickup) ProtoMessage() {}

func (x *CUserMessageItemPickup) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageItemPickup.ProtoReflect.Descriptor instead.
func (*CUserMessageItemPickup) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{25}
}

func (x *CUserMessageItemPickup) GetItemname() string {
	if x != nil && x.Itemname != nil {
		return *x.Itemname
	}
	return ""
}

type CUserMessageAmmoDenied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmmoId *uint32 `protobuf:"varint,1,opt,name=ammo_id,json=ammoId" json:"ammo_id,omitempty"`
}

func (x *CUserMessageAmmoDenied) Reset() {
	*x = CUserMessageAmmoDenied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageAmmoDenied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageAmmoDenied) ProtoMessage() {}

func (x *CUserMessageAmmoDenied) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageAmmoDenied.ProtoReflect.Descriptor instead.
func (*CUserMessageAmmoDenied) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{26}
}

func (x *CUserMessageAmmoDenied) GetAmmoId() uint32 {
	if x != nil && x.AmmoId != nil {
		return *x.AmmoId
	}
	return 0
}

type CUserMessageShowMenu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validslots  *uint32 `protobuf:"varint,1,opt,name=validslots" json:"validslots,omitempty"`
	Displaytime *uint32 `protobuf:"varint,2,opt,name=displaytime" json:"displaytime,omitempty"`
	Needmore    *bool   `protobuf:"varint,3,opt,name=needmore" json:"needmore,omitempty"`
	Menustring  *string `protobuf:"bytes,4,opt,name=menustring" json:"menustring,omitempty"`
}

func (x *CUserMessageShowMenu) Reset() {
	*x = CUserMessageShowMenu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageShowMenu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageShowMenu) ProtoMessage() {}

func (x *CUserMessageShowMenu) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageShowMenu.ProtoReflect.Descriptor instead.
func (*CUserMessageShowMenu) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{27}
}

func (x *CUserMessageShowMenu) GetValidslots() uint32 {
	if x != nil && x.Validslots != nil {
		return *x.Validslots
	}
	return 0
}

func (x *CUserMessageShowMenu) GetDisplaytime() uint32 {
	if x != nil && x.Displaytime != nil {
		return *x.Displaytime
	}
	return 0
}

func (x *CUserMessageShowMenu) GetNeedmore() bool {
	if x != nil && x.Needmore != nil {
		return *x.Needmore
	}
	return false
}

func (x *CUserMessageShowMenu) GetMenustring() string {
	if x != nil && x.Menustring != nil {
		return *x.Menustring
	}
	return ""
}

type CUserMessageCreditsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rolltype   *ERollType `protobuf:"varint,1,opt,name=rolltype,enum=com.github.markus_wa.demoinfocs_golang.s2.ERollType,def=-1" json:"rolltype,omitempty"`
	LogoLength *float32   `protobuf:"fixed32,2,opt,name=logo_length,json=logoLength" json:"logo_length,omitempty"`
}

// Default values for CUserMessageCreditsMsg fields.
const (
	Default_CUserMessageCreditsMsg_Rolltype = ERollType_ROLL_NONE
)

func (x *CUserMessageCreditsMsg) Reset() {
	*x = CUserMessageCreditsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageCreditsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageCreditsMsg) ProtoMessage() {}

func (x *CUserMessageCreditsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageCreditsMsg.ProtoReflect.Descriptor instead.
func (*CUserMessageCreditsMsg) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{28}
}

func (x *CUserMessageCreditsMsg) GetRolltype() ERollType {
	if x != nil && x.Rolltype != nil {
		return *x.Rolltype
	}
	return Default_CUserMessageCreditsMsg_Rolltype
}

func (x *CUserMessageCreditsMsg) GetLogoLength() float32 {
	if x != nil && x.LogoLength != nil {
		return *x.LogoLength
	}
	return 0
}

type CEntityMessagePlayJingle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityMsg *CEntityMsg `protobuf:"bytes,1,opt,name=entity_msg,json=entityMsg" json:"entity_msg,omitempty"`
}

func (x *CEntityMessagePlayJingle) Reset() {
	*x = CEntityMessagePlayJingle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEntityMessagePlayJingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEntityMessagePlayJingle) ProtoMessage() {}

func (x *CEntityMessagePlayJingle) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEntityMessagePlayJingle.ProtoReflect.Descriptor instead.
func (*CEntityMessagePlayJingle) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{29}
}

func (x *CEntityMessagePlayJingle) GetEntityMsg() *CEntityMsg {
	if x != nil {
		return x.EntityMsg
	}
	return nil
}

type CEntityMessageScreenOverlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartEffect *bool       `protobuf:"varint,1,opt,name=start_effect,json=startEffect" json:"start_effect,omitempty"`
	EntityMsg   *CEntityMsg `protobuf:"bytes,2,opt,name=entity_msg,json=entityMsg" json:"entity_msg,omitempty"`
}

func (x *CEntityMessageScreenOverlay) Reset() {
	*x = CEntityMessageScreenOverlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEntityMessageScreenOverlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEntityMessageScreenOverlay) ProtoMessage() {}

func (x *CEntityMessageScreenOverlay) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEntityMessageScreenOverlay.ProtoReflect.Descriptor instead.
func (*CEntityMessageScreenOverlay) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{30}
}

func (x *CEntityMessageScreenOverlay) GetStartEffect() bool {
	if x != nil && x.StartEffect != nil {
		return *x.StartEffect
	}
	return false
}

func (x *CEntityMessageScreenOverlay) GetEntityMsg() *CEntityMsg {
	if x != nil {
		return x.EntityMsg
	}
	return nil
}

type CEntityMessageRemoveAllDecals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoveDecals *bool       `protobuf:"varint,1,opt,name=remove_decals,json=removeDecals" json:"remove_decals,omitempty"`
	EntityMsg    *CEntityMsg `protobuf:"bytes,2,opt,name=entity_msg,json=entityMsg" json:"entity_msg,omitempty"`
}

func (x *CEntityMessageRemoveAllDecals) Reset() {
	*x = CEntityMessageRemoveAllDecals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEntityMessageRemoveAllDecals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEntityMessageRemoveAllDecals) ProtoMessage() {}

func (x *CEntityMessageRemoveAllDecals) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEntityMessageRemoveAllDecals.ProtoReflect.Descriptor instead.
func (*CEntityMessageRemoveAllDecals) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{31}
}

func (x *CEntityMessageRemoveAllDecals) GetRemoveDecals() bool {
	if x != nil && x.RemoveDecals != nil {
		return *x.RemoveDecals
	}
	return false
}

func (x *CEntityMessageRemoveAllDecals) GetEntityMsg() *CEntityMsg {
	if x != nil {
		return x.EntityMsg
	}
	return nil
}

type CEntityMessagePropagateForce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impulse   *CMsgVector `protobuf:"bytes,1,opt,name=impulse" json:"impulse,omitempty"`
	EntityMsg *CEntityMsg `protobuf:"bytes,2,opt,name=entity_msg,json=entityMsg" json:"entity_msg,omitempty"`
}

func (x *CEntityMessagePropagateForce) Reset() {
	*x = CEntityMessagePropagateForce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEntityMessagePropagateForce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEntityMessagePropagateForce) ProtoMessage() {}

func (x *CEntityMessagePropagateForce) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEntityMessagePropagateForce.ProtoReflect.Descriptor instead.
func (*CEntityMessagePropagateForce) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{32}
}

func (x *CEntityMessagePropagateForce) GetImpulse() *CMsgVector {
	if x != nil {
		return x.Impulse
	}
	return nil
}

func (x *CEntityMessagePropagateForce) GetEntityMsg() *CEntityMsg {
	if x != nil {
		return x.EntityMsg
	}
	return nil
}

type CEntityMessageDoSpark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin      *CMsgVector `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	Entityindex *int32      `protobuf:"varint,2,opt,name=entityindex,def=-1" json:"entityindex,omitempty"`
	Radius      *float32    `protobuf:"fixed32,3,opt,name=radius" json:"radius,omitempty"`
	Color       *uint32     `protobuf:"fixed32,4,opt,name=color" json:"color,omitempty"`
	Beams       *uint32     `protobuf:"varint,5,opt,name=beams" json:"beams,omitempty"`
	Thick       *float32    `protobuf:"fixed32,6,opt,name=thick" json:"thick,omitempty"`
	Duration    *float32    `protobuf:"fixed32,7,opt,name=duration" json:"duration,omitempty"`
	EntityMsg   *CEntityMsg `protobuf:"bytes,8,opt,name=entity_msg,json=entityMsg" json:"entity_msg,omitempty"`
}

// Default values for CEntityMessageDoSpark fields.
const (
	Default_CEntityMessageDoSpark_Entityindex = int32(-1)
)

func (x *CEntityMessageDoSpark) Reset() {
	*x = CEntityMessageDoSpark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEntityMessageDoSpark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEntityMessageDoSpark) ProtoMessage() {}

func (x *CEntityMessageDoSpark) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEntityMessageDoSpark.ProtoReflect.Descriptor instead.
func (*CEntityMessageDoSpark) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{33}
}

func (x *CEntityMessageDoSpark) GetOrigin() *CMsgVector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CEntityMessageDoSpark) GetEntityindex() int32 {
	if x != nil && x.Entityindex != nil {
		return *x.Entityindex
	}
	return Default_CEntityMessageDoSpark_Entityindex
}

func (x *CEntityMessageDoSpark) GetRadius() float32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *CEntityMessageDoSpark) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *CEntityMessageDoSpark) GetBeams() uint32 {
	if x != nil && x.Beams != nil {
		return *x.Beams
	}
	return 0
}

func (x *CEntityMessageDoSpark) GetThick() float32 {
	if x != nil && x.Thick != nil {
		return *x.Thick
	}
	return 0
}

func (x *CEntityMessageDoSpark) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CEntityMessageDoSpark) GetEntityMsg() *CEntityMsg {
	if x != nil {
		return x.EntityMsg
	}
	return nil
}

type CEntityMessageFixAngle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relative  *bool       `protobuf:"varint,1,opt,name=relative" json:"relative,omitempty"`
	Angle     *CMsgQAngle `protobuf:"bytes,2,opt,name=angle" json:"angle,omitempty"`
	EntityMsg *CEntityMsg `protobuf:"bytes,3,opt,name=entity_msg,json=entityMsg" json:"entity_msg,omitempty"`
}

func (x *CEntityMessageFixAngle) Reset() {
	*x = CEntityMessageFixAngle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEntityMessageFixAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEntityMessageFixAngle) ProtoMessage() {}

func (x *CEntityMessageFixAngle) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEntityMessageFixAngle.ProtoReflect.Descriptor instead.
func (*CEntityMessageFixAngle) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{34}
}

func (x *CEntityMessageFixAngle) GetRelative() bool {
	if x != nil && x.Relative != nil {
		return *x.Relative
	}
	return false
}

func (x *CEntityMessageFixAngle) GetAngle() *CMsgQAngle {
	if x != nil {
		return x.Angle
	}
	return nil
}

func (x *CEntityMessageFixAngle) GetEntityMsg() *CEntityMsg {
	if x != nil {
		return x.EntityMsg
	}
	return nil
}

type CUserMessageCameraTransition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraType       *uint32                                             `protobuf:"varint,1,opt,name=camera_type,json=cameraType" json:"camera_type,omitempty"`
	Duration         *float32                                            `protobuf:"fixed32,2,opt,name=duration" json:"duration,omitempty"`
	ParamsDataDriven *CUserMessageCameraTransition_Transition_DataDriven `protobuf:"bytes,3,opt,name=params_data_driven,json=paramsDataDriven" json:"params_data_driven,omitempty"`
}

func (x *CUserMessageCameraTransition) Reset() {
	*x = CUserMessageCameraTransition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageCameraTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageCameraTransition) ProtoMessage() {}

func (x *CUserMessageCameraTransition) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageCameraTransition.ProtoReflect.Descriptor instead.
func (*CUserMessageCameraTransition) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{35}
}

func (x *CUserMessageCameraTransition) GetCameraType() uint32 {
	if x != nil && x.CameraType != nil {
		return *x.CameraType
	}
	return 0
}

func (x *CUserMessageCameraTransition) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CUserMessageCameraTransition) GetParamsDataDriven() *CUserMessageCameraTransition_Transition_DataDriven {
	if x != nil {
		return x.ParamsDataDriven
	}
	return nil
}

type CUserMsg_ParticleManager struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Type                             *PARTICLE_MESSAGE                                          `protobuf:"varint,1,req,name=type,enum=com.github.markus_wa.demoinfocs_golang.s2.PARTICLE_MESSAGE,def=0" json:"type,omitempty"`
	Index                            *uint32                                                    `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
	ReleaseParticleIndex             *CUserMsg_ParticleManager_ReleaseParticleIndex             `protobuf:"bytes,3,opt,name=release_particle_index,json=releaseParticleIndex" json:"release_particle_index,omitempty"`
	CreateParticle                   *CUserMsg_ParticleManager_CreateParticle                   `protobuf:"bytes,4,opt,name=create_particle,json=createParticle" json:"create_particle,omitempty"`
	DestroyParticle                  *CUserMsg_ParticleManager_DestroyParticle                  `protobuf:"bytes,5,opt,name=destroy_particle,json=destroyParticle" json:"destroy_particle,omitempty"`
	DestroyParticleInvolving         *CUserMsg_ParticleManager_DestroyParticleInvolving         `protobuf:"bytes,6,opt,name=destroy_particle_involving,json=destroyParticleInvolving" json:"destroy_particle_involving,omitempty"`
	UpdateParticle                   *CUserMsg_ParticleManager_UpdateParticle_OBSOLETE          `protobuf:"bytes,7,opt,name=update_particle,json=updateParticle" json:"update_particle,omitempty"`
	UpdateParticleFwd                *CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE       `protobuf:"bytes,8,opt,name=update_particle_fwd,json=updateParticleFwd" json:"update_particle_fwd,omitempty"`
	UpdateParticleOrient             *CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE    `protobuf:"bytes,9,opt,name=update_particle_orient,json=updateParticleOrient" json:"update_particle_orient,omitempty"`
	UpdateParticleFallback           *CUserMsg_ParticleManager_UpdateParticleFallback           `protobuf:"bytes,10,opt,name=update_particle_fallback,json=updateParticleFallback" json:"update_particle_fallback,omitempty"`
	UpdateParticleOffset             *CUserMsg_ParticleManager_UpdateParticleOffset             `protobuf:"bytes,11,opt,name=update_particle_offset,json=updateParticleOffset" json:"update_particle_offset,omitempty"`
	UpdateParticleEnt                *CUserMsg_ParticleManager_UpdateParticleEnt                `protobuf:"bytes,12,opt,name=update_particle_ent,json=updateParticleEnt" json:"update_particle_ent,omitempty"`
	UpdateParticleShouldDraw         *CUserMsg_ParticleManager_UpdateParticleShouldDraw         `protobuf:"bytes,14,opt,name=update_particle_should_draw,json=updateParticleShouldDraw" json:"update_particle_should_draw,omitempty"`
	UpdateParticleSetFrozen          *CUserMsg_ParticleManager_UpdateParticleSetFrozen          `protobuf:"bytes,15,opt,name=update_particle_set_frozen,json=updateParticleSetFrozen" json:"update_particle_set_frozen,omitempty"`
	ChangeControlPointAttachment     *CUserMsg_ParticleManager_ChangeControlPointAttachment     `protobuf:"bytes,16,opt,name=change_control_point_attachment,json=changeControlPointAttachment" json:"change_control_point_attachment,omitempty"`
	UpdateEntityPosition             *CUserMsg_ParticleManager_UpdateEntityPosition             `protobuf:"bytes,17,opt,name=update_entity_position,json=updateEntityPosition" json:"update_entity_position,omitempty"`
	SetParticleFowProperties         *CUserMsg_ParticleManager_SetParticleFoWProperties         `protobuf:"bytes,18,opt,name=set_particle_fow_properties,json=setParticleFowProperties" json:"set_particle_fow_properties,omitempty"`
	SetParticleText                  *CUserMsg_ParticleManager_SetParticleText                  `protobuf:"bytes,19,opt,name=set_particle_text,json=setParticleText" json:"set_particle_text,omitempty"`
	SetParticleShouldCheckFow        *CUserMsg_ParticleManager_SetParticleShouldCheckFoW        `protobuf:"bytes,20,opt,name=set_particle_should_check_fow,json=setParticleShouldCheckFow" json:"set_particle_should_check_fow,omitempty"`
	SetControlPointModel             *CUserMsg_ParticleManager_SetControlPointModel             `protobuf:"bytes,21,opt,name=set_control_point_model,json=setControlPointModel" json:"set_control_point_model,omitempty"`
	SetControlPointSnapshot          *CUserMsg_ParticleManager_SetControlPointSnapshot          `protobuf:"bytes,22,opt,name=set_control_point_snapshot,json=setControlPointSnapshot" json:"set_control_point_snapshot,omitempty"`
	SetTextureAttribute              *CUserMsg_ParticleManager_SetTextureAttribute              `protobuf:"bytes,23,opt,name=set_texture_attribute,json=setTextureAttribute" json:"set_texture_attribute,omitempty"`
	SetSceneObjectGenericFlag        *CUserMsg_ParticleManager_SetSceneObjectGenericFlag        `protobuf:"bytes,24,opt,name=set_scene_object_generic_flag,json=setSceneObjectGenericFlag" json:"set_scene_object_generic_flag,omitempty"`
	SetSceneObjectTintAndDesat       *CUserMsg_ParticleManager_SetSceneObjectTintAndDesat       `protobuf:"bytes,25,opt,name=set_scene_object_tint_and_desat,json=setSceneObjectTintAndDesat" json:"set_scene_object_tint_and_desat,omitempty"`
	DestroyParticleNamed             *CUserMsg_ParticleManager_DestroyParticleNamed             `protobuf:"bytes,26,opt,name=destroy_particle_named,json=destroyParticleNamed" json:"destroy_particle_named,omitempty"`
	ParticleSkipToTime               *CUserMsg_ParticleManager_ParticleSkipToTime               `protobuf:"bytes,27,opt,name=particle_skip_to_time,json=particleSkipToTime" json:"particle_skip_to_time,omitempty"`
	ParticleCanFreeze                *CUserMsg_ParticleManager_ParticleCanFreeze                `protobuf:"bytes,28,opt,name=particle_can_freeze,json=particleCanFreeze" json:"particle_can_freeze,omitempty"`
	SetNamedValueContext             *CUserMsg_ParticleManager_SetParticleNamedValueContext     `protobuf:"bytes,29,opt,name=set_named_value_context,json=setNamedValueContext" json:"set_named_value_context,omitempty"`
	UpdateParticleTransform          *CUserMsg_ParticleManager_UpdateParticleTransform          `protobuf:"bytes,30,opt,name=update_particle_transform,json=updateParticleTransform" json:"update_particle_transform,omitempty"`
	ParticleFreezeTransitionOverride *CUserMsg_ParticleManager_ParticleFreezeTransitionOverride `protobuf:"bytes,31,opt,name=particle_freeze_transition_override,json=particleFreezeTransitionOverride" json:"particle_freeze_transition_override,omitempty"`
	FreezeParticleInvolving          *CUserMsg_ParticleManager_FreezeParticleInvolving          `protobuf:"bytes,32,opt,name=freeze_particle_involving,json=freezeParticleInvolving" json:"freeze_particle_involving,omitempty"`
}

// Default values for CUserMsg_ParticleManager fields.
const (
	Default_CUserMsg_ParticleManager_Type = PARTICLE_MESSAGE_GAME_PARTICLE_MANAGER_EVENT_CREATE
)

func (x *CUserMsg_ParticleManager) Reset() {
	*x = CUserMsg_ParticleManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager) ProtoMessage() {}

func (x *CUserMsg_ParticleManager) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36}
}

func (x *CUserMsg_ParticleManager) GetType() PARTICLE_MESSAGE {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CUserMsg_ParticleManager_Type
}

func (x *CUserMsg_ParticleManager) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CUserMsg_ParticleManager) GetReleaseParticleIndex() *CUserMsg_ParticleManager_ReleaseParticleIndex {
	if x != nil {
		return x.ReleaseParticleIndex
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetCreateParticle() *CUserMsg_ParticleManager_CreateParticle {
	if x != nil {
		return x.CreateParticle
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetDestroyParticle() *CUserMsg_ParticleManager_DestroyParticle {
	if x != nil {
		return x.DestroyParticle
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetDestroyParticleInvolving() *CUserMsg_ParticleManager_DestroyParticleInvolving {
	if x != nil {
		return x.DestroyParticleInvolving
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetUpdateParticle() *CUserMsg_ParticleManager_UpdateParticle_OBSOLETE {
	if x != nil {
		return x.UpdateParticle
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetUpdateParticleFwd() *CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE {
	if x != nil {
		return x.UpdateParticleFwd
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetUpdateParticleOrient() *CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE {
	if x != nil {
		return x.UpdateParticleOrient
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetUpdateParticleFallback() *CUserMsg_ParticleManager_UpdateParticleFallback {
	if x != nil {
		return x.UpdateParticleFallback
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetUpdateParticleOffset() *CUserMsg_ParticleManager_UpdateParticleOffset {
	if x != nil {
		return x.UpdateParticleOffset
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetUpdateParticleEnt() *CUserMsg_ParticleManager_UpdateParticleEnt {
	if x != nil {
		return x.UpdateParticleEnt
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetUpdateParticleShouldDraw() *CUserMsg_ParticleManager_UpdateParticleShouldDraw {
	if x != nil {
		return x.UpdateParticleShouldDraw
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetUpdateParticleSetFrozen() *CUserMsg_ParticleManager_UpdateParticleSetFrozen {
	if x != nil {
		return x.UpdateParticleSetFrozen
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetChangeControlPointAttachment() *CUserMsg_ParticleManager_ChangeControlPointAttachment {
	if x != nil {
		return x.ChangeControlPointAttachment
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetUpdateEntityPosition() *CUserMsg_ParticleManager_UpdateEntityPosition {
	if x != nil {
		return x.UpdateEntityPosition
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetSetParticleFowProperties() *CUserMsg_ParticleManager_SetParticleFoWProperties {
	if x != nil {
		return x.SetParticleFowProperties
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetSetParticleText() *CUserMsg_ParticleManager_SetParticleText {
	if x != nil {
		return x.SetParticleText
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetSetParticleShouldCheckFow() *CUserMsg_ParticleManager_SetParticleShouldCheckFoW {
	if x != nil {
		return x.SetParticleShouldCheckFow
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetSetControlPointModel() *CUserMsg_ParticleManager_SetControlPointModel {
	if x != nil {
		return x.SetControlPointModel
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetSetControlPointSnapshot() *CUserMsg_ParticleManager_SetControlPointSnapshot {
	if x != nil {
		return x.SetControlPointSnapshot
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetSetTextureAttribute() *CUserMsg_ParticleManager_SetTextureAttribute {
	if x != nil {
		return x.SetTextureAttribute
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetSetSceneObjectGenericFlag() *CUserMsg_ParticleManager_SetSceneObjectGenericFlag {
	if x != nil {
		return x.SetSceneObjectGenericFlag
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetSetSceneObjectTintAndDesat() *CUserMsg_ParticleManager_SetSceneObjectTintAndDesat {
	if x != nil {
		return x.SetSceneObjectTintAndDesat
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetDestroyParticleNamed() *CUserMsg_ParticleManager_DestroyParticleNamed {
	if x != nil {
		return x.DestroyParticleNamed
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetParticleSkipToTime() *CUserMsg_ParticleManager_ParticleSkipToTime {
	if x != nil {
		return x.ParticleSkipToTime
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetParticleCanFreeze() *CUserMsg_ParticleManager_ParticleCanFreeze {
	if x != nil {
		return x.ParticleCanFreeze
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetSetNamedValueContext() *CUserMsg_ParticleManager_SetParticleNamedValueContext {
	if x != nil {
		return x.SetNamedValueContext
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetUpdateParticleTransform() *CUserMsg_ParticleManager_UpdateParticleTransform {
	if x != nil {
		return x.UpdateParticleTransform
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetParticleFreezeTransitionOverride() *CUserMsg_ParticleManager_ParticleFreezeTransitionOverride {
	if x != nil {
		return x.ParticleFreezeTransitionOverride
	}
	return nil
}

func (x *CUserMsg_ParticleManager) GetFreezeParticleInvolving() *CUserMsg_ParticleManager_FreezeParticleInvolving {
	if x != nil {
		return x.FreezeParticleInvolving
	}
	return nil
}

type CUserMsg_HudError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId *int32 `protobuf:"varint,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
}

func (x *CUserMsg_HudError) Reset() {
	*x = CUserMsg_HudError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_HudError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_HudError) ProtoMessage() {}

func (x *CUserMsg_HudError) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_HudError.ProtoReflect.Descriptor instead.
func (*CUserMsg_HudError) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{37}
}

func (x *CUserMsg_HudError) GetOrderId() int32 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

type CUserMsg_CustomGameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName *string `protobuf:"bytes,1,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	Data      []byte  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *CUserMsg_CustomGameEvent) Reset() {
	*x = CUserMsg_CustomGameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_CustomGameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_CustomGameEvent) ProtoMessage() {}

func (x *CUserMsg_CustomGameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_CustomGameEvent.ProtoReflect.Descriptor instead.
func (*CUserMsg_CustomGameEvent) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{38}
}

func (x *CUserMsg_CustomGameEvent) GetEventName() string {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return ""
}

func (x *CUserMsg_CustomGameEvent) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CUserMessageHapticsManagerPulse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandId          *int32   `protobuf:"varint,1,opt,name=hand_id,json=handId" json:"hand_id,omitempty"`
	EffectAmplitude *float32 `protobuf:"fixed32,2,opt,name=effect_amplitude,json=effectAmplitude" json:"effect_amplitude,omitempty"`
	EffectFrequency *float32 `protobuf:"fixed32,3,opt,name=effect_frequency,json=effectFrequency" json:"effect_frequency,omitempty"`
	EffectDuration  *float32 `protobuf:"fixed32,4,opt,name=effect_duration,json=effectDuration" json:"effect_duration,omitempty"`
}

func (x *CUserMessageHapticsManagerPulse) Reset() {
	*x = CUserMessageHapticsManagerPulse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageHapticsManagerPulse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageHapticsManagerPulse) ProtoMessage() {}

func (x *CUserMessageHapticsManagerPulse) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageHapticsManagerPulse.ProtoReflect.Descriptor instead.
func (*CUserMessageHapticsManagerPulse) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{39}
}

func (x *CUserMessageHapticsManagerPulse) GetHandId() int32 {
	if x != nil && x.HandId != nil {
		return *x.HandId
	}
	return 0
}

func (x *CUserMessageHapticsManagerPulse) GetEffectAmplitude() float32 {
	if x != nil && x.EffectAmplitude != nil {
		return *x.EffectAmplitude
	}
	return 0
}

func (x *CUserMessageHapticsManagerPulse) GetEffectFrequency() float32 {
	if x != nil && x.EffectFrequency != nil {
		return *x.EffectFrequency
	}
	return 0
}

func (x *CUserMessageHapticsManagerPulse) GetEffectDuration() float32 {
	if x != nil && x.EffectDuration != nil {
		return *x.EffectDuration
	}
	return 0
}

type CUserMessageHapticsManagerEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandId             *int32   `protobuf:"varint,1,opt,name=hand_id,json=handId" json:"hand_id,omitempty"`
	EffectNameHashCode *uint32  `protobuf:"varint,2,opt,name=effect_name_hash_code,json=effectNameHashCode" json:"effect_name_hash_code,omitempty"`
	EffectScale        *float32 `protobuf:"fixed32,3,opt,name=effect_scale,json=effectScale" json:"effect_scale,omitempty"`
}

func (x *CUserMessageHapticsManagerEffect) Reset() {
	*x = CUserMessageHapticsManagerEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageHapticsManagerEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageHapticsManagerEffect) ProtoMessage() {}

func (x *CUserMessageHapticsManagerEffect) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageHapticsManagerEffect.ProtoReflect.Descriptor instead.
func (*CUserMessageHapticsManagerEffect) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{40}
}

func (x *CUserMessageHapticsManagerEffect) GetHandId() int32 {
	if x != nil && x.HandId != nil {
		return *x.HandId
	}
	return 0
}

func (x *CUserMessageHapticsManagerEffect) GetEffectNameHashCode() uint32 {
	if x != nil && x.EffectNameHashCode != nil {
		return *x.EffectNameHashCode
	}
	return 0
}

func (x *CUserMessageHapticsManagerEffect) GetEffectScale() float32 {
	if x != nil && x.EffectScale != nil {
		return *x.EffectScale
	}
	return 0
}

type CUserMessageAnimStateGraphState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityIndex *int32 `protobuf:"varint,1,opt,name=entity_index,json=entityIndex" json:"entity_index,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *CUserMessageAnimStateGraphState) Reset() {
	*x = CUserMessageAnimStateGraphState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageAnimStateGraphState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageAnimStateGraphState) ProtoMessage() {}

func (x *CUserMessageAnimStateGraphState) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageAnimStateGraphState.ProtoReflect.Descriptor instead.
func (*CUserMessageAnimStateGraphState) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{41}
}

func (x *CUserMessageAnimStateGraphState) GetEntityIndex() int32 {
	if x != nil && x.EntityIndex != nil {
		return *x.EntityIndex
	}
	return 0
}

func (x *CUserMessageAnimStateGraphState) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CUserMessageCommandQueueState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot       *int32                                          `protobuf:"varint,1,opt,name=player_slot,json=playerSlot,def=-1" json:"player_slot,omitempty"`
	CommandQueueInfo *CUserMessageCommandQueueStateCommandQueueInfoT `protobuf:"bytes,2,opt,name=command_queue_info,json=commandQueueInfo" json:"command_queue_info,omitempty"`
}

// Default values for CUserMessageCommandQueueState fields.
const (
	Default_CUserMessageCommandQueueState_PlayerSlot = int32(-1)
)

func (x *CUserMessageCommandQueueState) Reset() {
	*x = CUserMessageCommandQueueState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageCommandQueueState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageCommandQueueState) ProtoMessage() {}

func (x *CUserMessageCommandQueueState) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageCommandQueueState.ProtoReflect.Descriptor instead.
func (*CUserMessageCommandQueueState) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{42}
}

func (x *CUserMessageCommandQueueState) GetPlayerSlot() int32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return Default_CUserMessageCommandQueueState_PlayerSlot
}

func (x *CUserMessageCommandQueueState) GetCommandQueueInfo() *CUserMessageCommandQueueStateCommandQueueInfoT {
	if x != nil {
		return x.CommandQueueInfo
	}
	return nil
}

type CUserMessageUpdateCssClasses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetWorldPanel *int32  `protobuf:"varint,1,opt,name=target_world_panel,json=targetWorldPanel" json:"target_world_panel,omitempty"`
	CssClasses       *string `protobuf:"bytes,2,opt,name=css_classes,json=cssClasses" json:"css_classes,omitempty"`
	IsAdd            *bool   `protobuf:"varint,3,opt,name=is_add,json=isAdd" json:"is_add,omitempty"`
}

func (x *CUserMessageUpdateCssClasses) Reset() {
	*x = CUserMessageUpdateCssClasses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageUpdateCssClasses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageUpdateCssClasses) ProtoMessage() {}

func (x *CUserMessageUpdateCssClasses) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageUpdateCssClasses.ProtoReflect.Descriptor instead.
func (*CUserMessageUpdateCssClasses) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{43}
}

func (x *CUserMessageUpdateCssClasses) GetTargetWorldPanel() int32 {
	if x != nil && x.TargetWorldPanel != nil {
		return *x.TargetWorldPanel
	}
	return 0
}

func (x *CUserMessageUpdateCssClasses) GetCssClasses() string {
	if x != nil && x.CssClasses != nil {
		return *x.CssClasses
	}
	return ""
}

func (x *CUserMessageUpdateCssClasses) GetIsAdd() bool {
	if x != nil && x.IsAdd != nil {
		return *x.IsAdd
	}
	return false
}

type CUserMessageServerFrameTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameTime *float32 `protobuf:"fixed32,1,opt,name=frame_time,json=frameTime" json:"frame_time,omitempty"`
}

func (x *CUserMessageServerFrameTime) Reset() {
	*x = CUserMessageServerFrameTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageServerFrameTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageServerFrameTime) ProtoMessage() {}

func (x *CUserMessageServerFrameTime) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageServerFrameTime.ProtoReflect.Descriptor instead.
func (*CUserMessageServerFrameTime) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{44}
}

func (x *CUserMessageServerFrameTime) GetFrameTime() float32 {
	if x != nil && x.FrameTime != nil {
		return *x.FrameTime
	}
	return 0
}

type CUserMessageLagCompensationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distance *float32 `protobuf:"fixed32,1,opt,name=distance" json:"distance,omitempty"`
}

func (x *CUserMessageLagCompensationError) Reset() {
	*x = CUserMessageLagCompensationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageLagCompensationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageLagCompensationError) ProtoMessage() {}

func (x *CUserMessageLagCompensationError) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageLagCompensationError.ProtoReflect.Descriptor instead.
func (*CUserMessageLagCompensationError) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{45}
}

func (x *CUserMessageLagCompensationError) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

type CUserMessageRequestDllStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DllAction  *string `protobuf:"bytes,1,opt,name=dll_action,json=dllAction" json:"dll_action,omitempty"`
	FullReport *bool   `protobuf:"varint,2,opt,name=full_report,json=fullReport" json:"full_report,omitempty"`
}

func (x *CUserMessageRequestDllStatus) Reset() {
	*x = CUserMessageRequestDllStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageRequestDllStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageRequestDllStatus) ProtoMessage() {}

func (x *CUserMessageRequestDllStatus) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageRequestDllStatus.ProtoReflect.Descriptor instead.
func (*CUserMessageRequestDllStatus) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{46}
}

func (x *CUserMessageRequestDllStatus) GetDllAction() string {
	if x != nil && x.DllAction != nil {
		return *x.DllAction
	}
	return ""
}

func (x *CUserMessageRequestDllStatus) GetFullReport() bool {
	if x != nil && x.FullReport != nil {
		return *x.FullReport
	}
	return false
}

type CUserMessageRequestUtilAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Util1 *int32 `protobuf:"varint,2,opt,name=util1" json:"util1,omitempty"`
	Util2 *int32 `protobuf:"varint,3,opt,name=util2" json:"util2,omitempty"`
	Util3 *int32 `protobuf:"varint,4,opt,name=util3" json:"util3,omitempty"`
	Util4 *int32 `protobuf:"varint,5,opt,name=util4" json:"util4,omitempty"`
	Util5 *int32 `protobuf:"varint,6,opt,name=util5" json:"util5,omitempty"`
}

func (x *CUserMessageRequestUtilAction) Reset() {
	*x = CUserMessageRequestUtilAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageRequestUtilAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageRequestUtilAction) ProtoMessage() {}

func (x *CUserMessageRequestUtilAction) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageRequestUtilAction.ProtoReflect.Descriptor instead.
func (*CUserMessageRequestUtilAction) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{47}
}

func (x *CUserMessageRequestUtilAction) GetUtil1() int32 {
	if x != nil && x.Util1 != nil {
		return *x.Util1
	}
	return 0
}

func (x *CUserMessageRequestUtilAction) GetUtil2() int32 {
	if x != nil && x.Util2 != nil {
		return *x.Util2
	}
	return 0
}

func (x *CUserMessageRequestUtilAction) GetUtil3() int32 {
	if x != nil && x.Util3 != nil {
		return *x.Util3
	}
	return 0
}

func (x *CUserMessageRequestUtilAction) GetUtil4() int32 {
	if x != nil && x.Util4 != nil {
		return *x.Util4
	}
	return 0
}

func (x *CUserMessageRequestUtilAction) GetUtil5() int32 {
	if x != nil && x.Util5 != nil {
		return *x.Util5
	}
	return 0
}

type CUserMessage_UtilMsg_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crc             *uint32                                     `protobuf:"fixed32,1,opt,name=crc" json:"crc,omitempty"`
	ItemCount       *int32                                      `protobuf:"varint,2,opt,name=item_count,json=itemCount" json:"item_count,omitempty"`
	Crc2            *uint32                                     `protobuf:"fixed32,3,opt,name=crc2" json:"crc2,omitempty"`
	ItemCount2      *int32                                      `protobuf:"varint,4,opt,name=item_count2,json=itemCount2" json:"item_count2,omitempty"`
	CrcPart         []int32                                     `protobuf:"varint,5,rep,name=crc_part,json=crcPart" json:"crc_part,omitempty"`
	CrcPart2        []int32                                     `protobuf:"varint,6,rep,name=crc_part2,json=crcPart2" json:"crc_part2,omitempty"`
	ClientTimestamp *int32                                      `protobuf:"varint,7,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
	Platform        *int32                                      `protobuf:"varint,8,opt,name=platform" json:"platform,omitempty"`
	Itemdetails     []*CUserMessage_UtilMsg_Response_ItemDetail `protobuf:"bytes,9,rep,name=itemdetails" json:"itemdetails,omitempty"`
	Itemgroup       *int32                                      `protobuf:"varint,10,opt,name=itemgroup" json:"itemgroup,omitempty"`
	TotalCount      *int32                                      `protobuf:"varint,11,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	TotalCount2     *int32                                      `protobuf:"varint,12,opt,name=total_count2,json=totalCount2" json:"total_count2,omitempty"`
}

func (x *CUserMessage_UtilMsg_Response) Reset() {
	*x = CUserMessage_UtilMsg_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessage_UtilMsg_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessage_UtilMsg_Response) ProtoMessage() {}

func (x *CUserMessage_UtilMsg_Response) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessage_UtilMsg_Response.ProtoReflect.Descriptor instead.
func (*CUserMessage_UtilMsg_Response) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{48}
}

func (x *CUserMessage_UtilMsg_Response) GetCrc() uint32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

func (x *CUserMessage_UtilMsg_Response) GetItemCount() int32 {
	if x != nil && x.ItemCount != nil {
		return *x.ItemCount
	}
	return 0
}

func (x *CUserMessage_UtilMsg_Response) GetCrc2() uint32 {
	if x != nil && x.Crc2 != nil {
		return *x.Crc2
	}
	return 0
}

func (x *CUserMessage_UtilMsg_Response) GetItemCount2() int32 {
	if x != nil && x.ItemCount2 != nil {
		return *x.ItemCount2
	}
	return 0
}

func (x *CUserMessage_UtilMsg_Response) GetCrcPart() []int32 {
	if x != nil {
		return x.CrcPart
	}
	return nil
}

func (x *CUserMessage_UtilMsg_Response) GetCrcPart2() []int32 {
	if x != nil {
		return x.CrcPart2
	}
	return nil
}

func (x *CUserMessage_UtilMsg_Response) GetClientTimestamp() int32 {
	if x != nil && x.ClientTimestamp != nil {
		return *x.ClientTimestamp
	}
	return 0
}

func (x *CUserMessage_UtilMsg_Response) GetPlatform() int32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

func (x *CUserMessage_UtilMsg_Response) GetItemdetails() []*CUserMessage_UtilMsg_Response_ItemDetail {
	if x != nil {
		return x.Itemdetails
	}
	return nil
}

func (x *CUserMessage_UtilMsg_Response) GetItemgroup() int32 {
	if x != nil && x.Itemgroup != nil {
		return *x.Itemgroup
	}
	return 0
}

func (x *CUserMessage_UtilMsg_Response) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *CUserMessage_UtilMsg_Response) GetTotalCount2() int32 {
	if x != nil && x.TotalCount2 != nil {
		return *x.TotalCount2
	}
	return 0
}

type CUserMessage_DllStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileReport  *string                                `protobuf:"bytes,1,opt,name=file_report,json=fileReport" json:"file_report,omitempty"`
	CommandLine *string                                `protobuf:"bytes,2,opt,name=command_line,json=commandLine" json:"command_line,omitempty"`
	TotalFiles  *uint32                                `protobuf:"varint,3,opt,name=total_files,json=totalFiles" json:"total_files,omitempty"`
	ProcessId   *uint32                                `protobuf:"varint,4,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	Osversion   *int32                                 `protobuf:"varint,5,opt,name=osversion" json:"osversion,omitempty"`
	ClientTime  *uint64                                `protobuf:"varint,6,opt,name=client_time,json=clientTime" json:"client_time,omitempty"`
	Diagnostics []*CUserMessage_DllStatus_CVDiagnostic `protobuf:"bytes,7,rep,name=diagnostics" json:"diagnostics,omitempty"`
	Modules     []*CUserMessage_DllStatus_CModule      `protobuf:"bytes,8,rep,name=modules" json:"modules,omitempty"`
}

func (x *CUserMessage_DllStatus) Reset() {
	*x = CUserMessage_DllStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessage_DllStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessage_DllStatus) ProtoMessage() {}

func (x *CUserMessage_DllStatus) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessage_DllStatus.ProtoReflect.Descriptor instead.
func (*CUserMessage_DllStatus) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{49}
}

func (x *CUserMessage_DllStatus) GetFileReport() string {
	if x != nil && x.FileReport != nil {
		return *x.FileReport
	}
	return ""
}

func (x *CUserMessage_DllStatus) GetCommandLine() string {
	if x != nil && x.CommandLine != nil {
		return *x.CommandLine
	}
	return ""
}

func (x *CUserMessage_DllStatus) GetTotalFiles() uint32 {
	if x != nil && x.TotalFiles != nil {
		return *x.TotalFiles
	}
	return 0
}

func (x *CUserMessage_DllStatus) GetProcessId() uint32 {
	if x != nil && x.ProcessId != nil {
		return *x.ProcessId
	}
	return 0
}

func (x *CUserMessage_DllStatus) GetOsversion() int32 {
	if x != nil && x.Osversion != nil {
		return *x.Osversion
	}
	return 0
}

func (x *CUserMessage_DllStatus) GetClientTime() uint64 {
	if x != nil && x.ClientTime != nil {
		return *x.ClientTime
	}
	return 0
}

func (x *CUserMessage_DllStatus) GetDiagnostics() []*CUserMessage_DllStatus_CVDiagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *CUserMessage_DllStatus) GetModules() []*CUserMessage_DllStatus_CModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

type CUserMessageRequestInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inventory *int32 `protobuf:"varint,1,opt,name=inventory" json:"inventory,omitempty"`
	Offset    *int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Options   *int32 `protobuf:"varint,3,opt,name=options" json:"options,omitempty"`
}

func (x *CUserMessageRequestInventory) Reset() {
	*x = CUserMessageRequestInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageRequestInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageRequestInventory) ProtoMessage() {}

func (x *CUserMessageRequestInventory) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageRequestInventory.ProtoReflect.Descriptor instead.
func (*CUserMessageRequestInventory) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{50}
}

func (x *CUserMessageRequestInventory) GetInventory() int32 {
	if x != nil && x.Inventory != nil {
		return *x.Inventory
	}
	return 0
}

func (x *CUserMessageRequestInventory) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CUserMessageRequestInventory) GetOptions() int32 {
	if x != nil && x.Options != nil {
		return *x.Options
	}
	return 0
}

type CUserMessage_Inventory_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crc             *uint32                                            `protobuf:"fixed32,1,opt,name=crc" json:"crc,omitempty"`
	ItemCount       *int32                                             `protobuf:"varint,2,opt,name=item_count,json=itemCount" json:"item_count,omitempty"`
	Osversion       *int32                                             `protobuf:"varint,5,opt,name=osversion" json:"osversion,omitempty"`
	PerfTime        *int32                                             `protobuf:"varint,6,opt,name=perf_time,json=perfTime" json:"perf_time,omitempty"`
	ClientTimestamp *int32                                             `protobuf:"varint,7,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
	Platform        *int32                                             `protobuf:"varint,8,opt,name=platform" json:"platform,omitempty"`
	Inventories     []*CUserMessage_Inventory_Response_InventoryDetail `protobuf:"bytes,9,rep,name=inventories" json:"inventories,omitempty"`
	Inventories2    []*CUserMessage_Inventory_Response_InventoryDetail `protobuf:"bytes,10,rep,name=inventories2" json:"inventories2,omitempty"`
	Inventories3    []*CUserMessage_Inventory_Response_InventoryDetail `protobuf:"bytes,14,rep,name=inventories3" json:"inventories3,omitempty"`
	InvType         *int32                                             `protobuf:"varint,11,opt,name=inv_type,json=invType" json:"inv_type,omitempty"`
	BuildVersion    *int32                                             `protobuf:"varint,12,opt,name=build_version,json=buildVersion" json:"build_version,omitempty"`
	Instance        *int32                                             `protobuf:"varint,13,opt,name=instance" json:"instance,omitempty"`
	StartTime       *int64                                             `protobuf:"varint,15,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
}

func (x *CUserMessage_Inventory_Response) Reset() {
	*x = CUserMessage_Inventory_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessage_Inventory_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessage_Inventory_Response) ProtoMessage() {}

func (x *CUserMessage_Inventory_Response) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessage_Inventory_Response.ProtoReflect.Descriptor instead.
func (*CUserMessage_Inventory_Response) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{51}
}

func (x *CUserMessage_Inventory_Response) GetCrc() uint32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

func (x *CUserMessage_Inventory_Response) GetItemCount() int32 {
	if x != nil && x.ItemCount != nil {
		return *x.ItemCount
	}
	return 0
}

func (x *CUserMessage_Inventory_Response) GetOsversion() int32 {
	if x != nil && x.Osversion != nil {
		return *x.Osversion
	}
	return 0
}

func (x *CUserMessage_Inventory_Response) GetPerfTime() int32 {
	if x != nil && x.PerfTime != nil {
		return *x.PerfTime
	}
	return 0
}

func (x *CUserMessage_Inventory_Response) GetClientTimestamp() int32 {
	if x != nil && x.ClientTimestamp != nil {
		return *x.ClientTimestamp
	}
	return 0
}

func (x *CUserMessage_Inventory_Response) GetPlatform() int32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

func (x *CUserMessage_Inventory_Response) GetInventories() []*CUserMessage_Inventory_Response_InventoryDetail {
	if x != nil {
		return x.Inventories
	}
	return nil
}

func (x *CUserMessage_Inventory_Response) GetInventories2() []*CUserMessage_Inventory_Response_InventoryDetail {
	if x != nil {
		return x.Inventories2
	}
	return nil
}

func (x *CUserMessage_Inventory_Response) GetInventories3() []*CUserMessage_Inventory_Response_InventoryDetail {
	if x != nil {
		return x.Inventories3
	}
	return nil
}

func (x *CUserMessage_Inventory_Response) GetInvType() int32 {
	if x != nil && x.InvType != nil {
		return *x.InvType
	}
	return 0
}

func (x *CUserMessage_Inventory_Response) GetBuildVersion() int32 {
	if x != nil && x.BuildVersion != nil {
		return *x.BuildVersion
	}
	return 0
}

func (x *CUserMessage_Inventory_Response) GetInstance() int32 {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return 0
}

func (x *CUserMessage_Inventory_Response) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

type CUserMessageRequestDiagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diagnostics []*CUserMessageRequestDiagnostic_Diagnostic `protobuf:"bytes,1,rep,name=diagnostics" json:"diagnostics,omitempty"`
}

func (x *CUserMessageRequestDiagnostic) Reset() {
	*x = CUserMessageRequestDiagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageRequestDiagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageRequestDiagnostic) ProtoMessage() {}

func (x *CUserMessageRequestDiagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageRequestDiagnostic.ProtoReflect.Descriptor instead.
func (*CUserMessageRequestDiagnostic) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{52}
}

func (x *CUserMessageRequestDiagnostic) GetDiagnostics() []*CUserMessageRequestDiagnostic_Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type CUserMessage_Diagnostic_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diagnostics  []*CUserMessage_Diagnostic_Response_Diagnostic `protobuf:"bytes,1,rep,name=diagnostics" json:"diagnostics,omitempty"`
	BuildVersion *int32                                         `protobuf:"varint,2,opt,name=build_version,json=buildVersion" json:"build_version,omitempty"`
	Instance     *int32                                         `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	StartTime    *int64                                         `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Osversion    *int32                                         `protobuf:"varint,5,opt,name=osversion" json:"osversion,omitempty"`
	Platform     *int32                                         `protobuf:"varint,6,opt,name=platform" json:"platform,omitempty"`
}

func (x *CUserMessage_Diagnostic_Response) Reset() {
	*x = CUserMessage_Diagnostic_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessage_Diagnostic_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessage_Diagnostic_Response) ProtoMessage() {}

func (x *CUserMessage_Diagnostic_Response) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessage_Diagnostic_Response.ProtoReflect.Descriptor instead.
func (*CUserMessage_Diagnostic_Response) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{53}
}

func (x *CUserMessage_Diagnostic_Response) GetDiagnostics() []*CUserMessage_Diagnostic_Response_Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *CUserMessage_Diagnostic_Response) GetBuildVersion() int32 {
	if x != nil && x.BuildVersion != nil {
		return *x.BuildVersion
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response) GetInstance() int32 {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response) GetOsversion() int32 {
	if x != nil && x.Osversion != nil {
		return *x.Osversion
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response) GetPlatform() int32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

type CUserMessage_ExtraUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item    *int32   `protobuf:"varint,1,opt,name=item" json:"item,omitempty"`
	Value1  *int64   `protobuf:"varint,2,opt,name=value1" json:"value1,omitempty"`
	Value2  *int64   `protobuf:"varint,3,opt,name=value2" json:"value2,omitempty"`
	Detail1 [][]byte `protobuf:"bytes,4,rep,name=detail1" json:"detail1,omitempty"`
	Detail2 [][]byte `protobuf:"bytes,5,rep,name=detail2" json:"detail2,omitempty"`
}

func (x *CUserMessage_ExtraUserData) Reset() {
	*x = CUserMessage_ExtraUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessage_ExtraUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessage_ExtraUserData) ProtoMessage() {}

func (x *CUserMessage_ExtraUserData) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessage_ExtraUserData.ProtoReflect.Descriptor instead.
func (*CUserMessage_ExtraUserData) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{54}
}

func (x *CUserMessage_ExtraUserData) GetItem() int32 {
	if x != nil && x.Item != nil {
		return *x.Item
	}
	return 0
}

func (x *CUserMessage_ExtraUserData) GetValue1() int64 {
	if x != nil && x.Value1 != nil {
		return *x.Value1
	}
	return 0
}

func (x *CUserMessage_ExtraUserData) GetValue2() int64 {
	if x != nil && x.Value2 != nil {
		return *x.Value2
	}
	return 0
}

func (x *CUserMessage_ExtraUserData) GetDetail1() [][]byte {
	if x != nil {
		return x.Detail1
	}
	return nil
}

func (x *CUserMessage_ExtraUserData) GetDetail2() [][]byte {
	if x != nil {
		return x.Detail2
	}
	return nil
}

type CUserMessageCameraTransition_Transition_DataDriven struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename       *string  `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	AttachEntIndex *int32   `protobuf:"varint,2,opt,name=attach_ent_index,json=attachEntIndex,def=-1" json:"attach_ent_index,omitempty"`
	Duration       *float32 `protobuf:"fixed32,3,opt,name=duration" json:"duration,omitempty"`
}

// Default values for CUserMessageCameraTransition_Transition_DataDriven fields.
const (
	Default_CUserMessageCameraTransition_Transition_DataDriven_AttachEntIndex = int32(-1)
)

func (x *CUserMessageCameraTransition_Transition_DataDriven) Reset() {
	*x = CUserMessageCameraTransition_Transition_DataDriven{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageCameraTransition_Transition_DataDriven) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageCameraTransition_Transition_DataDriven) ProtoMessage() {}

func (x *CUserMessageCameraTransition_Transition_DataDriven) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageCameraTransition_Transition_DataDriven.ProtoReflect.Descriptor instead.
func (*CUserMessageCameraTransition_Transition_DataDriven) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{35, 0}
}

func (x *CUserMessageCameraTransition_Transition_DataDriven) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CUserMessageCameraTransition_Transition_DataDriven) GetAttachEntIndex() int32 {
	if x != nil && x.AttachEntIndex != nil {
		return *x.AttachEntIndex
	}
	return Default_CUserMessageCameraTransition_Transition_DataDriven_AttachEntIndex
}

func (x *CUserMessageCameraTransition_Transition_DataDriven) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CUserMsg_ParticleManager_ReleaseParticleIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CUserMsg_ParticleManager_ReleaseParticleIndex) Reset() {
	*x = CUserMsg_ParticleManager_ReleaseParticleIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_ReleaseParticleIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_ReleaseParticleIndex) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_ReleaseParticleIndex) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_ReleaseParticleIndex.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_ReleaseParticleIndex) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 0}
}

type CUserMsg_ParticleManager_CreateParticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticleNameIndex         *uint64  `protobuf:"fixed64,1,opt,name=particle_name_index,json=particleNameIndex" json:"particle_name_index,omitempty"`
	AttachType                *int32   `protobuf:"varint,2,opt,name=attach_type,json=attachType" json:"attach_type,omitempty"`
	EntityHandle              *uint32  `protobuf:"varint,3,opt,name=entity_handle,json=entityHandle,def=16777215" json:"entity_handle,omitempty"`
	EntityHandleForModifiers  *uint32  `protobuf:"varint,4,opt,name=entity_handle_for_modifiers,json=entityHandleForModifiers,def=16777215" json:"entity_handle_for_modifiers,omitempty"`
	ApplyVoiceBanRules        *bool    `protobuf:"varint,5,opt,name=apply_voice_ban_rules,json=applyVoiceBanRules" json:"apply_voice_ban_rules,omitempty"`
	TeamBehavior              *int32   `protobuf:"varint,6,opt,name=team_behavior,json=teamBehavior" json:"team_behavior,omitempty"`
	ControlPointConfiguration *string  `protobuf:"bytes,7,opt,name=control_point_configuration,json=controlPointConfiguration" json:"control_point_configuration,omitempty"`
	Cluster                   *bool    `protobuf:"varint,8,opt,name=cluster" json:"cluster,omitempty"`
	EndcapTime                *float32 `protobuf:"fixed32,9,opt,name=endcap_time,json=endcapTime" json:"endcap_time,omitempty"`
}

// Default values for CUserMsg_ParticleManager_CreateParticle fields.
const (
	Default_CUserMsg_ParticleManager_CreateParticle_EntityHandle             = uint32(16777215)
	Default_CUserMsg_ParticleManager_CreateParticle_EntityHandleForModifiers = uint32(16777215)
)

func (x *CUserMsg_ParticleManager_CreateParticle) Reset() {
	*x = CUserMsg_ParticleManager_CreateParticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_CreateParticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_CreateParticle) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_CreateParticle) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_CreateParticle.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_CreateParticle) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 1}
}

func (x *CUserMsg_ParticleManager_CreateParticle) GetParticleNameIndex() uint64 {
	if x != nil && x.ParticleNameIndex != nil {
		return *x.ParticleNameIndex
	}
	return 0
}

func (x *CUserMsg_ParticleManager_CreateParticle) GetAttachType() int32 {
	if x != nil && x.AttachType != nil {
		return *x.AttachType
	}
	return 0
}

func (x *CUserMsg_ParticleManager_CreateParticle) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return Default_CUserMsg_ParticleManager_CreateParticle_EntityHandle
}

func (x *CUserMsg_ParticleManager_CreateParticle) GetEntityHandleForModifiers() uint32 {
	if x != nil && x.EntityHandleForModifiers != nil {
		return *x.EntityHandleForModifiers
	}
	return Default_CUserMsg_ParticleManager_CreateParticle_EntityHandleForModifiers
}

func (x *CUserMsg_ParticleManager_CreateParticle) GetApplyVoiceBanRules() bool {
	if x != nil && x.ApplyVoiceBanRules != nil {
		return *x.ApplyVoiceBanRules
	}
	return false
}

func (x *CUserMsg_ParticleManager_CreateParticle) GetTeamBehavior() int32 {
	if x != nil && x.TeamBehavior != nil {
		return *x.TeamBehavior
	}
	return 0
}

func (x *CUserMsg_ParticleManager_CreateParticle) GetControlPointConfiguration() string {
	if x != nil && x.ControlPointConfiguration != nil {
		return *x.ControlPointConfiguration
	}
	return ""
}

func (x *CUserMsg_ParticleManager_CreateParticle) GetCluster() bool {
	if x != nil && x.Cluster != nil {
		return *x.Cluster
	}
	return false
}

func (x *CUserMsg_ParticleManager_CreateParticle) GetEndcapTime() float32 {
	if x != nil && x.EndcapTime != nil {
		return *x.EndcapTime
	}
	return 0
}

type CUserMsg_ParticleManager_DestroyParticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestroyImmediately *bool `protobuf:"varint,1,opt,name=destroy_immediately,json=destroyImmediately" json:"destroy_immediately,omitempty"`
}

func (x *CUserMsg_ParticleManager_DestroyParticle) Reset() {
	*x = CUserMsg_ParticleManager_DestroyParticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_DestroyParticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_DestroyParticle) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_DestroyParticle) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_DestroyParticle.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_DestroyParticle) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 2}
}

func (x *CUserMsg_ParticleManager_DestroyParticle) GetDestroyImmediately() bool {
	if x != nil && x.DestroyImmediately != nil {
		return *x.DestroyImmediately
	}
	return false
}

type CUserMsg_ParticleManager_DestroyParticleInvolving struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestroyImmediately *bool   `protobuf:"varint,1,opt,name=destroy_immediately,json=destroyImmediately" json:"destroy_immediately,omitempty"`
	EntityHandle       *uint32 `protobuf:"varint,3,opt,name=entity_handle,json=entityHandle,def=16777215" json:"entity_handle,omitempty"`
}

// Default values for CUserMsg_ParticleManager_DestroyParticleInvolving fields.
const (
	Default_CUserMsg_ParticleManager_DestroyParticleInvolving_EntityHandle = uint32(16777215)
)

func (x *CUserMsg_ParticleManager_DestroyParticleInvolving) Reset() {
	*x = CUserMsg_ParticleManager_DestroyParticleInvolving{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_DestroyParticleInvolving) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_DestroyParticleInvolving) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_DestroyParticleInvolving) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_DestroyParticleInvolving.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_DestroyParticleInvolving) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 3}
}

func (x *CUserMsg_ParticleManager_DestroyParticleInvolving) GetDestroyImmediately() bool {
	if x != nil && x.DestroyImmediately != nil {
		return *x.DestroyImmediately
	}
	return false
}

func (x *CUserMsg_ParticleManager_DestroyParticleInvolving) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return Default_CUserMsg_ParticleManager_DestroyParticleInvolving_EntityHandle
}

type CUserMsg_ParticleManager_DestroyParticleNamed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticleNameIndex  *uint64 `protobuf:"fixed64,1,opt,name=particle_name_index,json=particleNameIndex" json:"particle_name_index,omitempty"`
	EntityHandle       *uint32 `protobuf:"varint,2,opt,name=entity_handle,json=entityHandle,def=16777215" json:"entity_handle,omitempty"`
	DestroyImmediately *bool   `protobuf:"varint,3,opt,name=destroy_immediately,json=destroyImmediately" json:"destroy_immediately,omitempty"`
	PlayEndcap         *bool   `protobuf:"varint,4,opt,name=play_endcap,json=playEndcap" json:"play_endcap,omitempty"`
}

// Default values for CUserMsg_ParticleManager_DestroyParticleNamed fields.
const (
	Default_CUserMsg_ParticleManager_DestroyParticleNamed_EntityHandle = uint32(16777215)
)

func (x *CUserMsg_ParticleManager_DestroyParticleNamed) Reset() {
	*x = CUserMsg_ParticleManager_DestroyParticleNamed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_DestroyParticleNamed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_DestroyParticleNamed) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_DestroyParticleNamed) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_DestroyParticleNamed.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_DestroyParticleNamed) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 4}
}

func (x *CUserMsg_ParticleManager_DestroyParticleNamed) GetParticleNameIndex() uint64 {
	if x != nil && x.ParticleNameIndex != nil {
		return *x.ParticleNameIndex
	}
	return 0
}

func (x *CUserMsg_ParticleManager_DestroyParticleNamed) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return Default_CUserMsg_ParticleManager_DestroyParticleNamed_EntityHandle
}

func (x *CUserMsg_ParticleManager_DestroyParticleNamed) GetDestroyImmediately() bool {
	if x != nil && x.DestroyImmediately != nil {
		return *x.DestroyImmediately
	}
	return false
}

func (x *CUserMsg_ParticleManager_DestroyParticleNamed) GetPlayEndcap() bool {
	if x != nil && x.PlayEndcap != nil {
		return *x.PlayEndcap
	}
	return false
}

type CUserMsg_ParticleManager_UpdateParticle_OBSOLETE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	Position     *CMsgVector `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
}

func (x *CUserMsg_ParticleManager_UpdateParticle_OBSOLETE) Reset() {
	*x = CUserMsg_ParticleManager_UpdateParticle_OBSOLETE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_UpdateParticle_OBSOLETE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_UpdateParticle_OBSOLETE) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_UpdateParticle_OBSOLETE) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_UpdateParticle_OBSOLETE.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_UpdateParticle_OBSOLETE) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 5}
}

func (x *CUserMsg_ParticleManager_UpdateParticle_OBSOLETE) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CUserMsg_ParticleManager_UpdateParticle_OBSOLETE) GetPosition() *CMsgVector {
	if x != nil {
		return x.Position
	}
	return nil
}

type CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	Forward      *CMsgVector `protobuf:"bytes,2,opt,name=forward" json:"forward,omitempty"`
}

func (x *CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE) Reset() {
	*x = CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 6}
}

func (x *CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE) GetForward() *CMsgVector {
	if x != nil {
		return x.Forward
	}
	return nil
}

type CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint    *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	Forward         *CMsgVector `protobuf:"bytes,2,opt,name=forward" json:"forward,omitempty"`
	DeprecatedRight *CMsgVector `protobuf:"bytes,3,opt,name=deprecated_right,json=deprecatedRight" json:"deprecated_right,omitempty"`
	Up              *CMsgVector `protobuf:"bytes,4,opt,name=up" json:"up,omitempty"`
	Left            *CMsgVector `protobuf:"bytes,5,opt,name=left" json:"left,omitempty"`
}

func (x *CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE) Reset() {
	*x = CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 7}
}

func (x *CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE) GetForward() *CMsgVector {
	if x != nil {
		return x.Forward
	}
	return nil
}

func (x *CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE) GetDeprecatedRight() *CMsgVector {
	if x != nil {
		return x.DeprecatedRight
	}
	return nil
}

func (x *CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE) GetUp() *CMsgVector {
	if x != nil {
		return x.Up
	}
	return nil
}

func (x *CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE) GetLeft() *CMsgVector {
	if x != nil {
		return x.Left
	}
	return nil
}

type CUserMsg_ParticleManager_UpdateParticleTransform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint          *int32          `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	Position              *CMsgVector     `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	Orientation           *CMsgQuaternion `protobuf:"bytes,3,opt,name=orientation" json:"orientation,omitempty"`
	InterpolationInterval *float32        `protobuf:"fixed32,4,opt,name=interpolation_interval,json=interpolationInterval" json:"interpolation_interval,omitempty"`
}

func (x *CUserMsg_ParticleManager_UpdateParticleTransform) Reset() {
	*x = CUserMsg_ParticleManager_UpdateParticleTransform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_UpdateParticleTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_UpdateParticleTransform) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_UpdateParticleTransform) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_UpdateParticleTransform.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_UpdateParticleTransform) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 8}
}

func (x *CUserMsg_ParticleManager_UpdateParticleTransform) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CUserMsg_ParticleManager_UpdateParticleTransform) GetPosition() *CMsgVector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CUserMsg_ParticleManager_UpdateParticleTransform) GetOrientation() *CMsgQuaternion {
	if x != nil {
		return x.Orientation
	}
	return nil
}

func (x *CUserMsg_ParticleManager_UpdateParticleTransform) GetInterpolationInterval() float32 {
	if x != nil && x.InterpolationInterval != nil {
		return *x.InterpolationInterval
	}
	return 0
}

type CUserMsg_ParticleManager_UpdateParticleFallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	Position     *CMsgVector `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
}

func (x *CUserMsg_ParticleManager_UpdateParticleFallback) Reset() {
	*x = CUserMsg_ParticleManager_UpdateParticleFallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_UpdateParticleFallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_UpdateParticleFallback) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_UpdateParticleFallback) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_UpdateParticleFallback.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_UpdateParticleFallback) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 9}
}

func (x *CUserMsg_ParticleManager_UpdateParticleFallback) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CUserMsg_ParticleManager_UpdateParticleFallback) GetPosition() *CMsgVector {
	if x != nil {
		return x.Position
	}
	return nil
}

type CUserMsg_ParticleManager_UpdateParticleOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	OriginOffset *CMsgVector `protobuf:"bytes,2,opt,name=origin_offset,json=originOffset" json:"origin_offset,omitempty"`
	AngleOffset  *CMsgQAngle `protobuf:"bytes,3,opt,name=angle_offset,json=angleOffset" json:"angle_offset,omitempty"`
}

func (x *CUserMsg_ParticleManager_UpdateParticleOffset) Reset() {
	*x = CUserMsg_ParticleManager_UpdateParticleOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_UpdateParticleOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_UpdateParticleOffset) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_UpdateParticleOffset) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_UpdateParticleOffset.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_UpdateParticleOffset) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 10}
}

func (x *CUserMsg_ParticleManager_UpdateParticleOffset) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CUserMsg_ParticleManager_UpdateParticleOffset) GetOriginOffset() *CMsgVector {
	if x != nil {
		return x.OriginOffset
	}
	return nil
}

func (x *CUserMsg_ParticleManager_UpdateParticleOffset) GetAngleOffset() *CMsgQAngle {
	if x != nil {
		return x.AngleOffset
	}
	return nil
}

type CUserMsg_ParticleManager_UpdateParticleEnt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint     *int32      `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	EntityHandle     *uint32     `protobuf:"varint,2,opt,name=entity_handle,json=entityHandle,def=16777215" json:"entity_handle,omitempty"`
	AttachType       *int32      `protobuf:"varint,3,opt,name=attach_type,json=attachType" json:"attach_type,omitempty"`
	Attachment       *int32      `protobuf:"varint,4,opt,name=attachment" json:"attachment,omitempty"`
	FallbackPosition *CMsgVector `protobuf:"bytes,5,opt,name=fallback_position,json=fallbackPosition" json:"fallback_position,omitempty"`
	IncludeWearables *bool       `protobuf:"varint,6,opt,name=include_wearables,json=includeWearables" json:"include_wearables,omitempty"`
	OffsetPosition   *CMsgVector `protobuf:"bytes,7,opt,name=offset_position,json=offsetPosition" json:"offset_position,omitempty"`
	OffsetAngles     *CMsgQAngle `protobuf:"bytes,8,opt,name=offset_angles,json=offsetAngles" json:"offset_angles,omitempty"`
}

// Default values for CUserMsg_ParticleManager_UpdateParticleEnt fields.
const (
	Default_CUserMsg_ParticleManager_UpdateParticleEnt_EntityHandle = uint32(16777215)
)

func (x *CUserMsg_ParticleManager_UpdateParticleEnt) Reset() {
	*x = CUserMsg_ParticleManager_UpdateParticleEnt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_UpdateParticleEnt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_UpdateParticleEnt) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_UpdateParticleEnt) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_UpdateParticleEnt.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_UpdateParticleEnt) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 11}
}

func (x *CUserMsg_ParticleManager_UpdateParticleEnt) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CUserMsg_ParticleManager_UpdateParticleEnt) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return Default_CUserMsg_ParticleManager_UpdateParticleEnt_EntityHandle
}

func (x *CUserMsg_ParticleManager_UpdateParticleEnt) GetAttachType() int32 {
	if x != nil && x.AttachType != nil {
		return *x.AttachType
	}
	return 0
}

func (x *CUserMsg_ParticleManager_UpdateParticleEnt) GetAttachment() int32 {
	if x != nil && x.Attachment != nil {
		return *x.Attachment
	}
	return 0
}

func (x *CUserMsg_ParticleManager_UpdateParticleEnt) GetFallbackPosition() *CMsgVector {
	if x != nil {
		return x.FallbackPosition
	}
	return nil
}

func (x *CUserMsg_ParticleManager_UpdateParticleEnt) GetIncludeWearables() bool {
	if x != nil && x.IncludeWearables != nil {
		return *x.IncludeWearables
	}
	return false
}

func (x *CUserMsg_ParticleManager_UpdateParticleEnt) GetOffsetPosition() *CMsgVector {
	if x != nil {
		return x.OffsetPosition
	}
	return nil
}

func (x *CUserMsg_ParticleManager_UpdateParticleEnt) GetOffsetAngles() *CMsgQAngle {
	if x != nil {
		return x.OffsetAngles
	}
	return nil
}

type CUserMsg_ParticleManager_UpdateParticleSetFrozen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetFrozen          *bool    `protobuf:"varint,1,opt,name=set_frozen,json=setFrozen" json:"set_frozen,omitempty"`
	TransitionDuration *float32 `protobuf:"fixed32,2,opt,name=transition_duration,json=transitionDuration" json:"transition_duration,omitempty"`
}

func (x *CUserMsg_ParticleManager_UpdateParticleSetFrozen) Reset() {
	*x = CUserMsg_ParticleManager_UpdateParticleSetFrozen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_UpdateParticleSetFrozen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_UpdateParticleSetFrozen) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_UpdateParticleSetFrozen) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_UpdateParticleSetFrozen.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_UpdateParticleSetFrozen) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 12}
}

func (x *CUserMsg_ParticleManager_UpdateParticleSetFrozen) GetSetFrozen() bool {
	if x != nil && x.SetFrozen != nil {
		return *x.SetFrozen
	}
	return false
}

func (x *CUserMsg_ParticleManager_UpdateParticleSetFrozen) GetTransitionDuration() float32 {
	if x != nil && x.TransitionDuration != nil {
		return *x.TransitionDuration
	}
	return 0
}

type CUserMsg_ParticleManager_UpdateParticleShouldDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldDraw *bool `protobuf:"varint,1,opt,name=should_draw,json=shouldDraw" json:"should_draw,omitempty"`
}

func (x *CUserMsg_ParticleManager_UpdateParticleShouldDraw) Reset() {
	*x = CUserMsg_ParticleManager_UpdateParticleShouldDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_UpdateParticleShouldDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_UpdateParticleShouldDraw) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_UpdateParticleShouldDraw) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_UpdateParticleShouldDraw.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_UpdateParticleShouldDraw) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 13}
}

func (x *CUserMsg_ParticleManager_UpdateParticleShouldDraw) GetShouldDraw() bool {
	if x != nil && x.ShouldDraw != nil {
		return *x.ShouldDraw
	}
	return false
}

type CUserMsg_ParticleManager_ChangeControlPointAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentOld *int32  `protobuf:"varint,1,opt,name=attachment_old,json=attachmentOld" json:"attachment_old,omitempty"`
	AttachmentNew *int32  `protobuf:"varint,2,opt,name=attachment_new,json=attachmentNew" json:"attachment_new,omitempty"`
	EntityHandle  *uint32 `protobuf:"varint,3,opt,name=entity_handle,json=entityHandle,def=16777215" json:"entity_handle,omitempty"`
}

// Default values for CUserMsg_ParticleManager_ChangeControlPointAttachment fields.
const (
	Default_CUserMsg_ParticleManager_ChangeControlPointAttachment_EntityHandle = uint32(16777215)
)

func (x *CUserMsg_ParticleManager_ChangeControlPointAttachment) Reset() {
	*x = CUserMsg_ParticleManager_ChangeControlPointAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_ChangeControlPointAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_ChangeControlPointAttachment) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_ChangeControlPointAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_ChangeControlPointAttachment.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_ChangeControlPointAttachment) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 14}
}

func (x *CUserMsg_ParticleManager_ChangeControlPointAttachment) GetAttachmentOld() int32 {
	if x != nil && x.AttachmentOld != nil {
		return *x.AttachmentOld
	}
	return 0
}

func (x *CUserMsg_ParticleManager_ChangeControlPointAttachment) GetAttachmentNew() int32 {
	if x != nil && x.AttachmentNew != nil {
		return *x.AttachmentNew
	}
	return 0
}

func (x *CUserMsg_ParticleManager_ChangeControlPointAttachment) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return Default_CUserMsg_ParticleManager_ChangeControlPointAttachment_EntityHandle
}

type CUserMsg_ParticleManager_UpdateEntityPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityHandle *uint32     `protobuf:"varint,1,opt,name=entity_handle,json=entityHandle,def=16777215" json:"entity_handle,omitempty"`
	Position     *CMsgVector `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
}

// Default values for CUserMsg_ParticleManager_UpdateEntityPosition fields.
const (
	Default_CUserMsg_ParticleManager_UpdateEntityPosition_EntityHandle = uint32(16777215)
)

func (x *CUserMsg_ParticleManager_UpdateEntityPosition) Reset() {
	*x = CUserMsg_ParticleManager_UpdateEntityPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_UpdateEntityPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_UpdateEntityPosition) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_UpdateEntityPosition) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_UpdateEntityPosition.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_UpdateEntityPosition) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 15}
}

func (x *CUserMsg_ParticleManager_UpdateEntityPosition) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return Default_CUserMsg_ParticleManager_UpdateEntityPosition_EntityHandle
}

func (x *CUserMsg_ParticleManager_UpdateEntityPosition) GetPosition() *CMsgVector {
	if x != nil {
		return x.Position
	}
	return nil
}

type CUserMsg_ParticleManager_SetParticleFoWProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FowControlPoint  *int32   `protobuf:"varint,1,opt,name=fow_control_point,json=fowControlPoint" json:"fow_control_point,omitempty"`
	FowControlPoint2 *int32   `protobuf:"varint,2,opt,name=fow_control_point2,json=fowControlPoint2" json:"fow_control_point2,omitempty"`
	FowRadius        *float32 `protobuf:"fixed32,3,opt,name=fow_radius,json=fowRadius" json:"fow_radius,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetParticleFoWProperties) Reset() {
	*x = CUserMsg_ParticleManager_SetParticleFoWProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetParticleFoWProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetParticleFoWProperties) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetParticleFoWProperties) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetParticleFoWProperties.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetParticleFoWProperties) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 16}
}

func (x *CUserMsg_ParticleManager_SetParticleFoWProperties) GetFowControlPoint() int32 {
	if x != nil && x.FowControlPoint != nil {
		return *x.FowControlPoint
	}
	return 0
}

func (x *CUserMsg_ParticleManager_SetParticleFoWProperties) GetFowControlPoint2() int32 {
	if x != nil && x.FowControlPoint2 != nil {
		return *x.FowControlPoint2
	}
	return 0
}

func (x *CUserMsg_ParticleManager_SetParticleFoWProperties) GetFowRadius() float32 {
	if x != nil && x.FowRadius != nil {
		return *x.FowRadius
	}
	return 0
}

type CUserMsg_ParticleManager_SetParticleShouldCheckFoW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckFow *bool `protobuf:"varint,1,opt,name=check_fow,json=checkFow" json:"check_fow,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetParticleShouldCheckFoW) Reset() {
	*x = CUserMsg_ParticleManager_SetParticleShouldCheckFoW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetParticleShouldCheckFoW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetParticleShouldCheckFoW) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetParticleShouldCheckFoW) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetParticleShouldCheckFoW.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetParticleShouldCheckFoW) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 17}
}

func (x *CUserMsg_ParticleManager_SetParticleShouldCheckFoW) GetCheckFow() bool {
	if x != nil && x.CheckFow != nil {
		return *x.CheckFow
	}
	return false
}

type CUserMsg_ParticleManager_SetControlPointModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint *int32  `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	ModelName    *string `protobuf:"bytes,2,opt,name=model_name,json=modelName" json:"model_name,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetControlPointModel) Reset() {
	*x = CUserMsg_ParticleManager_SetControlPointModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetControlPointModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetControlPointModel) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetControlPointModel) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetControlPointModel.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetControlPointModel) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 18}
}

func (x *CUserMsg_ParticleManager_SetControlPointModel) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CUserMsg_ParticleManager_SetControlPointModel) GetModelName() string {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return ""
}

type CUserMsg_ParticleManager_SetControlPointSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint *int32  `protobuf:"varint,1,opt,name=control_point,json=controlPoint" json:"control_point,omitempty"`
	SnapshotName *string `protobuf:"bytes,2,opt,name=snapshot_name,json=snapshotName" json:"snapshot_name,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetControlPointSnapshot) Reset() {
	*x = CUserMsg_ParticleManager_SetControlPointSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetControlPointSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetControlPointSnapshot) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetControlPointSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetControlPointSnapshot.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetControlPointSnapshot) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 19}
}

func (x *CUserMsg_ParticleManager_SetControlPointSnapshot) GetControlPoint() int32 {
	if x != nil && x.ControlPoint != nil {
		return *x.ControlPoint
	}
	return 0
}

func (x *CUserMsg_ParticleManager_SetControlPointSnapshot) GetSnapshotName() string {
	if x != nil && x.SnapshotName != nil {
		return *x.SnapshotName
	}
	return ""
}

type CUserMsg_ParticleManager_SetParticleText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetParticleText) Reset() {
	*x = CUserMsg_ParticleManager_SetParticleText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetParticleText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetParticleText) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetParticleText) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetParticleText.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetParticleText) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 20}
}

func (x *CUserMsg_ParticleManager_SetParticleText) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CUserMsg_ParticleManager_SetTextureAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeName *string `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName" json:"attribute_name,omitempty"`
	TextureName   *string `protobuf:"bytes,2,opt,name=texture_name,json=textureName" json:"texture_name,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetTextureAttribute) Reset() {
	*x = CUserMsg_ParticleManager_SetTextureAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetTextureAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetTextureAttribute) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetTextureAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetTextureAttribute.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetTextureAttribute) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 21}
}

func (x *CUserMsg_ParticleManager_SetTextureAttribute) GetAttributeName() string {
	if x != nil && x.AttributeName != nil {
		return *x.AttributeName
	}
	return ""
}

func (x *CUserMsg_ParticleManager_SetTextureAttribute) GetTextureName() string {
	if x != nil && x.TextureName != nil {
		return *x.TextureName
	}
	return ""
}

type CUserMsg_ParticleManager_SetSceneObjectGenericFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagValue *bool `protobuf:"varint,1,opt,name=flag_value,json=flagValue" json:"flag_value,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetSceneObjectGenericFlag) Reset() {
	*x = CUserMsg_ParticleManager_SetSceneObjectGenericFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetSceneObjectGenericFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetSceneObjectGenericFlag) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetSceneObjectGenericFlag) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetSceneObjectGenericFlag.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetSceneObjectGenericFlag) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 22}
}

func (x *CUserMsg_ParticleManager_SetSceneObjectGenericFlag) GetFlagValue() bool {
	if x != nil && x.FlagValue != nil {
		return *x.FlagValue
	}
	return false
}

type CUserMsg_ParticleManager_SetSceneObjectTintAndDesat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tint  *uint32  `protobuf:"fixed32,1,opt,name=tint" json:"tint,omitempty"`
	Desat *float32 `protobuf:"fixed32,2,opt,name=desat" json:"desat,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetSceneObjectTintAndDesat) Reset() {
	*x = CUserMsg_ParticleManager_SetSceneObjectTintAndDesat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetSceneObjectTintAndDesat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetSceneObjectTintAndDesat) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetSceneObjectTintAndDesat) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetSceneObjectTintAndDesat.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetSceneObjectTintAndDesat) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 23}
}

func (x *CUserMsg_ParticleManager_SetSceneObjectTintAndDesat) GetTint() uint32 {
	if x != nil && x.Tint != nil {
		return *x.Tint
	}
	return 0
}

func (x *CUserMsg_ParticleManager_SetSceneObjectTintAndDesat) GetDesat() float32 {
	if x != nil && x.Desat != nil {
		return *x.Desat
	}
	return 0
}

type CUserMsg_ParticleManager_ParticleSkipToTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkipToTime *float32 `protobuf:"fixed32,1,opt,name=skip_to_time,json=skipToTime" json:"skip_to_time,omitempty"`
}

func (x *CUserMsg_ParticleManager_ParticleSkipToTime) Reset() {
	*x = CUserMsg_ParticleManager_ParticleSkipToTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_ParticleSkipToTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_ParticleSkipToTime) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_ParticleSkipToTime) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_ParticleSkipToTime.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_ParticleSkipToTime) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 24}
}

func (x *CUserMsg_ParticleManager_ParticleSkipToTime) GetSkipToTime() float32 {
	if x != nil && x.SkipToTime != nil {
		return *x.SkipToTime
	}
	return 0
}

type CUserMsg_ParticleManager_ParticleCanFreeze struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanFreeze *bool `protobuf:"varint,1,opt,name=can_freeze,json=canFreeze" json:"can_freeze,omitempty"`
}

func (x *CUserMsg_ParticleManager_ParticleCanFreeze) Reset() {
	*x = CUserMsg_ParticleManager_ParticleCanFreeze{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_ParticleCanFreeze) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_ParticleCanFreeze) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_ParticleCanFreeze) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_ParticleCanFreeze.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_ParticleCanFreeze) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 25}
}

func (x *CUserMsg_ParticleManager_ParticleCanFreeze) GetCanFreeze() bool {
	if x != nil && x.CanFreeze != nil {
		return *x.CanFreeze
	}
	return false
}

type CUserMsg_ParticleManager_ParticleFreezeTransitionOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreezeTransitionOverride *float32 `protobuf:"fixed32,1,opt,name=freeze_transition_override,json=freezeTransitionOverride" json:"freeze_transition_override,omitempty"`
}

func (x *CUserMsg_ParticleManager_ParticleFreezeTransitionOverride) Reset() {
	*x = CUserMsg_ParticleManager_ParticleFreezeTransitionOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_ParticleFreezeTransitionOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_ParticleFreezeTransitionOverride) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_ParticleFreezeTransitionOverride) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_ParticleFreezeTransitionOverride.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_ParticleFreezeTransitionOverride) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 26}
}

func (x *CUserMsg_ParticleManager_ParticleFreezeTransitionOverride) GetFreezeTransitionOverride() float32 {
	if x != nil && x.FreezeTransitionOverride != nil {
		return *x.FreezeTransitionOverride
	}
	return 0
}

type CUserMsg_ParticleManager_FreezeParticleInvolving struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetFrozen          *bool    `protobuf:"varint,1,opt,name=set_frozen,json=setFrozen" json:"set_frozen,omitempty"`
	TransitionDuration *float32 `protobuf:"fixed32,2,opt,name=transition_duration,json=transitionDuration" json:"transition_duration,omitempty"`
	EntityHandle       *uint32  `protobuf:"varint,3,opt,name=entity_handle,json=entityHandle,def=16777215" json:"entity_handle,omitempty"`
}

// Default values for CUserMsg_ParticleManager_FreezeParticleInvolving fields.
const (
	Default_CUserMsg_ParticleManager_FreezeParticleInvolving_EntityHandle = uint32(16777215)
)

func (x *CUserMsg_ParticleManager_FreezeParticleInvolving) Reset() {
	*x = CUserMsg_ParticleManager_FreezeParticleInvolving{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_FreezeParticleInvolving) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_FreezeParticleInvolving) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_FreezeParticleInvolving) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_FreezeParticleInvolving.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_FreezeParticleInvolving) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 27}
}

func (x *CUserMsg_ParticleManager_FreezeParticleInvolving) GetSetFrozen() bool {
	if x != nil && x.SetFrozen != nil {
		return *x.SetFrozen
	}
	return false
}

func (x *CUserMsg_ParticleManager_FreezeParticleInvolving) GetTransitionDuration() float32 {
	if x != nil && x.TransitionDuration != nil {
		return *x.TransitionDuration
	}
	return 0
}

func (x *CUserMsg_ParticleManager_FreezeParticleInvolving) GetEntityHandle() uint32 {
	if x != nil && x.EntityHandle != nil {
		return *x.EntityHandle
	}
	return Default_CUserMsg_ParticleManager_FreezeParticleInvolving_EntityHandle
}

type CUserMsg_ParticleManager_SetParticleNamedValueContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValues     []*CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue     `protobuf:"bytes,1,rep,name=float_values,json=floatValues" json:"float_values,omitempty"`
	VectorValues    []*CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue    `protobuf:"bytes,2,rep,name=vector_values,json=vectorValues" json:"vector_values,omitempty"`
	TransformValues []*CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue `protobuf:"bytes,3,rep,name=transform_values,json=transformValues" json:"transform_values,omitempty"`
	EhandleValues   []*CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext        `protobuf:"bytes,4,rep,name=ehandle_values,json=ehandleValues" json:"ehandle_values,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext) Reset() {
	*x = CUserMsg_ParticleManager_SetParticleNamedValueContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetParticleNamedValueContext) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetParticleNamedValueContext.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetParticleNamedValueContext) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 28}
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext) GetFloatValues() []*CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue {
	if x != nil {
		return x.FloatValues
	}
	return nil
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext) GetVectorValues() []*CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue {
	if x != nil {
		return x.VectorValues
	}
	return nil
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext) GetTransformValues() []*CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue {
	if x != nil {
		return x.TransformValues
	}
	return nil
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext) GetEhandleValues() []*CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext {
	if x != nil {
		return x.EhandleValues
	}
	return nil
}

type CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueNameHash *uint32  `protobuf:"varint,1,opt,name=value_name_hash,json=valueNameHash" json:"value_name_hash,omitempty"`
	Value         *float32 `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue) Reset() {
	*x = CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 28, 0}
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue) GetValueNameHash() uint32 {
	if x != nil && x.ValueNameHash != nil {
		return *x.ValueNameHash
	}
	return 0
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue) GetValue() float32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueNameHash *uint32     `protobuf:"varint,1,opt,name=value_name_hash,json=valueNameHash" json:"value_name_hash,omitempty"`
	Value         *CMsgVector `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue) Reset() {
	*x = CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 28, 1}
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue) GetValueNameHash() uint32 {
	if x != nil && x.ValueNameHash != nil {
		return *x.ValueNameHash
	}
	return 0
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue) GetValue() *CMsgVector {
	if x != nil {
		return x.Value
	}
	return nil
}

type CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueNameHash *uint32     `protobuf:"varint,1,opt,name=value_name_hash,json=valueNameHash" json:"value_name_hash,omitempty"`
	Angles        *CMsgQAngle `protobuf:"bytes,2,opt,name=angles" json:"angles,omitempty"`
	Translation   *CMsgVector `protobuf:"bytes,3,opt,name=translation" json:"translation,omitempty"`
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue) Reset() {
	*x = CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 28, 2}
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue) GetValueNameHash() uint32 {
	if x != nil && x.ValueNameHash != nil {
		return *x.ValueNameHash
	}
	return 0
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue) GetAngles() *CMsgQAngle {
	if x != nil {
		return x.Angles
	}
	return nil
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue) GetTranslation() *CMsgVector {
	if x != nil {
		return x.Translation
	}
	return nil
}

type CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueNameHash *uint32 `protobuf:"varint,1,opt,name=value_name_hash,json=valueNameHash" json:"value_name_hash,omitempty"`
	EntIndex      *uint32 `protobuf:"varint,2,opt,name=ent_index,json=entIndex,def=16777215" json:"ent_index,omitempty"`
}

// Default values for CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext fields.
const (
	Default_CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext_EntIndex = uint32(16777215)
)

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext) Reset() {
	*x = CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext) ProtoMessage() {}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext.ProtoReflect.Descriptor instead.
func (*CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{36, 28, 3}
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext) GetValueNameHash() uint32 {
	if x != nil && x.ValueNameHash != nil {
		return *x.ValueNameHash
	}
	return 0
}

func (x *CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext) GetEntIndex() uint32 {
	if x != nil && x.EntIndex != nil {
		return *x.EntIndex
	}
	return Default_CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext_EntIndex
}

type CUserMessageCommandQueueStateCommandQueueInfoT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandsQueued          *uint32 `protobuf:"varint,1,opt,name=commands_queued,json=commandsQueued" json:"commands_queued,omitempty"`
	CommandQueueDesiredSize *uint32 `protobuf:"varint,2,opt,name=command_queue_desired_size,json=commandQueueDesiredSize" json:"command_queue_desired_size,omitempty"`
	StarvedCommandTicks     *uint32 `protobuf:"varint,3,opt,name=starved_command_ticks,json=starvedCommandTicks" json:"starved_command_ticks,omitempty"`
	TimeDilationPercent     *int32  `protobuf:"varint,4,opt,name=time_dilation_percent,json=timeDilationPercent" json:"time_dilation_percent,omitempty"`
}

func (x *CUserMessageCommandQueueStateCommandQueueInfoT) Reset() {
	*x = CUserMessageCommandQueueStateCommandQueueInfoT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageCommandQueueStateCommandQueueInfoT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageCommandQueueStateCommandQueueInfoT) ProtoMessage() {}

func (x *CUserMessageCommandQueueStateCommandQueueInfoT) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageCommandQueueStateCommandQueueInfoT.ProtoReflect.Descriptor instead.
func (*CUserMessageCommandQueueStateCommandQueueInfoT) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{42, 0}
}

func (x *CUserMessageCommandQueueStateCommandQueueInfoT) GetCommandsQueued() uint32 {
	if x != nil && x.CommandsQueued != nil {
		return *x.CommandsQueued
	}
	return 0
}

func (x *CUserMessageCommandQueueStateCommandQueueInfoT) GetCommandQueueDesiredSize() uint32 {
	if x != nil && x.CommandQueueDesiredSize != nil {
		return *x.CommandQueueDesiredSize
	}
	return 0
}

func (x *CUserMessageCommandQueueStateCommandQueueInfoT) GetStarvedCommandTicks() uint32 {
	if x != nil && x.StarvedCommandTicks != nil {
		return *x.StarvedCommandTicks
	}
	return 0
}

func (x *CUserMessageCommandQueueStateCommandQueueInfoT) GetTimeDilationPercent() int32 {
	if x != nil && x.TimeDilationPercent != nil {
		return *x.TimeDilationPercent
	}
	return 0
}

type CUserMessage_UtilMsg_Response_ItemDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Hash  *int32  `protobuf:"varint,2,opt,name=hash" json:"hash,omitempty"`
	Crc   *int32  `protobuf:"varint,3,opt,name=crc" json:"crc,omitempty"`
	Name  *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (x *CUserMessage_UtilMsg_Response_ItemDetail) Reset() {
	*x = CUserMessage_UtilMsg_Response_ItemDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessage_UtilMsg_Response_ItemDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessage_UtilMsg_Response_ItemDetail) ProtoMessage() {}

func (x *CUserMessage_UtilMsg_Response_ItemDetail) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessage_UtilMsg_Response_ItemDetail.ProtoReflect.Descriptor instead.
func (*CUserMessage_UtilMsg_Response_ItemDetail) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{48, 0}
}

func (x *CUserMessage_UtilMsg_Response_ItemDetail) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CUserMessage_UtilMsg_Response_ItemDetail) GetHash() int32 {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return 0
}

func (x *CUserMessage_UtilMsg_Response_ItemDetail) GetCrc() int32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

func (x *CUserMessage_UtilMsg_Response_ItemDetail) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CUserMessage_DllStatus_CVDiagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Extended    *uint32 `protobuf:"varint,2,opt,name=extended" json:"extended,omitempty"`
	Value       *uint64 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	StringValue *string `protobuf:"bytes,4,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
}

func (x *CUserMessage_DllStatus_CVDiagnostic) Reset() {
	*x = CUserMessage_DllStatus_CVDiagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessage_DllStatus_CVDiagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessage_DllStatus_CVDiagnostic) ProtoMessage() {}

func (x *CUserMessage_DllStatus_CVDiagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessage_DllStatus_CVDiagnostic.ProtoReflect.Descriptor instead.
func (*CUserMessage_DllStatus_CVDiagnostic) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{49, 0}
}

func (x *CUserMessage_DllStatus_CVDiagnostic) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CUserMessage_DllStatus_CVDiagnostic) GetExtended() uint32 {
	if x != nil && x.Extended != nil {
		return *x.Extended
	}
	return 0
}

func (x *CUserMessage_DllStatus_CVDiagnostic) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CUserMessage_DllStatus_CVDiagnostic) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

type CUserMessage_DllStatus_CModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAddr  *uint64 `protobuf:"varint,1,opt,name=base_addr,json=baseAddr" json:"base_addr,omitempty"`
	Name      *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Size      *uint32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Timestamp *uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *CUserMessage_DllStatus_CModule) Reset() {
	*x = CUserMessage_DllStatus_CModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessage_DllStatus_CModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessage_DllStatus_CModule) ProtoMessage() {}

func (x *CUserMessage_DllStatus_CModule) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessage_DllStatus_CModule.ProtoReflect.Descriptor instead.
func (*CUserMessage_DllStatus_CModule) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{49, 1}
}

func (x *CUserMessage_DllStatus_CModule) GetBaseAddr() uint64 {
	if x != nil && x.BaseAddr != nil {
		return *x.BaseAddr
	}
	return 0
}

func (x *CUserMessage_DllStatus_CModule) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CUserMessage_DllStatus_CModule) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *CUserMessage_DllStatus_CModule) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CUserMessage_Inventory_Response_InventoryDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      *int32  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Primary    *int64  `protobuf:"varint,2,opt,name=primary" json:"primary,omitempty"`
	Offset     *int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	First      *int64  `protobuf:"varint,4,opt,name=first" json:"first,omitempty"`
	Base       *int64  `protobuf:"varint,5,opt,name=base" json:"base,omitempty"`
	Name       *string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	BaseName   *string `protobuf:"bytes,7,opt,name=base_name,json=baseName" json:"base_name,omitempty"`
	BaseDetail *int32  `protobuf:"varint,8,opt,name=base_detail,json=baseDetail" json:"base_detail,omitempty"`
	BaseTime   *int32  `protobuf:"varint,9,opt,name=base_time,json=baseTime" json:"base_time,omitempty"`
	BaseHash   *int32  `protobuf:"varint,10,opt,name=base_hash,json=baseHash" json:"base_hash,omitempty"`
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) Reset() {
	*x = CUserMessage_Inventory_Response_InventoryDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessage_Inventory_Response_InventoryDetail) ProtoMessage() {}

func (x *CUserMessage_Inventory_Response_InventoryDetail) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessage_Inventory_Response_InventoryDetail.ProtoReflect.Descriptor instead.
func (*CUserMessage_Inventory_Response_InventoryDetail) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{51, 0}
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) GetPrimary() int64 {
	if x != nil && x.Primary != nil {
		return *x.Primary
	}
	return 0
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) GetFirst() int64 {
	if x != nil && x.First != nil {
		return *x.First
	}
	return 0
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) GetBase() int64 {
	if x != nil && x.Base != nil {
		return *x.Base
	}
	return 0
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) GetBaseName() string {
	if x != nil && x.BaseName != nil {
		return *x.BaseName
	}
	return ""
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) GetBaseDetail() int32 {
	if x != nil && x.BaseDetail != nil {
		return *x.BaseDetail
	}
	return 0
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) GetBaseTime() int32 {
	if x != nil && x.BaseTime != nil {
		return *x.BaseTime
	}
	return 0
}

func (x *CUserMessage_Inventory_Response_InventoryDetail) GetBaseHash() int32 {
	if x != nil && x.BaseHash != nil {
		return *x.BaseHash
	}
	return 0
}

type CUserMessageRequestDiagnostic_Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     *int32  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Offset    *int64  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Param     *int32  `protobuf:"varint,3,opt,name=param" json:"param,omitempty"`
	Length    *int32  `protobuf:"varint,4,opt,name=length" json:"length,omitempty"`
	Type      *int32  `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
	Base      *int64  `protobuf:"varint,6,opt,name=base" json:"base,omitempty"`
	Range     *int64  `protobuf:"varint,7,opt,name=range" json:"range,omitempty"`
	Extent    *int64  `protobuf:"varint,8,opt,name=extent" json:"extent,omitempty"`
	Detail    *int64  `protobuf:"varint,9,opt,name=detail" json:"detail,omitempty"`
	Name      *string `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	Alias     *string `protobuf:"bytes,11,opt,name=alias" json:"alias,omitempty"`
	Vardetail []byte  `protobuf:"bytes,12,opt,name=vardetail" json:"vardetail,omitempty"`
	Context   *int32  `protobuf:"varint,13,opt,name=context" json:"context,omitempty"`
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) Reset() {
	*x = CUserMessageRequestDiagnostic_Diagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessageRequestDiagnostic_Diagnostic) ProtoMessage() {}

func (x *CUserMessageRequestDiagnostic_Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessageRequestDiagnostic_Diagnostic.ProtoReflect.Descriptor instead.
func (*CUserMessageRequestDiagnostic_Diagnostic) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{52, 0}
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetParam() int32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetLength() int32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetBase() int64 {
	if x != nil && x.Base != nil {
		return *x.Base
	}
	return 0
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetRange() int64 {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return 0
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetExtent() int64 {
	if x != nil && x.Extent != nil {
		return *x.Extent
	}
	return 0
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetDetail() int64 {
	if x != nil && x.Detail != nil {
		return *x.Detail
	}
	return 0
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetVardetail() []byte {
	if x != nil {
		return x.Vardetail
	}
	return nil
}

func (x *CUserMessageRequestDiagnostic_Diagnostic) GetContext() int32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

type CUserMessage_Diagnostic_Response_Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   *int32  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Offset  *int64  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Param   *int32  `protobuf:"varint,3,opt,name=param" json:"param,omitempty"`
	Length  *int32  `protobuf:"varint,4,opt,name=length" json:"length,omitempty"`
	Detail  []byte  `protobuf:"bytes,5,opt,name=detail" json:"detail,omitempty"`
	Base    *int64  `protobuf:"varint,6,opt,name=base" json:"base,omitempty"`
	Range   *int64  `protobuf:"varint,7,opt,name=range" json:"range,omitempty"`
	Type    *int32  `protobuf:"varint,8,opt,name=type" json:"type,omitempty"`
	Name    *string `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	Alias   *string `protobuf:"bytes,11,opt,name=alias" json:"alias,omitempty"`
	Backup  []byte  `protobuf:"bytes,12,opt,name=backup" json:"backup,omitempty"`
	Context *int32  `protobuf:"varint,13,opt,name=context" json:"context,omitempty"`
	Control *int64  `protobuf:"varint,14,opt,name=control" json:"control,omitempty"`
	Augment *int64  `protobuf:"varint,15,opt,name=augment" json:"augment,omitempty"`
	Placebo *int64  `protobuf:"varint,16,opt,name=placebo" json:"placebo,omitempty"`
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) Reset() {
	*x = CUserMessage_Diagnostic_Response_Diagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_usermessages_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserMessage_Diagnostic_Response_Diagnostic) ProtoMessage() {}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_s2_usermessages_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserMessage_Diagnostic_Response_Diagnostic.ProtoReflect.Descriptor instead.
func (*CUserMessage_Diagnostic_Response_Diagnostic) Descriptor() ([]byte, []int) {
	return file_s2_usermessages_proto_rawDescGZIP(), []int{53, 0}
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetParam() int32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetLength() int32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetDetail() []byte {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetBase() int64 {
	if x != nil && x.Base != nil {
		return *x.Base
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetRange() int64 {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetBackup() []byte {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetContext() int32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetControl() int64 {
	if x != nil && x.Control != nil {
		return *x.Control
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetAugment() int64 {
	if x != nil && x.Augment != nil {
		return *x.Augment
	}
	return 0
}

func (x *CUserMessage_Diagnostic_Response_Diagnostic) GetPlacebo() int64 {
	if x != nil && x.Placebo != nil {
		return *x.Placebo
	}
	return 0
}

var File_s2_usermessages_proto protoreflect.FileDescriptor

var file_s2_usermessages_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x1a, 0x19, 0x73, 0x32, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a,
	0x1c, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x8c, 0x01, 0x0a, 0x18, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x09, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x92,
	0x01, 0x0a, 0x1e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x9b, 0x01, 0x0a, 0x23, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x38, 0x0a, 0x1c, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x1c,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69,
	0x6e, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x62, 0x6c,
	0x65, 0x6e, 0x64, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x22, 0x77, 0x0a, 0x10, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x11,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x6b,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x72, 0x12, 0x52, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x12, 0x53, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x6b, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x13, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x61, 0x79, 0x54, 0x65, 0x78,
	0x74, 0x32, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x34,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x34, 0x22, 0xac,
	0x01, 0x0a, 0x12, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x75, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a,
	0x13, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x75, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f,
	0x0a, 0x13, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0x17, 0x0a, 0x15, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x48, 0x55, 0x44,
	0x22, 0x49, 0x0a, 0x15, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x9c, 0x01, 0x0a, 0x1a,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7c, 0x0a, 0x15, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61,
	0x6d, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x08, 0x62, 0x61, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x54, 0x0a, 0x12, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x62, 0x0a, 0x1a, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x61, 0x79, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xda,
	0x01, 0x0a, 0x17, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x16, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x69, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x31, 0x0a, 0x16, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x6d, 0x6d, 0x6f, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x6d, 0x6d, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d,
	0x6d, 0x6f, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1e, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x6d, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x6e, 0x75, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x96, 0x01, 0x0a, 0x16,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x5b, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e,
	0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x73, 0x32, 0x2e, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x09,
	0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x22, 0x70, 0x0a, 0x18, 0x43, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x4a, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x12, 0x54, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x43, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x43, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x22,
	0x9a, 0x01, 0x0a, 0x1d, 0x43, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x63, 0x61, 0x6c,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x65, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77,
	0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x73,
	0x67, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x22, 0xc5, 0x01, 0x0a,
	0x1c, 0x43, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a,
	0x07, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x22, 0xd8, 0x02, 0x0a, 0x15, 0x43, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x12, 0x4d,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x62, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x69, 0x63, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x22,
	0xd7, 0x01, 0x0a, 0x16, 0x43, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x05, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x73, 0x32, 0x2e, 0x43, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x22, 0xe8, 0x02, 0x0a, 0x1c, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x6e, 0x52, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x6e, 0x1a, 0x7d, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x44, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x45, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x4d, 0x0a, 0x18, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x73, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x3a, 0x22, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x8e, 0x01, 0x0a,
	0x16, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x7b, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x7e, 0x0a, 0x10, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x1a, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e,
	0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x52, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x8e,
	0x01, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x66, 0x77, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x77, 0x64, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x52, 0x11, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x77, 0x64, 0x12,
	0x97, 0x01, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c,
	0x45, 0x54, 0x45, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x18, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x8e, 0x01, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x14, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x55, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x1b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x77, 0x52, 0x18, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x77, 0x12, 0x98, 0x01, 0x0a, 0x1a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x12, 0xa7, 0x01, 0x0a, 0x1f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x8e, 0x01, 0x0a,
	0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x01,
	0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x57, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x18, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x11, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x9f, 0x01, 0x0a,
	0x1d, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x77, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x46, 0x6f, 0x57, 0x52, 0x19, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x77, 0x12, 0x8f,
	0x01, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x14, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x98, 0x01, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x17, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x15,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x13, 0x73, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x1d, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x19, 0x73, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0xa3, 0x01, 0x0a, 0x1f,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x61, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x44, 0x65, 0x73, 0x61, 0x74, 0x52, 0x1a, 0x73, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x61,
	0x74, 0x12, 0x8e, 0x01, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x14, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x6b, 0x69, 0x70, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x85,
	0x01, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x6e, 0x46, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x6e,
	0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e,
	0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x14, 0x73, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x97, 0x01, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0xb3, 0x01, 0x0a, 0x23, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e,
	0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x20,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x12, 0x97, 0x01, 0x0a, 0x19, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e,
	0x67, 0x52, 0x17, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x0a, 0x14, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x1a, 0xac, 0x03, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x08, 0x31,
	0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x35, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x1b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x08, 0x31, 0x36, 0x37, 0x37,
	0x37, 0x32, 0x31, 0x35, 0x52, 0x18, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x31,
	0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61,
	0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x63, 0x61, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0x42, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f,
	0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x6c, 0x79, 0x1a, 0x7a, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e,
	0x67, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x69, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x08, 0x31, 0x36, 0x37, 0x37, 0x37,
	0x32, 0x31, 0x35, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x1a, 0xc7, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x08, 0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x35, 0x52, 0x0c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x49,
	0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x63, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x63, 0x61, 0x70, 0x1a, 0x91, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x4f,
	0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x92, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x46, 0x77, 0x64, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x1a, 0x89, 0x03, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x60, 0x0a, 0x10,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x45,
	0x0a, 0x02, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77,
	0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x02, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74,
	0x1a, 0xa5, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x90, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77,
	0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf1, 0x01, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x0c, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67,
	0x6c, 0x65, 0x52, 0x0b, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a,
	0xf5, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x08, 0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x35, 0x52, 0x0c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x11, 0x66, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x66, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x0f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0d, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x3b, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x77, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x77, 0x1a,
	0x9b, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x2d,
	0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x08, 0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x35, 0x52,
	0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x98, 0x01,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x08, 0x31,
	0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x35, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x93, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x57, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x66, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x77, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x6f, 0x77, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x1a, 0x38,
	0x0a, 0x19, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x57, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x77, 0x1a, 0x5a, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x63, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x25, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x1a, 0x5f, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x3a, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x46, 0x0a,
	0x1a, 0x53, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x69, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x73, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x64, 0x65, 0x73, 0x61, 0x74, 0x1a, 0x36, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x32, 0x0a,
	0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x6e, 0x46, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x1a, 0x60, 0x0a, 0x20, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x66, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x1a, 0x98, 0x01, 0x0a, 0x17, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2f,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x08, 0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x35,
	0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0xb8,
	0x09, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x95, 0x01, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x0d, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x76, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x65, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x45, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0d, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x51, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xe7,
	0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x4d, 0x0a, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5f, 0x0a, 0x0e, 0x45, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x25, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x08, 0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x35, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2a, 0x05, 0x08, 0x64, 0x10, 0xca, 0x01,
	0x22, 0x2e, 0x0a, 0x11, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x48, 0x75, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x4d, 0x0a, 0x18, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xb9, 0x01, 0x0a, 0x1f, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x61, 0x70, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x75,
	0x6c, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x6d,
	0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x20,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x70, 0x74,
	0x69, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22,
	0x58, 0x0a, 0x1f, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x6e, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb9, 0x03, 0x0a, 0x1d, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x8b, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xe4,
	0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x74, 0x61, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x74,
	0x61, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x73, 0x73, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x73, 0x73, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64, 0x22, 0x3c, 0x0a, 0x1b,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x20, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x67, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5e, 0x0a, 0x1c, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6c,
	0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x74, 0x69, 0x6c, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75, 0x74, 0x69,
	0x6c, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x74, 0x69, 0x6c, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x75, 0x74, 0x69, 0x6c, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x74, 0x69, 0x6c,
	0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75, 0x74, 0x69, 0x6c, 0x33, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x74, 0x69, 0x6c, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75,
	0x74, 0x69, 0x6c, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x74, 0x69, 0x6c, 0x35, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x75, 0x74, 0x69, 0x6c, 0x35, 0x22, 0xbb, 0x04, 0x0a, 0x1d, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x55, 0x74, 0x69, 0x6c,
	0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x63, 0x72, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x72, 0x63, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x63, 0x72, 0x63,
	0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x63, 0x50, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x32, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x72, 0x63, 0x50, 0x61, 0x72, 0x74, 0x32, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x75, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x55, 0x74, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x69, 0x74, 0x65,
	0x6d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x1a, 0x5c, 0x0a, 0x0a, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x63, 0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x05, 0x0a, 0x16, 0x43, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x44, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x73, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x44, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43,
	0x56, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x63, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x44, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x73, 0x0a,
	0x0c, 0x43, 0x56, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x6c, 0x0a, 0x07, 0x43, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x6e, 0x0a, 0x1c, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xdf, 0x07, 0x0a, 0x1f, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x03, 0x63, 0x72, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x73, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x72, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x7c, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x32, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x32, 0x12, 0x7e, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x33, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x33, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0x8f, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x22, 0xd1, 0x03, 0x0a, 0x1d, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x12, 0x75, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xb8, 0x02, 0x0a, 0x0a,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x76, 0x61, 0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa1, 0x05, 0x0a, 0x20, 0x43, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x0b, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x73, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a,
	0xe8, 0x02, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x1a, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x31, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x32, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x32, 0x2a, 0xee, 0x08, 0x0a, 0x11, 0x45, 0x42, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4d, 0x5f, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4d, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4d, 0x5f, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x67,
	0x12, 0x17, 0x0a, 0x13, 0x55, 0x4d, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x10, 0x68, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4d, 0x5f,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x10, 0x69, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4d, 0x5f, 0x46, 0x61, 0x64, 0x65, 0x10, 0x6a, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x4d, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x10,
	0x6b, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4d, 0x5f, 0x48, 0x75, 0x64, 0x4d, 0x73, 0x67, 0x10, 0x6e,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4d, 0x5f, 0x48, 0x75, 0x64, 0x54, 0x65, 0x78, 0x74, 0x10, 0x6f,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4d, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x65,
	0x78, 0x74, 0x10, 0x71, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4d, 0x5f,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x48, 0x55, 0x44, 0x10, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4d,
	0x5f, 0x52, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x10, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4d, 0x5f,
	0x53, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x10, 0x75, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4d, 0x5f,
	0x53, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x32, 0x10, 0x76, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4d,
	0x5f, 0x53, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10,
	0x77, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4d, 0x5f, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x10, 0x78, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4d, 0x5f, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x72, 0x10, 0x79,
	0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4d, 0x5f, 0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x6b,
	0x65, 0x10, 0x7a, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4d, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x73,
	0x67, 0x10, 0x7c, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4d, 0x5f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x69, 0x6c, 0x74, 0x10, 0x7d, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x4d, 0x5f, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x10, 0x80, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x4d, 0x5f,
	0x53, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x82, 0x01, 0x12, 0x12, 0x0a, 0x0d,
	0x55, 0x4d, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x10, 0x83, 0x01,
	0x12, 0x12, 0x0a, 0x0d, 0x55, 0x4d, 0x5f, 0x41, 0x6d, 0x6d, 0x6f, 0x44, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x10, 0x84, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x55, 0x4d, 0x5f, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x65, 0x6e, 0x75, 0x10, 0x86, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x55, 0x4d, 0x5f, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x10, 0x87, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x4d,
	0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x8e, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x55,
	0x4d, 0x5f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x8f, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x55, 0x4d, 0x5f, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x10, 0x90, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x55, 0x4d, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x10, 0x91, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x55, 0x4d, 0x5f, 0x48, 0x75, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x92, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x55, 0x4d, 0x5f, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x94,
	0x01, 0x12, 0x17, 0x0a, 0x12, 0x55, 0x4d, 0x5f, 0x41, 0x6e, 0x69, 0x6d, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x95, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x4d,
	0x5f, 0x48, 0x61, 0x70, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50,
	0x75, 0x6c, 0x73, 0x65, 0x10, 0x96, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x4d, 0x5f, 0x48, 0x61,
	0x70, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x10, 0x97, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x4d, 0x5f, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x98, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x55, 0x4d, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x73, 0x73,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x10, 0x99, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x55, 0x4d,
	0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x10, 0x9a, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x4d, 0x5f, 0x4c, 0x61, 0x67, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x9b,
	0x01, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x4d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x9c, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x55,
	0x4d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x9d, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x4d, 0x5f, 0x55, 0x74, 0x69,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x9e, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x4d, 0x5f, 0x44, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9f, 0x01, 0x12, 0x18, 0x0a,
	0x13, 0x55, 0x4d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x10, 0xa0, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x4d, 0x5f, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xa1, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x4d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x10, 0xa2, 0x01, 0x12, 0x1a, 0x0a,
	0x15, 0x55, 0x4d, 0x5f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa3, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x55, 0x4d, 0x5f,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x10, 0xa4, 0x01,
	0x12, 0x10, 0x0a, 0x0b, 0x55, 0x4d, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10,
	0xc8, 0x01, 0x2a, 0x94, 0x01, 0x0a, 0x13, 0x45, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x4d,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x4a, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x88, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x45, 0x4d, 0x5f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x10, 0x89, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x4d, 0x5f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x63, 0x61, 0x6c, 0x73, 0x10, 0x8a, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x45, 0x4d, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x10, 0x8b, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x45, 0x4d, 0x5f, 0x44, 0x6f, 0x53,
	0x70, 0x61, 0x72, 0x6b, 0x10, 0x8c, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x4d, 0x5f, 0x46, 0x69,
	0x78, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x8d, 0x01, 0x2a, 0x6f, 0x0a, 0x09, 0x65, 0x52, 0x6f,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x09, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x53, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x4a, 0x4f,
	0x49, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c,
	0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x54, 0x52, 0x4f, 0x10, 0x03, 0x2a, 0xf0, 0x0b, 0x0a, 0x10, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x12,
	0x26, 0x0a, 0x22, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x2e, 0x0a, 0x2a, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12,
	0x32, 0x0a, 0x2e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x10, 0x05,
	0x12, 0x2d, 0x0a, 0x29, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x06, 0x12,
	0x27, 0x0a, 0x23, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x10, 0x07, 0x12, 0x31, 0x0a, 0x2d, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f,
	0x49, 0x4e, 0x56, 0x4f, 0x4c, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41,
	0x53, 0x45, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x0a, 0x12, 0x2b, 0x0a,
	0x27, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x4f,
	0x55, 0x4c, 0x44, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e,
	0x10, 0x0c, 0x12, 0x3f, 0x0a, 0x3b, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x0d, 0x12, 0x36, 0x0a, 0x32, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x32, 0x0a, 0x2e, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x46,
	0x4f, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x49, 0x45, 0x53, 0x10, 0x0f, 0x12,
	0x28, 0x0a, 0x24, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x10, 0x12, 0x34, 0x0a, 0x30, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x48, 0x4f,
	0x55, 0x4c, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x4f, 0x57, 0x10, 0x11, 0x12,
	0x37, 0x0a, 0x33, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x12, 0x12, 0x3a, 0x0a, 0x36, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48,
	0x4f, 0x54, 0x10, 0x13, 0x12, 0x35, 0x0a, 0x31, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x14, 0x12, 0x3d, 0x0a, 0x39, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x49, 0x43, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x15, 0x12, 0x3f, 0x0a, 0x3b, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x49, 0x4e, 0x54, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x41, 0x54, 0x10, 0x16, 0x12, 0x2d, 0x0a, 0x29, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52,
	0x4f, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x10, 0x17, 0x12, 0x2c, 0x0a, 0x28, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x54,
	0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x18, 0x12, 0x2a, 0x0a, 0x26, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x5a, 0x45, 0x10, 0x19, 0x12, 0x37, 0x0a, 0x33, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x1a, 0x12, 0x30, 0x0a,
	0x2c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x1b, 0x12,
	0x3a, 0x0a, 0x36, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x1c, 0x12, 0x30, 0x0a, 0x2c, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4c, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x1d, 0x2a, 0x74, 0x0a,
	0x10, 0x45, 0x48, 0x61, 0x70, 0x74, 0x69, 0x63, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x52, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x50,
	0x54, 0x49, 0x43, 0x5f, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x52, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x50,
	0x54, 0x49, 0x43, 0x5f, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x52, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x41,
	0x50, 0x54, 0x49, 0x43, 0x5f, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x4f, 0x4e,
	0x47, 0x10, 0x02,
}

var (
	file_s2_usermessages_proto_rawDescOnce sync.Once
	file_s2_usermessages_proto_rawDescData = file_s2_usermessages_proto_rawDesc
)

func file_s2_usermessages_proto_rawDescGZIP() []byte {
	file_s2_usermessages_proto_rawDescOnce.Do(func() {
		file_s2_usermessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_s2_usermessages_proto_rawDescData)
	})
	return file_s2_usermessages_proto_rawDescData
}

var file_s2_usermessages_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_s2_usermessages_proto_msgTypes = make([]protoimpl.MessageInfo, 96)
var file_s2_usermessages_proto_goTypes = []interface{}{
	(EBaseUserMessages)(0),                                                              // 0: com.github.markus_wa.demoinfocs_golang.s2.EBaseUserMessages
	(EBaseEntityMessages)(0),                                                            // 1: com.github.markus_wa.demoinfocs_golang.s2.EBaseEntityMessages
	(ERollType)(0),                                                                      // 2: com.github.markus_wa.demoinfocs_golang.s2.eRollType
	(PARTICLE_MESSAGE)(0),                                                               // 3: com.github.markus_wa.demoinfocs_golang.s2.PARTICLE_MESSAGE
	(EHapticPulseType)(0),                                                               // 4: com.github.markus_wa.demoinfocs_golang.s2.EHapticPulseType
	(*CUserMessageAchievementEvent)(nil),                                                // 5: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageAchievementEvent
	(*CUserMessageCloseCaption)(nil),                                                    // 6: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCloseCaption
	(*CUserMessageCloseCaptionDirect)(nil),                                              // 7: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCloseCaptionDirect
	(*CUserMessageCloseCaptionPlaceholder)(nil),                                         // 8: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCloseCaptionPlaceholder
	(*CUserMessageCurrentTimescale)(nil),                                                // 9: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCurrentTimescale
	(*CUserMessageDesiredTimescale)(nil),                                                // 10: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageDesiredTimescale
	(*CUserMessageFade)(nil),                                                            // 11: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageFade
	(*CUserMessageShake)(nil),                                                           // 12: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageShake
	(*CUserMessageShakeDir)(nil),                                                        // 13: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageShakeDir
	(*CUserMessageWaterShake)(nil),                                                      // 14: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageWaterShake
	(*CUserMessageScreenTilt)(nil),                                                      // 15: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageScreenTilt
	(*CUserMessageSayText)(nil),                                                         // 16: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageSayText
	(*CUserMessageSayText2)(nil),                                                        // 17: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageSayText2
	(*CUserMessageHudMsg)(nil),                                                          // 18: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageHudMsg
	(*CUserMessageHudText)(nil),                                                         // 19: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageHudText
	(*CUserMessageTextMsg)(nil),                                                         // 20: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageTextMsg
	(*CUserMessageGameTitle)(nil),                                                       // 21: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageGameTitle
	(*CUserMessageResetHUD)(nil),                                                        // 22: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageResetHUD
	(*CUserMessageSendAudio)(nil),                                                       // 23: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageSendAudio
	(*CUserMessageAudioParameter)(nil),                                                  // 24: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageAudioParameter
	(*CUserMessageVoiceMask)(nil),                                                       // 25: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageVoiceMask
	(*CUserMessageRequestState)(nil),                                                    // 26: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageRequestState
	(*CUserMessageRumble)(nil),                                                          // 27: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageRumble
	(*CUserMessageSayTextChannel)(nil),                                                  // 28: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageSayTextChannel
	(*CUserMessageColoredText)(nil),                                                     // 29: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageColoredText
	(*CUserMessageItemPickup)(nil),                                                      // 30: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageItemPickup
	(*CUserMessageAmmoDenied)(nil),                                                      // 31: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageAmmoDenied
	(*CUserMessageShowMenu)(nil),                                                        // 32: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageShowMenu
	(*CUserMessageCreditsMsg)(nil),                                                      // 33: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCreditsMsg
	(*CEntityMessagePlayJingle)(nil),                                                    // 34: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessagePlayJingle
	(*CEntityMessageScreenOverlay)(nil),                                                 // 35: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessageScreenOverlay
	(*CEntityMessageRemoveAllDecals)(nil),                                               // 36: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessageRemoveAllDecals
	(*CEntityMessagePropagateForce)(nil),                                                // 37: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessagePropagateForce
	(*CEntityMessageDoSpark)(nil),                                                       // 38: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessageDoSpark
	(*CEntityMessageFixAngle)(nil),                                                      // 39: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessageFixAngle
	(*CUserMessageCameraTransition)(nil),                                                // 40: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCameraTransition
	(*CUserMsg_ParticleManager)(nil),                                                    // 41: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager
	(*CUserMsg_HudError)(nil),                                                           // 42: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_HudError
	(*CUserMsg_CustomGameEvent)(nil),                                                    // 43: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_CustomGameEvent
	(*CUserMessageHapticsManagerPulse)(nil),                                             // 44: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageHapticsManagerPulse
	(*CUserMessageHapticsManagerEffect)(nil),                                            // 45: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageHapticsManagerEffect
	(*CUserMessageAnimStateGraphState)(nil),                                             // 46: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageAnimStateGraphState
	(*CUserMessageCommandQueueState)(nil),                                               // 47: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCommandQueueState
	(*CUserMessageUpdateCssClasses)(nil),                                                // 48: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageUpdateCssClasses
	(*CUserMessageServerFrameTime)(nil),                                                 // 49: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageServerFrameTime
	(*CUserMessageLagCompensationError)(nil),                                            // 50: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageLagCompensationError
	(*CUserMessageRequestDllStatus)(nil),                                                // 51: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageRequestDllStatus
	(*CUserMessageRequestUtilAction)(nil),                                               // 52: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageRequestUtilAction
	(*CUserMessage_UtilMsg_Response)(nil),                                               // 53: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_UtilMsg_Response
	(*CUserMessage_DllStatus)(nil),                                                      // 54: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_DllStatus
	(*CUserMessageRequestInventory)(nil),                                                // 55: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageRequestInventory
	(*CUserMessage_Inventory_Response)(nil),                                             // 56: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Inventory_Response
	(*CUserMessageRequestDiagnostic)(nil),                                               // 57: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageRequestDiagnostic
	(*CUserMessage_Diagnostic_Response)(nil),                                            // 58: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Diagnostic_Response
	(*CUserMessage_ExtraUserData)(nil),                                                  // 59: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_ExtraUserData
	(*CUserMessageCameraTransition_Transition_DataDriven)(nil),                          // 60: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCameraTransition.Transition_DataDriven
	(*CUserMsg_ParticleManager_ReleaseParticleIndex)(nil),                               // 61: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.ReleaseParticleIndex
	(*CUserMsg_ParticleManager_CreateParticle)(nil),                                     // 62: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.CreateParticle
	(*CUserMsg_ParticleManager_DestroyParticle)(nil),                                    // 63: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.DestroyParticle
	(*CUserMsg_ParticleManager_DestroyParticleInvolving)(nil),                           // 64: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.DestroyParticleInvolving
	(*CUserMsg_ParticleManager_DestroyParticleNamed)(nil),                               // 65: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.DestroyParticleNamed
	(*CUserMsg_ParticleManager_UpdateParticle_OBSOLETE)(nil),                            // 66: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticle_OBSOLETE
	(*CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE)(nil),                         // 67: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleFwd_OBSOLETE
	(*CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE)(nil),                      // 68: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleOrient_OBSOLETE
	(*CUserMsg_ParticleManager_UpdateParticleTransform)(nil),                            // 69: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleTransform
	(*CUserMsg_ParticleManager_UpdateParticleFallback)(nil),                             // 70: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleFallback
	(*CUserMsg_ParticleManager_UpdateParticleOffset)(nil),                               // 71: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleOffset
	(*CUserMsg_ParticleManager_UpdateParticleEnt)(nil),                                  // 72: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleEnt
	(*CUserMsg_ParticleManager_UpdateParticleSetFrozen)(nil),                            // 73: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleSetFrozen
	(*CUserMsg_ParticleManager_UpdateParticleShouldDraw)(nil),                           // 74: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleShouldDraw
	(*CUserMsg_ParticleManager_ChangeControlPointAttachment)(nil),                       // 75: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.ChangeControlPointAttachment
	(*CUserMsg_ParticleManager_UpdateEntityPosition)(nil),                               // 76: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateEntityPosition
	(*CUserMsg_ParticleManager_SetParticleFoWProperties)(nil),                           // 77: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleFoWProperties
	(*CUserMsg_ParticleManager_SetParticleShouldCheckFoW)(nil),                          // 78: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleShouldCheckFoW
	(*CUserMsg_ParticleManager_SetControlPointModel)(nil),                               // 79: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetControlPointModel
	(*CUserMsg_ParticleManager_SetControlPointSnapshot)(nil),                            // 80: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetControlPointSnapshot
	(*CUserMsg_ParticleManager_SetParticleText)(nil),                                    // 81: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleText
	(*CUserMsg_ParticleManager_SetTextureAttribute)(nil),                                // 82: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetTextureAttribute
	(*CUserMsg_ParticleManager_SetSceneObjectGenericFlag)(nil),                          // 83: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetSceneObjectGenericFlag
	(*CUserMsg_ParticleManager_SetSceneObjectTintAndDesat)(nil),                         // 84: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetSceneObjectTintAndDesat
	(*CUserMsg_ParticleManager_ParticleSkipToTime)(nil),                                 // 85: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.ParticleSkipToTime
	(*CUserMsg_ParticleManager_ParticleCanFreeze)(nil),                                  // 86: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.ParticleCanFreeze
	(*CUserMsg_ParticleManager_ParticleFreezeTransitionOverride)(nil),                   // 87: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.ParticleFreezeTransitionOverride
	(*CUserMsg_ParticleManager_FreezeParticleInvolving)(nil),                            // 88: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.FreezeParticleInvolving
	(*CUserMsg_ParticleManager_SetParticleNamedValueContext)(nil),                       // 89: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext
	(*CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue)(nil),     // 90: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.FloatContextValue
	(*CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue)(nil),    // 91: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.VectorContextValue
	(*CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue)(nil), // 92: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.TransformContextValue
	(*CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext)(nil),        // 93: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.EHandleContext
	(*CUserMessageCommandQueueStateCommandQueueInfoT)(nil),                              // 94: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCommandQueueState.command_queue_info_t
	(*CUserMessage_UtilMsg_Response_ItemDetail)(nil),                                    // 95: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_UtilMsg_Response.ItemDetail
	(*CUserMessage_DllStatus_CVDiagnostic)(nil),                                         // 96: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_DllStatus.CVDiagnostic
	(*CUserMessage_DllStatus_CModule)(nil),                                              // 97: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_DllStatus.CModule
	(*CUserMessage_Inventory_Response_InventoryDetail)(nil),                             // 98: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Inventory_Response.InventoryDetail
	(*CUserMessageRequestDiagnostic_Diagnostic)(nil),                                    // 99: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageRequestDiagnostic.Diagnostic
	(*CUserMessage_Diagnostic_Response_Diagnostic)(nil),                                 // 100: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Diagnostic_Response.Diagnostic
	(*CMsgVector)(nil),                                                                  // 101: com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	(*CEntityMsg)(nil),                                                                  // 102: com.github.markus_wa.demoinfocs_golang.s2.CEntityMsg
	(*CMsgQAngle)(nil),                                                                  // 103: com.github.markus_wa.demoinfocs_golang.s2.CMsgQAngle
	(*CMsgQuaternion)(nil),                                                              // 104: com.github.markus_wa.demoinfocs_golang.s2.CMsgQuaternion
}
var file_s2_usermessages_proto_depIdxs = []int32{
	12,  // 0: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageShakeDir.shake:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMessageShake
	101, // 1: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageShakeDir.direction:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	101, // 2: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageScreenTilt.angle:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	2,   // 3: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCreditsMsg.rolltype:type_name -> com.github.markus_wa.demoinfocs_golang.s2.eRollType
	102, // 4: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessagePlayJingle.entity_msg:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CEntityMsg
	102, // 5: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessageScreenOverlay.entity_msg:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CEntityMsg
	102, // 6: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessageRemoveAllDecals.entity_msg:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CEntityMsg
	101, // 7: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessagePropagateForce.impulse:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	102, // 8: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessagePropagateForce.entity_msg:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CEntityMsg
	101, // 9: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessageDoSpark.origin:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	102, // 10: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessageDoSpark.entity_msg:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CEntityMsg
	103, // 11: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessageFixAngle.angle:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgQAngle
	102, // 12: com.github.markus_wa.demoinfocs_golang.s2.CEntityMessageFixAngle.entity_msg:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CEntityMsg
	60,  // 13: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCameraTransition.params_data_driven:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCameraTransition.Transition_DataDriven
	3,   // 14: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.type:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PARTICLE_MESSAGE
	61,  // 15: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.release_particle_index:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.ReleaseParticleIndex
	62,  // 16: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.create_particle:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.CreateParticle
	63,  // 17: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.destroy_particle:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.DestroyParticle
	64,  // 18: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.destroy_particle_involving:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.DestroyParticleInvolving
	66,  // 19: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.update_particle:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticle_OBSOLETE
	67,  // 20: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.update_particle_fwd:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleFwd_OBSOLETE
	68,  // 21: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.update_particle_orient:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleOrient_OBSOLETE
	70,  // 22: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.update_particle_fallback:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleFallback
	71,  // 23: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.update_particle_offset:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleOffset
	72,  // 24: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.update_particle_ent:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleEnt
	74,  // 25: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.update_particle_should_draw:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleShouldDraw
	73,  // 26: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.update_particle_set_frozen:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleSetFrozen
	75,  // 27: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.change_control_point_attachment:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.ChangeControlPointAttachment
	76,  // 28: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.update_entity_position:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateEntityPosition
	77,  // 29: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.set_particle_fow_properties:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleFoWProperties
	81,  // 30: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.set_particle_text:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleText
	78,  // 31: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.set_particle_should_check_fow:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleShouldCheckFoW
	79,  // 32: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.set_control_point_model:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetControlPointModel
	80,  // 33: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.set_control_point_snapshot:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetControlPointSnapshot
	82,  // 34: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.set_texture_attribute:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetTextureAttribute
	83,  // 35: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.set_scene_object_generic_flag:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetSceneObjectGenericFlag
	84,  // 36: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.set_scene_object_tint_and_desat:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetSceneObjectTintAndDesat
	65,  // 37: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.destroy_particle_named:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.DestroyParticleNamed
	85,  // 38: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.particle_skip_to_time:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.ParticleSkipToTime
	86,  // 39: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.particle_can_freeze:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.ParticleCanFreeze
	89,  // 40: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.set_named_value_context:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext
	69,  // 41: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.update_particle_transform:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleTransform
	87,  // 42: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.particle_freeze_transition_override:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.ParticleFreezeTransitionOverride
	88,  // 43: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.freeze_particle_involving:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.FreezeParticleInvolving
	94,  // 44: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCommandQueueState.command_queue_info:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMessageCommandQueueState.command_queue_info_t
	95,  // 45: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_UtilMsg_Response.itemdetails:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_UtilMsg_Response.ItemDetail
	96,  // 46: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_DllStatus.diagnostics:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_DllStatus.CVDiagnostic
	97,  // 47: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_DllStatus.modules:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_DllStatus.CModule
	98,  // 48: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Inventory_Response.inventories:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Inventory_Response.InventoryDetail
	98,  // 49: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Inventory_Response.inventories2:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Inventory_Response.InventoryDetail
	98,  // 50: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Inventory_Response.inventories3:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Inventory_Response.InventoryDetail
	99,  // 51: com.github.markus_wa.demoinfocs_golang.s2.CUserMessageRequestDiagnostic.diagnostics:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMessageRequestDiagnostic.Diagnostic
	100, // 52: com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Diagnostic_Response.diagnostics:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMessage_Diagnostic_Response.Diagnostic
	101, // 53: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticle_OBSOLETE.position:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	101, // 54: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleFwd_OBSOLETE.forward:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	101, // 55: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleOrient_OBSOLETE.forward:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	101, // 56: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleOrient_OBSOLETE.deprecated_right:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	101, // 57: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleOrient_OBSOLETE.up:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	101, // 58: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleOrient_OBSOLETE.left:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	101, // 59: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleTransform.position:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	104, // 60: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleTransform.orientation:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgQuaternion
	101, // 61: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleFallback.position:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	101, // 62: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleOffset.origin_offset:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	103, // 63: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleOffset.angle_offset:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgQAngle
	101, // 64: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleEnt.fallback_position:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	101, // 65: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleEnt.offset_position:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	103, // 66: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateParticleEnt.offset_angles:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgQAngle
	101, // 67: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.UpdateEntityPosition.position:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	90,  // 68: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.float_values:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.FloatContextValue
	91,  // 69: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.vector_values:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.VectorContextValue
	92,  // 70: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.transform_values:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.TransformContextValue
	93,  // 71: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.ehandle_values:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.EHandleContext
	101, // 72: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.VectorContextValue.value:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	103, // 73: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.TransformContextValue.angles:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgQAngle
	101, // 74: com.github.markus_wa.demoinfocs_golang.s2.CUserMsg_ParticleManager.SetParticleNamedValueContext.TransformContextValue.translation:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgVector
	75,  // [75:75] is the sub-list for method output_type
	75,  // [75:75] is the sub-list for method input_type
	75,  // [75:75] is the sub-list for extension type_name
	75,  // [75:75] is the sub-list for extension extendee
	0,   // [0:75] is the sub-list for field type_name
}

func init() { file_s2_usermessages_proto_init() }
func file_s2_usermessages_proto_init() {
	if File_s2_usermessages_proto != nil {
		return
	}
	file_s2_networkbasetypes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_s2_usermessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageAchievementEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageCloseCaption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageCloseCaptionDirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageCloseCaptionPlaceholder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageCurrentTimescale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageDesiredTimescale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageFade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageShake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageShakeDir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageWaterShake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageScreenTilt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageSayText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageSayText2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageHudMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageHudText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageTextMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageGameTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageResetHUD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageSendAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageAudioParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageVoiceMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageRequestState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageRumble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageSayTextChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageColoredText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageItemPickup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageAmmoDenied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageShowMenu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageCreditsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEntityMessagePlayJingle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEntityMessageScreenOverlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEntityMessageRemoveAllDecals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEntityMessagePropagateForce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEntityMessageDoSpark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEntityMessageFixAngle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageCameraTransition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_HudError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_CustomGameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageHapticsManagerPulse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageHapticsManagerEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageAnimStateGraphState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageCommandQueueState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageUpdateCssClasses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageServerFrameTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageLagCompensationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageRequestDllStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageRequestUtilAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessage_UtilMsg_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessage_DllStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageRequestInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessage_Inventory_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageRequestDiagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessage_Diagnostic_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessage_ExtraUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageCameraTransition_Transition_DataDriven); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_ReleaseParticleIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_CreateParticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_DestroyParticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_DestroyParticleInvolving); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_DestroyParticleNamed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_UpdateParticle_OBSOLETE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_UpdateParticleFwd_OBSOLETE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_UpdateParticleOrient_OBSOLETE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_UpdateParticleTransform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_UpdateParticleFallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_UpdateParticleOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_UpdateParticleEnt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_UpdateParticleSetFrozen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_UpdateParticleShouldDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_ChangeControlPointAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_UpdateEntityPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetParticleFoWProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetParticleShouldCheckFoW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetControlPointModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetControlPointSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetParticleText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetTextureAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetSceneObjectGenericFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetSceneObjectTintAndDesat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_ParticleSkipToTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_ParticleCanFreeze); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_ParticleFreezeTransitionOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_FreezeParticleInvolving); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetParticleNamedValueContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetParticleNamedValueContext_FloatContextValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetParticleNamedValueContext_VectorContextValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetParticleNamedValueContext_TransformContextValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMsg_ParticleManager_SetParticleNamedValueContext_EHandleContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageCommandQueueStateCommandQueueInfoT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessage_UtilMsg_Response_ItemDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessage_DllStatus_CVDiagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessage_DllStatus_CModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessage_Inventory_Response_InventoryDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessageRequestDiagnostic_Diagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_usermessages_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserMessage_Diagnostic_Response_Diagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s2_usermessages_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   96,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_s2_usermessages_proto_goTypes,
		DependencyIndexes: file_s2_usermessages_proto_depIdxs,
		EnumInfos:         file_s2_usermessages_proto_enumTypes,
		MessageInfos:      file_s2_usermessages_proto_msgTypes,
	}.Build()
	File_s2_usermessages_proto = out.File
	file_s2_usermessages_proto_rawDesc = nil
	file_s2_usermessages_proto_goTypes = nil
	file_s2_usermessages_proto_depIdxs = nil
}
