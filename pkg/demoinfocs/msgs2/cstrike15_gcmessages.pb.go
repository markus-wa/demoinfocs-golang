// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: s2/cstrike15_gcmessages.proto

package msgs2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ECsgoGCMsg int32

const (
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Base                                  ECsgoGCMsg = 9100
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingStart                      ECsgoGCMsg = 9101
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingStop                       ECsgoGCMsg = 9102
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing          ECsgoGCMsg = 9103
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate            ECsgoGCMsg = 9104
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse  ECsgoGCMsg = 9106
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve           ECsgoGCMsg = 9107
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello             ECsgoGCMsg = 9109
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello             ECsgoGCMsg = 9110
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon           ECsgoGCMsg = 9112
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate      ECsgoGCMsg = 9117
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty      ECsgoGCMsg = 9118
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportPlayer                    ECsgoGCMsg = 9119
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportServer                    ECsgoGCMsg = 9120
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayer                   ECsgoGCMsg = 9121
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportResponse                  ECsgoGCMsg = 9122
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery              ECsgoGCMsg = 9123
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse      ECsgoGCMsg = 9124
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_WatchInfoUsers                        ECsgoGCMsg = 9126
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile           ECsgoGCMsg = 9127
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayersProfile                        ECsgoGCMsg = 9128
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate             ECsgoGCMsg = 9131
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment         ECsgoGCMsg = 9132
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus             ECsgoGCMsg = 9133
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientTextMsg                      ECsgoGCMsg = 9134
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCTextMsg                      ECsgoGCMsg = 9135
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops                ECsgoGCMsg = 9136
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification       ECsgoGCMsg = 9137
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2        ECsgoGCMsg = 9138
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchList                             ECsgoGCMsg = 9139
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames      ECsgoGCMsg = 9140
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames       ECsgoGCMsg = 9141
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate            ECsgoGCMsg = 9142
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo        ECsgoGCMsg = 9144
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames       ECsgoGCMsg = 9146
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo          ECsgoGCMsg = 9147
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest               ECsgoGCMsg = 9148
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse              ECsgoGCMsg = 9149
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo        ECsgoGCMsg = 9150
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote                ECsgoGCMsg = 9152
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Server2GCClientValidate               ECsgoGCMsg = 9153
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser       ECsgoGCMsg = 9154
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest  ECsgoGCMsg = 9156
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ECsgoGCMsg = 9157
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_AccountPrivacySettings                ECsgoGCMsg = 9158
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_SetMyActivityInfo                     ECsgoGCMsg = 9159
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions ECsgoGCMsg = 9160
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions  ECsgoGCMsg = 9161
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_DraftSummary                          ECsgoGCMsg = 9162
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData           ECsgoGCMsg = 9163
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestJoinServerData           ECsgoGCMsg = 9164
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestNewMission               ECsgoGCMsg = 9165
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo               ECsgoGCMsg = 9167
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Subscribe                              ECsgoGCMsg = 9168
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Unsubscribe                            ECsgoGCMsg = 9169
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Play                                   ECsgoGCMsg = 9170
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_AcknowledgePenalty                    ECsgoGCMsg = 9171
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin          ECsgoGCMsg = 9172
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientGlobalStats                  ECsgoGCMsg = 9173
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCStreamUnlock                 ECsgoGCMsg = 9174
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_FantasyRequestClientData              ECsgoGCMsg = 9175
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_FantasyUpdateClientData               ECsgoGCMsg = 9176
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket         ECsgoGCMsg = 9177
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientToGCRequestTicket               ECsgoGCMsg = 9178
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientToGCRequestElevate              ECsgoGCMsg = 9179
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat                            ECsgoGCMsg = 9180
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat_Subscribe                  ECsgoGCMsg = 9181
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe                ECsgoGCMsg = 9182
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientAuthKeyCode                     ECsgoGCMsg = 9183
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GotvSyncPacket                        ECsgoGCMsg = 9184
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPlayerDecalSign                 ECsgoGCMsg = 9185
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientLogonFatalError                 ECsgoGCMsg = 9187
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPollState                       ECsgoGCMsg = 9188
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Register                        ECsgoGCMsg = 9189
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Unregister                      ECsgoGCMsg = 9190
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Search                          ECsgoGCMsg = 9191
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Party_Invite                          ECsgoGCMsg = 9192
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Account_RequestCoPlays                ECsgoGCMsg = 9193
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientGCRankUpdate                    ECsgoGCMsg = 9194
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestOffers                   ECsgoGCMsg = 9195
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientAccountBalance                  ECsgoGCMsg = 9196
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPartyJoinRelay                  ECsgoGCMsg = 9197
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPartyWarning                    ECsgoGCMsg = 9198
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_SetEventFavorite                      ECsgoGCMsg = 9200
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GetEventFavorites_Request             ECsgoGCMsg = 9201
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientPerfReport                      ECsgoGCMsg = 9202
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GetEventFavorites_Response            ECsgoGCMsg = 9203
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestSouvenir                 ECsgoGCMsg = 9204
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportValidation                ECsgoGCMsg = 9205
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode             ECsgoGCMsg = 9206
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientRequestValidation            ECsgoGCMsg = 9207
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRedeemMissionReward             ECsgoGCMsg = 9209
	ECsgoGCMsg_k_EMsgGCCStrike15_ClientDeepStats                          ECsgoGCMsg = 9210
	ECsgoGCMsg_k_EMsgGCCStrike15_StartAgreementSessionInGame              ECsgoGCMsg = 9211
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientInitSystem                   ECsgoGCMsg = 9212
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientInitSystem_Response          ECsgoGCMsg = 9213
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PrivateQueues                         ECsgoGCMsg = 9214
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt       ECsgoGCMsg = 9215
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_BetaEnrollment                        ECsgoGCMsg = 9217
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName          ECsgoGCMsg = 9218
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRedeemFreeReward                ECsgoGCMsg = 9219
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientNetworkConfig                   ECsgoGCMsg = 9220
)

// Enum value maps for ECsgoGCMsg.
var (
	ECsgoGCMsg_name = map[int32]string{
		9100: "k_EMsgGCCStrike15_v2_Base",
		9101: "k_EMsgGCCStrike15_v2_MatchmakingStart",
		9102: "k_EMsgGCCStrike15_v2_MatchmakingStop",
		9103: "k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing",
		9104: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate",
		9106: "k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse",
		9107: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve",
		9109: "k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello",
		9110: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello",
		9112: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon",
		9117: "k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate",
		9118: "k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty",
		9119: "k_EMsgGCCStrike15_v2_ClientReportPlayer",
		9120: "k_EMsgGCCStrike15_v2_ClientReportServer",
		9121: "k_EMsgGCCStrike15_v2_ClientCommendPlayer",
		9122: "k_EMsgGCCStrike15_v2_ClientReportResponse",
		9123: "k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery",
		9124: "k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse",
		9126: "k_EMsgGCCStrike15_v2_WatchInfoUsers",
		9127: "k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile",
		9128: "k_EMsgGCCStrike15_v2_PlayersProfile",
		9131: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate",
		9132: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment",
		9133: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus",
		9134: "k_EMsgGCCStrike15_v2_GC2ClientTextMsg",
		9135: "k_EMsgGCCStrike15_v2_Client2GCTextMsg",
		9136: "k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops",
		9137: "k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification",
		9138: "k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2",
		9139: "k_EMsgGCCStrike15_v2_MatchList",
		9140: "k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames",
		9141: "k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames",
		9142: "k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate",
		9144: "k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo",
		9146: "k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames",
		9147: "k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo",
		9148: "k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest",
		9149: "k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse",
		9150: "k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo",
		9152: "k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote",
		9153: "k_EMsgGCCStrike15_v2_Server2GCClientValidate",
		9154: "k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser",
		9156: "k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest",
		9157: "k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse",
		9158: "k_EMsgGCCStrike15_v2_AccountPrivacySettings",
		9159: "k_EMsgGCCStrike15_v2_SetMyActivityInfo",
		9160: "k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions",
		9161: "k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions",
		9162: "k_EMsgGCCStrike15_v2_DraftSummary",
		9163: "k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData",
		9164: "k_EMsgGCCStrike15_v2_ClientRequestJoinServerData",
		9165: "k_EMsgGCCStrike15_v2_ClientRequestNewMission",
		9167: "k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo",
		9168: "k_EMsgGC_GlobalGame_Subscribe",
		9169: "k_EMsgGC_GlobalGame_Unsubscribe",
		9170: "k_EMsgGC_GlobalGame_Play",
		9171: "k_EMsgGCCStrike15_v2_AcknowledgePenalty",
		9172: "k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin",
		9173: "k_EMsgGCCStrike15_v2_GC2ClientGlobalStats",
		9174: "k_EMsgGCCStrike15_v2_Client2GCStreamUnlock",
		9175: "k_EMsgGCCStrike15_v2_FantasyRequestClientData",
		9176: "k_EMsgGCCStrike15_v2_FantasyUpdateClientData",
		9177: "k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket",
		9178: "k_EMsgGCCStrike15_v2_ClientToGCRequestTicket",
		9179: "k_EMsgGCCStrike15_v2_ClientToGCRequestElevate",
		9180: "k_EMsgGCCStrike15_v2_GlobalChat",
		9181: "k_EMsgGCCStrike15_v2_GlobalChat_Subscribe",
		9182: "k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe",
		9183: "k_EMsgGCCStrike15_v2_ClientAuthKeyCode",
		9184: "k_EMsgGCCStrike15_v2_GotvSyncPacket",
		9185: "k_EMsgGCCStrike15_v2_ClientPlayerDecalSign",
		9187: "k_EMsgGCCStrike15_v2_ClientLogonFatalError",
		9188: "k_EMsgGCCStrike15_v2_ClientPollState",
		9189: "k_EMsgGCCStrike15_v2_Party_Register",
		9190: "k_EMsgGCCStrike15_v2_Party_Unregister",
		9191: "k_EMsgGCCStrike15_v2_Party_Search",
		9192: "k_EMsgGCCStrike15_v2_Party_Invite",
		9193: "k_EMsgGCCStrike15_v2_Account_RequestCoPlays",
		9194: "k_EMsgGCCStrike15_v2_ClientGCRankUpdate",
		9195: "k_EMsgGCCStrike15_v2_ClientRequestOffers",
		9196: "k_EMsgGCCStrike15_v2_ClientAccountBalance",
		9197: "k_EMsgGCCStrike15_v2_ClientPartyJoinRelay",
		9198: "k_EMsgGCCStrike15_v2_ClientPartyWarning",
		9200: "k_EMsgGCCStrike15_v2_SetEventFavorite",
		9201: "k_EMsgGCCStrike15_v2_GetEventFavorites_Request",
		9202: "k_EMsgGCCStrike15_v2_ClientPerfReport",
		9203: "k_EMsgGCCStrike15_v2_GetEventFavorites_Response",
		9204: "k_EMsgGCCStrike15_v2_ClientRequestSouvenir",
		9205: "k_EMsgGCCStrike15_v2_ClientReportValidation",
		9206: "k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode",
		9207: "k_EMsgGCCStrike15_v2_GC2ClientRequestValidation",
		9209: "k_EMsgGCCStrike15_v2_ClientRedeemMissionReward",
		9210: "k_EMsgGCCStrike15_ClientDeepStats",
		9211: "k_EMsgGCCStrike15_StartAgreementSessionInGame",
		9212: "k_EMsgGCCStrike15_v2_GC2ClientInitSystem",
		9213: "k_EMsgGCCStrike15_v2_GC2ClientInitSystem_Response",
		9214: "k_EMsgGCCStrike15_v2_PrivateQueues",
		9215: "k_EMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt",
		9217: "k_EMsgGCCStrike15_v2_BetaEnrollment",
		9218: "k_EMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName",
		9219: "k_EMsgGCCStrike15_v2_ClientRedeemFreeReward",
		9220: "k_EMsgGCCStrike15_v2_ClientNetworkConfig",
	}
	ECsgoGCMsg_value = map[string]int32{
		"k_EMsgGCCStrike15_v2_Base":                                  9100,
		"k_EMsgGCCStrike15_v2_MatchmakingStart":                      9101,
		"k_EMsgGCCStrike15_v2_MatchmakingStop":                       9102,
		"k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing":          9103,
		"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate":            9104,
		"k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse":  9106,
		"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve":           9107,
		"k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello":             9109,
		"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello":             9110,
		"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon":           9112,
		"k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate":      9117,
		"k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty":      9118,
		"k_EMsgGCCStrike15_v2_ClientReportPlayer":                    9119,
		"k_EMsgGCCStrike15_v2_ClientReportServer":                    9120,
		"k_EMsgGCCStrike15_v2_ClientCommendPlayer":                   9121,
		"k_EMsgGCCStrike15_v2_ClientReportResponse":                  9122,
		"k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery":              9123,
		"k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse":      9124,
		"k_EMsgGCCStrike15_v2_WatchInfoUsers":                        9126,
		"k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile":           9127,
		"k_EMsgGCCStrike15_v2_PlayersProfile":                        9128,
		"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate":             9131,
		"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment":         9132,
		"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus":             9133,
		"k_EMsgGCCStrike15_v2_GC2ClientTextMsg":                      9134,
		"k_EMsgGCCStrike15_v2_Client2GCTextMsg":                      9135,
		"k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops":                9136,
		"k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification":       9137,
		"k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2":        9138,
		"k_EMsgGCCStrike15_v2_MatchList":                             9139,
		"k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames":      9140,
		"k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames":       9141,
		"k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate":            9142,
		"k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo":        9144,
		"k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames":       9146,
		"k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo":          9147,
		"k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest":               9148,
		"k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse":              9149,
		"k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo":        9150,
		"k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote":                9152,
		"k_EMsgGCCStrike15_v2_Server2GCClientValidate":               9153,
		"k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser":       9154,
		"k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest":  9156,
		"k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse": 9157,
		"k_EMsgGCCStrike15_v2_AccountPrivacySettings":                9158,
		"k_EMsgGCCStrike15_v2_SetMyActivityInfo":                     9159,
		"k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions": 9160,
		"k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions":  9161,
		"k_EMsgGCCStrike15_v2_DraftSummary":                          9162,
		"k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData":           9163,
		"k_EMsgGCCStrike15_v2_ClientRequestJoinServerData":           9164,
		"k_EMsgGCCStrike15_v2_ClientRequestNewMission":               9165,
		"k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo":               9167,
		"k_EMsgGC_GlobalGame_Subscribe":                              9168,
		"k_EMsgGC_GlobalGame_Unsubscribe":                            9169,
		"k_EMsgGC_GlobalGame_Play":                                   9170,
		"k_EMsgGCCStrike15_v2_AcknowledgePenalty":                    9171,
		"k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin":          9172,
		"k_EMsgGCCStrike15_v2_GC2ClientGlobalStats":                  9173,
		"k_EMsgGCCStrike15_v2_Client2GCStreamUnlock":                 9174,
		"k_EMsgGCCStrike15_v2_FantasyRequestClientData":              9175,
		"k_EMsgGCCStrike15_v2_FantasyUpdateClientData":               9176,
		"k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket":         9177,
		"k_EMsgGCCStrike15_v2_ClientToGCRequestTicket":               9178,
		"k_EMsgGCCStrike15_v2_ClientToGCRequestElevate":              9179,
		"k_EMsgGCCStrike15_v2_GlobalChat":                            9180,
		"k_EMsgGCCStrike15_v2_GlobalChat_Subscribe":                  9181,
		"k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe":                9182,
		"k_EMsgGCCStrike15_v2_ClientAuthKeyCode":                     9183,
		"k_EMsgGCCStrike15_v2_GotvSyncPacket":                        9184,
		"k_EMsgGCCStrike15_v2_ClientPlayerDecalSign":                 9185,
		"k_EMsgGCCStrike15_v2_ClientLogonFatalError":                 9187,
		"k_EMsgGCCStrike15_v2_ClientPollState":                       9188,
		"k_EMsgGCCStrike15_v2_Party_Register":                        9189,
		"k_EMsgGCCStrike15_v2_Party_Unregister":                      9190,
		"k_EMsgGCCStrike15_v2_Party_Search":                          9191,
		"k_EMsgGCCStrike15_v2_Party_Invite":                          9192,
		"k_EMsgGCCStrike15_v2_Account_RequestCoPlays":                9193,
		"k_EMsgGCCStrike15_v2_ClientGCRankUpdate":                    9194,
		"k_EMsgGCCStrike15_v2_ClientRequestOffers":                   9195,
		"k_EMsgGCCStrike15_v2_ClientAccountBalance":                  9196,
		"k_EMsgGCCStrike15_v2_ClientPartyJoinRelay":                  9197,
		"k_EMsgGCCStrike15_v2_ClientPartyWarning":                    9198,
		"k_EMsgGCCStrike15_v2_SetEventFavorite":                      9200,
		"k_EMsgGCCStrike15_v2_GetEventFavorites_Request":             9201,
		"k_EMsgGCCStrike15_v2_ClientPerfReport":                      9202,
		"k_EMsgGCCStrike15_v2_GetEventFavorites_Response":            9203,
		"k_EMsgGCCStrike15_v2_ClientRequestSouvenir":                 9204,
		"k_EMsgGCCStrike15_v2_ClientReportValidation":                9205,
		"k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode":             9206,
		"k_EMsgGCCStrike15_v2_GC2ClientRequestValidation":            9207,
		"k_EMsgGCCStrike15_v2_ClientRedeemMissionReward":             9209,
		"k_EMsgGCCStrike15_ClientDeepStats":                          9210,
		"k_EMsgGCCStrike15_StartAgreementSessionInGame":              9211,
		"k_EMsgGCCStrike15_v2_GC2ClientInitSystem":                   9212,
		"k_EMsgGCCStrike15_v2_GC2ClientInitSystem_Response":          9213,
		"k_EMsgGCCStrike15_v2_PrivateQueues":                         9214,
		"k_EMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt":       9215,
		"k_EMsgGCCStrike15_v2_BetaEnrollment":                        9217,
		"k_EMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName":          9218,
		"k_EMsgGCCStrike15_v2_ClientRedeemFreeReward":                9219,
		"k_EMsgGCCStrike15_v2_ClientNetworkConfig":                   9220,
	}
)

func (x ECsgoGCMsg) Enum() *ECsgoGCMsg {
	p := new(ECsgoGCMsg)
	*p = x
	return p
}

func (x ECsgoGCMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECsgoGCMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_cstrike15_gcmessages_proto_enumTypes[0].Descriptor()
}

func (ECsgoGCMsg) Type() protoreflect.EnumType {
	return &file_s2_cstrike15_gcmessages_proto_enumTypes[0]
}

func (x ECsgoGCMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECsgoGCMsg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECsgoGCMsg(num)
	return nil
}

// Deprecated: Use ECsgoGCMsg.Descriptor instead.
func (ECsgoGCMsg) EnumDescriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{0}
}

type ECsgoSteamUserStat int32

const (
	ECsgoSteamUserStat_k_ECsgoSteamUserStat_XpEarnedGames        ECsgoSteamUserStat = 1
	ECsgoSteamUserStat_k_ECsgoSteamUserStat_MatchWinsCompetitive ECsgoSteamUserStat = 2
	ECsgoSteamUserStat_k_ECsgoSteamUserStat_SurvivedDangerZone   ECsgoSteamUserStat = 3
)

// Enum value maps for ECsgoSteamUserStat.
var (
	ECsgoSteamUserStat_name = map[int32]string{
		1: "k_ECsgoSteamUserStat_XpEarnedGames",
		2: "k_ECsgoSteamUserStat_MatchWinsCompetitive",
		3: "k_ECsgoSteamUserStat_SurvivedDangerZone",
	}
	ECsgoSteamUserStat_value = map[string]int32{
		"k_ECsgoSteamUserStat_XpEarnedGames":        1,
		"k_ECsgoSteamUserStat_MatchWinsCompetitive": 2,
		"k_ECsgoSteamUserStat_SurvivedDangerZone":   3,
	}
)

func (x ECsgoSteamUserStat) Enum() *ECsgoSteamUserStat {
	p := new(ECsgoSteamUserStat)
	*p = x
	return p
}

func (x ECsgoSteamUserStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECsgoSteamUserStat) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_cstrike15_gcmessages_proto_enumTypes[1].Descriptor()
}

func (ECsgoSteamUserStat) Type() protoreflect.EnumType {
	return &file_s2_cstrike15_gcmessages_proto_enumTypes[1]
}

func (x ECsgoSteamUserStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECsgoSteamUserStat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECsgoSteamUserStat(num)
	return nil
}

// Deprecated: Use ECsgoSteamUserStat.Descriptor instead.
func (ECsgoSteamUserStat) EnumDescriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{1}
}

type EClientReportingVersion int32

const (
	EClientReportingVersion_k_EClientReportingVersion_OldVersion          EClientReportingVersion = 0
	EClientReportingVersion_k_EClientReportingVersion_BetaVersion         EClientReportingVersion = 1
	EClientReportingVersion_k_EClientReportingVersion_SupportsTrustedMode EClientReportingVersion = 2
)

// Enum value maps for EClientReportingVersion.
var (
	EClientReportingVersion_name = map[int32]string{
		0: "k_EClientReportingVersion_OldVersion",
		1: "k_EClientReportingVersion_BetaVersion",
		2: "k_EClientReportingVersion_SupportsTrustedMode",
	}
	EClientReportingVersion_value = map[string]int32{
		"k_EClientReportingVersion_OldVersion":          0,
		"k_EClientReportingVersion_BetaVersion":         1,
		"k_EClientReportingVersion_SupportsTrustedMode": 2,
	}
)

func (x EClientReportingVersion) Enum() *EClientReportingVersion {
	p := new(EClientReportingVersion)
	*p = x
	return p
}

func (x EClientReportingVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClientReportingVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_cstrike15_gcmessages_proto_enumTypes[2].Descriptor()
}

func (EClientReportingVersion) Type() protoreflect.EnumType {
	return &file_s2_cstrike15_gcmessages_proto_enumTypes[2]
}

func (x EClientReportingVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClientReportingVersion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClientReportingVersion(num)
	return nil
}

// Deprecated: Use EClientReportingVersion.Descriptor instead.
func (EClientReportingVersion) EnumDescriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{2}
}

type EInitSystemResult int32

const (
	EInitSystemResult_k_EInitSystemResult_Invalid    EInitSystemResult = 0
	EInitSystemResult_k_EInitSystemResult_Success    EInitSystemResult = 1
	EInitSystemResult_k_EInitSystemResult_None       EInitSystemResult = 2
	EInitSystemResult_k_EInitSystemResult_NotFound   EInitSystemResult = 3
	EInitSystemResult_k_EInitSystemResult_Existing   EInitSystemResult = 4
	EInitSystemResult_k_EInitSystemResult_FailedOpen EInitSystemResult = 5
	EInitSystemResult_k_EInitSystemResult_Mismatch   EInitSystemResult = 6
	EInitSystemResult_k_EInitSystemResult_FailedInit EInitSystemResult = 7
	EInitSystemResult_k_EInitSystemResult_Max        EInitSystemResult = 8
)

// Enum value maps for EInitSystemResult.
var (
	EInitSystemResult_name = map[int32]string{
		0: "k_EInitSystemResult_Invalid",
		1: "k_EInitSystemResult_Success",
		2: "k_EInitSystemResult_None",
		3: "k_EInitSystemResult_NotFound",
		4: "k_EInitSystemResult_Existing",
		5: "k_EInitSystemResult_FailedOpen",
		6: "k_EInitSystemResult_Mismatch",
		7: "k_EInitSystemResult_FailedInit",
		8: "k_EInitSystemResult_Max",
	}
	EInitSystemResult_value = map[string]int32{
		"k_EInitSystemResult_Invalid":    0,
		"k_EInitSystemResult_Success":    1,
		"k_EInitSystemResult_None":       2,
		"k_EInitSystemResult_NotFound":   3,
		"k_EInitSystemResult_Existing":   4,
		"k_EInitSystemResult_FailedOpen": 5,
		"k_EInitSystemResult_Mismatch":   6,
		"k_EInitSystemResult_FailedInit": 7,
		"k_EInitSystemResult_Max":        8,
	}
)

func (x EInitSystemResult) Enum() *EInitSystemResult {
	p := new(EInitSystemResult)
	*p = x
	return p
}

func (x EInitSystemResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EInitSystemResult) Descriptor() protoreflect.EnumDescriptor {
	return file_s2_cstrike15_gcmessages_proto_enumTypes[3].Descriptor()
}

func (EInitSystemResult) Type() protoreflect.EnumType {
	return &file_s2_cstrike15_gcmessages_proto_enumTypes[3]
}

func (x EInitSystemResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EInitSystemResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EInitSystemResult(num)
	return nil
}

// Deprecated: Use EInitSystemResult.Descriptor instead.
func (EInitSystemResult) EnumDescriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{3}
}

type GameServerPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ping      *int32  `protobuf:"varint,2,opt,name=ping" json:"ping,omitempty"`
	Ip        *uint32 `protobuf:"varint,3,opt,name=ip" json:"ip,omitempty"`
	Instances *uint32 `protobuf:"varint,5,opt,name=instances" json:"instances,omitempty"`
}

func (x *GameServerPing) Reset() {
	*x = GameServerPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerPing) ProtoMessage() {}

func (x *GameServerPing) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerPing.ProtoReflect.Descriptor instead.
func (*GameServerPing) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{0}
}

func (x *GameServerPing) GetPing() int32 {
	if x != nil && x.Ping != nil {
		return *x.Ping
	}
	return 0
}

func (x *GameServerPing) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *GameServerPing) GetInstances() uint32 {
	if x != nil && x.Instances != nil {
		return *x.Instances
	}
	return 0
}

type DataCenterPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterId *uint32 `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	Ping         *int32  `protobuf:"zigzag32,2,opt,name=ping" json:"ping,omitempty"`
}

func (x *DataCenterPing) Reset() {
	*x = DataCenterPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCenterPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCenterPing) ProtoMessage() {}

func (x *DataCenterPing) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCenterPing.ProtoReflect.Descriptor instead.
func (*DataCenterPing) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{1}
}

func (x *DataCenterPing) GetDataCenterId() uint32 {
	if x != nil && x.DataCenterId != nil {
		return *x.DataCenterId
	}
	return 0
}

func (x *DataCenterPing) GetPing() int32 {
	if x != nil && x.Ping != nil {
		return *x.Ping
	}
	return 0
}

type DetailedSearchStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType         *uint32 `protobuf:"varint,1,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	SearchTimeAvg    *uint32 `protobuf:"varint,2,opt,name=search_time_avg,json=searchTimeAvg" json:"search_time_avg,omitempty"`
	PlayersSearching *uint32 `protobuf:"varint,4,opt,name=players_searching,json=playersSearching" json:"players_searching,omitempty"`
}

func (x *DetailedSearchStatistic) Reset() {
	*x = DetailedSearchStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedSearchStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedSearchStatistic) ProtoMessage() {}

func (x *DetailedSearchStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedSearchStatistic.ProtoReflect.Descriptor instead.
func (*DetailedSearchStatistic) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{2}
}

func (x *DetailedSearchStatistic) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *DetailedSearchStatistic) GetSearchTimeAvg() uint32 {
	if x != nil && x.SearchTimeAvg != nil {
		return *x.SearchTimeAvg
	}
	return 0
}

func (x *DetailedSearchStatistic) GetPlayersSearching() uint32 {
	if x != nil && x.PlayersSearching != nil {
		return *x.PlayersSearching
	}
	return 0
}

type TournamentPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerNick     *string `protobuf:"bytes,2,opt,name=player_nick,json=playerNick" json:"player_nick,omitempty"`
	PlayerName     *string `protobuf:"bytes,3,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	PlayerDob      *uint32 `protobuf:"varint,4,opt,name=player_dob,json=playerDob" json:"player_dob,omitempty"`
	PlayerFlag     *string `protobuf:"bytes,5,opt,name=player_flag,json=playerFlag" json:"player_flag,omitempty"`
	PlayerLocation *string `protobuf:"bytes,6,opt,name=player_location,json=playerLocation" json:"player_location,omitempty"`
	PlayerDesc     *string `protobuf:"bytes,7,opt,name=player_desc,json=playerDesc" json:"player_desc,omitempty"`
}

func (x *TournamentPlayer) Reset() {
	*x = TournamentPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPlayer) ProtoMessage() {}

func (x *TournamentPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPlayer.ProtoReflect.Descriptor instead.
func (*TournamentPlayer) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{3}
}

func (x *TournamentPlayer) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *TournamentPlayer) GetPlayerNick() string {
	if x != nil && x.PlayerNick != nil {
		return *x.PlayerNick
	}
	return ""
}

func (x *TournamentPlayer) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *TournamentPlayer) GetPlayerDob() uint32 {
	if x != nil && x.PlayerDob != nil {
		return *x.PlayerDob
	}
	return 0
}

func (x *TournamentPlayer) GetPlayerFlag() string {
	if x != nil && x.PlayerFlag != nil {
		return *x.PlayerFlag
	}
	return ""
}

func (x *TournamentPlayer) GetPlayerLocation() string {
	if x != nil && x.PlayerLocation != nil {
		return *x.PlayerLocation
	}
	return ""
}

func (x *TournamentPlayer) GetPlayerDesc() string {
	if x != nil && x.PlayerDesc != nil {
		return *x.PlayerDesc
	}
	return ""
}

type TournamentTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId   *int32              `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamTag  *string             `protobuf:"bytes,2,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamFlag *string             `protobuf:"bytes,3,opt,name=team_flag,json=teamFlag" json:"team_flag,omitempty"`
	TeamName *string             `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	Players  []*TournamentPlayer `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
}

func (x *TournamentTeam) Reset() {
	*x = TournamentTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentTeam) ProtoMessage() {}

func (x *TournamentTeam) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentTeam.ProtoReflect.Descriptor instead.
func (*TournamentTeam) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{4}
}

func (x *TournamentTeam) GetTeamId() int32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *TournamentTeam) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *TournamentTeam) GetTeamFlag() string {
	if x != nil && x.TeamFlag != nil {
		return *x.TeamFlag
	}
	return ""
}

func (x *TournamentTeam) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *TournamentTeam) GetPlayers() []*TournamentPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

type TournamentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId         *int32  `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventTag        *string `protobuf:"bytes,2,opt,name=event_tag,json=eventTag" json:"event_tag,omitempty"`
	EventName       *string `protobuf:"bytes,3,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	EventTimeStart  *uint32 `protobuf:"varint,4,opt,name=event_time_start,json=eventTimeStart" json:"event_time_start,omitempty"`
	EventTimeEnd    *uint32 `protobuf:"varint,5,opt,name=event_time_end,json=eventTimeEnd" json:"event_time_end,omitempty"`
	EventPublic     *int32  `protobuf:"varint,6,opt,name=event_public,json=eventPublic" json:"event_public,omitempty"`
	EventStageId    *int32  `protobuf:"varint,7,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id,omitempty"`
	EventStageName  *string `protobuf:"bytes,8,opt,name=event_stage_name,json=eventStageName" json:"event_stage_name,omitempty"`
	ActiveSectionId *uint32 `protobuf:"varint,9,opt,name=active_section_id,json=activeSectionId" json:"active_section_id,omitempty"`
}

func (x *TournamentEvent) Reset() {
	*x = TournamentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentEvent) ProtoMessage() {}

func (x *TournamentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentEvent.ProtoReflect.Descriptor instead.
func (*TournamentEvent) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{5}
}

func (x *TournamentEvent) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *TournamentEvent) GetEventTag() string {
	if x != nil && x.EventTag != nil {
		return *x.EventTag
	}
	return ""
}

func (x *TournamentEvent) GetEventName() string {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return ""
}

func (x *TournamentEvent) GetEventTimeStart() uint32 {
	if x != nil && x.EventTimeStart != nil {
		return *x.EventTimeStart
	}
	return 0
}

func (x *TournamentEvent) GetEventTimeEnd() uint32 {
	if x != nil && x.EventTimeEnd != nil {
		return *x.EventTimeEnd
	}
	return 0
}

func (x *TournamentEvent) GetEventPublic() int32 {
	if x != nil && x.EventPublic != nil {
		return *x.EventPublic
	}
	return 0
}

func (x *TournamentEvent) GetEventStageId() int32 {
	if x != nil && x.EventStageId != nil {
		return *x.EventStageId
	}
	return 0
}

func (x *TournamentEvent) GetEventStageName() string {
	if x != nil && x.EventStageName != nil {
		return *x.EventStageName
	}
	return ""
}

func (x *TournamentEvent) GetActiveSectionId() uint32 {
	if x != nil && x.ActiveSectionId != nil {
		return *x.ActiveSectionId
	}
	return 0
}

type GlobalStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayersOnline           *uint32                    `protobuf:"varint,1,opt,name=players_online,json=playersOnline" json:"players_online,omitempty"`
	ServersOnline           *uint32                    `protobuf:"varint,2,opt,name=servers_online,json=serversOnline" json:"servers_online,omitempty"`
	PlayersSearching        *uint32                    `protobuf:"varint,3,opt,name=players_searching,json=playersSearching" json:"players_searching,omitempty"`
	ServersAvailable        *uint32                    `protobuf:"varint,4,opt,name=servers_available,json=serversAvailable" json:"servers_available,omitempty"`
	OngoingMatches          *uint32                    `protobuf:"varint,5,opt,name=ongoing_matches,json=ongoingMatches" json:"ongoing_matches,omitempty"`
	SearchTimeAvg           *uint32                    `protobuf:"varint,6,opt,name=search_time_avg,json=searchTimeAvg" json:"search_time_avg,omitempty"`
	SearchStatistics        []*DetailedSearchStatistic `protobuf:"bytes,7,rep,name=search_statistics,json=searchStatistics" json:"search_statistics,omitempty"`
	MainPostUrl             *string                    `protobuf:"bytes,8,opt,name=main_post_url,json=mainPostUrl" json:"main_post_url,omitempty"`
	RequiredAppidVersion    *uint32                    `protobuf:"varint,9,opt,name=required_appid_version,json=requiredAppidVersion" json:"required_appid_version,omitempty"`
	PricesheetVersion       *uint32                    `protobuf:"varint,10,opt,name=pricesheet_version,json=pricesheetVersion" json:"pricesheet_version,omitempty"`
	TwitchStreamsVersion    *uint32                    `protobuf:"varint,11,opt,name=twitch_streams_version,json=twitchStreamsVersion" json:"twitch_streams_version,omitempty"`
	ActiveTournamentEventid *uint32                    `protobuf:"varint,12,opt,name=active_tournament_eventid,json=activeTournamentEventid" json:"active_tournament_eventid,omitempty"`
	ActiveSurveyId          *uint32                    `protobuf:"varint,13,opt,name=active_survey_id,json=activeSurveyId" json:"active_survey_id,omitempty"`
	Rtime32Cur              *uint32                    `protobuf:"varint,14,opt,name=rtime32_cur,json=rtime32Cur" json:"rtime32_cur,omitempty"`
	Rtime32EventStart       *uint32                    `protobuf:"varint,15,opt,name=rtime32_event_start,json=rtime32EventStart" json:"rtime32_event_start,omitempty"`
	RequiredAppidVersion2   *uint32                    `protobuf:"varint,16,opt,name=required_appid_version2,json=requiredAppidVersion2" json:"required_appid_version2,omitempty"`
}

func (x *GlobalStatistics) Reset() {
	*x = GlobalStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalStatistics) ProtoMessage() {}

func (x *GlobalStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalStatistics.ProtoReflect.Descriptor instead.
func (*GlobalStatistics) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{6}
}

func (x *GlobalStatistics) GetPlayersOnline() uint32 {
	if x != nil && x.PlayersOnline != nil {
		return *x.PlayersOnline
	}
	return 0
}

func (x *GlobalStatistics) GetServersOnline() uint32 {
	if x != nil && x.ServersOnline != nil {
		return *x.ServersOnline
	}
	return 0
}

func (x *GlobalStatistics) GetPlayersSearching() uint32 {
	if x != nil && x.PlayersSearching != nil {
		return *x.PlayersSearching
	}
	return 0
}

func (x *GlobalStatistics) GetServersAvailable() uint32 {
	if x != nil && x.ServersAvailable != nil {
		return *x.ServersAvailable
	}
	return 0
}

func (x *GlobalStatistics) GetOngoingMatches() uint32 {
	if x != nil && x.OngoingMatches != nil {
		return *x.OngoingMatches
	}
	return 0
}

func (x *GlobalStatistics) GetSearchTimeAvg() uint32 {
	if x != nil && x.SearchTimeAvg != nil {
		return *x.SearchTimeAvg
	}
	return 0
}

func (x *GlobalStatistics) GetSearchStatistics() []*DetailedSearchStatistic {
	if x != nil {
		return x.SearchStatistics
	}
	return nil
}

func (x *GlobalStatistics) GetMainPostUrl() string {
	if x != nil && x.MainPostUrl != nil {
		return *x.MainPostUrl
	}
	return ""
}

func (x *GlobalStatistics) GetRequiredAppidVersion() uint32 {
	if x != nil && x.RequiredAppidVersion != nil {
		return *x.RequiredAppidVersion
	}
	return 0
}

func (x *GlobalStatistics) GetPricesheetVersion() uint32 {
	if x != nil && x.PricesheetVersion != nil {
		return *x.PricesheetVersion
	}
	return 0
}

func (x *GlobalStatistics) GetTwitchStreamsVersion() uint32 {
	if x != nil && x.TwitchStreamsVersion != nil {
		return *x.TwitchStreamsVersion
	}
	return 0
}

func (x *GlobalStatistics) GetActiveTournamentEventid() uint32 {
	if x != nil && x.ActiveTournamentEventid != nil {
		return *x.ActiveTournamentEventid
	}
	return 0
}

func (x *GlobalStatistics) GetActiveSurveyId() uint32 {
	if x != nil && x.ActiveSurveyId != nil {
		return *x.ActiveSurveyId
	}
	return 0
}

func (x *GlobalStatistics) GetRtime32Cur() uint32 {
	if x != nil && x.Rtime32Cur != nil {
		return *x.Rtime32Cur
	}
	return 0
}

func (x *GlobalStatistics) GetRtime32EventStart() uint32 {
	if x != nil && x.Rtime32EventStart != nil {
		return *x.Rtime32EventStart
	}
	return 0
}

func (x *GlobalStatistics) GetRequiredAppidVersion2() uint32 {
	if x != nil && x.RequiredAppidVersion2 != nil {
		return *x.RequiredAppidVersion2
	}
	return 0
}

type OperationalStatisticDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Idkey *uint32 `protobuf:"varint,2,opt,name=idkey" json:"idkey,omitempty"`
}

func (x *OperationalStatisticDescription) Reset() {
	*x = OperationalStatisticDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalStatisticDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalStatisticDescription) ProtoMessage() {}

func (x *OperationalStatisticDescription) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalStatisticDescription.ProtoReflect.Descriptor instead.
func (*OperationalStatisticDescription) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{7}
}

func (x *OperationalStatisticDescription) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OperationalStatisticDescription) GetIdkey() uint32 {
	if x != nil && x.Idkey != nil {
		return *x.Idkey
	}
	return 0
}

type OperationalStatisticElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idkey  *uint32 `protobuf:"varint,1,opt,name=idkey" json:"idkey,omitempty"`
	Values []int32 `protobuf:"varint,2,rep,name=values" json:"values,omitempty"`
}

func (x *OperationalStatisticElement) Reset() {
	*x = OperationalStatisticElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalStatisticElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalStatisticElement) ProtoMessage() {}

func (x *OperationalStatisticElement) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalStatisticElement.ProtoReflect.Descriptor instead.
func (*OperationalStatisticElement) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{8}
}

func (x *OperationalStatisticElement) GetIdkey() uint32 {
	if x != nil && x.Idkey != nil {
		return *x.Idkey
	}
	return 0
}

func (x *OperationalStatisticElement) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type OperationalStatisticsPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packetid    *int32                         `protobuf:"varint,1,opt,name=packetid" json:"packetid,omitempty"`
	Mstimestamp *int32                         `protobuf:"varint,2,opt,name=mstimestamp" json:"mstimestamp,omitempty"`
	Values      []*OperationalStatisticElement `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (x *OperationalStatisticsPacket) Reset() {
	*x = OperationalStatisticsPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalStatisticsPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalStatisticsPacket) ProtoMessage() {}

func (x *OperationalStatisticsPacket) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalStatisticsPacket.ProtoReflect.Descriptor instead.
func (*OperationalStatisticsPacket) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{9}
}

func (x *OperationalStatisticsPacket) GetPacketid() int32 {
	if x != nil && x.Packetid != nil {
		return *x.Packetid
	}
	return 0
}

func (x *OperationalStatisticsPacket) GetMstimestamp() int32 {
	if x != nil && x.Mstimestamp != nil {
		return *x.Mstimestamp
	}
	return 0
}

func (x *OperationalStatisticsPacket) GetValues() []*OperationalStatisticElement {
	if x != nil {
		return x.Values
	}
	return nil
}

type OperationalVarValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ivalue *int32   `protobuf:"varint,2,opt,name=ivalue" json:"ivalue,omitempty"`
	Fvalue *float32 `protobuf:"fixed32,3,opt,name=fvalue" json:"fvalue,omitempty"`
	Svalue []byte   `protobuf:"bytes,4,opt,name=svalue" json:"svalue,omitempty"`
}

func (x *OperationalVarValue) Reset() {
	*x = OperationalVarValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalVarValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalVarValue) ProtoMessage() {}

func (x *OperationalVarValue) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalVarValue.ProtoReflect.Descriptor instead.
func (*OperationalVarValue) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{10}
}

func (x *OperationalVarValue) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OperationalVarValue) GetIvalue() int32 {
	if x != nil && x.Ivalue != nil {
		return *x.Ivalue
	}
	return 0
}

func (x *OperationalVarValue) GetFvalue() float32 {
	if x != nil && x.Fvalue != nil {
		return *x.Fvalue
	}
	return 0
}

func (x *OperationalVarValue) GetSvalue() []byte {
	if x != nil {
		return x.Svalue
	}
	return nil
}

type PlayerRankingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId             *uint32                         `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RankId                *uint32                         `protobuf:"varint,2,opt,name=rank_id,json=rankId" json:"rank_id,omitempty"`
	Wins                  *uint32                         `protobuf:"varint,3,opt,name=wins" json:"wins,omitempty"`
	RankChange            *float32                        `protobuf:"fixed32,4,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	RankTypeId            *uint32                         `protobuf:"varint,6,opt,name=rank_type_id,json=rankTypeId" json:"rank_type_id,omitempty"`
	TvControl             *uint32                         `protobuf:"varint,7,opt,name=tv_control,json=tvControl" json:"tv_control,omitempty"`
	RankWindowStats       *uint64                         `protobuf:"varint,8,opt,name=rank_window_stats,json=rankWindowStats" json:"rank_window_stats,omitempty"`
	LeaderboardName       *string                         `protobuf:"bytes,9,opt,name=leaderboard_name,json=leaderboardName" json:"leaderboard_name,omitempty"`
	RankIfWin             *uint32                         `protobuf:"varint,10,opt,name=rank_if_win,json=rankIfWin" json:"rank_if_win,omitempty"`
	RankIfLose            *uint32                         `protobuf:"varint,11,opt,name=rank_if_lose,json=rankIfLose" json:"rank_if_lose,omitempty"`
	RankIfTie             *uint32                         `protobuf:"varint,12,opt,name=rank_if_tie,json=rankIfTie" json:"rank_if_tie,omitempty"`
	PerMapRank            []*PlayerRankingInfo_PerMapRank `protobuf:"bytes,13,rep,name=per_map_rank,json=perMapRank" json:"per_map_rank,omitempty"`
	LeaderboardNameStatus *uint32                         `protobuf:"varint,14,opt,name=leaderboard_name_status,json=leaderboardNameStatus" json:"leaderboard_name_status,omitempty"`
}

func (x *PlayerRankingInfo) Reset() {
	*x = PlayerRankingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRankingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRankingInfo) ProtoMessage() {}

func (x *PlayerRankingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRankingInfo.ProtoReflect.Descriptor instead.
func (*PlayerRankingInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerRankingInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *PlayerRankingInfo) GetRankId() uint32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

func (x *PlayerRankingInfo) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *PlayerRankingInfo) GetRankChange() float32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *PlayerRankingInfo) GetRankTypeId() uint32 {
	if x != nil && x.RankTypeId != nil {
		return *x.RankTypeId
	}
	return 0
}

func (x *PlayerRankingInfo) GetTvControl() uint32 {
	if x != nil && x.TvControl != nil {
		return *x.TvControl
	}
	return 0
}

func (x *PlayerRankingInfo) GetRankWindowStats() uint64 {
	if x != nil && x.RankWindowStats != nil {
		return *x.RankWindowStats
	}
	return 0
}

func (x *PlayerRankingInfo) GetLeaderboardName() string {
	if x != nil && x.LeaderboardName != nil {
		return *x.LeaderboardName
	}
	return ""
}

func (x *PlayerRankingInfo) GetRankIfWin() uint32 {
	if x != nil && x.RankIfWin != nil {
		return *x.RankIfWin
	}
	return 0
}

func (x *PlayerRankingInfo) GetRankIfLose() uint32 {
	if x != nil && x.RankIfLose != nil {
		return *x.RankIfLose
	}
	return 0
}

func (x *PlayerRankingInfo) GetRankIfTie() uint32 {
	if x != nil && x.RankIfTie != nil {
		return *x.RankIfTie
	}
	return 0
}

func (x *PlayerRankingInfo) GetPerMapRank() []*PlayerRankingInfo_PerMapRank {
	if x != nil {
		return x.PerMapRank
	}
	return nil
}

func (x *PlayerRankingInfo) GetLeaderboardNameStatus() uint32 {
	if x != nil && x.LeaderboardNameStatus != nil {
		return *x.LeaderboardNameStatus
	}
	return 0
}

type PlayerCommendationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdFriendly *uint32 `protobuf:"varint,1,opt,name=cmd_friendly,json=cmdFriendly" json:"cmd_friendly,omitempty"`
	CmdTeaching *uint32 `protobuf:"varint,2,opt,name=cmd_teaching,json=cmdTeaching" json:"cmd_teaching,omitempty"`
	CmdLeader   *uint32 `protobuf:"varint,4,opt,name=cmd_leader,json=cmdLeader" json:"cmd_leader,omitempty"`
}

func (x *PlayerCommendationInfo) Reset() {
	*x = PlayerCommendationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCommendationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCommendationInfo) ProtoMessage() {}

func (x *PlayerCommendationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCommendationInfo.ProtoReflect.Descriptor instead.
func (*PlayerCommendationInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{12}
}

func (x *PlayerCommendationInfo) GetCmdFriendly() uint32 {
	if x != nil && x.CmdFriendly != nil {
		return *x.CmdFriendly
	}
	return 0
}

func (x *PlayerCommendationInfo) GetCmdTeaching() uint32 {
	if x != nil && x.CmdTeaching != nil {
		return *x.CmdTeaching
	}
	return 0
}

func (x *PlayerCommendationInfo) GetCmdLeader() uint32 {
	if x != nil && x.CmdLeader != nil {
		return *x.CmdLeader
	}
	return 0
}

type PlayerMedalsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayItemsDefidx        []uint32 `protobuf:"varint,7,rep,name=display_items_defidx,json=displayItemsDefidx" json:"display_items_defidx,omitempty"`
	FeaturedDisplayItemDefidx *uint32  `protobuf:"varint,8,opt,name=featured_display_item_defidx,json=featuredDisplayItemDefidx" json:"featured_display_item_defidx,omitempty"`
}

func (x *PlayerMedalsInfo) Reset() {
	*x = PlayerMedalsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMedalsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMedalsInfo) ProtoMessage() {}

func (x *PlayerMedalsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMedalsInfo.ProtoReflect.Descriptor instead.
func (*PlayerMedalsInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{13}
}

func (x *PlayerMedalsInfo) GetDisplayItemsDefidx() []uint32 {
	if x != nil {
		return x.DisplayItemsDefidx
	}
	return nil
}

func (x *PlayerMedalsInfo) GetFeaturedDisplayItemDefidx() uint32 {
	if x != nil && x.FeaturedDisplayItemDefidx != nil {
		return *x.FeaturedDisplayItemDefidx
	}
	return 0
}

type AccountActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *uint32 `protobuf:"varint,1,opt,name=activity" json:"activity,omitempty"`
	Mode     *uint32 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
	Map      *uint32 `protobuf:"varint,3,opt,name=map" json:"map,omitempty"`
	Matchid  *uint64 `protobuf:"varint,4,opt,name=matchid" json:"matchid,omitempty"`
}

func (x *AccountActivity) Reset() {
	*x = AccountActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountActivity) ProtoMessage() {}

func (x *AccountActivity) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountActivity.ProtoReflect.Descriptor instead.
func (*AccountActivity) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{14}
}

func (x *AccountActivity) GetActivity() uint32 {
	if x != nil && x.Activity != nil {
		return *x.Activity
	}
	return 0
}

func (x *AccountActivity) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *AccountActivity) GetMap() uint32 {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return 0
}

func (x *AccountActivity) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

type TournamentMatchSetup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      *int32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	TeamIdCt     *int32 `protobuf:"varint,2,opt,name=team_id_ct,json=teamIdCt" json:"team_id_ct,omitempty"`
	TeamIdT      *int32 `protobuf:"varint,3,opt,name=team_id_t,json=teamIdT" json:"team_id_t,omitempty"`
	EventStageId *int32 `protobuf:"varint,4,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id,omitempty"`
}

func (x *TournamentMatchSetup) Reset() {
	*x = TournamentMatchSetup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentMatchSetup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMatchSetup) ProtoMessage() {}

func (x *TournamentMatchSetup) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMatchSetup.ProtoReflect.Descriptor instead.
func (*TournamentMatchSetup) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{15}
}

func (x *TournamentMatchSetup) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *TournamentMatchSetup) GetTeamIdCt() int32 {
	if x != nil && x.TeamIdCt != nil {
		return *x.TeamIdCt
	}
	return 0
}

func (x *TournamentMatchSetup) GetTeamIdT() int32 {
	if x != nil && x.TeamIdT != nil {
		return *x.TeamIdT
	}
	return 0
}

func (x *TournamentMatchSetup) GetEventStageId() int32 {
	if x != nil && x.EventStageId != nil {
		return *x.EventStageId
	}
	return 0
}

type ServerHltvInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TvUdpPort       *uint32 `protobuf:"varint,1,opt,name=tv_udp_port,json=tvUdpPort" json:"tv_udp_port,omitempty"`
	TvWatchKey      *uint64 `protobuf:"varint,2,opt,name=tv_watch_key,json=tvWatchKey" json:"tv_watch_key,omitempty"`
	TvSlots         *uint32 `protobuf:"varint,3,opt,name=tv_slots,json=tvSlots" json:"tv_slots,omitempty"`
	TvClients       *uint32 `protobuf:"varint,4,opt,name=tv_clients,json=tvClients" json:"tv_clients,omitempty"`
	TvProxies       *uint32 `protobuf:"varint,5,opt,name=tv_proxies,json=tvProxies" json:"tv_proxies,omitempty"`
	TvTime          *uint32 `protobuf:"varint,6,opt,name=tv_time,json=tvTime" json:"tv_time,omitempty"`
	GameType        *uint32 `protobuf:"varint,8,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	GameMapgroup    *string `protobuf:"bytes,9,opt,name=game_mapgroup,json=gameMapgroup" json:"game_mapgroup,omitempty"`
	GameMap         *string `protobuf:"bytes,10,opt,name=game_map,json=gameMap" json:"game_map,omitempty"`
	TvMasterSteamid *uint64 `protobuf:"varint,11,opt,name=tv_master_steamid,json=tvMasterSteamid" json:"tv_master_steamid,omitempty"`
	TvLocalSlots    *uint32 `protobuf:"varint,12,opt,name=tv_local_slots,json=tvLocalSlots" json:"tv_local_slots,omitempty"`
	TvLocalClients  *uint32 `protobuf:"varint,13,opt,name=tv_local_clients,json=tvLocalClients" json:"tv_local_clients,omitempty"`
	TvLocalProxies  *uint32 `protobuf:"varint,14,opt,name=tv_local_proxies,json=tvLocalProxies" json:"tv_local_proxies,omitempty"`
	TvRelaySlots    *uint32 `protobuf:"varint,15,opt,name=tv_relay_slots,json=tvRelaySlots" json:"tv_relay_slots,omitempty"`
	TvRelayClients  *uint32 `protobuf:"varint,16,opt,name=tv_relay_clients,json=tvRelayClients" json:"tv_relay_clients,omitempty"`
	TvRelayProxies  *uint32 `protobuf:"varint,17,opt,name=tv_relay_proxies,json=tvRelayProxies" json:"tv_relay_proxies,omitempty"`
	TvRelayAddress  *uint32 `protobuf:"varint,18,opt,name=tv_relay_address,json=tvRelayAddress" json:"tv_relay_address,omitempty"`
	TvRelayPort     *uint32 `protobuf:"varint,19,opt,name=tv_relay_port,json=tvRelayPort" json:"tv_relay_port,omitempty"`
	TvRelaySteamid  *uint64 `protobuf:"varint,20,opt,name=tv_relay_steamid,json=tvRelaySteamid" json:"tv_relay_steamid,omitempty"`
	Flags           *uint32 `protobuf:"varint,21,opt,name=flags" json:"flags,omitempty"`
}

func (x *ServerHltvInfo) Reset() {
	*x = ServerHltvInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerHltvInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerHltvInfo) ProtoMessage() {}

func (x *ServerHltvInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerHltvInfo.ProtoReflect.Descriptor instead.
func (*ServerHltvInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{16}
}

func (x *ServerHltvInfo) GetTvUdpPort() uint32 {
	if x != nil && x.TvUdpPort != nil {
		return *x.TvUdpPort
	}
	return 0
}

func (x *ServerHltvInfo) GetTvWatchKey() uint64 {
	if x != nil && x.TvWatchKey != nil {
		return *x.TvWatchKey
	}
	return 0
}

func (x *ServerHltvInfo) GetTvSlots() uint32 {
	if x != nil && x.TvSlots != nil {
		return *x.TvSlots
	}
	return 0
}

func (x *ServerHltvInfo) GetTvClients() uint32 {
	if x != nil && x.TvClients != nil {
		return *x.TvClients
	}
	return 0
}

func (x *ServerHltvInfo) GetTvProxies() uint32 {
	if x != nil && x.TvProxies != nil {
		return *x.TvProxies
	}
	return 0
}

func (x *ServerHltvInfo) GetTvTime() uint32 {
	if x != nil && x.TvTime != nil {
		return *x.TvTime
	}
	return 0
}

func (x *ServerHltvInfo) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *ServerHltvInfo) GetGameMapgroup() string {
	if x != nil && x.GameMapgroup != nil {
		return *x.GameMapgroup
	}
	return ""
}

func (x *ServerHltvInfo) GetGameMap() string {
	if x != nil && x.GameMap != nil {
		return *x.GameMap
	}
	return ""
}

func (x *ServerHltvInfo) GetTvMasterSteamid() uint64 {
	if x != nil && x.TvMasterSteamid != nil {
		return *x.TvMasterSteamid
	}
	return 0
}

func (x *ServerHltvInfo) GetTvLocalSlots() uint32 {
	if x != nil && x.TvLocalSlots != nil {
		return *x.TvLocalSlots
	}
	return 0
}

func (x *ServerHltvInfo) GetTvLocalClients() uint32 {
	if x != nil && x.TvLocalClients != nil {
		return *x.TvLocalClients
	}
	return 0
}

func (x *ServerHltvInfo) GetTvLocalProxies() uint32 {
	if x != nil && x.TvLocalProxies != nil {
		return *x.TvLocalProxies
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelaySlots() uint32 {
	if x != nil && x.TvRelaySlots != nil {
		return *x.TvRelaySlots
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelayClients() uint32 {
	if x != nil && x.TvRelayClients != nil {
		return *x.TvRelayClients
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelayProxies() uint32 {
	if x != nil && x.TvRelayProxies != nil {
		return *x.TvRelayProxies
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelayAddress() uint32 {
	if x != nil && x.TvRelayAddress != nil {
		return *x.TvRelayAddress
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelayPort() uint32 {
	if x != nil && x.TvRelayPort != nil {
		return *x.TvRelayPort
	}
	return 0
}

func (x *ServerHltvInfo) GetTvRelaySteamid() uint64 {
	if x != nil && x.TvRelaySteamid != nil {
		return *x.TvRelaySteamid
	}
	return 0
}

func (x *ServerHltvInfo) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type IpAddressMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A     *uint32 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B     *uint32 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
	C     *uint32 `protobuf:"varint,3,opt,name=c" json:"c,omitempty"`
	D     *uint32 `protobuf:"varint,4,opt,name=d" json:"d,omitempty"`
	Bits  *uint32 `protobuf:"varint,5,opt,name=bits" json:"bits,omitempty"`
	Token *uint32 `protobuf:"varint,6,opt,name=token" json:"token,omitempty"`
}

func (x *IpAddressMask) Reset() {
	*x = IpAddressMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAddressMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddressMask) ProtoMessage() {}

func (x *IpAddressMask) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddressMask.ProtoReflect.Descriptor instead.
func (*IpAddressMask) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{17}
}

func (x *IpAddressMask) GetA() uint32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

func (x *IpAddressMask) GetB() uint32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

func (x *IpAddressMask) GetC() uint32 {
	if x != nil && x.C != nil {
		return *x.C
	}
	return 0
}

func (x *IpAddressMask) GetD() uint32 {
	if x != nil && x.D != nil {
		return *x.D
	}
	return 0
}

func (x *IpAddressMask) GetBits() uint32 {
	if x != nil && x.Bits != nil {
		return *x.Bits
	}
	return 0
}

func (x *IpAddressMask) GetToken() uint32 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

type CMsgCsgoSteamUserStatChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ecsgosteamuserstat *int32 `protobuf:"varint,1,opt,name=ecsgosteamuserstat" json:"ecsgosteamuserstat,omitempty"`
	Delta              *int32 `protobuf:"varint,2,opt,name=delta" json:"delta,omitempty"`
	Absolute           *bool  `protobuf:"varint,3,opt,name=absolute" json:"absolute,omitempty"`
}

func (x *CMsgCsgoSteamUserStatChange) Reset() {
	*x = CMsgCsgoSteamUserStatChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCsgoSteamUserStatChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCsgoSteamUserStatChange) ProtoMessage() {}

func (x *CMsgCsgoSteamUserStatChange) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCsgoSteamUserStatChange.ProtoReflect.Descriptor instead.
func (*CMsgCsgoSteamUserStatChange) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgCsgoSteamUserStatChange) GetEcsgosteamuserstat() int32 {
	if x != nil && x.Ecsgosteamuserstat != nil {
		return *x.Ecsgosteamuserstat
	}
	return 0
}

func (x *CMsgCsgoSteamUserStatChange) GetDelta() int32 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *CMsgCsgoSteamUserStatChange) GetAbsolute() bool {
	if x != nil && x.Absolute != nil {
		return *x.Absolute
	}
	return false
}

type XpProgressData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XpPoints   *uint32 `protobuf:"varint,1,opt,name=xp_points,json=xpPoints" json:"xp_points,omitempty"`
	XpCategory *int32  `protobuf:"varint,2,opt,name=xp_category,json=xpCategory" json:"xp_category,omitempty"`
}

func (x *XpProgressData) Reset() {
	*x = XpProgressData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XpProgressData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XpProgressData) ProtoMessage() {}

func (x *XpProgressData) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XpProgressData.ProtoReflect.Descriptor instead.
func (*XpProgressData) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{19}
}

func (x *XpProgressData) GetXpPoints() uint32 {
	if x != nil && x.XpPoints != nil {
		return *x.XpPoints
	}
	return 0
}

func (x *XpProgressData) GetXpCategory() int32 {
	if x != nil && x.XpCategory != nil {
		return *x.XpCategory
	}
	return 0
}

type MatchEndItemUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId             *uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemAttrDefidx     *uint32 `protobuf:"varint,2,opt,name=item_attr_defidx,json=itemAttrDefidx" json:"item_attr_defidx,omitempty"`
	ItemAttrDeltaValue *uint32 `protobuf:"varint,3,opt,name=item_attr_delta_value,json=itemAttrDeltaValue" json:"item_attr_delta_value,omitempty"`
}

func (x *MatchEndItemUpdates) Reset() {
	*x = MatchEndItemUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchEndItemUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchEndItemUpdates) ProtoMessage() {}

func (x *MatchEndItemUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchEndItemUpdates.ProtoReflect.Descriptor instead.
func (*MatchEndItemUpdates) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{20}
}

func (x *MatchEndItemUpdates) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *MatchEndItemUpdates) GetItemAttrDefidx() uint32 {
	if x != nil && x.ItemAttrDefidx != nil {
		return *x.ItemAttrDefidx
	}
	return 0
}

func (x *MatchEndItemUpdates) GetItemAttrDeltaValue() uint32 {
	if x != nil && x.ItemAttrDeltaValue != nil {
		return *x.ItemAttrDeltaValue
	}
	return 0
}

type ScoreLeaderboardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId         *uint64                                `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	Score           *uint32                                `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Accountentries  []*ScoreLeaderboardData_AccountEntries `protobuf:"bytes,3,rep,name=accountentries" json:"accountentries,omitempty"`
	Matchentries    []*ScoreLeaderboardData_Entry          `protobuf:"bytes,5,rep,name=matchentries" json:"matchentries,omitempty"`
	LeaderboardName *string                                `protobuf:"bytes,6,opt,name=leaderboard_name,json=leaderboardName" json:"leaderboard_name,omitempty"`
}

func (x *ScoreLeaderboardData) Reset() {
	*x = ScoreLeaderboardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreLeaderboardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreLeaderboardData) ProtoMessage() {}

func (x *ScoreLeaderboardData) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreLeaderboardData.ProtoReflect.Descriptor instead.
func (*ScoreLeaderboardData) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{21}
}

func (x *ScoreLeaderboardData) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *ScoreLeaderboardData) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *ScoreLeaderboardData) GetAccountentries() []*ScoreLeaderboardData_AccountEntries {
	if x != nil {
		return x.Accountentries
	}
	return nil
}

func (x *ScoreLeaderboardData) GetMatchentries() []*ScoreLeaderboardData_Entry {
	if x != nil {
		return x.Matchentries
	}
	return nil
}

func (x *ScoreLeaderboardData) GetLeaderboardName() string {
	if x != nil && x.LeaderboardName != nil {
		return *x.LeaderboardName
	}
	return ""
}

type PlayerQuestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuesterAccountId        *uint32                          `protobuf:"varint,1,opt,name=quester_account_id,json=questerAccountId" json:"quester_account_id,omitempty"`
	QuestItemData           []*PlayerQuestData_QuestItemData `protobuf:"bytes,2,rep,name=quest_item_data,json=questItemData" json:"quest_item_data,omitempty"`
	XpProgressData          []*XpProgressData                `protobuf:"bytes,3,rep,name=xp_progress_data,json=xpProgressData" json:"xp_progress_data,omitempty"`
	TimePlayed              *uint32                          `protobuf:"varint,4,opt,name=time_played,json=timePlayed" json:"time_played,omitempty"`
	MmGameMode              *uint32                          `protobuf:"varint,5,opt,name=mm_game_mode,json=mmGameMode" json:"mm_game_mode,omitempty"`
	ItemUpdates             []*MatchEndItemUpdates           `protobuf:"bytes,6,rep,name=item_updates,json=itemUpdates" json:"item_updates,omitempty"`
	OperationPointsEligible *bool                            `protobuf:"varint,7,opt,name=operation_points_eligible,json=operationPointsEligible" json:"operation_points_eligible,omitempty"`
	Userstatchanges         []*CMsgCsgoSteamUserStatChange   `protobuf:"bytes,8,rep,name=userstatchanges" json:"userstatchanges,omitempty"`
}

func (x *PlayerQuestData) Reset() {
	*x = PlayerQuestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQuestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQuestData) ProtoMessage() {}

func (x *PlayerQuestData) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQuestData.ProtoReflect.Descriptor instead.
func (*PlayerQuestData) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{22}
}

func (x *PlayerQuestData) GetQuesterAccountId() uint32 {
	if x != nil && x.QuesterAccountId != nil {
		return *x.QuesterAccountId
	}
	return 0
}

func (x *PlayerQuestData) GetQuestItemData() []*PlayerQuestData_QuestItemData {
	if x != nil {
		return x.QuestItemData
	}
	return nil
}

func (x *PlayerQuestData) GetXpProgressData() []*XpProgressData {
	if x != nil {
		return x.XpProgressData
	}
	return nil
}

func (x *PlayerQuestData) GetTimePlayed() uint32 {
	if x != nil && x.TimePlayed != nil {
		return *x.TimePlayed
	}
	return 0
}

func (x *PlayerQuestData) GetMmGameMode() uint32 {
	if x != nil && x.MmGameMode != nil {
		return *x.MmGameMode
	}
	return 0
}

func (x *PlayerQuestData) GetItemUpdates() []*MatchEndItemUpdates {
	if x != nil {
		return x.ItemUpdates
	}
	return nil
}

func (x *PlayerQuestData) GetOperationPointsEligible() bool {
	if x != nil && x.OperationPointsEligible != nil {
		return *x.OperationPointsEligible
	}
	return false
}

func (x *PlayerQuestData) GetUserstatchanges() []*CMsgCsgoSteamUserStatChange {
	if x != nil {
		return x.Userstatchanges
	}
	return nil
}

type DeepPlayerStatsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid             *uint32  `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	MatchId               *uint64  `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	MmGameMode            *uint32  `protobuf:"varint,3,opt,name=mm_game_mode,json=mmGameMode" json:"mm_game_mode,omitempty"`
	Mapid                 *uint32  `protobuf:"varint,4,opt,name=mapid" json:"mapid,omitempty"`
	BStartingCt           *bool    `protobuf:"varint,5,opt,name=b_starting_ct,json=bStartingCt" json:"b_starting_ct,omitempty"`
	MatchOutcome          *uint32  `protobuf:"varint,6,opt,name=match_outcome,json=matchOutcome" json:"match_outcome,omitempty"`
	RoundsWon             *uint32  `protobuf:"varint,7,opt,name=rounds_won,json=roundsWon" json:"rounds_won,omitempty"`
	RoundsLost            *uint32  `protobuf:"varint,8,opt,name=rounds_lost,json=roundsLost" json:"rounds_lost,omitempty"`
	StatScore             *uint32  `protobuf:"varint,9,opt,name=stat_score,json=statScore" json:"stat_score,omitempty"`
	StatDeaths            *uint32  `protobuf:"varint,12,opt,name=stat_deaths,json=statDeaths" json:"stat_deaths,omitempty"`
	StatMvps              *uint32  `protobuf:"varint,13,opt,name=stat_mvps,json=statMvps" json:"stat_mvps,omitempty"`
	EnemyKills            *uint32  `protobuf:"varint,14,opt,name=enemy_kills,json=enemyKills" json:"enemy_kills,omitempty"`
	EnemyHeadshots        *uint32  `protobuf:"varint,15,opt,name=enemy_headshots,json=enemyHeadshots" json:"enemy_headshots,omitempty"`
	Enemy_2Ks             *uint32  `protobuf:"varint,16,opt,name=enemy_2ks,json=enemy2ks" json:"enemy_2ks,omitempty"`
	Enemy_3Ks             *uint32  `protobuf:"varint,17,opt,name=enemy_3ks,json=enemy3ks" json:"enemy_3ks,omitempty"`
	Enemy_4Ks             *uint32  `protobuf:"varint,18,opt,name=enemy_4ks,json=enemy4ks" json:"enemy_4ks,omitempty"`
	TotalDamage           *uint32  `protobuf:"varint,19,opt,name=total_damage,json=totalDamage" json:"total_damage,omitempty"`
	EngagementsEntryCount *uint32  `protobuf:"varint,23,opt,name=engagements_entry_count,json=engagementsEntryCount" json:"engagements_entry_count,omitempty"`
	EngagementsEntryWins  *uint32  `protobuf:"varint,24,opt,name=engagements_entry_wins,json=engagementsEntryWins" json:"engagements_entry_wins,omitempty"`
	Engagements_1V1Count  *uint32  `protobuf:"varint,25,opt,name=engagements_1v1_count,json=engagements1v1Count" json:"engagements_1v1_count,omitempty"`
	Engagements_1V1Wins   *uint32  `protobuf:"varint,26,opt,name=engagements_1v1_wins,json=engagements1v1Wins" json:"engagements_1v1_wins,omitempty"`
	Engagements_1V2Count  *uint32  `protobuf:"varint,27,opt,name=engagements_1v2_count,json=engagements1v2Count" json:"engagements_1v2_count,omitempty"`
	Engagements_1V2Wins   *uint32  `protobuf:"varint,28,opt,name=engagements_1v2_wins,json=engagements1v2Wins" json:"engagements_1v2_wins,omitempty"`
	UtilityCount          *uint32  `protobuf:"varint,29,opt,name=utility_count,json=utilityCount" json:"utility_count,omitempty"`
	UtilitySuccess        *uint32  `protobuf:"varint,30,opt,name=utility_success,json=utilitySuccess" json:"utility_success,omitempty"`
	FlashCount            *uint32  `protobuf:"varint,32,opt,name=flash_count,json=flashCount" json:"flash_count,omitempty"`
	FlashSuccess          *uint32  `protobuf:"varint,33,opt,name=flash_success,json=flashSuccess" json:"flash_success,omitempty"`
	Mates                 []uint32 `protobuf:"varint,34,rep,name=mates" json:"mates,omitempty"`
}

func (x *DeepPlayerStatsEntry) Reset() {
	*x = DeepPlayerStatsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepPlayerStatsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepPlayerStatsEntry) ProtoMessage() {}

func (x *DeepPlayerStatsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepPlayerStatsEntry.ProtoReflect.Descriptor instead.
func (*DeepPlayerStatsEntry) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{23}
}

func (x *DeepPlayerStatsEntry) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetMmGameMode() uint32 {
	if x != nil && x.MmGameMode != nil {
		return *x.MmGameMode
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetBStartingCt() bool {
	if x != nil && x.BStartingCt != nil {
		return *x.BStartingCt
	}
	return false
}

func (x *DeepPlayerStatsEntry) GetMatchOutcome() uint32 {
	if x != nil && x.MatchOutcome != nil {
		return *x.MatchOutcome
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetRoundsWon() uint32 {
	if x != nil && x.RoundsWon != nil {
		return *x.RoundsWon
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetRoundsLost() uint32 {
	if x != nil && x.RoundsLost != nil {
		return *x.RoundsLost
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetStatScore() uint32 {
	if x != nil && x.StatScore != nil {
		return *x.StatScore
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetStatDeaths() uint32 {
	if x != nil && x.StatDeaths != nil {
		return *x.StatDeaths
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetStatMvps() uint32 {
	if x != nil && x.StatMvps != nil {
		return *x.StatMvps
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetEnemyKills() uint32 {
	if x != nil && x.EnemyKills != nil {
		return *x.EnemyKills
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetEnemyHeadshots() uint32 {
	if x != nil && x.EnemyHeadshots != nil {
		return *x.EnemyHeadshots
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetEnemy_2Ks() uint32 {
	if x != nil && x.Enemy_2Ks != nil {
		return *x.Enemy_2Ks
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetEnemy_3Ks() uint32 {
	if x != nil && x.Enemy_3Ks != nil {
		return *x.Enemy_3Ks
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetEnemy_4Ks() uint32 {
	if x != nil && x.Enemy_4Ks != nil {
		return *x.Enemy_4Ks
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetTotalDamage() uint32 {
	if x != nil && x.TotalDamage != nil {
		return *x.TotalDamage
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetEngagementsEntryCount() uint32 {
	if x != nil && x.EngagementsEntryCount != nil {
		return *x.EngagementsEntryCount
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetEngagementsEntryWins() uint32 {
	if x != nil && x.EngagementsEntryWins != nil {
		return *x.EngagementsEntryWins
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetEngagements_1V1Count() uint32 {
	if x != nil && x.Engagements_1V1Count != nil {
		return *x.Engagements_1V1Count
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetEngagements_1V1Wins() uint32 {
	if x != nil && x.Engagements_1V1Wins != nil {
		return *x.Engagements_1V1Wins
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetEngagements_1V2Count() uint32 {
	if x != nil && x.Engagements_1V2Count != nil {
		return *x.Engagements_1V2Count
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetEngagements_1V2Wins() uint32 {
	if x != nil && x.Engagements_1V2Wins != nil {
		return *x.Engagements_1V2Wins
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetUtilityCount() uint32 {
	if x != nil && x.UtilityCount != nil {
		return *x.UtilityCount
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetUtilitySuccess() uint32 {
	if x != nil && x.UtilitySuccess != nil {
		return *x.UtilitySuccess
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetFlashCount() uint32 {
	if x != nil && x.FlashCount != nil {
		return *x.FlashCount
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetFlashSuccess() uint32 {
	if x != nil && x.FlashSuccess != nil {
		return *x.FlashSuccess
	}
	return 0
}

func (x *DeepPlayerStatsEntry) GetMates() []uint32 {
	if x != nil {
		return x.Mates
	}
	return nil
}

type DeepPlayerMatchEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid   *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	MatchId     *uint64 `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	EventId     *uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventType   *uint32 `protobuf:"varint,4,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	BPlayingCt  *bool   `protobuf:"varint,5,opt,name=b_playing_ct,json=bPlayingCt" json:"b_playing_ct,omitempty"`
	UserPosX    *int32  `protobuf:"varint,6,opt,name=user_pos_x,json=userPosX" json:"user_pos_x,omitempty"`
	UserPosY    *int32  `protobuf:"varint,7,opt,name=user_pos_y,json=userPosY" json:"user_pos_y,omitempty"`
	UserPosZ    *int32  `protobuf:"varint,12,opt,name=user_pos_z,json=userPosZ" json:"user_pos_z,omitempty"`
	UserDefidx  *uint32 `protobuf:"varint,8,opt,name=user_defidx,json=userDefidx" json:"user_defidx,omitempty"`
	OtherPosX   *int32  `protobuf:"varint,9,opt,name=other_pos_x,json=otherPosX" json:"other_pos_x,omitempty"`
	OtherPosY   *int32  `protobuf:"varint,10,opt,name=other_pos_y,json=otherPosY" json:"other_pos_y,omitempty"`
	OtherPosZ   *int32  `protobuf:"varint,13,opt,name=other_pos_z,json=otherPosZ" json:"other_pos_z,omitempty"`
	OtherDefidx *uint32 `protobuf:"varint,11,opt,name=other_defidx,json=otherDefidx" json:"other_defidx,omitempty"`
	EventData   *int32  `protobuf:"varint,14,opt,name=event_data,json=eventData" json:"event_data,omitempty"`
}

func (x *DeepPlayerMatchEvent) Reset() {
	*x = DeepPlayerMatchEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepPlayerMatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepPlayerMatchEvent) ProtoMessage() {}

func (x *DeepPlayerMatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepPlayerMatchEvent.ProtoReflect.Descriptor instead.
func (*DeepPlayerMatchEvent) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{24}
}

func (x *DeepPlayerMatchEvent) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetEventType() uint32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetBPlayingCt() bool {
	if x != nil && x.BPlayingCt != nil {
		return *x.BPlayingCt
	}
	return false
}

func (x *DeepPlayerMatchEvent) GetUserPosX() int32 {
	if x != nil && x.UserPosX != nil {
		return *x.UserPosX
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetUserPosY() int32 {
	if x != nil && x.UserPosY != nil {
		return *x.UserPosY
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetUserPosZ() int32 {
	if x != nil && x.UserPosZ != nil {
		return *x.UserPosZ
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetUserDefidx() uint32 {
	if x != nil && x.UserDefidx != nil {
		return *x.UserDefidx
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetOtherPosX() int32 {
	if x != nil && x.OtherPosX != nil {
		return *x.OtherPosX
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetOtherPosY() int32 {
	if x != nil && x.OtherPosY != nil {
		return *x.OtherPosY
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetOtherPosZ() int32 {
	if x != nil && x.OtherPosZ != nil {
		return *x.OtherPosZ
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetOtherDefidx() uint32 {
	if x != nil && x.OtherDefidx != nil {
		return *x.OtherDefidx
	}
	return 0
}

func (x *DeepPlayerMatchEvent) GetEventData() int32 {
	if x != nil && x.EventData != nil {
		return *x.EventData
	}
	return 0
}

type CMsgGC_ServerQuestUpdateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerQuestData []*PlayerQuestData    `protobuf:"bytes,1,rep,name=player_quest_data,json=playerQuestData" json:"player_quest_data,omitempty"`
	BinaryData      []byte                `protobuf:"bytes,2,opt,name=binary_data,json=binaryData" json:"binary_data,omitempty"`
	MmGameMode      *uint32               `protobuf:"varint,3,opt,name=mm_game_mode,json=mmGameMode" json:"mm_game_mode,omitempty"`
	Missionlbsdata  *ScoreLeaderboardData `protobuf:"bytes,4,opt,name=missionlbsdata" json:"missionlbsdata,omitempty"`
}

func (x *CMsgGC_ServerQuestUpdateData) Reset() {
	*x = CMsgGC_ServerQuestUpdateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_ServerQuestUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_ServerQuestUpdateData) ProtoMessage() {}

func (x *CMsgGC_ServerQuestUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_ServerQuestUpdateData.ProtoReflect.Descriptor instead.
func (*CMsgGC_ServerQuestUpdateData) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgGC_ServerQuestUpdateData) GetPlayerQuestData() []*PlayerQuestData {
	if x != nil {
		return x.PlayerQuestData
	}
	return nil
}

func (x *CMsgGC_ServerQuestUpdateData) GetBinaryData() []byte {
	if x != nil {
		return x.BinaryData
	}
	return nil
}

func (x *CMsgGC_ServerQuestUpdateData) GetMmGameMode() uint32 {
	if x != nil && x.MmGameMode != nil {
		return *x.MmGameMode
	}
	return 0
}

func (x *CMsgGC_ServerQuestUpdateData) GetMissionlbsdata() *ScoreLeaderboardData {
	if x != nil {
		return x.Missionlbsdata
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *uint32 `protobuf:"varint,1,opt,name=token" json:"token,omitempty"`
	Stamp    *uint32 `protobuf:"varint,2,opt,name=stamp" json:"stamp,omitempty"`
	Exchange *uint64 `protobuf:"varint,3,opt,name=exchange" json:"exchange,omitempty"`
	Retry    *uint32 `protobuf:"varint,4,opt,name=retry" json:"retry,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetToken() uint32 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetStamp() uint32 {
	if x != nil && x.Stamp != nil {
		return *x.Stamp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetExchange() uint64 {
	if x != nil && x.Exchange != nil {
		return *x.Exchange
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetRetry() uint32 {
	if x != nil && x.Retry != nil {
		return *x.Retry
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ServerReservationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewersExternalTotal *uint32 `protobuf:"varint,1,opt,name=viewers_external_total,json=viewersExternalTotal" json:"viewers_external_total,omitempty"`
	ViewersExternalSteam *uint32 `protobuf:"varint,2,opt,name=viewers_external_steam,json=viewersExternalSteam" json:"viewers_external_steam,omitempty"`
}

func (x *CMsgGCCStrike15V2_GC2ServerReservationUpdate) Reset() {
	*x = CMsgGCCStrike15V2_GC2ServerReservationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GC2ServerReservationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ServerReservationUpdate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ServerReservationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ServerReservationUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ServerReservationUpdate) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgGCCStrike15V2_GC2ServerReservationUpdate) GetViewersExternalTotal() uint32 {
	if x != nil && x.ViewersExternalTotal != nil {
		return *x.ViewersExternalTotal
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ServerReservationUpdate) GetViewersExternalSteam() uint32 {
	if x != nil && x.ViewersExternalSteam != nil {
		return *x.ViewersExternalSteam
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIds      []uint32              `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	GameType        *uint32               `protobuf:"varint,2,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	TicketData      *string               `protobuf:"bytes,3,opt,name=ticket_data,json=ticketData" json:"ticket_data,omitempty"`
	ClientVersion   *uint32               `protobuf:"varint,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	TournamentMatch *TournamentMatchSetup `protobuf:"bytes,5,opt,name=tournament_match,json=tournamentMatch" json:"tournament_match,omitempty"`
	PrimeOnly       *bool                 `protobuf:"varint,6,opt,name=prime_only,json=primeOnly" json:"prime_only,omitempty"`
	TvControl       *uint32               `protobuf:"varint,7,opt,name=tv_control,json=tvControl" json:"tv_control,omitempty"`
	LobbyId         *uint64               `protobuf:"varint,8,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingStart) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingStart) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingStart.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingStart) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetTicketData() string {
	if x != nil && x.TicketData != nil {
		return *x.TicketData
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetTournamentMatch() *TournamentMatchSetup {
	if x != nil {
		return x.TournamentMatch
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetPrimeOnly() bool {
	if x != nil && x.PrimeOnly != nil {
		return *x.PrimeOnly
	}
	return false
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetTvControl() uint32 {
	if x != nil && x.TvControl != nil {
		return *x.TvControl
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingStart) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Abandon *int32 `protobuf:"varint,1,opt,name=abandon" json:"abandon,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingStop) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingStop) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingStop) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingStop.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingStop) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgGCCStrike15V2_MatchmakingStop) GetAbandon() int32 {
	if x != nil && x.Abandon != nil {
		return *x.Abandon
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *int32   `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	RegionId *int32   `protobuf:"varint,2,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	RegionR  *float32 `protobuf:"fixed32,3,opt,name=region_r,json=regionR" json:"region_r,omitempty"`
	Distance *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetRegionId() int32 {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetRegionR() float32 {
	if x != nil && x.RegionR != nil {
		return *x.RegionR
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingClient2ServerPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gameserverpings []*GameServerPing                                    `protobuf:"bytes,1,rep,name=gameserverpings" json:"gameserverpings,omitempty"`
	OffsetIndex     *int32                                               `protobuf:"varint,2,opt,name=offset_index,json=offsetIndex" json:"offset_index,omitempty"`
	FinalBatch      *int32                                               `protobuf:"varint,3,opt,name=final_batch,json=finalBatch" json:"final_batch,omitempty"`
	DataCenterPings []*DataCenterPing                                    `protobuf:"bytes,4,rep,name=data_center_pings,json=dataCenterPings" json:"data_center_pings,omitempty"`
	MaxPing         *uint32                                              `protobuf:"varint,5,opt,name=max_ping,json=maxPing" json:"max_ping,omitempty"`
	TestToken       *uint32                                              `protobuf:"fixed32,6,opt,name=test_token,json=testToken" json:"test_token,omitempty"`
	SearchKey       []byte                                               `protobuf:"bytes,7,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	Notes           []*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note `protobuf:"bytes,8,rep,name=notes" json:"notes,omitempty"`
	DebugMessage    *string                                              `protobuf:"bytes,9,opt,name=debug_message,json=debugMessage" json:"debug_message,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingClient2ServerPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingClient2ServerPing) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingClient2ServerPing.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetGameserverpings() []*GameServerPing {
	if x != nil {
		return x.Gameserverpings
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetOffsetIndex() int32 {
	if x != nil && x.OffsetIndex != nil {
		return *x.OffsetIndex
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetFinalBatch() int32 {
	if x != nil && x.FinalBatch != nil {
		return *x.FinalBatch
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetDataCenterPings() []*DataCenterPing {
	if x != nil {
		return x.DataCenterPings
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetMaxPing() uint32 {
	if x != nil && x.MaxPing != nil {
		return *x.MaxPing
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetTestToken() uint32 {
	if x != nil && x.TestToken != nil {
		return *x.TestToken
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetSearchKey() []byte {
	if x != nil {
		return x.SearchKey
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetNotes() []*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetDebugMessage() string {
	if x != nil && x.DebugMessage != nil {
		return *x.DebugMessage
	}
	return ""
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matchmaking                   *int32                                               `protobuf:"varint,1,opt,name=matchmaking" json:"matchmaking,omitempty"`
	WaitingAccountIdSessions      []uint32                                             `protobuf:"varint,2,rep,name=waiting_account_id_sessions,json=waitingAccountIdSessions" json:"waiting_account_id_sessions,omitempty"`
	Error                         *string                                              `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	OngoingmatchAccountIdSessions []uint32                                             `protobuf:"varint,6,rep,name=ongoingmatch_account_id_sessions,json=ongoingmatchAccountIdSessions" json:"ongoingmatch_account_id_sessions,omitempty"`
	GlobalStats                   *GlobalStatistics                                    `protobuf:"bytes,7,opt,name=global_stats,json=globalStats" json:"global_stats,omitempty"`
	FailpingAccountIdSessions     []uint32                                             `protobuf:"varint,8,rep,name=failping_account_id_sessions,json=failpingAccountIdSessions" json:"failping_account_id_sessions,omitempty"`
	PenaltyAccountIdSessions      []uint32                                             `protobuf:"varint,9,rep,name=penalty_account_id_sessions,json=penaltyAccountIdSessions" json:"penalty_account_id_sessions,omitempty"`
	FailreadyAccountIdSessions    []uint32                                             `protobuf:"varint,10,rep,name=failready_account_id_sessions,json=failreadyAccountIdSessions" json:"failready_account_id_sessions,omitempty"`
	VacbannedAccountIdSessions    []uint32                                             `protobuf:"varint,11,rep,name=vacbanned_account_id_sessions,json=vacbannedAccountIdSessions" json:"vacbanned_account_id_sessions,omitempty"`
	ServerIpaddressMask           *IpAddressMask                                       `protobuf:"bytes,12,opt,name=server_ipaddress_mask,json=serverIpaddressMask" json:"server_ipaddress_mask,omitempty"`
	Notes                         []*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note `protobuf:"bytes,13,rep,name=notes" json:"notes,omitempty"`
	PenaltyAccountIdSessionsGreen []uint32                                             `protobuf:"varint,14,rep,name=penalty_account_id_sessions_green,json=penaltyAccountIdSessionsGreen" json:"penalty_account_id_sessions_green,omitempty"`
	InsufficientlevelSessions     []uint32                                             `protobuf:"varint,15,rep,name=insufficientlevel_sessions,json=insufficientlevelSessions" json:"insufficientlevel_sessions,omitempty"`
	VsncheckAccountIdSessions     []uint32                                             `protobuf:"varint,16,rep,name=vsncheck_account_id_sessions,json=vsncheckAccountIdSessions" json:"vsncheck_account_id_sessions,omitempty"`
	LauncherMismatchSessions      []uint32                                             `protobuf:"varint,17,rep,name=launcher_mismatch_sessions,json=launcherMismatchSessions" json:"launcher_mismatch_sessions,omitempty"`
	InsecureAccountIdSessions     []uint32                                             `protobuf:"varint,18,rep,name=insecure_account_id_sessions,json=insecureAccountIdSessions" json:"insecure_account_id_sessions,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetMatchmaking() int32 {
	if x != nil && x.Matchmaking != nil {
		return *x.Matchmaking
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetWaitingAccountIdSessions() []uint32 {
	if x != nil {
		return x.WaitingAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetOngoingmatchAccountIdSessions() []uint32 {
	if x != nil {
		return x.OngoingmatchAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetGlobalStats() *GlobalStatistics {
	if x != nil {
		return x.GlobalStats
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetFailpingAccountIdSessions() []uint32 {
	if x != nil {
		return x.FailpingAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetPenaltyAccountIdSessions() []uint32 {
	if x != nil {
		return x.PenaltyAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetFailreadyAccountIdSessions() []uint32 {
	if x != nil {
		return x.FailreadyAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetVacbannedAccountIdSessions() []uint32 {
	if x != nil {
		return x.VacbannedAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetServerIpaddressMask() *IpAddressMask {
	if x != nil {
		return x.ServerIpaddressMask
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetNotes() []*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetPenaltyAccountIdSessionsGreen() []uint32 {
	if x != nil {
		return x.PenaltyAccountIdSessionsGreen
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetInsufficientlevelSessions() []uint32 {
	if x != nil {
		return x.InsufficientlevelSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetVsncheckAccountIdSessions() []uint32 {
	if x != nil {
		return x.VsncheckAccountIdSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetLauncherMismatchSessions() []uint32 {
	if x != nil {
		return x.LauncherMismatchSessions
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetInsecureAccountIdSessions() []uint32 {
	if x != nil {
		return x.InsecureAccountIdSessions
	}
	return nil
}

type CDataGCCStrike15V2_TournamentMatchDraft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId          *int32                                           `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventStageId     *int32                                           `protobuf:"varint,2,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id,omitempty"`
	TeamId_0         *int32                                           `protobuf:"varint,3,opt,name=team_id_0,json=teamId0" json:"team_id_0,omitempty"`
	TeamId_1         *int32                                           `protobuf:"varint,4,opt,name=team_id_1,json=teamId1" json:"team_id_1,omitempty"`
	MapsCount        *int32                                           `protobuf:"varint,5,opt,name=maps_count,json=mapsCount" json:"maps_count,omitempty"`
	MapsCurrent      *int32                                           `protobuf:"varint,6,opt,name=maps_current,json=mapsCurrent" json:"maps_current,omitempty"`
	TeamIdStart      *int32                                           `protobuf:"varint,7,opt,name=team_id_start,json=teamIdStart" json:"team_id_start,omitempty"`
	TeamIdVeto1      *int32                                           `protobuf:"varint,8,opt,name=team_id_veto1,json=teamIdVeto1" json:"team_id_veto1,omitempty"`
	TeamIdPickn      *int32                                           `protobuf:"varint,9,opt,name=team_id_pickn,json=teamIdPickn" json:"team_id_pickn,omitempty"`
	Drafts           []*CDataGCCStrike15V2_TournamentMatchDraft_Entry `protobuf:"bytes,10,rep,name=drafts" json:"drafts,omitempty"`
	VoteMapid_0      []int32                                          `protobuf:"varint,11,rep,name=vote_mapid_0,json=voteMapid0" json:"vote_mapid_0,omitempty"`
	VoteMapid_1      []int32                                          `protobuf:"varint,12,rep,name=vote_mapid_1,json=voteMapid1" json:"vote_mapid_1,omitempty"`
	VoteMapid_2      []int32                                          `protobuf:"varint,13,rep,name=vote_mapid_2,json=voteMapid2" json:"vote_mapid_2,omitempty"`
	VoteMapid_3      []int32                                          `protobuf:"varint,14,rep,name=vote_mapid_3,json=voteMapid3" json:"vote_mapid_3,omitempty"`
	VoteMapid_4      []int32                                          `protobuf:"varint,15,rep,name=vote_mapid_4,json=voteMapid4" json:"vote_mapid_4,omitempty"`
	VoteMapid_5      []int32                                          `protobuf:"varint,16,rep,name=vote_mapid_5,json=voteMapid5" json:"vote_mapid_5,omitempty"`
	VoteStartingSide []int32                                          `protobuf:"varint,17,rep,name=vote_starting_side,json=voteStartingSide" json:"vote_starting_side,omitempty"`
	VotePhase        *int32                                           `protobuf:"varint,18,opt,name=vote_phase,json=votePhase" json:"vote_phase,omitempty"`
	VotePhaseStart   *float32                                         `protobuf:"fixed32,19,opt,name=vote_phase_start,json=votePhaseStart" json:"vote_phase_start,omitempty"`
	VotePhaseLength  *float32                                         `protobuf:"fixed32,20,opt,name=vote_phase_length,json=votePhaseLength" json:"vote_phase_length,omitempty"`
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) Reset() {
	*x = CDataGCCStrike15V2_TournamentMatchDraft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentMatchDraft) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentMatchDraft.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentMatchDraft) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{33}
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetEventId() int32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetEventStageId() int32 {
	if x != nil && x.EventStageId != nil {
		return *x.EventStageId
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamId_0() int32 {
	if x != nil && x.TeamId_0 != nil {
		return *x.TeamId_0
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamId_1() int32 {
	if x != nil && x.TeamId_1 != nil {
		return *x.TeamId_1
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetMapsCount() int32 {
	if x != nil && x.MapsCount != nil {
		return *x.MapsCount
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetMapsCurrent() int32 {
	if x != nil && x.MapsCurrent != nil {
		return *x.MapsCurrent
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdStart() int32 {
	if x != nil && x.TeamIdStart != nil {
		return *x.TeamIdStart
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdVeto1() int32 {
	if x != nil && x.TeamIdVeto1 != nil {
		return *x.TeamIdVeto1
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdPickn() int32 {
	if x != nil && x.TeamIdPickn != nil {
		return *x.TeamIdPickn
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetDrafts() []*CDataGCCStrike15V2_TournamentMatchDraft_Entry {
	if x != nil {
		return x.Drafts
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetVoteMapid_0() []int32 {
	if x != nil {
		return x.VoteMapid_0
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetVoteMapid_1() []int32 {
	if x != nil {
		return x.VoteMapid_1
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetVoteMapid_2() []int32 {
	if x != nil {
		return x.VoteMapid_2
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetVoteMapid_3() []int32 {
	if x != nil {
		return x.VoteMapid_3
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetVoteMapid_4() []int32 {
	if x != nil {
		return x.VoteMapid_4
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetVoteMapid_5() []int32 {
	if x != nil {
		return x.VoteMapid_5
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetVoteStartingSide() []int32 {
	if x != nil {
		return x.VoteStartingSide
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetVotePhase() int32 {
	if x != nil && x.VotePhase != nil {
		return *x.VotePhase
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetVotePhaseStart() float32 {
	if x != nil && x.VotePhaseStart != nil {
		return *x.VotePhaseStart
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft) GetVotePhaseLength() float32 {
	if x != nil && x.VotePhaseLength != nil {
		return *x.VotePhaseLength
	}
	return 0
}

type CPreMatchInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredictionsPct *int32                                   `protobuf:"varint,1,opt,name=predictions_pct,json=predictionsPct" json:"predictions_pct,omitempty"`
	Draft          *CDataGCCStrike15V2_TournamentMatchDraft `protobuf:"bytes,4,opt,name=draft" json:"draft,omitempty"`
	Stats          []*CPreMatchInfoData_TeamStats           `protobuf:"bytes,5,rep,name=stats" json:"stats,omitempty"`
	Wins           []int32                                  `protobuf:"varint,6,rep,name=wins" json:"wins,omitempty"`
}

func (x *CPreMatchInfoData) Reset() {
	*x = CPreMatchInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPreMatchInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPreMatchInfoData) ProtoMessage() {}

func (x *CPreMatchInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPreMatchInfoData.ProtoReflect.Descriptor instead.
func (*CPreMatchInfoData) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{34}
}

func (x *CPreMatchInfoData) GetPredictionsPct() int32 {
	if x != nil && x.PredictionsPct != nil {
		return *x.PredictionsPct
	}
	return 0
}

func (x *CPreMatchInfoData) GetDraft() *CDataGCCStrike15V2_TournamentMatchDraft {
	if x != nil {
		return x.Draft
	}
	return nil
}

func (x *CPreMatchInfoData) GetStats() []*CPreMatchInfoData_TeamStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CPreMatchInfoData) GetWins() []int32 {
	if x != nil {
		return x.Wins
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ServerReserve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIds                  []uint32               `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	GameType                    *uint32                `protobuf:"varint,2,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	MatchId                     *uint64                `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ServerVersion               *uint32                `protobuf:"varint,4,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	Flags                       *uint32                `protobuf:"varint,18,opt,name=flags" json:"flags,omitempty"`
	Rankings                    []*PlayerRankingInfo   `protobuf:"bytes,5,rep,name=rankings" json:"rankings,omitempty"`
	EncryptionKey               *uint64                `protobuf:"varint,6,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	EncryptionKeyPub            *uint64                `protobuf:"varint,7,opt,name=encryption_key_pub,json=encryptionKeyPub" json:"encryption_key_pub,omitempty"`
	PartyIds                    []uint32               `protobuf:"varint,8,rep,name=party_ids,json=partyIds" json:"party_ids,omitempty"`
	Whitelist                   []*IpAddressMask       `protobuf:"bytes,9,rep,name=whitelist" json:"whitelist,omitempty"`
	TvMasterSteamid             *uint64                `protobuf:"varint,10,opt,name=tv_master_steamid,json=tvMasterSteamid" json:"tv_master_steamid,omitempty"`
	TournamentEvent             *TournamentEvent       `protobuf:"bytes,11,opt,name=tournament_event,json=tournamentEvent" json:"tournament_event,omitempty"`
	TournamentTeams             []*TournamentTeam      `protobuf:"bytes,12,rep,name=tournament_teams,json=tournamentTeams" json:"tournament_teams,omitempty"`
	TournamentCastersAccountIds []uint32               `protobuf:"varint,13,rep,name=tournament_casters_account_ids,json=tournamentCastersAccountIds" json:"tournament_casters_account_ids,omitempty"`
	TvRelaySteamid              *uint64                `protobuf:"varint,14,opt,name=tv_relay_steamid,json=tvRelaySteamid" json:"tv_relay_steamid,omitempty"`
	PreMatchData                *CPreMatchInfoData     `protobuf:"bytes,15,opt,name=pre_match_data,json=preMatchData" json:"pre_match_data,omitempty"`
	Rtime32EventStart           *uint32                `protobuf:"varint,16,opt,name=rtime32_event_start,json=rtime32EventStart" json:"rtime32_event_start,omitempty"`
	TvControl                   *uint32                `protobuf:"varint,17,opt,name=tv_control,json=tvControl" json:"tv_control,omitempty"`
	OpVarValues                 []*OperationalVarValue `protobuf:"bytes,19,rep,name=op_var_values,json=opVarValues" json:"op_var_values,omitempty"`
	SocacheControl              *uint32                `protobuf:"varint,20,opt,name=socache_control,json=socacheControl" json:"socache_control,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ServerReserve.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetRankings() []*PlayerRankingInfo {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetEncryptionKey() uint64 {
	if x != nil && x.EncryptionKey != nil {
		return *x.EncryptionKey
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetEncryptionKeyPub() uint64 {
	if x != nil && x.EncryptionKeyPub != nil {
		return *x.EncryptionKeyPub
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetPartyIds() []uint32 {
	if x != nil {
		return x.PartyIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetWhitelist() []*IpAddressMask {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTvMasterSteamid() uint64 {
	if x != nil && x.TvMasterSteamid != nil {
		return *x.TvMasterSteamid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentEvent() *TournamentEvent {
	if x != nil {
		return x.TournamentEvent
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentTeams() []*TournamentTeam {
	if x != nil {
		return x.TournamentTeams
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentCastersAccountIds() []uint32 {
	if x != nil {
		return x.TournamentCastersAccountIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTvRelaySteamid() uint64 {
	if x != nil && x.TvRelaySteamid != nil {
		return *x.TvRelaySteamid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetPreMatchData() *CPreMatchInfoData {
	if x != nil {
		return x.PreMatchData
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetRtime32EventStart() uint32 {
	if x != nil && x.Rtime32EventStart != nil {
		return *x.Rtime32EventStart
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTvControl() uint32 {
	if x != nil && x.TvControl != nil {
		return *x.TvControl
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetOpVarValues() []*OperationalVarValue {
	if x != nil {
		return x.OpVarValues
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetSocacheControl() uint32 {
	if x != nil && x.SocacheControl != nil {
		return *x.SocacheControl
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingServerReservationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reservationid           *uint64                                        `protobuf:"varint,1,opt,name=reservationid" json:"reservationid,omitempty"`
	Reservation             *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Map                     *string                                        `protobuf:"bytes,3,opt,name=map" json:"map,omitempty"`
	GcReservationSent       *uint64                                        `protobuf:"varint,4,opt,name=gc_reservation_sent,json=gcReservationSent" json:"gc_reservation_sent,omitempty"`
	ServerVersion           *uint32                                        `protobuf:"varint,5,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	TvInfo                  *ServerHltvInfo                                `protobuf:"bytes,6,opt,name=tv_info,json=tvInfo" json:"tv_info,omitempty"`
	RewardPlayerAccounts    []uint32                                       `protobuf:"varint,7,rep,name=reward_player_accounts,json=rewardPlayerAccounts" json:"reward_player_accounts,omitempty"`
	IdlePlayerAccounts      []uint32                                       `protobuf:"varint,8,rep,name=idle_player_accounts,json=idlePlayerAccounts" json:"idle_player_accounts,omitempty"`
	RewardItemAttrDefIdx    *uint32                                        `protobuf:"varint,9,opt,name=reward_item_attr_def_idx,json=rewardItemAttrDefIdx" json:"reward_item_attr_def_idx,omitempty"`
	RewardItemAttrValue     *uint32                                        `protobuf:"varint,10,opt,name=reward_item_attr_value,json=rewardItemAttrValue" json:"reward_item_attr_value,omitempty"`
	RewardItemAttrRewardIdx *uint32                                        `protobuf:"varint,11,opt,name=reward_item_attr_reward_idx,json=rewardItemAttrRewardIdx" json:"reward_item_attr_reward_idx,omitempty"`
	RewardDropList          *uint32                                        `protobuf:"varint,12,opt,name=reward_drop_list,json=rewardDropList" json:"reward_drop_list,omitempty"`
	TournamentTag           *string                                        `protobuf:"bytes,13,opt,name=tournament_tag,json=tournamentTag" json:"tournament_tag,omitempty"`
	LegacySteamdatagramPort *uint32                                        `protobuf:"varint,14,opt,name=legacy_steamdatagram_port,json=legacySteamdatagramPort" json:"legacy_steamdatagram_port,omitempty"`
	SteamdatagramRouting    *uint32                                        `protobuf:"varint,17,opt,name=steamdatagram_routing,json=steamdatagramRouting" json:"steamdatagram_routing,omitempty"`
	TestToken               *uint32                                        `protobuf:"fixed32,15,opt,name=test_token,json=testToken" json:"test_token,omitempty"`
	Flags                   *uint32                                        `protobuf:"varint,16,opt,name=flags" json:"flags,omitempty"`
	SystemLoad              *uint32                                        `protobuf:"varint,18,opt,name=system_load,json=systemLoad" json:"system_load,omitempty"`
	CpusOnline              *uint32                                        `protobuf:"varint,19,opt,name=cpus_online,json=cpusOnline" json:"cpus_online,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingServerReservationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingServerReservationResponse) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingServerReservationResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetReservationid() uint64 {
	if x != nil && x.Reservationid != nil {
		return *x.Reservationid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetGcReservationSent() uint64 {
	if x != nil && x.GcReservationSent != nil {
		return *x.GcReservationSent
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetTvInfo() *ServerHltvInfo {
	if x != nil {
		return x.TvInfo
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardPlayerAccounts() []uint32 {
	if x != nil {
		return x.RewardPlayerAccounts
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetIdlePlayerAccounts() []uint32 {
	if x != nil {
		return x.IdlePlayerAccounts
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrDefIdx() uint32 {
	if x != nil && x.RewardItemAttrDefIdx != nil {
		return *x.RewardItemAttrDefIdx
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrValue() uint32 {
	if x != nil && x.RewardItemAttrValue != nil {
		return *x.RewardItemAttrValue
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrRewardIdx() uint32 {
	if x != nil && x.RewardItemAttrRewardIdx != nil {
		return *x.RewardItemAttrRewardIdx
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardDropList() uint32 {
	if x != nil && x.RewardDropList != nil {
		return *x.RewardDropList
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetTournamentTag() string {
	if x != nil && x.TournamentTag != nil {
		return *x.TournamentTag
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetLegacySteamdatagramPort() uint32 {
	if x != nil && x.LegacySteamdatagramPort != nil {
		return *x.LegacySteamdatagramPort
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetSteamdatagramRouting() uint32 {
	if x != nil && x.SteamdatagramRouting != nil {
		return *x.SteamdatagramRouting
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetTestToken() uint32 {
	if x != nil && x.TestToken != nil {
		return *x.TestToken
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetSystemLoad() uint32 {
	if x != nil && x.SystemLoad != nil {
		return *x.SystemLoad
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetCpusOnline() uint32 {
	if x != nil && x.CpusOnline != nil {
		return *x.CpusOnline
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientReserve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serverid      *uint64                                        `protobuf:"varint,1,opt,name=serverid" json:"serverid,omitempty"`
	DirectUdpIp   *uint32                                        `protobuf:"varint,2,opt,name=direct_udp_ip,json=directUdpIp" json:"direct_udp_ip,omitempty"`
	DirectUdpPort *uint32                                        `protobuf:"varint,3,opt,name=direct_udp_port,json=directUdpPort" json:"direct_udp_port,omitempty"`
	Reservationid *uint64                                        `protobuf:"varint,4,opt,name=reservationid" json:"reservationid,omitempty"`
	Reservation   *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,5,opt,name=reservation" json:"reservation,omitempty"`
	Map           *string                                        `protobuf:"bytes,6,opt,name=map" json:"map,omitempty"`
	ServerAddress *string                                        `protobuf:"bytes,7,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	GsPing        *DataCenterPing                                `protobuf:"bytes,8,opt,name=gs_ping,json=gsPing" json:"gs_ping,omitempty"`
	GsLocationId  *uint32                                        `protobuf:"varint,9,opt,name=gs_location_id,json=gsLocationId" json:"gs_location_id,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ClientReserve.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetServerid() uint64 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetDirectUdpIp() uint32 {
	if x != nil && x.DirectUdpIp != nil {
		return *x.DirectUdpIp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetDirectUdpPort() uint32 {
	if x != nil && x.DirectUdpPort != nil {
		return *x.DirectUdpPort
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetReservationid() uint64 {
	if x != nil && x.Reservationid != nil {
		return *x.Reservationid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetServerAddress() string {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetGsPing() *DataCenterPing {
	if x != nil {
		return x.GsPing
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetGsLocationId() uint32 {
	if x != nil && x.GsLocationId != nil {
		return *x.GsLocationId
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingServerRoundStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reservationid      *uint64                                                 `protobuf:"varint,1,opt,name=reservationid" json:"reservationid,omitempty"`
	Reservation        *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve          `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Map                *string                                                 `protobuf:"bytes,3,opt,name=map" json:"map,omitempty"`
	Round              *int32                                                  `protobuf:"varint,4,opt,name=round" json:"round,omitempty"`
	Kills              []int32                                                 `protobuf:"varint,5,rep,name=kills" json:"kills,omitempty"`
	Assists            []int32                                                 `protobuf:"varint,6,rep,name=assists" json:"assists,omitempty"`
	Deaths             []int32                                                 `protobuf:"varint,7,rep,name=deaths" json:"deaths,omitempty"`
	Scores             []int32                                                 `protobuf:"varint,8,rep,name=scores" json:"scores,omitempty"`
	Pings              []int32                                                 `protobuf:"varint,9,rep,name=pings" json:"pings,omitempty"`
	RoundResult        *int32                                                  `protobuf:"varint,10,opt,name=round_result,json=roundResult" json:"round_result,omitempty"`
	MatchResult        *int32                                                  `protobuf:"varint,11,opt,name=match_result,json=matchResult" json:"match_result,omitempty"`
	TeamScores         []int32                                                 `protobuf:"varint,12,rep,name=team_scores,json=teamScores" json:"team_scores,omitempty"`
	Confirm            *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm          `protobuf:"bytes,13,opt,name=confirm" json:"confirm,omitempty"`
	ReservationStage   *int32                                                  `protobuf:"varint,14,opt,name=reservation_stage,json=reservationStage" json:"reservation_stage,omitempty"`
	MatchDuration      *int32                                                  `protobuf:"varint,15,opt,name=match_duration,json=matchDuration" json:"match_duration,omitempty"`
	EnemyKills         []int32                                                 `protobuf:"varint,16,rep,name=enemy_kills,json=enemyKills" json:"enemy_kills,omitempty"`
	EnemyHeadshots     []int32                                                 `protobuf:"varint,17,rep,name=enemy_headshots,json=enemyHeadshots" json:"enemy_headshots,omitempty"`
	Enemy_3Ks          []int32                                                 `protobuf:"varint,18,rep,name=enemy_3ks,json=enemy3ks" json:"enemy_3ks,omitempty"`
	Enemy_4Ks          []int32                                                 `protobuf:"varint,19,rep,name=enemy_4ks,json=enemy4ks" json:"enemy_4ks,omitempty"`
	Enemy_5Ks          []int32                                                 `protobuf:"varint,20,rep,name=enemy_5ks,json=enemy5ks" json:"enemy_5ks,omitempty"`
	Mvps               []int32                                                 `protobuf:"varint,21,rep,name=mvps" json:"mvps,omitempty"`
	SpectatorsCount    *uint32                                                 `protobuf:"varint,22,opt,name=spectators_count,json=spectatorsCount" json:"spectators_count,omitempty"`
	SpectatorsCountTv  *uint32                                                 `protobuf:"varint,23,opt,name=spectators_count_tv,json=spectatorsCountTv" json:"spectators_count_tv,omitempty"`
	SpectatorsCountLnk *uint32                                                 `protobuf:"varint,24,opt,name=spectators_count_lnk,json=spectatorsCountLnk" json:"spectators_count_lnk,omitempty"`
	EnemyKillsAgg      []int32                                                 `protobuf:"varint,25,rep,name=enemy_kills_agg,json=enemyKillsAgg" json:"enemy_kills_agg,omitempty"`
	DropInfo           *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo `protobuf:"bytes,26,opt,name=drop_info,json=dropInfo" json:"drop_info,omitempty"`
	BSwitchedTeams     *bool                                                   `protobuf:"varint,27,opt,name=b_switched_teams,json=bSwitchedTeams" json:"b_switched_teams,omitempty"`
	Enemy_2Ks          []int32                                                 `protobuf:"varint,28,rep,name=enemy_2ks,json=enemy2ks" json:"enemy_2ks,omitempty"`
	PlayerSpawned      []int32                                                 `protobuf:"varint,29,rep,name=player_spawned,json=playerSpawned" json:"player_spawned,omitempty"`
	TeamSpawnCount     []int32                                                 `protobuf:"varint,30,rep,name=team_spawn_count,json=teamSpawnCount" json:"team_spawn_count,omitempty"`
	MaxRounds          *uint32                                                 `protobuf:"varint,31,opt,name=max_rounds,json=maxRounds" json:"max_rounds,omitempty"`
	MapId              *int32                                                  `protobuf:"varint,32,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingServerRoundStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingServerRoundStats.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservationid() uint64 {
	if x != nil && x.Reservationid != nil {
		return *x.Reservationid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetRound() int32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetKills() []int32 {
	if x != nil {
		return x.Kills
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetAssists() []int32 {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetDeaths() []int32 {
	if x != nil {
		return x.Deaths
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetScores() []int32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetPings() []int32 {
	if x != nil {
		return x.Pings
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetRoundResult() int32 {
	if x != nil && x.RoundResult != nil {
		return *x.RoundResult
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMatchResult() int32 {
	if x != nil && x.MatchResult != nil {
		return *x.MatchResult
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetTeamScores() []int32 {
	if x != nil {
		return x.TeamScores
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetConfirm() *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm {
	if x != nil {
		return x.Confirm
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservationStage() int32 {
	if x != nil && x.ReservationStage != nil {
		return *x.ReservationStage
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMatchDuration() int32 {
	if x != nil && x.MatchDuration != nil {
		return *x.MatchDuration
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyKills() []int32 {
	if x != nil {
		return x.EnemyKills
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyHeadshots() []int32 {
	if x != nil {
		return x.EnemyHeadshots
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_3Ks() []int32 {
	if x != nil {
		return x.Enemy_3Ks
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_4Ks() []int32 {
	if x != nil {
		return x.Enemy_4Ks
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_5Ks() []int32 {
	if x != nil {
		return x.Enemy_5Ks
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMvps() []int32 {
	if x != nil {
		return x.Mvps
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCount() uint32 {
	if x != nil && x.SpectatorsCount != nil {
		return *x.SpectatorsCount
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCountTv() uint32 {
	if x != nil && x.SpectatorsCountTv != nil {
		return *x.SpectatorsCountTv
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCountLnk() uint32 {
	if x != nil && x.SpectatorsCountLnk != nil {
		return *x.SpectatorsCountLnk
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyKillsAgg() []int32 {
	if x != nil {
		return x.EnemyKillsAgg
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetDropInfo() *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo {
	if x != nil {
		return x.DropInfo
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetBSwitchedTeams() bool {
	if x != nil && x.BSwitchedTeams != nil {
		return *x.BSwitchedTeams
	}
	return false
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_2Ks() []int32 {
	if x != nil {
		return x.Enemy_2Ks
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetPlayerSpawned() []int32 {
	if x != nil {
		return x.PlayerSpawned
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetTeamSpawnCount() []int32 {
	if x != nil {
		return x.TeamSpawnCount
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMaxRounds() uint32 {
	if x != nil && x.MaxRounds != nil {
		return *x.MaxRounds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMapId() int32 {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingClient2GCHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2GCHello) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingClient2GCHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingClient2GCHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingClient2GCHello) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingClient2GCHello) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingClient2GCHello.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingClient2GCHello) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{39}
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId            *uint32                                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Ongoingmatch         *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,2,opt,name=ongoingmatch" json:"ongoingmatch,omitempty"`
	GlobalStats          *GlobalStatistics                              `protobuf:"bytes,3,opt,name=global_stats,json=globalStats" json:"global_stats,omitempty"`
	PenaltySeconds       *uint32                                        `protobuf:"varint,4,opt,name=penalty_seconds,json=penaltySeconds" json:"penalty_seconds,omitempty"`
	PenaltyReason        *uint32                                        `protobuf:"varint,5,opt,name=penalty_reason,json=penaltyReason" json:"penalty_reason,omitempty"`
	VacBanned            *int32                                         `protobuf:"varint,6,opt,name=vac_banned,json=vacBanned" json:"vac_banned,omitempty"`
	Ranking              *PlayerRankingInfo                             `protobuf:"bytes,7,opt,name=ranking" json:"ranking,omitempty"`
	Commendation         *PlayerCommendationInfo                        `protobuf:"bytes,8,opt,name=commendation" json:"commendation,omitempty"`
	Medals               *PlayerMedalsInfo                              `protobuf:"bytes,9,opt,name=medals" json:"medals,omitempty"`
	MyCurrentEvent       *TournamentEvent                               `protobuf:"bytes,10,opt,name=my_current_event,json=myCurrentEvent" json:"my_current_event,omitempty"`
	MyCurrentEventTeams  []*TournamentTeam                              `protobuf:"bytes,11,rep,name=my_current_event_teams,json=myCurrentEventTeams" json:"my_current_event_teams,omitempty"`
	MyCurrentTeam        *TournamentTeam                                `protobuf:"bytes,12,opt,name=my_current_team,json=myCurrentTeam" json:"my_current_team,omitempty"`
	MyCurrentEventStages []*TournamentEvent                             `protobuf:"bytes,13,rep,name=my_current_event_stages,json=myCurrentEventStages" json:"my_current_event_stages,omitempty"`
	SurveyVote           *uint32                                        `protobuf:"varint,14,opt,name=survey_vote,json=surveyVote" json:"survey_vote,omitempty"`
	Activity             *AccountActivity                               `protobuf:"bytes,15,opt,name=activity" json:"activity,omitempty"`
	PlayerLevel          *int32                                         `protobuf:"varint,17,opt,name=player_level,json=playerLevel" json:"player_level,omitempty"`
	PlayerCurXp          *int32                                         `protobuf:"varint,18,opt,name=player_cur_xp,json=playerCurXp" json:"player_cur_xp,omitempty"`
	PlayerXpBonusFlags   *int32                                         `protobuf:"varint,19,opt,name=player_xp_bonus_flags,json=playerXpBonusFlags" json:"player_xp_bonus_flags,omitempty"`
	Rankings             []*PlayerRankingInfo                           `protobuf:"bytes,20,rep,name=rankings" json:"rankings,omitempty"`
	Owcaseid             *uint64                                        `protobuf:"varint,21,opt,name=owcaseid" json:"owcaseid,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ClientHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ClientHello) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ClientHello.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetOngoingmatch() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if x != nil {
		return x.Ongoingmatch
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetGlobalStats() *GlobalStatistics {
	if x != nil {
		return x.GlobalStats
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPenaltySeconds() uint32 {
	if x != nil && x.PenaltySeconds != nil {
		return *x.PenaltySeconds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPenaltyReason() uint32 {
	if x != nil && x.PenaltyReason != nil {
		return *x.PenaltyReason
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetVacBanned() int32 {
	if x != nil && x.VacBanned != nil {
		return *x.VacBanned
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetRanking() *PlayerRankingInfo {
	if x != nil {
		return x.Ranking
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetCommendation() *PlayerCommendationInfo {
	if x != nil {
		return x.Commendation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMedals() *PlayerMedalsInfo {
	if x != nil {
		return x.Medals
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEvent() *TournamentEvent {
	if x != nil {
		return x.MyCurrentEvent
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEventTeams() []*TournamentTeam {
	if x != nil {
		return x.MyCurrentEventTeams
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentTeam() *TournamentTeam {
	if x != nil {
		return x.MyCurrentTeam
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEventStages() []*TournamentEvent {
	if x != nil {
		return x.MyCurrentEventStages
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetSurveyVote() uint32 {
	if x != nil && x.SurveyVote != nil {
		return *x.SurveyVote
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetActivity() *AccountActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerLevel() int32 {
	if x != nil && x.PlayerLevel != nil {
		return *x.PlayerLevel
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerCurXp() int32 {
	if x != nil && x.PlayerCurXp != nil {
		return *x.PlayerCurXp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerXpBonusFlags() int32 {
	if x != nil && x.PlayerXpBonusFlags != nil {
		return *x.PlayerXpBonusFlags
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetRankings() []*PlayerRankingInfo {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetOwcaseid() uint64 {
	if x != nil && x.Owcaseid != nil {
		return *x.Owcaseid
	}
	return 0
}

type CMsgGCCStrike15V2_AccountPrivacySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings []*CMsgGCCStrike15V2_AccountPrivacySettings_Setting `protobuf:"bytes,1,rep,name=settings" json:"settings,omitempty"`
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings) Reset() {
	*x = CMsgGCCStrike15V2_AccountPrivacySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_AccountPrivacySettings) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_AccountPrivacySettings.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_AccountPrivacySettings) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings) GetSettings() []*CMsgGCCStrike15V2_AccountPrivacySettings_Setting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32                                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AbandonedMatch *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,2,opt,name=abandoned_match,json=abandonedMatch" json:"abandoned_match,omitempty"`
	PenaltySeconds *uint32                                        `protobuf:"varint,3,opt,name=penalty_seconds,json=penaltySeconds" json:"penalty_seconds,omitempty"`
	PenaltyReason  *uint32                                        `protobuf:"varint,4,opt,name=penalty_reason,json=penaltyReason" json:"penalty_reason,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetAbandonedMatch() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if x != nil {
		return x.AbandonedMatch
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetPenaltySeconds() uint32 {
	if x != nil && x.PenaltySeconds != nil {
		return *x.PenaltySeconds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetPenaltyReason() uint32 {
	if x != nil && x.PenaltyReason != nil {
		return *x.PenaltyReason
	}
	return 0
}

type CMsgGCCStrike15V2_ClientGCRankUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rankings []*PlayerRankingInfo `protobuf:"bytes,1,rep,name=rankings" json:"rankings,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientGCRankUpdate) Reset() {
	*x = CMsgGCCStrike15V2_ClientGCRankUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientGCRankUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientGCRankUpdate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientGCRankUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientGCRankUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientGCRankUpdate) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgGCCStrike15V2_ClientGCRankUpdate) GetRankings() []*PlayerRankingInfo {
	if x != nil {
		return x.Rankings
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainPostUrl *string `protobuf:"bytes,1,opt,name=main_post_url,json=mainPostUrl" json:"main_post_url,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) GetMainPostUrl() string {
	if x != nil && x.MainPostUrl != nil {
		return *x.MainPostUrl
	}
	return ""
}

type CMsgGCCStrike15V2_ServerNotificationForUserPenalty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId             *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Reason                *uint32 `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	Seconds               *uint32 `protobuf:"varint,3,opt,name=seconds" json:"seconds,omitempty"`
	CommunicationCooldown *bool   `protobuf:"varint,4,opt,name=communication_cooldown,json=communicationCooldown" json:"communication_cooldown,omitempty"`
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Reset() {
	*x = CMsgGCCStrike15V2_ServerNotificationForUserPenalty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ServerNotificationForUserPenalty) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ServerNotificationForUserPenalty.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetSeconds() uint32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetCommunicationCooldown() bool {
	if x != nil && x.CommunicationCooldown != nil {
		return *x.CommunicationCooldown
	}
	return false
}

type CMsgGCCStrike15V2_ClientReportPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RptAimbot      *uint32 `protobuf:"varint,2,opt,name=rpt_aimbot,json=rptAimbot" json:"rpt_aimbot,omitempty"`
	RptWallhack    *uint32 `protobuf:"varint,3,opt,name=rpt_wallhack,json=rptWallhack" json:"rpt_wallhack,omitempty"`
	RptSpeedhack   *uint32 `protobuf:"varint,4,opt,name=rpt_speedhack,json=rptSpeedhack" json:"rpt_speedhack,omitempty"`
	RptTeamharm    *uint32 `protobuf:"varint,5,opt,name=rpt_teamharm,json=rptTeamharm" json:"rpt_teamharm,omitempty"`
	RptTextabuse   *uint32 `protobuf:"varint,6,opt,name=rpt_textabuse,json=rptTextabuse" json:"rpt_textabuse,omitempty"`
	RptVoiceabuse  *uint32 `protobuf:"varint,7,opt,name=rpt_voiceabuse,json=rptVoiceabuse" json:"rpt_voiceabuse,omitempty"`
	MatchId        *uint64 `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ReportFromDemo *bool   `protobuf:"varint,9,opt,name=report_from_demo,json=reportFromDemo" json:"report_from_demo,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) Reset() {
	*x = CMsgGCCStrike15V2_ClientReportPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientReportPlayer) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientReportPlayer.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientReportPlayer) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptAimbot() uint32 {
	if x != nil && x.RptAimbot != nil {
		return *x.RptAimbot
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptWallhack() uint32 {
	if x != nil && x.RptWallhack != nil {
		return *x.RptWallhack
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptSpeedhack() uint32 {
	if x != nil && x.RptSpeedhack != nil {
		return *x.RptSpeedhack
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptTeamharm() uint32 {
	if x != nil && x.RptTeamharm != nil {
		return *x.RptTeamharm
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptTextabuse() uint32 {
	if x != nil && x.RptTextabuse != nil {
		return *x.RptTextabuse
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetRptVoiceabuse() uint32 {
	if x != nil && x.RptVoiceabuse != nil {
		return *x.RptVoiceabuse
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportPlayer) GetReportFromDemo() bool {
	if x != nil && x.ReportFromDemo != nil {
		return *x.ReportFromDemo
	}
	return false
}

type CMsgGCCStrike15V2_ClientCommendPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    *uint32                 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MatchId      *uint64                 `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Commendation *PlayerCommendationInfo `protobuf:"bytes,9,opt,name=commendation" json:"commendation,omitempty"`
	Tokens       *uint32                 `protobuf:"varint,10,opt,name=tokens" json:"tokens,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) Reset() {
	*x = CMsgGCCStrike15V2_ClientCommendPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientCommendPlayer) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientCommendPlayer.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientCommendPlayer) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) GetCommendation() *PlayerCommendationInfo {
	if x != nil {
		return x.Commendation
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientCommendPlayer) GetTokens() uint32 {
	if x != nil && x.Tokens != nil {
		return *x.Tokens
	}
	return 0
}

type CMsgGCCStrike15V2_ClientReportServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RptPoorperf       *uint32 `protobuf:"varint,1,opt,name=rpt_poorperf,json=rptPoorperf" json:"rpt_poorperf,omitempty"`
	RptAbusivemodels  *uint32 `protobuf:"varint,2,opt,name=rpt_abusivemodels,json=rptAbusivemodels" json:"rpt_abusivemodels,omitempty"`
	RptBadmotd        *uint32 `protobuf:"varint,3,opt,name=rpt_badmotd,json=rptBadmotd" json:"rpt_badmotd,omitempty"`
	RptListingabuse   *uint32 `protobuf:"varint,4,opt,name=rpt_listingabuse,json=rptListingabuse" json:"rpt_listingabuse,omitempty"`
	RptInventoryabuse *uint32 `protobuf:"varint,5,opt,name=rpt_inventoryabuse,json=rptInventoryabuse" json:"rpt_inventoryabuse,omitempty"`
	MatchId           *uint64 `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientReportServer) Reset() {
	*x = CMsgGCCStrike15V2_ClientReportServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientReportServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientReportServer) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientReportServer) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientReportServer.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientReportServer) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetRptPoorperf() uint32 {
	if x != nil && x.RptPoorperf != nil {
		return *x.RptPoorperf
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetRptAbusivemodels() uint32 {
	if x != nil && x.RptAbusivemodels != nil {
		return *x.RptAbusivemodels
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetRptBadmotd() uint32 {
	if x != nil && x.RptBadmotd != nil {
		return *x.RptBadmotd
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetRptListingabuse() uint32 {
	if x != nil && x.RptListingabuse != nil {
		return *x.RptListingabuse
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetRptInventoryabuse() uint32 {
	if x != nil && x.RptInventoryabuse != nil {
		return *x.RptInventoryabuse
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportServer) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmationId *uint64 `protobuf:"varint,1,opt,name=confirmation_id,json=confirmationId" json:"confirmation_id,omitempty"`
	AccountId      *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ServerIp       *uint32 `protobuf:"varint,3,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ResponseType   *uint32 `protobuf:"varint,4,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	ResponseResult *uint32 `protobuf:"varint,5,opt,name=response_result,json=responseResult" json:"response_result,omitempty"`
	Tokens         *uint32 `protobuf:"varint,6,opt,name=tokens" json:"tokens,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) Reset() {
	*x = CMsgGCCStrike15V2_ClientReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientReportResponse) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientReportResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientReportResponse) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetConfirmationId() uint64 {
	if x != nil && x.ConfirmationId != nil {
		return *x.ConfirmationId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetResponseType() uint32 {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetResponseResult() uint32 {
	if x != nil && x.ResponseResult != nil {
		return *x.ResponseResult
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportResponse) GetTokens() uint32 {
	if x != nil && x.Tokens != nil {
		return *x.Tokens
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestWatchInfoFriends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       *uint32           `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	AccountIds      []uint32          `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	Serverid        *uint64           `protobuf:"varint,3,opt,name=serverid" json:"serverid,omitempty"`
	Matchid         *uint64           `protobuf:"varint,4,opt,name=matchid" json:"matchid,omitempty"`
	ClientLauncher  *uint32           `protobuf:"varint,5,opt,name=client_launcher,json=clientLauncher" json:"client_launcher,omitempty"`
	DataCenterPings []*DataCenterPing `protobuf:"bytes,6,rep,name=data_center_pings,json=dataCenterPings" json:"data_center_pings,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestWatchInfoFriends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestWatchInfoFriends.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetServerid() uint64 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetClientLauncher() uint32 {
	if x != nil && x.ClientLauncher != nil {
		return *x.ClientLauncher
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetDataCenterPings() []*DataCenterPing {
	if x != nil {
		return x.DataCenterPings
	}
	return nil
}

type WatchableMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerIp            *uint32 `protobuf:"varint,1,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	TvPort              *uint32 `protobuf:"varint,2,opt,name=tv_port,json=tvPort" json:"tv_port,omitempty"`
	TvSpectators        *uint32 `protobuf:"varint,3,opt,name=tv_spectators,json=tvSpectators" json:"tv_spectators,omitempty"`
	TvTime              *uint32 `protobuf:"varint,4,opt,name=tv_time,json=tvTime" json:"tv_time,omitempty"`
	TvWatchPassword     []byte  `protobuf:"bytes,5,opt,name=tv_watch_password,json=tvWatchPassword" json:"tv_watch_password,omitempty"`
	ClDecryptdataKey    *uint64 `protobuf:"varint,6,opt,name=cl_decryptdata_key,json=clDecryptdataKey" json:"cl_decryptdata_key,omitempty"`
	ClDecryptdataKeyPub *uint64 `protobuf:"varint,7,opt,name=cl_decryptdata_key_pub,json=clDecryptdataKeyPub" json:"cl_decryptdata_key_pub,omitempty"`
	GameType            *uint32 `protobuf:"varint,8,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	GameMapgroup        *string `protobuf:"bytes,9,opt,name=game_mapgroup,json=gameMapgroup" json:"game_mapgroup,omitempty"`
	GameMap             *string `protobuf:"bytes,10,opt,name=game_map,json=gameMap" json:"game_map,omitempty"`
	ServerId            *uint64 `protobuf:"varint,11,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	MatchId             *uint64 `protobuf:"varint,12,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ReservationId       *uint64 `protobuf:"varint,13,opt,name=reservation_id,json=reservationId" json:"reservation_id,omitempty"`
}

func (x *WatchableMatchInfo) Reset() {
	*x = WatchableMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchableMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchableMatchInfo) ProtoMessage() {}

func (x *WatchableMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchableMatchInfo.ProtoReflect.Descriptor instead.
func (*WatchableMatchInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{51}
}

func (x *WatchableMatchInfo) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *WatchableMatchInfo) GetTvPort() uint32 {
	if x != nil && x.TvPort != nil {
		return *x.TvPort
	}
	return 0
}

func (x *WatchableMatchInfo) GetTvSpectators() uint32 {
	if x != nil && x.TvSpectators != nil {
		return *x.TvSpectators
	}
	return 0
}

func (x *WatchableMatchInfo) GetTvTime() uint32 {
	if x != nil && x.TvTime != nil {
		return *x.TvTime
	}
	return 0
}

func (x *WatchableMatchInfo) GetTvWatchPassword() []byte {
	if x != nil {
		return x.TvWatchPassword
	}
	return nil
}

func (x *WatchableMatchInfo) GetClDecryptdataKey() uint64 {
	if x != nil && x.ClDecryptdataKey != nil {
		return *x.ClDecryptdataKey
	}
	return 0
}

func (x *WatchableMatchInfo) GetClDecryptdataKeyPub() uint64 {
	if x != nil && x.ClDecryptdataKeyPub != nil {
		return *x.ClDecryptdataKeyPub
	}
	return 0
}

func (x *WatchableMatchInfo) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *WatchableMatchInfo) GetGameMapgroup() string {
	if x != nil && x.GameMapgroup != nil {
		return *x.GameMapgroup
	}
	return ""
}

func (x *WatchableMatchInfo) GetGameMap() string {
	if x != nil && x.GameMap != nil {
		return *x.GameMap
	}
	return ""
}

func (x *WatchableMatchInfo) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *WatchableMatchInfo) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *WatchableMatchInfo) GetReservationId() uint64 {
	if x != nil && x.ReservationId != nil {
		return *x.ReservationId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestJoinFriendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   *uint32                                        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	AccountId *uint32                                        `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	JoinToken *uint32                                        `protobuf:"varint,3,opt,name=join_token,json=joinToken" json:"join_token,omitempty"`
	JoinIpp   *uint32                                        `protobuf:"varint,4,opt,name=join_ipp,json=joinIpp" json:"join_ipp,omitempty"`
	Res       *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,5,opt,name=res" json:"res,omitempty"`
	Errormsg  *string                                        `protobuf:"bytes,6,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestJoinFriendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestJoinFriendData) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestJoinFriendData.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestJoinFriendData) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetJoinToken() uint32 {
	if x != nil && x.JoinToken != nil {
		return *x.JoinToken
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetJoinIpp() uint32 {
	if x != nil && x.JoinIpp != nil {
		return *x.JoinIpp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetRes() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if x != nil {
		return x.Res
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type CMsgGCCStrike15V2_ClientRequestJoinServerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    *uint32                                        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	AccountId  *uint32                                        `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Serverid   *uint64                                        `protobuf:"varint,3,opt,name=serverid" json:"serverid,omitempty"`
	ServerIp   *uint32                                        `protobuf:"varint,4,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ServerPort *uint32                                        `protobuf:"varint,5,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	Res        *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,6,opt,name=res" json:"res,omitempty"`
	Errormsg   *string                                        `protobuf:"bytes,7,opt,name=errormsg" json:"errormsg,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestJoinServerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestJoinServerData) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestJoinServerData.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestJoinServerData) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerid() uint64 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetRes() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if x != nil {
		return x.Res
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetErrormsg() string {
	if x != nil && x.Errormsg != nil {
		return *x.Errormsg
	}
	return ""
}

type CMsgGCCstrike15V2_ClientRequestNewMission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionId  *uint32 `protobuf:"varint,2,opt,name=mission_id,json=missionId" json:"mission_id,omitempty"`
	CampaignId *uint32 `protobuf:"varint,3,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
}

func (x *CMsgGCCstrike15V2_ClientRequestNewMission) Reset() {
	*x = CMsgGCCstrike15V2_ClientRequestNewMission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCstrike15V2_ClientRequestNewMission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCstrike15V2_ClientRequestNewMission) ProtoMessage() {}

func (x *CMsgGCCstrike15V2_ClientRequestNewMission) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCstrike15V2_ClientRequestNewMission.ProtoReflect.Descriptor instead.
func (*CMsgGCCstrike15V2_ClientRequestNewMission) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgGCCstrike15V2_ClientRequestNewMission) GetMissionId() uint32 {
	if x != nil && x.MissionId != nil {
		return *x.MissionId
	}
	return 0
}

func (x *CMsgGCCstrike15V2_ClientRequestNewMission) GetCampaignId() uint32 {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return 0
}

type CMsgGCCstrike15V2_ClientRedeemMissionReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CampaignId        *uint32 `protobuf:"varint,1,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	RedeemId          *uint32 `protobuf:"varint,2,opt,name=redeem_id,json=redeemId" json:"redeem_id,omitempty"`
	RedeemableBalance *uint32 `protobuf:"varint,3,opt,name=redeemable_balance,json=redeemableBalance" json:"redeemable_balance,omitempty"`
	ExpectedCost      *uint32 `protobuf:"varint,4,opt,name=expected_cost,json=expectedCost" json:"expected_cost,omitempty"`
}

func (x *CMsgGCCstrike15V2_ClientRedeemMissionReward) Reset() {
	*x = CMsgGCCstrike15V2_ClientRedeemMissionReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCstrike15V2_ClientRedeemMissionReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCstrike15V2_ClientRedeemMissionReward) ProtoMessage() {}

func (x *CMsgGCCstrike15V2_ClientRedeemMissionReward) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCstrike15V2_ClientRedeemMissionReward.ProtoReflect.Descriptor instead.
func (*CMsgGCCstrike15V2_ClientRedeemMissionReward) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgGCCstrike15V2_ClientRedeemMissionReward) GetCampaignId() uint32 {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return 0
}

func (x *CMsgGCCstrike15V2_ClientRedeemMissionReward) GetRedeemId() uint32 {
	if x != nil && x.RedeemId != nil {
		return *x.RedeemId
	}
	return 0
}

func (x *CMsgGCCstrike15V2_ClientRedeemMissionReward) GetRedeemableBalance() uint32 {
	if x != nil && x.RedeemableBalance != nil {
		return *x.RedeemableBalance
	}
	return 0
}

func (x *CMsgGCCstrike15V2_ClientRedeemMissionReward) GetExpectedCost() uint32 {
	if x != nil && x.ExpectedCost != nil {
		return *x.ExpectedCost
	}
	return 0
}

type CMsgGCCstrike15V2_ClientRedeemFreeReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerationTime    *uint32  `protobuf:"varint,1,opt,name=generation_time,json=generationTime" json:"generation_time,omitempty"`
	RedeemableBalance *uint32  `protobuf:"varint,2,opt,name=redeemable_balance,json=redeemableBalance" json:"redeemable_balance,omitempty"`
	Items             []uint64 `protobuf:"varint,3,rep,name=items" json:"items,omitempty"`
}

func (x *CMsgGCCstrike15V2_ClientRedeemFreeReward) Reset() {
	*x = CMsgGCCstrike15V2_ClientRedeemFreeReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCstrike15V2_ClientRedeemFreeReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCstrike15V2_ClientRedeemFreeReward) ProtoMessage() {}

func (x *CMsgGCCstrike15V2_ClientRedeemFreeReward) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCstrike15V2_ClientRedeemFreeReward.ProtoReflect.Descriptor instead.
func (*CMsgGCCstrike15V2_ClientRedeemFreeReward) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgGCCstrike15V2_ClientRedeemFreeReward) GetGenerationTime() uint32 {
	if x != nil && x.GenerationTime != nil {
		return *x.GenerationTime
	}
	return 0
}

func (x *CMsgGCCstrike15V2_ClientRedeemFreeReward) GetRedeemableBalance() uint32 {
	if x != nil && x.RedeemableBalance != nil {
		return *x.RedeemableBalance
	}
	return 0
}

func (x *CMsgGCCstrike15V2_ClientRedeemFreeReward) GetItems() []uint64 {
	if x != nil {
		return x.Items
	}
	return nil
}

type CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XpProgressData         []*XpProgressData `protobuf:"bytes,1,rep,name=xp_progress_data,json=xpProgressData" json:"xp_progress_data,omitempty"`
	AccountId              *uint32           `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CurrentXp              *uint32           `protobuf:"varint,3,opt,name=current_xp,json=currentXp" json:"current_xp,omitempty"`
	CurrentLevel           *uint32           `protobuf:"varint,4,opt,name=current_level,json=currentLevel" json:"current_level,omitempty"`
	UpgradedDefidx         *uint32           `protobuf:"varint,5,opt,name=upgraded_defidx,json=upgradedDefidx" json:"upgraded_defidx,omitempty"`
	OperationPointsAwarded *uint32           `protobuf:"varint,6,opt,name=operation_points_awarded,json=operationPointsAwarded" json:"operation_points_awarded,omitempty"`
	FreeRewards            *uint32           `protobuf:"varint,7,opt,name=free_rewards,json=freeRewards" json:"free_rewards,omitempty"`
	XpTrailRemaining       *uint32           `protobuf:"varint,8,opt,name=xp_trail_remaining,json=xpTrailRemaining" json:"xp_trail_remaining,omitempty"`
	XpTrailXpNeeded        *int32            `protobuf:"varint,9,opt,name=xp_trail_xp_needed,json=xpTrailXpNeeded" json:"xp_trail_xp_needed,omitempty"`
	XpTrailLevel           *uint32           `protobuf:"varint,10,opt,name=xp_trail_level,json=xpTrailLevel" json:"xp_trail_level,omitempty"`
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Reset() {
	*x = CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) ProtoMessage() {}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded.ProtoReflect.Descriptor instead.
func (*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetXpProgressData() []*XpProgressData {
	if x != nil {
		return x.XpProgressData
	}
	return nil
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetCurrentXp() uint32 {
	if x != nil && x.CurrentXp != nil {
		return *x.CurrentXp
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetCurrentLevel() uint32 {
	if x != nil && x.CurrentLevel != nil {
		return *x.CurrentLevel
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetUpgradedDefidx() uint32 {
	if x != nil && x.UpgradedDefidx != nil {
		return *x.UpgradedDefidx
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetOperationPointsAwarded() uint32 {
	if x != nil && x.OperationPointsAwarded != nil {
		return *x.OperationPointsAwarded
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetFreeRewards() uint32 {
	if x != nil && x.FreeRewards != nil {
		return *x.FreeRewards
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetXpTrailRemaining() uint32 {
	if x != nil && x.XpTrailRemaining != nil {
		return *x.XpTrailRemaining
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetXpTrailXpNeeded() int32 {
	if x != nil && x.XpTrailXpNeeded != nil {
		return *x.XpTrailXpNeeded
	}
	return 0
}

func (x *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetXpTrailLevel() uint32 {
	if x != nil && x.XpTrailLevel != nil {
		return *x.XpTrailLevel
	}
	return 0
}

type CMsgGCCStrike15V2_ClientNetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientNetworkConfig) Reset() {
	*x = CMsgGCCStrike15V2_ClientNetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientNetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientNetworkConfig) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientNetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientNetworkConfig.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientNetworkConfig) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgGCCStrike15V2_ClientNetworkConfig) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CMsgGCCStrike15_ClientDeepStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32                                           `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Range     *CMsgGCCStrike15_ClientDeepStats_DeepStatsRange   `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
	Matches   []*CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch `protobuf:"bytes,3,rep,name=matches" json:"matches,omitempty"`
}

func (x *CMsgGCCStrike15_ClientDeepStats) Reset() {
	*x = CMsgGCCStrike15_ClientDeepStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15_ClientDeepStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15_ClientDeepStats) ProtoMessage() {}

func (x *CMsgGCCStrike15_ClientDeepStats) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15_ClientDeepStats.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15_ClientDeepStats) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgGCCStrike15_ClientDeepStats) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15_ClientDeepStats) GetRange() *CMsgGCCStrike15_ClientDeepStats_DeepStatsRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *CMsgGCCStrike15_ClientDeepStats) GetMatches() []*CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

type CMsgGCCStrike15V2_WatchInfoUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId           *uint32               `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	AccountIds          []uint32              `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	WatchableMatchInfos []*WatchableMatchInfo `protobuf:"bytes,3,rep,name=watchable_match_infos,json=watchableMatchInfos" json:"watchable_match_infos,omitempty"`
	ExtendedTimeout     *uint32               `protobuf:"varint,5,opt,name=extended_timeout,json=extendedTimeout" json:"extended_timeout,omitempty"`
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) Reset() {
	*x = CMsgGCCStrike15V2_WatchInfoUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_WatchInfoUsers) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_WatchInfoUsers.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_WatchInfoUsers) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) GetWatchableMatchInfos() []*WatchableMatchInfo {
	if x != nil {
		return x.WatchableMatchInfos
	}
	return nil
}

func (x *CMsgGCCStrike15V2_WatchInfoUsers) GetExtendedTimeout() uint32 {
	if x != nil && x.ExtendedTimeout != nil {
		return *x.ExtendedTimeout
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestPlayersProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId_Deprecated  *uint32  `protobuf:"varint,1,opt,name=request_id__deprecated,json=requestIdDeprecated" json:"request_id__deprecated,omitempty"`
	AccountIds_Deprecated []uint32 `protobuf:"varint,2,rep,name=account_ids__deprecated,json=accountIdsDeprecated" json:"account_ids__deprecated,omitempty"`
	AccountId             *uint32  `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RequestLevel          *uint32  `protobuf:"varint,4,opt,name=request_level,json=requestLevel" json:"request_level,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestPlayersProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestPlayersProfile) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestPlayersProfile.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestPlayersProfile) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetRequestId_Deprecated() uint32 {
	if x != nil && x.RequestId_Deprecated != nil {
		return *x.RequestId_Deprecated
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetAccountIds_Deprecated() []uint32 {
	if x != nil {
		return x.AccountIds_Deprecated
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetRequestLevel() uint32 {
	if x != nil && x.RequestLevel != nil {
		return *x.RequestLevel
	}
	return 0
}

type CMsgGCCStrike15V2_PlayersProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       *uint32                                        `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	AccountProfiles []*CMsgGCCStrike15V2_MatchmakingGC2ClientHello `protobuf:"bytes,2,rep,name=account_profiles,json=accountProfiles" json:"account_profiles,omitempty"`
}

func (x *CMsgGCCStrike15V2_PlayersProfile) Reset() {
	*x = CMsgGCCStrike15V2_PlayersProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_PlayersProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_PlayersProfile) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_PlayersProfile) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_PlayersProfile.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_PlayersProfile) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgGCCStrike15V2_PlayersProfile) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayersProfile) GetAccountProfiles() []*CMsgGCCStrike15V2_MatchmakingGC2ClientHello {
	if x != nil {
		return x.AccountProfiles
	}
	return nil
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Caseid       *uint64 `protobuf:"varint,1,opt,name=caseid" json:"caseid,omitempty"`
	Suspectid    *uint32 `protobuf:"varint,3,opt,name=suspectid" json:"suspectid,omitempty"`
	Fractionid   *uint32 `protobuf:"varint,4,opt,name=fractionid" json:"fractionid,omitempty"`
	RptAimbot    *uint32 `protobuf:"varint,5,opt,name=rpt_aimbot,json=rptAimbot" json:"rpt_aimbot,omitempty"`
	RptWallhack  *uint32 `protobuf:"varint,6,opt,name=rpt_wallhack,json=rptWallhack" json:"rpt_wallhack,omitempty"`
	RptSpeedhack *uint32 `protobuf:"varint,7,opt,name=rpt_speedhack,json=rptSpeedhack" json:"rpt_speedhack,omitempty"`
	RptTeamharm  *uint32 `protobuf:"varint,8,opt,name=rpt_teamharm,json=rptTeamharm" json:"rpt_teamharm,omitempty"`
	Reason       *uint32 `protobuf:"varint,9,opt,name=reason" json:"reason,omitempty"`
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Reset() {
	*x = CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetCaseid() uint64 {
	if x != nil && x.Caseid != nil {
		return *x.Caseid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetSuspectid() uint32 {
	if x != nil && x.Suspectid != nil {
		return *x.Suspectid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetFractionid() uint32 {
	if x != nil && x.Fractionid != nil {
		return *x.Fractionid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptAimbot() uint32 {
	if x != nil && x.RptAimbot != nil {
		return *x.RptAimbot
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptWallhack() uint32 {
	if x != nil && x.RptWallhack != nil {
		return *x.RptWallhack
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptSpeedhack() uint32 {
	if x != nil && x.RptSpeedhack != nil {
		return *x.RptSpeedhack
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptTeamharm() uint32 {
	if x != nil && x.RptTeamharm != nil {
		return *x.RptTeamharm
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Caseid            *uint64 `protobuf:"varint,1,opt,name=caseid" json:"caseid,omitempty"`
	Caseurl           *string `protobuf:"bytes,2,opt,name=caseurl" json:"caseurl,omitempty"`
	Verdict           *uint32 `protobuf:"varint,3,opt,name=verdict" json:"verdict,omitempty"`
	Timestamp         *uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Throttleseconds   *uint32 `protobuf:"varint,5,opt,name=throttleseconds" json:"throttleseconds,omitempty"`
	Suspectid         *uint32 `protobuf:"varint,6,opt,name=suspectid" json:"suspectid,omitempty"`
	Fractionid        *uint32 `protobuf:"varint,7,opt,name=fractionid" json:"fractionid,omitempty"`
	Numrounds         *uint32 `protobuf:"varint,8,opt,name=numrounds" json:"numrounds,omitempty"`
	Fractionrounds    *uint32 `protobuf:"varint,9,opt,name=fractionrounds" json:"fractionrounds,omitempty"`
	Streakconvictions *int32  `protobuf:"varint,10,opt,name=streakconvictions" json:"streakconvictions,omitempty"`
	Reason            *uint32 `protobuf:"varint,11,opt,name=reason" json:"reason,omitempty"`
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Reset() {
	*x = CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetCaseid() uint64 {
	if x != nil && x.Caseid != nil {
		return *x.Caseid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetCaseurl() string {
	if x != nil && x.Caseurl != nil {
		return *x.Caseurl
	}
	return ""
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetVerdict() uint32 {
	if x != nil && x.Verdict != nil {
		return *x.Verdict
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetThrottleseconds() uint32 {
	if x != nil && x.Throttleseconds != nil {
		return *x.Throttleseconds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetSuspectid() uint32 {
	if x != nil && x.Suspectid != nil {
		return *x.Suspectid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetFractionid() uint32 {
	if x != nil && x.Fractionid != nil {
		return *x.Fractionid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetNumrounds() uint32 {
	if x != nil && x.Numrounds != nil {
		return *x.Numrounds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetFractionrounds() uint32 {
	if x != nil && x.Fractionrounds != nil {
		return *x.Fractionrounds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetStreakconvictions() int32 {
	if x != nil && x.Streakconvictions != nil {
		return *x.Streakconvictions
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Caseid   *uint64 `protobuf:"varint,1,opt,name=caseid" json:"caseid,omitempty"`
	Statusid *uint32 `protobuf:"varint,2,opt,name=statusid" json:"statusid,omitempty"`
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Reset() {
	*x = CMsgGCCStrike15V2_PlayerOverwatchCaseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_PlayerOverwatchCaseStatus.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) GetCaseid() uint64 {
	if x != nil && x.Caseid != nil {
		return *x.Caseid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) GetStatusid() uint32 {
	if x != nil && x.Statusid != nil {
		return *x.Statusid
	}
	return 0
}

type CClientHeaderOverwatchEvidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Caseid    *uint64 `protobuf:"varint,2,opt,name=caseid" json:"caseid,omitempty"`
}

func (x *CClientHeaderOverwatchEvidence) Reset() {
	*x = CClientHeaderOverwatchEvidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientHeaderOverwatchEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientHeaderOverwatchEvidence) ProtoMessage() {}

func (x *CClientHeaderOverwatchEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientHeaderOverwatchEvidence.ProtoReflect.Descriptor instead.
func (*CClientHeaderOverwatchEvidence) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{66}
}

func (x *CClientHeaderOverwatchEvidence) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CClientHeaderOverwatchEvidence) GetCaseid() uint64 {
	if x != nil && x.Caseid != nil {
		return *x.Caseid
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ClientTextMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type    *uint32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Payload []byte  `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) Reset() {
	*x = CMsgGCCStrike15V2_GC2ClientTextMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ClientTextMsg) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ClientTextMsg.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ClientTextMsg) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientTextMsg) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CMsgGCCStrike15V2_Client2GCTextMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Args [][]byte `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (x *CMsgGCCStrike15V2_Client2GCTextMsg) Reset() {
	*x = CMsgGCCStrike15V2_Client2GCTextMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Client2GCTextMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Client2GCTextMsg) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Client2GCTextMsg) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Client2GCTextMsg.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Client2GCTextMsg) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgGCCStrike15V2_Client2GCTextMsg) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCTextMsg) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type CMsgGCCStrike15V2_MatchEndRunRewardDrops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serverinfo        *CMsgGCCStrike15V2_MatchmakingServerReservationResponse `protobuf:"bytes,3,opt,name=serverinfo" json:"serverinfo,omitempty"`
	MatchEndQuestData *CMsgGC_ServerQuestUpdateData                           `protobuf:"bytes,4,opt,name=match_end_quest_data,json=matchEndQuestData" json:"match_end_quest_data,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchEndRunRewardDrops) Reset() {
	*x = CMsgGCCStrike15V2_MatchEndRunRewardDrops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchEndRunRewardDrops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchEndRunRewardDrops) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchEndRunRewardDrops) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchEndRunRewardDrops.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchEndRunRewardDrops) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgGCCStrike15V2_MatchEndRunRewardDrops) GetServerinfo() *CMsgGCCStrike15V2_MatchmakingServerReservationResponse {
	if x != nil {
		return x.Serverinfo
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchEndRunRewardDrops) GetMatchEndQuestData() *CMsgGC_ServerQuestUpdateData {
	if x != nil {
		return x.MatchEndQuestData
	}
	return nil
}

type CEconItemPreviewDataBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid          *uint32                              `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Itemid             *uint64                              `protobuf:"varint,2,opt,name=itemid" json:"itemid,omitempty"`
	Defindex           *uint32                              `protobuf:"varint,3,opt,name=defindex" json:"defindex,omitempty"`
	Paintindex         *uint32                              `protobuf:"varint,4,opt,name=paintindex" json:"paintindex,omitempty"`
	Rarity             *uint32                              `protobuf:"varint,5,opt,name=rarity" json:"rarity,omitempty"`
	Quality            *uint32                              `protobuf:"varint,6,opt,name=quality" json:"quality,omitempty"`
	Paintwear          *uint32                              `protobuf:"varint,7,opt,name=paintwear" json:"paintwear,omitempty"`
	Paintseed          *uint32                              `protobuf:"varint,8,opt,name=paintseed" json:"paintseed,omitempty"`
	Killeaterscoretype *uint32                              `protobuf:"varint,9,opt,name=killeaterscoretype" json:"killeaterscoretype,omitempty"`
	Killeatervalue     *uint32                              `protobuf:"varint,10,opt,name=killeatervalue" json:"killeatervalue,omitempty"`
	Customname         *string                              `protobuf:"bytes,11,opt,name=customname" json:"customname,omitempty"`
	Stickers           []*CEconItemPreviewDataBlock_Sticker `protobuf:"bytes,12,rep,name=stickers" json:"stickers,omitempty"`
	Inventory          *uint32                              `protobuf:"varint,13,opt,name=inventory" json:"inventory,omitempty"`
	Origin             *uint32                              `protobuf:"varint,14,opt,name=origin" json:"origin,omitempty"`
	Questid            *uint32                              `protobuf:"varint,15,opt,name=questid" json:"questid,omitempty"`
	Dropreason         *uint32                              `protobuf:"varint,16,opt,name=dropreason" json:"dropreason,omitempty"`
	Musicindex         *uint32                              `protobuf:"varint,17,opt,name=musicindex" json:"musicindex,omitempty"`
	Entindex           *int32                               `protobuf:"varint,18,opt,name=entindex" json:"entindex,omitempty"`
}

func (x *CEconItemPreviewDataBlock) Reset() {
	*x = CEconItemPreviewDataBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEconItemPreviewDataBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEconItemPreviewDataBlock) ProtoMessage() {}

func (x *CEconItemPreviewDataBlock) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEconItemPreviewDataBlock.ProtoReflect.Descriptor instead.
func (*CEconItemPreviewDataBlock) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{70}
}

func (x *CEconItemPreviewDataBlock) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetPaintindex() uint32 {
	if x != nil && x.Paintindex != nil {
		return *x.Paintindex
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetRarity() uint32 {
	if x != nil && x.Rarity != nil {
		return *x.Rarity
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetPaintwear() uint32 {
	if x != nil && x.Paintwear != nil {
		return *x.Paintwear
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetPaintseed() uint32 {
	if x != nil && x.Paintseed != nil {
		return *x.Paintseed
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetKilleaterscoretype() uint32 {
	if x != nil && x.Killeaterscoretype != nil {
		return *x.Killeaterscoretype
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetKilleatervalue() uint32 {
	if x != nil && x.Killeatervalue != nil {
		return *x.Killeatervalue
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetCustomname() string {
	if x != nil && x.Customname != nil {
		return *x.Customname
	}
	return ""
}

func (x *CEconItemPreviewDataBlock) GetStickers() []*CEconItemPreviewDataBlock_Sticker {
	if x != nil {
		return x.Stickers
	}
	return nil
}

func (x *CEconItemPreviewDataBlock) GetInventory() uint32 {
	if x != nil && x.Inventory != nil {
		return *x.Inventory
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetOrigin() uint32 {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetDropreason() uint32 {
	if x != nil && x.Dropreason != nil {
		return *x.Dropreason
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetMusicindex() uint32 {
	if x != nil && x.Musicindex != nil {
		return *x.Musicindex
	}
	return 0
}

func (x *CEconItemPreviewDataBlock) GetEntindex() int32 {
	if x != nil && x.Entindex != nil {
		return *x.Entindex
	}
	return 0
}

type CMsgGCCStrike15V2_MatchEndRewardDropsNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,6,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Reset() {
	*x = CMsgGCCStrike15V2_MatchEndRewardDropsNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchEndRewardDropsNotification) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchEndRewardDropsNotification.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) GetIteminfo() *CEconItemPreviewDataBlock {
	if x != nil {
		return x.Iteminfo
	}
	return nil
}

type CMsgItemAcknowledged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,1,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

func (x *CMsgItemAcknowledged) Reset() {
	*x = CMsgItemAcknowledged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgItemAcknowledged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgItemAcknowledged) ProtoMessage() {}

func (x *CMsgItemAcknowledged) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgItemAcknowledged.ProtoReflect.Descriptor instead.
func (*CMsgItemAcknowledged) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgItemAcknowledged) GetIteminfo() *CEconItemPreviewDataBlock {
	if x != nil {
		return x.Iteminfo
	}
	return nil
}

type CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamS *uint64 `protobuf:"varint,1,opt,name=param_s,json=paramS" json:"param_s,omitempty"`
	ParamA *uint64 `protobuf:"varint,2,opt,name=param_a,json=paramA" json:"param_a,omitempty"`
	ParamD *uint64 `protobuf:"varint,3,opt,name=param_d,json=paramD" json:"param_d,omitempty"`
	ParamM *uint64 `protobuf:"varint,4,opt,name=param_m,json=paramM" json:"param_m,omitempty"`
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Reset() {
	*x = CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamS() uint64 {
	if x != nil && x.ParamS != nil {
		return *x.ParamS
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamA() uint64 {
	if x != nil && x.ParamA != nil {
		return *x.ParamA
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamD() uint64 {
	if x != nil && x.ParamD != nil {
		return *x.ParamD
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamM() uint64 {
	if x != nil && x.ParamM != nil {
		return *x.ParamM
	}
	return 0
}

type CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,1,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Reset() {
	*x = CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) GetIteminfo() *CEconItemPreviewDataBlock {
	if x != nil {
		return x.Iteminfo
	}
	return nil
}

type CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Reset() {
	*x = CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{75}
}

type CMsgGCCStrike15V2_MatchListRequestLiveGameForUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Reset() {
	*x = CMsgGCCStrike15V2_MatchListRequestLiveGameForUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchListRequestLiveGameForUser.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestRecentUserGames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Reset() {
	*x = CMsgGCCStrike15V2_MatchListRequestRecentUserGames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchListRequestRecentUserGames) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchListRequestRecentUserGames.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestTournamentGames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eventid *int32 `protobuf:"varint,1,opt,name=eventid" json:"eventid,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchListRequestTournamentGames) Reset() {
	*x = CMsgGCCStrike15V2_MatchListRequestTournamentGames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchListRequestTournamentGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchListRequestTournamentGames) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchListRequestTournamentGames) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchListRequestTournamentGames.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchListRequestTournamentGames) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{78}
}

func (x *CMsgGCCStrike15V2_MatchListRequestTournamentGames) GetEventid() int32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestFullGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matchid   *uint64 `protobuf:"varint,1,opt,name=matchid" json:"matchid,omitempty"`
	Outcomeid *uint64 `protobuf:"varint,2,opt,name=outcomeid" json:"outcomeid,omitempty"`
	Token     *uint32 `protobuf:"varint,3,opt,name=token" json:"token,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Reset() {
	*x = CMsgGCCStrike15V2_MatchListRequestFullGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchListRequestFullGameInfo) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchListRequestFullGameInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{79}
}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetOutcomeid() uint64 {
	if x != nil && x.Outcomeid != nil {
		return *x.Outcomeid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetToken() uint32 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

type CDataGCCStrike15V2_MatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matchid            *uint64                                          `protobuf:"varint,1,opt,name=matchid" json:"matchid,omitempty"`
	Matchtime          *uint32                                          `protobuf:"varint,2,opt,name=matchtime" json:"matchtime,omitempty"`
	Watchablematchinfo *WatchableMatchInfo                              `protobuf:"bytes,3,opt,name=watchablematchinfo" json:"watchablematchinfo,omitempty"`
	RoundstatsLegacy   *CMsgGCCStrike15V2_MatchmakingServerRoundStats   `protobuf:"bytes,4,opt,name=roundstats_legacy,json=roundstatsLegacy" json:"roundstats_legacy,omitempty"`
	Roundstatsall      []*CMsgGCCStrike15V2_MatchmakingServerRoundStats `protobuf:"bytes,5,rep,name=roundstatsall" json:"roundstatsall,omitempty"`
}

func (x *CDataGCCStrike15V2_MatchInfo) Reset() {
	*x = CDataGCCStrike15V2_MatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDataGCCStrike15V2_MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_MatchInfo) ProtoMessage() {}

func (x *CDataGCCStrike15V2_MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_MatchInfo.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_MatchInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{80}
}

func (x *CDataGCCStrike15V2_MatchInfo) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CDataGCCStrike15V2_MatchInfo) GetMatchtime() uint32 {
	if x != nil && x.Matchtime != nil {
		return *x.Matchtime
	}
	return 0
}

func (x *CDataGCCStrike15V2_MatchInfo) GetWatchablematchinfo() *WatchableMatchInfo {
	if x != nil {
		return x.Watchablematchinfo
	}
	return nil
}

func (x *CDataGCCStrike15V2_MatchInfo) GetRoundstatsLegacy() *CMsgGCCStrike15V2_MatchmakingServerRoundStats {
	if x != nil {
		return x.RoundstatsLegacy
	}
	return nil
}

func (x *CDataGCCStrike15V2_MatchInfo) GetRoundstatsall() []*CMsgGCCStrike15V2_MatchmakingServerRoundStats {
	if x != nil {
		return x.Roundstatsall
	}
	return nil
}

type CDataGCCStrike15V2_TournamentGroupTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId      *int32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Score       *int32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Correctpick *bool  `protobuf:"varint,3,opt,name=correctpick" json:"correctpick,omitempty"`
}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) Reset() {
	*x = CDataGCCStrike15V2_TournamentGroupTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentGroupTeam) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentGroupTeam.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentGroupTeam) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{81}
}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) GetTeamId() int32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroupTeam) GetCorrectpick() bool {
	if x != nil && x.Correctpick != nil {
		return *x.Correctpick
	}
	return false
}

type CDataGCCStrike15V2_TournamentGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupid           *uint32                                     `protobuf:"varint,1,opt,name=groupid" json:"groupid,omitempty"`
	Name              *string                                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Desc              *string                                     `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	Picks_Deprecated  *uint32                                     `protobuf:"varint,4,opt,name=picks__deprecated,json=picksDeprecated" json:"picks__deprecated,omitempty"`
	Teams             []*CDataGCCStrike15V2_TournamentGroupTeam   `protobuf:"bytes,5,rep,name=teams" json:"teams,omitempty"`
	StageIds          []int32                                     `protobuf:"varint,6,rep,name=stage_ids,json=stageIds" json:"stage_ids,omitempty"`
	Picklockuntiltime *uint32                                     `protobuf:"varint,7,opt,name=picklockuntiltime" json:"picklockuntiltime,omitempty"`
	Pickableteams     *uint32                                     `protobuf:"varint,8,opt,name=pickableteams" json:"pickableteams,omitempty"`
	PointsPerPick     *uint32                                     `protobuf:"varint,9,opt,name=points_per_pick,json=pointsPerPick" json:"points_per_pick,omitempty"`
	Picks             []*CDataGCCStrike15V2_TournamentGroup_Picks `protobuf:"bytes,10,rep,name=picks" json:"picks,omitempty"`
}

func (x *CDataGCCStrike15V2_TournamentGroup) Reset() {
	*x = CDataGCCStrike15V2_TournamentGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDataGCCStrike15V2_TournamentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentGroup) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentGroup.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentGroup) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{82}
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetPicks_Deprecated() uint32 {
	if x != nil && x.Picks_Deprecated != nil {
		return *x.Picks_Deprecated
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetTeams() []*CDataGCCStrike15V2_TournamentGroupTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetStageIds() []int32 {
	if x != nil {
		return x.StageIds
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetPicklockuntiltime() uint32 {
	if x != nil && x.Picklockuntiltime != nil {
		return *x.Picklockuntiltime
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetPickableteams() uint32 {
	if x != nil && x.Pickableteams != nil {
		return *x.Pickableteams
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetPointsPerPick() uint32 {
	if x != nil && x.PointsPerPick != nil {
		return *x.PointsPerPick
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentGroup) GetPicks() []*CDataGCCStrike15V2_TournamentGroup_Picks {
	if x != nil {
		return x.Picks
	}
	return nil
}

type CDataGCCStrike15V2_TournamentSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sectionid *uint32                               `protobuf:"varint,1,opt,name=sectionid" json:"sectionid,omitempty"`
	Name      *string                               `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Desc      *string                               `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	Groups    []*CDataGCCStrike15V2_TournamentGroup `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
}

func (x *CDataGCCStrike15V2_TournamentSection) Reset() {
	*x = CDataGCCStrike15V2_TournamentSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDataGCCStrike15V2_TournamentSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentSection) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentSection) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentSection.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentSection) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{83}
}

func (x *CDataGCCStrike15V2_TournamentSection) GetSectionid() uint32 {
	if x != nil && x.Sectionid != nil {
		return *x.Sectionid
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentSection) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CDataGCCStrike15V2_TournamentSection) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CDataGCCStrike15V2_TournamentSection) GetGroups() []*CDataGCCStrike15V2_TournamentGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type CDataGCCStrike15V2_TournamentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sections        []*CDataGCCStrike15V2_TournamentSection `protobuf:"bytes,1,rep,name=sections" json:"sections,omitempty"`
	TournamentEvent *TournamentEvent                        `protobuf:"bytes,2,opt,name=tournament_event,json=tournamentEvent" json:"tournament_event,omitempty"`
	TournamentTeams []*TournamentTeam                       `protobuf:"bytes,3,rep,name=tournament_teams,json=tournamentTeams" json:"tournament_teams,omitempty"`
}

func (x *CDataGCCStrike15V2_TournamentInfo) Reset() {
	*x = CDataGCCStrike15V2_TournamentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDataGCCStrike15V2_TournamentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentInfo) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentInfo.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{84}
}

func (x *CDataGCCStrike15V2_TournamentInfo) GetSections() []*CDataGCCStrike15V2_TournamentSection {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentInfo) GetTournamentEvent() *TournamentEvent {
	if x != nil {
		return x.TournamentEvent
	}
	return nil
}

func (x *CDataGCCStrike15V2_TournamentInfo) GetTournamentTeams() []*TournamentTeam {
	if x != nil {
		return x.TournamentTeams
	}
	return nil
}

type CMsgGCCStrike15V2_MatchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msgrequestid   *uint32                            `protobuf:"varint,1,opt,name=msgrequestid" json:"msgrequestid,omitempty"`
	Accountid      *uint32                            `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
	Servertime     *uint32                            `protobuf:"varint,3,opt,name=servertime" json:"servertime,omitempty"`
	Matches        []*CDataGCCStrike15V2_MatchInfo    `protobuf:"bytes,4,rep,name=matches" json:"matches,omitempty"`
	Streams        []*TournamentTeam                  `protobuf:"bytes,5,rep,name=streams" json:"streams,omitempty"`
	Tournamentinfo *CDataGCCStrike15V2_TournamentInfo `protobuf:"bytes,6,opt,name=tournamentinfo" json:"tournamentinfo,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchList) Reset() {
	*x = CMsgGCCStrike15V2_MatchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchList) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchList) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchList.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchList) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{85}
}

func (x *CMsgGCCStrike15V2_MatchList) GetMsgrequestid() uint32 {
	if x != nil && x.Msgrequestid != nil {
		return *x.Msgrequestid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchList) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchList) GetServertime() uint32 {
	if x != nil && x.Servertime != nil {
		return *x.Servertime
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchList) GetMatches() []*CDataGCCStrike15V2_MatchInfo {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchList) GetStreams() []*TournamentTeam {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchList) GetTournamentinfo() *CDataGCCStrike15V2_TournamentInfo {
	if x != nil {
		return x.Tournamentinfo
	}
	return nil
}

type CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eventid   *int32                          `protobuf:"varint,1,opt,name=eventid" json:"eventid,omitempty"`
	Matches   []*CDataGCCStrike15V2_MatchInfo `protobuf:"bytes,2,rep,name=matches" json:"matches,omitempty"`
	Accountid *uint32                         `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt) Reset() {
	*x = CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{86}
}

func (x *CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt) GetEventid() int32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt) GetMatches() []*CDataGCCStrike15V2_MatchInfo {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_Predictions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId             *uint32                                             `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	GroupMatchTeamPicks []*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick `protobuf:"bytes,2,rep,name=group_match_team_picks,json=groupMatchTeamPicks" json:"group_match_team_picks,omitempty"`
}

func (x *CMsgGCCStrike15V2_Predictions) Reset() {
	*x = CMsgGCCStrike15V2_Predictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Predictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Predictions) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Predictions) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Predictions.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Predictions) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{87}
}

func (x *CMsgGCCStrike15V2_Predictions) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Predictions) GetGroupMatchTeamPicks() []*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick {
	if x != nil {
		return x.GroupMatchTeamPicks
	}
	return nil
}

type CMsgGCCStrike15V2_Fantasy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId *uint32                                  `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Teams   []*CMsgGCCStrike15V2_Fantasy_FantasyTeam `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
}

func (x *CMsgGCCStrike15V2_Fantasy) Reset() {
	*x = CMsgGCCStrike15V2_Fantasy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Fantasy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Fantasy) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Fantasy) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Fantasy.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Fantasy) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgGCCStrike15V2_Fantasy) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Fantasy) GetTeams() []*CMsgGCCStrike15V2_Fantasy_FantasyTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

type CAttribute_String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (x *CAttribute_String) Reset() {
	*x = CAttribute_String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAttribute_String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAttribute_String) ProtoMessage() {}

func (x *CAttribute_String) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAttribute_String.ProtoReflect.Descriptor instead.
func (*CAttribute_String) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{89}
}

func (x *CAttribute_String) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CMsgLegacySource1ClientWelcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                   *uint32                                  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	GameData                  []byte                                   `protobuf:"bytes,2,opt,name=game_data,json=gameData" json:"game_data,omitempty"`
	OutofdateSubscribedCaches []*CMsgSOCacheSubscribed                 `protobuf:"bytes,3,rep,name=outofdate_subscribed_caches,json=outofdateSubscribedCaches" json:"outofdate_subscribed_caches,omitempty"`
	UptodateSubscribedCaches  []*CMsgSOCacheSubscriptionCheck          `protobuf:"bytes,4,rep,name=uptodate_subscribed_caches,json=uptodateSubscribedCaches" json:"uptodate_subscribed_caches,omitempty"`
	Location                  *CMsgLegacySource1ClientWelcome_Location `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	GameData2                 []byte                                   `protobuf:"bytes,6,opt,name=game_data2,json=gameData2" json:"game_data2,omitempty"`
	Rtime32GcWelcomeTimestamp *uint32                                  `protobuf:"varint,7,opt,name=rtime32_gc_welcome_timestamp,json=rtime32GcWelcomeTimestamp" json:"rtime32_gc_welcome_timestamp,omitempty"`
	Currency                  *uint32                                  `protobuf:"varint,8,opt,name=currency" json:"currency,omitempty"`
	Balance                   *uint32                                  `protobuf:"varint,9,opt,name=balance" json:"balance,omitempty"`
	BalanceUrl                *string                                  `protobuf:"bytes,10,opt,name=balance_url,json=balanceUrl" json:"balance_url,omitempty"`
	TxnCountryCode            *string                                  `protobuf:"bytes,11,opt,name=txn_country_code,json=txnCountryCode" json:"txn_country_code,omitempty"`
}

func (x *CMsgLegacySource1ClientWelcome) Reset() {
	*x = CMsgLegacySource1ClientWelcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLegacySource1ClientWelcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLegacySource1ClientWelcome) ProtoMessage() {}

func (x *CMsgLegacySource1ClientWelcome) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLegacySource1ClientWelcome.ProtoReflect.Descriptor instead.
func (*CMsgLegacySource1ClientWelcome) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{90}
}

func (x *CMsgLegacySource1ClientWelcome) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgLegacySource1ClientWelcome) GetGameData() []byte {
	if x != nil {
		return x.GameData
	}
	return nil
}

func (x *CMsgLegacySource1ClientWelcome) GetOutofdateSubscribedCaches() []*CMsgSOCacheSubscribed {
	if x != nil {
		return x.OutofdateSubscribedCaches
	}
	return nil
}

func (x *CMsgLegacySource1ClientWelcome) GetUptodateSubscribedCaches() []*CMsgSOCacheSubscriptionCheck {
	if x != nil {
		return x.UptodateSubscribedCaches
	}
	return nil
}

func (x *CMsgLegacySource1ClientWelcome) GetLocation() *CMsgLegacySource1ClientWelcome_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CMsgLegacySource1ClientWelcome) GetGameData2() []byte {
	if x != nil {
		return x.GameData2
	}
	return nil
}

func (x *CMsgLegacySource1ClientWelcome) GetRtime32GcWelcomeTimestamp() uint32 {
	if x != nil && x.Rtime32GcWelcomeTimestamp != nil {
		return *x.Rtime32GcWelcomeTimestamp
	}
	return 0
}

func (x *CMsgLegacySource1ClientWelcome) GetCurrency() uint32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *CMsgLegacySource1ClientWelcome) GetBalance() uint32 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *CMsgLegacySource1ClientWelcome) GetBalanceUrl() string {
	if x != nil && x.BalanceUrl != nil {
		return *x.BalanceUrl
	}
	return ""
}

func (x *CMsgLegacySource1ClientWelcome) GetTxnCountryCode() string {
	if x != nil && x.TxnCountryCode != nil {
		return *x.TxnCountryCode
	}
	return ""
}

type CMsgCStrike15Welcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreItemHash           *uint32 `protobuf:"varint,5,opt,name=store_item_hash,json=storeItemHash" json:"store_item_hash,omitempty"`
	Timeplayedconsecutively *uint32 `protobuf:"varint,6,opt,name=timeplayedconsecutively" json:"timeplayedconsecutively,omitempty"`
	TimeFirstPlayed         *uint32 `protobuf:"varint,10,opt,name=time_first_played,json=timeFirstPlayed" json:"time_first_played,omitempty"`
	LastTimePlayed          *uint32 `protobuf:"varint,12,opt,name=last_time_played,json=lastTimePlayed" json:"last_time_played,omitempty"`
	LastIpAddress           *uint32 `protobuf:"varint,13,opt,name=last_ip_address,json=lastIpAddress" json:"last_ip_address,omitempty"`
	Gscookieid              *uint64 `protobuf:"varint,18,opt,name=gscookieid" json:"gscookieid,omitempty"`
	Uniqueid                *uint64 `protobuf:"varint,19,opt,name=uniqueid" json:"uniqueid,omitempty"`
}

func (x *CMsgCStrike15Welcome) Reset() {
	*x = CMsgCStrike15Welcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCStrike15Welcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCStrike15Welcome) ProtoMessage() {}

func (x *CMsgCStrike15Welcome) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCStrike15Welcome.ProtoReflect.Descriptor instead.
func (*CMsgCStrike15Welcome) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{91}
}

func (x *CMsgCStrike15Welcome) GetStoreItemHash() uint32 {
	if x != nil && x.StoreItemHash != nil {
		return *x.StoreItemHash
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetTimeplayedconsecutively() uint32 {
	if x != nil && x.Timeplayedconsecutively != nil {
		return *x.Timeplayedconsecutively
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetTimeFirstPlayed() uint32 {
	if x != nil && x.TimeFirstPlayed != nil {
		return *x.TimeFirstPlayed
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetLastTimePlayed() uint32 {
	if x != nil && x.LastTimePlayed != nil {
		return *x.LastTimePlayed
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetLastIpAddress() uint32 {
	if x != nil && x.LastIpAddress != nil {
		return *x.LastIpAddress
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetGscookieid() uint64 {
	if x != nil && x.Gscookieid != nil {
		return *x.Gscookieid
	}
	return 0
}

func (x *CMsgCStrike15Welcome) GetUniqueid() uint64 {
	if x != nil && x.Uniqueid != nil {
		return *x.Uniqueid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientVarValueNotificationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueName    *string  `protobuf:"bytes,1,opt,name=value_name,json=valueName" json:"value_name,omitempty"`
	ValueInt     *int32   `protobuf:"varint,2,opt,name=value_int,json=valueInt" json:"value_int,omitempty"`
	ServerAddr   *uint32  `protobuf:"varint,3,opt,name=server_addr,json=serverAddr" json:"server_addr,omitempty"`
	ServerPort   *uint32  `protobuf:"varint,4,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	ChokedBlocks []string `protobuf:"bytes,5,rep,name=choked_blocks,json=chokedBlocks" json:"choked_blocks,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Reset() {
	*x = CMsgGCCStrike15V2_ClientVarValueNotificationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientVarValueNotificationInfo) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientVarValueNotificationInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{92}
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetValueName() string {
	if x != nil && x.ValueName != nil {
		return *x.ValueName
	}
	return ""
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetValueInt() int32 {
	if x != nil && x.ValueInt != nil {
		return *x.ValueInt
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetServerAddr() uint32 {
	if x != nil && x.ServerAddr != nil {
		return *x.ServerAddr
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetChokedBlocks() []string {
	if x != nil {
		return x.ChokedBlocks
	}
	return nil
}

type CMsgGCCStrike15V2_ServerVarValueNotificationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid  *uint32  `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Viewangles []uint32 `protobuf:"varint,2,rep,name=viewangles" json:"viewangles,omitempty"`
	Type       *uint32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Userdata   []uint32 `protobuf:"varint,4,rep,name=userdata" json:"userdata,omitempty"`
}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Reset() {
	*x = CMsgGCCStrike15V2_ServerVarValueNotificationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ServerVarValueNotificationInfo) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ServerVarValueNotificationInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetViewangles() []uint32 {
	if x != nil {
		return x.Viewangles
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetUserdata() []uint32 {
	if x != nil {
		return x.Userdata
	}
	return nil
}

type CMsgGCCStrike15V2_GiftsLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardRequest) Reset() {
	*x = CMsgGCCStrike15V2_GiftsLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GiftsLeaderboardRequest) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GiftsLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GiftsLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{94}
}

type CMsgGCCStrike15V2_GiftsLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servertime        *uint32                                                            `protobuf:"varint,1,opt,name=servertime" json:"servertime,omitempty"`
	TimePeriodSeconds *uint32                                                            `protobuf:"varint,2,opt,name=time_period_seconds,json=timePeriodSeconds" json:"time_period_seconds,omitempty"`
	TotalGiftsGiven   *uint32                                                            `protobuf:"varint,3,opt,name=total_gifts_given,json=totalGiftsGiven" json:"total_gifts_given,omitempty"`
	TotalGivers       *uint32                                                            `protobuf:"varint,4,opt,name=total_givers,json=totalGivers" json:"total_givers,omitempty"`
	Entries           []*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) Reset() {
	*x = CMsgGCCStrike15V2_GiftsLeaderboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GiftsLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{95}
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetServertime() uint32 {
	if x != nil && x.Servertime != nil {
		return *x.Servertime
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTimePeriodSeconds() uint32 {
	if x != nil && x.TimePeriodSeconds != nil {
		return *x.TimePeriodSeconds
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTotalGiftsGiven() uint32 {
	if x != nil && x.TotalGiftsGiven != nil {
		return *x.TotalGiftsGiven
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTotalGivers() uint32 {
	if x != nil && x.TotalGivers != nil {
		return *x.TotalGivers
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetEntries() []*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_ClientSubmitSurveyVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyId *uint32 `protobuf:"varint,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	Vote     *uint32 `protobuf:"varint,2,opt,name=vote" json:"vote,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientSubmitSurveyVote) Reset() {
	*x = CMsgGCCStrike15V2_ClientSubmitSurveyVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientSubmitSurveyVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientSubmitSurveyVote) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientSubmitSurveyVote) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientSubmitSurveyVote.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientSubmitSurveyVote) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{96}
}

func (x *CMsgGCCStrike15V2_ClientSubmitSurveyVote) GetSurveyId() uint32 {
	if x != nil && x.SurveyId != nil {
		return *x.SurveyId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientSubmitSurveyVote) GetVote() uint32 {
	if x != nil && x.Vote != nil {
		return *x.Vote
	}
	return 0
}

type CMsgGCCStrike15V2_Server2GCClientValidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CMsgGCCStrike15V2_Server2GCClientValidate) Reset() {
	*x = CMsgGCCStrike15V2_Server2GCClientValidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Server2GCClientValidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Server2GCClientValidate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Server2GCClientValidate) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Server2GCClientValidate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Server2GCClientValidate) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{97}
}

func (x *CMsgGCCStrike15V2_Server2GCClientValidate) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ClientTournamentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eventid  *uint32  `protobuf:"varint,1,opt,name=eventid" json:"eventid,omitempty"`
	Stageid  *uint32  `protobuf:"varint,2,opt,name=stageid" json:"stageid,omitempty"`
	GameType *uint32  `protobuf:"varint,3,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	Teamids  []uint32 `protobuf:"varint,4,rep,name=teamids" json:"teamids,omitempty"`
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) Reset() {
	*x = CMsgGCCStrike15V2_GC2ClientTournamentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ClientTournamentInfo) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ClientTournamentInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ClientTournamentInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{98}
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetEventid() uint32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetTeamids() []uint32 {
	if x != nil {
		return x.Teamids
	}
	return nil
}

type CSOEconCoupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entryid        *uint32 `protobuf:"varint,1,opt,name=entryid" json:"entryid,omitempty"`
	Defidx         *uint32 `protobuf:"varint,2,opt,name=defidx" json:"defidx,omitempty"`
	ExpirationDate *uint32 `protobuf:"fixed32,3,opt,name=expiration_date,json=expirationDate" json:"expiration_date,omitempty"`
}

func (x *CSOEconCoupon) Reset() {
	*x = CSOEconCoupon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOEconCoupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOEconCoupon) ProtoMessage() {}

func (x *CSOEconCoupon) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOEconCoupon.ProtoReflect.Descriptor instead.
func (*CSOEconCoupon) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{99}
}

func (x *CSOEconCoupon) GetEntryid() uint32 {
	if x != nil && x.Entryid != nil {
		return *x.Entryid
	}
	return 0
}

func (x *CSOEconCoupon) GetDefidx() uint32 {
	if x != nil && x.Defidx != nil {
		return *x.Defidx
	}
	return 0
}

func (x *CSOEconCoupon) GetExpirationDate() uint32 {
	if x != nil && x.ExpirationDate != nil {
		return *x.ExpirationDate
	}
	return 0
}

type CSOAccountItemPersonalStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerationTime    *uint32  `protobuf:"varint,1,opt,name=generation_time,json=generationTime" json:"generation_time,omitempty"`
	RedeemableBalance *uint32  `protobuf:"varint,2,opt,name=redeemable_balance,json=redeemableBalance" json:"redeemable_balance,omitempty"`
	Items             []uint64 `protobuf:"varint,3,rep,name=items" json:"items,omitempty"`
}

func (x *CSOAccountItemPersonalStore) Reset() {
	*x = CSOAccountItemPersonalStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOAccountItemPersonalStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOAccountItemPersonalStore) ProtoMessage() {}

func (x *CSOAccountItemPersonalStore) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOAccountItemPersonalStore.ProtoReflect.Descriptor instead.
func (*CSOAccountItemPersonalStore) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{100}
}

func (x *CSOAccountItemPersonalStore) GetGenerationTime() uint32 {
	if x != nil && x.GenerationTime != nil {
		return *x.GenerationTime
	}
	return 0
}

func (x *CSOAccountItemPersonalStore) GetRedeemableBalance() uint32 {
	if x != nil && x.RedeemableBalance != nil {
		return *x.RedeemableBalance
	}
	return 0
}

func (x *CSOAccountItemPersonalStore) GetItems() []uint64 {
	if x != nil {
		return x.Items
	}
	return nil
}

type CSOQuestProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questid         *uint32 `protobuf:"varint,1,opt,name=questid" json:"questid,omitempty"`
	PointsRemaining *uint32 `protobuf:"varint,2,opt,name=points_remaining,json=pointsRemaining" json:"points_remaining,omitempty"`
	BonusPoints     *uint32 `protobuf:"varint,3,opt,name=bonus_points,json=bonusPoints" json:"bonus_points,omitempty"`
}

func (x *CSOQuestProgress) Reset() {
	*x = CSOQuestProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOQuestProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOQuestProgress) ProtoMessage() {}

func (x *CSOQuestProgress) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOQuestProgress.ProtoReflect.Descriptor instead.
func (*CSOQuestProgress) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{101}
}

func (x *CSOQuestProgress) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return 0
}

func (x *CSOQuestProgress) GetPointsRemaining() uint32 {
	if x != nil && x.PointsRemaining != nil {
		return *x.PointsRemaining
	}
	return 0
}

func (x *CSOQuestProgress) GetBonusPoints() uint32 {
	if x != nil && x.BonusPoints != nil {
		return *x.BonusPoints
	}
	return 0
}

type CSOAccountSeasonalOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonValue       *uint32 `protobuf:"varint,1,opt,name=season_value,json=seasonValue" json:"season_value,omitempty"`
	TierUnlocked      *uint32 `protobuf:"varint,2,opt,name=tier_unlocked,json=tierUnlocked" json:"tier_unlocked,omitempty"`
	PremiumTiers      *uint32 `protobuf:"varint,3,opt,name=premium_tiers,json=premiumTiers" json:"premium_tiers,omitempty"`
	MissionId         *uint32 `protobuf:"varint,4,opt,name=mission_id,json=missionId" json:"mission_id,omitempty"`
	MissionsCompleted *uint32 `protobuf:"varint,5,opt,name=missions_completed,json=missionsCompleted" json:"missions_completed,omitempty"`
	RedeemableBalance *uint32 `protobuf:"varint,6,opt,name=redeemable_balance,json=redeemableBalance" json:"redeemable_balance,omitempty"`
	SeasonPassTime    *uint32 `protobuf:"varint,7,opt,name=season_pass_time,json=seasonPassTime" json:"season_pass_time,omitempty"`
}

func (x *CSOAccountSeasonalOperation) Reset() {
	*x = CSOAccountSeasonalOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOAccountSeasonalOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOAccountSeasonalOperation) ProtoMessage() {}

func (x *CSOAccountSeasonalOperation) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOAccountSeasonalOperation.ProtoReflect.Descriptor instead.
func (*CSOAccountSeasonalOperation) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{102}
}

func (x *CSOAccountSeasonalOperation) GetSeasonValue() uint32 {
	if x != nil && x.SeasonValue != nil {
		return *x.SeasonValue
	}
	return 0
}

func (x *CSOAccountSeasonalOperation) GetTierUnlocked() uint32 {
	if x != nil && x.TierUnlocked != nil {
		return *x.TierUnlocked
	}
	return 0
}

func (x *CSOAccountSeasonalOperation) GetPremiumTiers() uint32 {
	if x != nil && x.PremiumTiers != nil {
		return *x.PremiumTiers
	}
	return 0
}

func (x *CSOAccountSeasonalOperation) GetMissionId() uint32 {
	if x != nil && x.MissionId != nil {
		return *x.MissionId
	}
	return 0
}

func (x *CSOAccountSeasonalOperation) GetMissionsCompleted() uint32 {
	if x != nil && x.MissionsCompleted != nil {
		return *x.MissionsCompleted
	}
	return 0
}

func (x *CSOAccountSeasonalOperation) GetRedeemableBalance() uint32 {
	if x != nil && x.RedeemableBalance != nil {
		return *x.RedeemableBalance
	}
	return 0
}

func (x *CSOAccountSeasonalOperation) GetSeasonPassTime() uint32 {
	if x != nil && x.SeasonPassTime != nil {
		return *x.SeasonPassTime
	}
	return 0
}

type CSOAccountRecurringSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeNextCycle *uint32 `protobuf:"varint,1,opt,name=time_next_cycle,json=timeNextCycle" json:"time_next_cycle,omitempty"`
	TimeInitiated *uint32 `protobuf:"varint,2,opt,name=time_initiated,json=timeInitiated" json:"time_initiated,omitempty"`
}

func (x *CSOAccountRecurringSubscription) Reset() {
	*x = CSOAccountRecurringSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOAccountRecurringSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOAccountRecurringSubscription) ProtoMessage() {}

func (x *CSOAccountRecurringSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOAccountRecurringSubscription.ProtoReflect.Descriptor instead.
func (*CSOAccountRecurringSubscription) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{103}
}

func (x *CSOAccountRecurringSubscription) GetTimeNextCycle() uint32 {
	if x != nil && x.TimeNextCycle != nil {
		return *x.TimeNextCycle
	}
	return 0
}

func (x *CSOAccountRecurringSubscription) GetTimeInitiated() uint32 {
	if x != nil && x.TimeInitiated != nil {
		return *x.TimeInitiated
	}
	return 0
}

type CSOPersonaDataPublic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerLevel             *int32                  `protobuf:"varint,1,opt,name=player_level,json=playerLevel" json:"player_level,omitempty"`
	Commendation            *PlayerCommendationInfo `protobuf:"bytes,2,opt,name=commendation" json:"commendation,omitempty"`
	ElevatedState           *bool                   `protobuf:"varint,3,opt,name=elevated_state,json=elevatedState" json:"elevated_state,omitempty"`
	XpTrailTimestampRefresh *uint32                 `protobuf:"varint,4,opt,name=xp_trail_timestamp_refresh,json=xpTrailTimestampRefresh" json:"xp_trail_timestamp_refresh,omitempty"`
	XpTrailLevel            *uint32                 `protobuf:"varint,5,opt,name=xp_trail_level,json=xpTrailLevel" json:"xp_trail_level,omitempty"`
}

func (x *CSOPersonaDataPublic) Reset() {
	*x = CSOPersonaDataPublic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOPersonaDataPublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOPersonaDataPublic) ProtoMessage() {}

func (x *CSOPersonaDataPublic) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOPersonaDataPublic.ProtoReflect.Descriptor instead.
func (*CSOPersonaDataPublic) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{104}
}

func (x *CSOPersonaDataPublic) GetPlayerLevel() int32 {
	if x != nil && x.PlayerLevel != nil {
		return *x.PlayerLevel
	}
	return 0
}

func (x *CSOPersonaDataPublic) GetCommendation() *PlayerCommendationInfo {
	if x != nil {
		return x.Commendation
	}
	return nil
}

func (x *CSOPersonaDataPublic) GetElevatedState() bool {
	if x != nil && x.ElevatedState != nil {
		return *x.ElevatedState
	}
	return false
}

func (x *CSOPersonaDataPublic) GetXpTrailTimestampRefresh() uint32 {
	if x != nil && x.XpTrailTimestampRefresh != nil {
		return *x.XpTrailTimestampRefresh
	}
	return 0
}

func (x *CSOPersonaDataPublic) GetXpTrailLevel() uint32 {
	if x != nil && x.XpTrailLevel != nil {
		return *x.XpTrailLevel
	}
	return 0
}

type CMsgGC_GlobalGame_Subscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket *uint64 `protobuf:"varint,1,opt,name=ticket" json:"ticket,omitempty"`
}

func (x *CMsgGC_GlobalGame_Subscribe) Reset() {
	*x = CMsgGC_GlobalGame_Subscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GlobalGame_Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GlobalGame_Subscribe) ProtoMessage() {}

func (x *CMsgGC_GlobalGame_Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GlobalGame_Subscribe.ProtoReflect.Descriptor instead.
func (*CMsgGC_GlobalGame_Subscribe) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{105}
}

func (x *CMsgGC_GlobalGame_Subscribe) GetTicket() uint64 {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return 0
}

type CMsgGC_GlobalGame_Unsubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeleft *int32 `protobuf:"varint,1,opt,name=timeleft" json:"timeleft,omitempty"`
}

func (x *CMsgGC_GlobalGame_Unsubscribe) Reset() {
	*x = CMsgGC_GlobalGame_Unsubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GlobalGame_Unsubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GlobalGame_Unsubscribe) ProtoMessage() {}

func (x *CMsgGC_GlobalGame_Unsubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GlobalGame_Unsubscribe.ProtoReflect.Descriptor instead.
func (*CMsgGC_GlobalGame_Unsubscribe) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{106}
}

func (x *CMsgGC_GlobalGame_Unsubscribe) GetTimeleft() int32 {
	if x != nil && x.Timeleft != nil {
		return *x.Timeleft
	}
	return 0
}

type CMsgGC_GlobalGame_Play struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket     *uint64 `protobuf:"varint,1,opt,name=ticket" json:"ticket,omitempty"`
	Gametimems *uint32 `protobuf:"varint,2,opt,name=gametimems" json:"gametimems,omitempty"`
	Msperpoint *uint32 `protobuf:"varint,3,opt,name=msperpoint" json:"msperpoint,omitempty"`
}

func (x *CMsgGC_GlobalGame_Play) Reset() {
	*x = CMsgGC_GlobalGame_Play{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GlobalGame_Play) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GlobalGame_Play) ProtoMessage() {}

func (x *CMsgGC_GlobalGame_Play) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GlobalGame_Play.ProtoReflect.Descriptor instead.
func (*CMsgGC_GlobalGame_Play) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{107}
}

func (x *CMsgGC_GlobalGame_Play) GetTicket() uint64 {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return 0
}

func (x *CMsgGC_GlobalGame_Play) GetGametimems() uint32 {
	if x != nil && x.Gametimems != nil {
		return *x.Gametimems
	}
	return 0
}

func (x *CMsgGC_GlobalGame_Play) GetMsperpoint() uint32 {
	if x != nil && x.Msperpoint != nil {
		return *x.Msperpoint
	}
	return 0
}

type CMsgGCCStrike15V2_AcknowledgePenalty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acknowledged *int32 `protobuf:"varint,1,opt,name=acknowledged" json:"acknowledged,omitempty"`
}

func (x *CMsgGCCStrike15V2_AcknowledgePenalty) Reset() {
	*x = CMsgGCCStrike15V2_AcknowledgePenalty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_AcknowledgePenalty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_AcknowledgePenalty) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_AcknowledgePenalty) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_AcknowledgePenalty.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_AcknowledgePenalty) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{108}
}

func (x *CMsgGCCStrike15V2_AcknowledgePenalty) GetAcknowledged() int32 {
	if x != nil && x.Acknowledged != nil {
		return *x.Acknowledged
	}
	return 0
}

type CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defindex     *uint32 `protobuf:"varint,1,opt,name=defindex" json:"defindex,omitempty"`
	Upgradeid    *uint64 `protobuf:"varint,2,opt,name=upgradeid" json:"upgradeid,omitempty"`
	Hours        *uint32 `protobuf:"varint,3,opt,name=hours" json:"hours,omitempty"`
	Prestigetime *uint32 `protobuf:"varint,4,opt,name=prestigetime" json:"prestigetime,omitempty"`
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Reset() {
	*x = CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{109}
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetUpgradeid() uint64 {
	if x != nil && x.Upgradeid != nil {
		return *x.Upgradeid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetHours() uint32 {
	if x != nil && x.Hours != nil {
		return *x.Hours
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) GetPrestigetime() uint32 {
	if x != nil && x.Prestigetime != nil {
		return *x.Prestigetime
	}
	return 0
}

type CMsgGCCStrike15V2_Client2GCStreamUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket *uint64 `protobuf:"varint,1,opt,name=ticket" json:"ticket,omitempty"`
	Os     *int32  `protobuf:"varint,2,opt,name=os" json:"os,omitempty"`
}

func (x *CMsgGCCStrike15V2_Client2GCStreamUnlock) Reset() {
	*x = CMsgGCCStrike15V2_Client2GCStreamUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Client2GCStreamUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Client2GCStreamUnlock) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Client2GCStreamUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Client2GCStreamUnlock.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Client2GCStreamUnlock) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{110}
}

func (x *CMsgGCCStrike15V2_Client2GCStreamUnlock) GetTicket() uint64 {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Client2GCStreamUnlock) GetOs() int32 {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return 0
}

type CMsgGCCStrike15V2_ClientToGCRequestElevate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage *uint32 `protobuf:"varint,1,opt,name=stage" json:"stage,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestElevate) Reset() {
	*x = CMsgGCCStrike15V2_ClientToGCRequestElevate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestElevate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientToGCRequestElevate) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientToGCRequestElevate) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientToGCRequestElevate.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientToGCRequestElevate) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{111}
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestElevate) GetStage() uint32 {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return 0
}

type CMsgGCCStrike15V2_ClientToGCChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Text    *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientToGCChat) Reset() {
	*x = CMsgGCCStrike15V2_ClientToGCChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientToGCChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientToGCChat) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientToGCChat) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientToGCChat.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientToGCChat) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{112}
}

func (x *CMsgGCCStrike15V2_ClientToGCChat) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientToGCChat) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CMsgGCCStrike15V2_GCToClientChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Text      *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (x *CMsgGCCStrike15V2_GCToClientChat) Reset() {
	*x = CMsgGCCStrike15V2_GCToClientChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GCToClientChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GCToClientChat) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GCToClientChat) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GCToClientChat.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GCToClientChat) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{113}
}

func (x *CMsgGCCStrike15V2_GCToClientChat) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GCToClientChat) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CMsgGCCStrike15V2_ClientAuthKeyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eventid *uint32 `protobuf:"varint,1,opt,name=eventid" json:"eventid,omitempty"`
	Code    *string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientAuthKeyCode) Reset() {
	*x = CMsgGCCStrike15V2_ClientAuthKeyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientAuthKeyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientAuthKeyCode) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientAuthKeyCode) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientAuthKeyCode.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientAuthKeyCode) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{114}
}

func (x *CMsgGCCStrike15V2_ClientAuthKeyCode) GetEventid() uint32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientAuthKeyCode) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type CMsgGCCStrike15_GotvSyncPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CEngineGotvSyncPacket `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (x *CMsgGCCStrike15_GotvSyncPacket) Reset() {
	*x = CMsgGCCStrike15_GotvSyncPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15_GotvSyncPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15_GotvSyncPacket) ProtoMessage() {}

func (x *CMsgGCCStrike15_GotvSyncPacket) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15_GotvSyncPacket.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15_GotvSyncPacket) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{115}
}

func (x *CMsgGCCStrike15_GotvSyncPacket) GetData() *CEngineGotvSyncPacket {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlayerDecalDigitalSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature    []byte    `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	Accountid    *uint32   `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
	Rtime        *uint32   `protobuf:"varint,3,opt,name=rtime" json:"rtime,omitempty"`
	Endpos       []float32 `protobuf:"fixed32,4,rep,name=endpos" json:"endpos,omitempty"`
	Startpos     []float32 `protobuf:"fixed32,5,rep,name=startpos" json:"startpos,omitempty"`
	Left         []float32 `protobuf:"fixed32,6,rep,name=left" json:"left,omitempty"`
	TxDefidx     *uint32   `protobuf:"varint,7,opt,name=tx_defidx,json=txDefidx" json:"tx_defidx,omitempty"`
	Entindex     *int32    `protobuf:"varint,8,opt,name=entindex" json:"entindex,omitempty"`
	Hitbox       *uint32   `protobuf:"varint,9,opt,name=hitbox" json:"hitbox,omitempty"`
	Creationtime *float32  `protobuf:"fixed32,10,opt,name=creationtime" json:"creationtime,omitempty"`
	Equipslot    *uint32   `protobuf:"varint,11,opt,name=equipslot" json:"equipslot,omitempty"`
	TraceId      *uint32   `protobuf:"varint,12,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	Normal       []float32 `protobuf:"fixed32,13,rep,name=normal" json:"normal,omitempty"`
	TintId       *uint32   `protobuf:"varint,14,opt,name=tint_id,json=tintId" json:"tint_id,omitempty"`
}

func (x *PlayerDecalDigitalSignature) Reset() {
	*x = PlayerDecalDigitalSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDecalDigitalSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDecalDigitalSignature) ProtoMessage() {}

func (x *PlayerDecalDigitalSignature) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDecalDigitalSignature.ProtoReflect.Descriptor instead.
func (*PlayerDecalDigitalSignature) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{116}
}

func (x *PlayerDecalDigitalSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *PlayerDecalDigitalSignature) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetRtime() uint32 {
	if x != nil && x.Rtime != nil {
		return *x.Rtime
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetEndpos() []float32 {
	if x != nil {
		return x.Endpos
	}
	return nil
}

func (x *PlayerDecalDigitalSignature) GetStartpos() []float32 {
	if x != nil {
		return x.Startpos
	}
	return nil
}

func (x *PlayerDecalDigitalSignature) GetLeft() []float32 {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *PlayerDecalDigitalSignature) GetTxDefidx() uint32 {
	if x != nil && x.TxDefidx != nil {
		return *x.TxDefidx
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetEntindex() int32 {
	if x != nil && x.Entindex != nil {
		return *x.Entindex
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetHitbox() uint32 {
	if x != nil && x.Hitbox != nil {
		return *x.Hitbox
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetCreationtime() float32 {
	if x != nil && x.Creationtime != nil {
		return *x.Creationtime
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetEquipslot() uint32 {
	if x != nil && x.Equipslot != nil {
		return *x.Equipslot
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetTraceId() uint32 {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return 0
}

func (x *PlayerDecalDigitalSignature) GetNormal() []float32 {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *PlayerDecalDigitalSignature) GetTintId() uint32 {
	if x != nil && x.TintId != nil {
		return *x.TintId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientPlayerDecalSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *PlayerDecalDigitalSignature `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Itemid *uint64                      `protobuf:"varint,2,opt,name=itemid" json:"itemid,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientPlayerDecalSign) Reset() {
	*x = CMsgGCCStrike15V2_ClientPlayerDecalSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientPlayerDecalSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPlayerDecalSign) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPlayerDecalSign) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPlayerDecalSign.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPlayerDecalSign) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{117}
}

func (x *CMsgGCCStrike15V2_ClientPlayerDecalSign) GetData() *PlayerDecalDigitalSignature {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientPlayerDecalSign) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type CMsgGCCStrike15V2_BetaEnrollment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *uint32 `protobuf:"varint,1,opt,name=eresult" json:"eresult,omitempty"`
}

func (x *CMsgGCCStrike15V2_BetaEnrollment) Reset() {
	*x = CMsgGCCStrike15V2_BetaEnrollment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_BetaEnrollment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_BetaEnrollment) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_BetaEnrollment) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_BetaEnrollment.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_BetaEnrollment) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{118}
}

func (x *CMsgGCCStrike15V2_BetaEnrollment) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

type CMsgGCCStrike15V2_ClientLogonFatalError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errorcode *uint32 `protobuf:"varint,1,opt,name=errorcode" json:"errorcode,omitempty"`
	Message   *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Country   *string `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) Reset() {
	*x = CMsgGCCStrike15V2_ClientLogonFatalError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientLogonFatalError) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientLogonFatalError.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientLogonFatalError) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{119}
}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) GetErrorcode() uint32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CMsgGCCStrike15V2_ClientLogonFatalError) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

type CMsgGCCStrike15V2_ClientPollState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pollid *uint32  `protobuf:"varint,1,opt,name=pollid" json:"pollid,omitempty"`
	Names  []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	Values []int32  `protobuf:"varint,3,rep,name=values" json:"values,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientPollState) Reset() {
	*x = CMsgGCCStrike15V2_ClientPollState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientPollState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPollState) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPollState) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPollState.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPollState) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{120}
}

func (x *CMsgGCCStrike15V2_ClientPollState) GetPollid() uint32 {
	if x != nil && x.Pollid != nil {
		return *x.Pollid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPollState) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientPollState) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type CMsgGCCStrike15V2_Party_Register struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Ver      *uint32 `protobuf:"varint,2,opt,name=ver" json:"ver,omitempty"`
	Apr      *uint32 `protobuf:"varint,3,opt,name=apr" json:"apr,omitempty"`
	Ark      *uint32 `protobuf:"varint,4,opt,name=ark" json:"ark,omitempty"`
	Nby      *uint32 `protobuf:"varint,5,opt,name=nby" json:"nby,omitempty"`
	Grp      *uint32 `protobuf:"varint,6,opt,name=grp" json:"grp,omitempty"`
	Slots    *uint32 `protobuf:"varint,7,opt,name=slots" json:"slots,omitempty"`
	Launcher *uint32 `protobuf:"varint,8,opt,name=launcher" json:"launcher,omitempty"`
	GameType *uint32 `protobuf:"varint,9,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
}

func (x *CMsgGCCStrike15V2_Party_Register) Reset() {
	*x = CMsgGCCStrike15V2_Party_Register{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Party_Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Party_Register) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Party_Register) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Party_Register.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Party_Register) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{121}
}

func (x *CMsgGCCStrike15V2_Party_Register) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetVer() uint32 {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetApr() uint32 {
	if x != nil && x.Apr != nil {
		return *x.Apr
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetArk() uint32 {
	if x != nil && x.Ark != nil {
		return *x.Ark
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetNby() uint32 {
	if x != nil && x.Nby != nil {
		return *x.Nby
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetGrp() uint32 {
	if x != nil && x.Grp != nil {
		return *x.Grp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetSlots() uint32 {
	if x != nil && x.Slots != nil {
		return *x.Slots
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetLauncher() uint32 {
	if x != nil && x.Launcher != nil {
		return *x.Launcher
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Register) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

type CMsgGCCStrike15V2_Party_Search struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ver      *uint32  `protobuf:"varint,1,opt,name=ver" json:"ver,omitempty"`
	Apr      *uint32  `protobuf:"varint,2,opt,name=apr" json:"apr,omitempty"`
	Ark      *uint32  `protobuf:"varint,3,opt,name=ark" json:"ark,omitempty"`
	Grps     []uint32 `protobuf:"varint,4,rep,name=grps" json:"grps,omitempty"`
	Launcher *uint32  `protobuf:"varint,5,opt,name=launcher" json:"launcher,omitempty"`
	GameType *uint32  `protobuf:"varint,6,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
}

func (x *CMsgGCCStrike15V2_Party_Search) Reset() {
	*x = CMsgGCCStrike15V2_Party_Search{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Party_Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Party_Search) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Party_Search) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Party_Search.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Party_Search) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{122}
}

func (x *CMsgGCCStrike15V2_Party_Search) GetVer() uint32 {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Search) GetApr() uint32 {
	if x != nil && x.Apr != nil {
		return *x.Apr
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Search) GetArk() uint32 {
	if x != nil && x.Ark != nil {
		return *x.Ark
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Search) GetGrps() []uint32 {
	if x != nil {
		return x.Grps
	}
	return nil
}

func (x *CMsgGCCStrike15V2_Party_Search) GetLauncher() uint32 {
	if x != nil && x.Launcher != nil {
		return *x.Launcher
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Search) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

type CMsgGCCStrike15V2_Party_SearchResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CMsgGCCStrike15V2_Party_SearchResults_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *CMsgGCCStrike15V2_Party_SearchResults) Reset() {
	*x = CMsgGCCStrike15V2_Party_SearchResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Party_SearchResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Party_SearchResults) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Party_SearchResults) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Party_SearchResults.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Party_SearchResults) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{123}
}

func (x *CMsgGCCStrike15V2_Party_SearchResults) GetEntries() []*CMsgGCCStrike15V2_Party_SearchResults_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_Party_Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Lobbyid   *uint32 `protobuf:"varint,2,opt,name=lobbyid" json:"lobbyid,omitempty"`
}

func (x *CMsgGCCStrike15V2_Party_Invite) Reset() {
	*x = CMsgGCCStrike15V2_Party_Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Party_Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Party_Invite) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Party_Invite) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Party_Invite.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Party_Invite) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{124}
}

func (x *CMsgGCCStrike15V2_Party_Invite) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_Invite) GetLobbyid() uint32 {
	if x != nil && x.Lobbyid != nil {
		return *x.Lobbyid
	}
	return 0
}

type CMsgGCCStrike15V2_Account_RequestCoPlays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players    []*CMsgGCCStrike15V2_Account_RequestCoPlays_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	Servertime *uint32                                            `protobuf:"varint,2,opt,name=servertime" json:"servertime,omitempty"`
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays) Reset() {
	*x = CMsgGCCStrike15V2_Account_RequestCoPlays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Account_RequestCoPlays) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Account_RequestCoPlays.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Account_RequestCoPlays) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{125}
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays) GetPlayers() []*CMsgGCCStrike15V2_Account_RequestCoPlays_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays) GetServertime() uint32 {
	if x != nil && x.Servertime != nil {
		return *x.Servertime
	}
	return 0
}

type CMsgGCCStrike15V2_ClientToGCRequestTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizedSteamId    *uint64 `protobuf:"fixed64,1,opt,name=authorized_steam_id,json=authorizedSteamId" json:"authorized_steam_id,omitempty"`
	AuthorizedPublicIp   *uint32 `protobuf:"fixed32,2,opt,name=authorized_public_ip,json=authorizedPublicIp" json:"authorized_public_ip,omitempty"`
	GameserverSteamId    *uint64 `protobuf:"fixed64,3,opt,name=gameserver_steam_id,json=gameserverSteamId" json:"gameserver_steam_id,omitempty"`
	GameserverSdrRouting *string `protobuf:"bytes,5,opt,name=gameserver_sdr_routing,json=gameserverSdrRouting" json:"gameserver_sdr_routing,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) Reset() {
	*x = CMsgGCCStrike15V2_ClientToGCRequestTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientToGCRequestTicket) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientToGCRequestTicket.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientToGCRequestTicket) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{126}
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetAuthorizedSteamId() uint64 {
	if x != nil && x.AuthorizedSteamId != nil {
		return *x.AuthorizedSteamId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetAuthorizedPublicIp() uint32 {
	if x != nil && x.AuthorizedPublicIp != nil {
		return *x.AuthorizedPublicIp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetGameserverSteamId() uint64 {
	if x != nil && x.GameserverSteamId != nil {
		return *x.GameserverSteamId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientToGCRequestTicket) GetGameserverSdrRouting() string {
	if x != nil && x.GameserverSdrRouting != nil {
		return *x.GameserverSdrRouting
	}
	return ""
}

type CMsgGCToClientSteamDatagramTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedTicket []byte `protobuf:"bytes,16,opt,name=serialized_ticket,json=serializedTicket" json:"serialized_ticket,omitempty"`
}

func (x *CMsgGCToClientSteamDatagramTicket) Reset() {
	*x = CMsgGCToClientSteamDatagramTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientSteamDatagramTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientSteamDatagramTicket) ProtoMessage() {}

func (x *CMsgGCToClientSteamDatagramTicket) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientSteamDatagramTicket.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientSteamDatagramTicket) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{127}
}

func (x *CMsgGCToClientSteamDatagramTicket) GetSerializedTicket() []byte {
	if x != nil {
		return x.SerializedTicket
	}
	return nil
}

type CMsgGCCStrike15V2_ClientRequestOffers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCCStrike15V2_ClientRequestOffers) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestOffers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientRequestOffers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestOffers) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestOffers) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestOffers.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestOffers) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{128}
}

type CMsgGCCStrike15V2_ClientRequestSouvenir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid  *uint64 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Matchid *uint64 `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
	Eventid *int32  `protobuf:"varint,3,opt,name=eventid" json:"eventid,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) Reset() {
	*x = CMsgGCCStrike15V2_ClientRequestSouvenir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientRequestSouvenir) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientRequestSouvenir.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientRequestSouvenir) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{129}
}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientRequestSouvenir) GetEventid() int32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientAccountBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount *uint64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Url    *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientAccountBalance) Reset() {
	*x = CMsgGCCStrike15V2_ClientAccountBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientAccountBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientAccountBalance) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientAccountBalance) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientAccountBalance.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientAccountBalance) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{130}
}

func (x *CMsgGCCStrike15V2_ClientAccountBalance) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientAccountBalance) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type CMsgGCCStrike15V2_ClientPartyJoinRelay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Lobbyid   *uint64 `protobuf:"varint,2,opt,name=lobbyid" json:"lobbyid,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientPartyJoinRelay) Reset() {
	*x = CMsgGCCStrike15V2_ClientPartyJoinRelay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientPartyJoinRelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPartyJoinRelay) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPartyJoinRelay) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPartyJoinRelay.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPartyJoinRelay) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{131}
}

func (x *CMsgGCCStrike15V2_ClientPartyJoinRelay) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPartyJoinRelay) GetLobbyid() uint64 {
	if x != nil && x.Lobbyid != nil {
		return *x.Lobbyid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientPartyWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CMsgGCCStrike15V2_ClientPartyWarning_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning) Reset() {
	*x = CMsgGCCStrike15V2_ClientPartyWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPartyWarning) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPartyWarning) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPartyWarning.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPartyWarning) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{132}
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning) GetEntries() []*CMsgGCCStrike15V2_ClientPartyWarning_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_SetEventFavorite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eventid    *uint64 `protobuf:"varint,1,opt,name=eventid" json:"eventid,omitempty"`
	IsFavorite *bool   `protobuf:"varint,2,opt,name=is_favorite,json=isFavorite" json:"is_favorite,omitempty"`
}

func (x *CMsgGCCStrike15V2_SetEventFavorite) Reset() {
	*x = CMsgGCCStrike15V2_SetEventFavorite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_SetEventFavorite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_SetEventFavorite) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_SetEventFavorite) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_SetEventFavorite.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_SetEventFavorite) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{133}
}

func (x *CMsgGCCStrike15V2_SetEventFavorite) GetEventid() uint64 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_SetEventFavorite) GetIsFavorite() bool {
	if x != nil && x.IsFavorite != nil {
		return *x.IsFavorite
	}
	return false
}

type CMsgGCCStrike15V2_GetEventFavorites_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllEvents *bool `protobuf:"varint,1,opt,name=all_events,json=allEvents" json:"all_events,omitempty"`
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Request) Reset() {
	*x = CMsgGCCStrike15V2_GetEventFavorites_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GetEventFavorites_Request) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Request) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GetEventFavorites_Request.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GetEventFavorites_Request) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{134}
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Request) GetAllEvents() bool {
	if x != nil && x.AllEvents != nil {
		return *x.AllEvents
	}
	return false
}

type CMsgGCCStrike15V2_GetEventFavorites_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllEvents     *bool   `protobuf:"varint,1,opt,name=all_events,json=allEvents" json:"all_events,omitempty"`
	JsonFavorites *string `protobuf:"bytes,2,opt,name=json_favorites,json=jsonFavorites" json:"json_favorites,omitempty"`
	JsonFeatured  *string `protobuf:"bytes,3,opt,name=json_featured,json=jsonFeatured" json:"json_featured,omitempty"`
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) Reset() {
	*x = CMsgGCCStrike15V2_GetEventFavorites_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GetEventFavorites_Response) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GetEventFavorites_Response.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GetEventFavorites_Response) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{135}
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) GetAllEvents() bool {
	if x != nil && x.AllEvents != nil {
		return *x.AllEvents
	}
	return false
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) GetJsonFavorites() string {
	if x != nil && x.JsonFavorites != nil {
		return *x.JsonFavorites
	}
	return ""
}

func (x *CMsgGCCStrike15V2_GetEventFavorites_Response) GetJsonFeatured() string {
	if x != nil && x.JsonFeatured != nil {
		return *x.JsonFeatured
	}
	return ""
}

type CMsgGCCStrike15V2_ClientPerfReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CMsgGCCStrike15V2_ClientPerfReport_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientPerfReport) Reset() {
	*x = CMsgGCCStrike15V2_ClientPerfReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientPerfReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPerfReport) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPerfReport) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPerfReport.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPerfReport) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{136}
}

func (x *CMsgGCCStrike15V2_ClientPerfReport) GetEntries() []*CMsgGCCStrike15V2_ClientPerfReport_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CVDiagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Extended    *uint32 `protobuf:"varint,2,opt,name=extended" json:"extended,omitempty"`
	Value       *uint64 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	StringValue *string `protobuf:"bytes,4,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
}

func (x *CVDiagnostic) Reset() {
	*x = CVDiagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVDiagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVDiagnostic) ProtoMessage() {}

func (x *CVDiagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVDiagnostic.ProtoReflect.Descriptor instead.
func (*CVDiagnostic) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{137}
}

func (x *CVDiagnostic) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CVDiagnostic) GetExtended() uint32 {
	if x != nil && x.Extended != nil {
		return *x.Extended
	}
	return 0
}

func (x *CVDiagnostic) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CVDiagnostic) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

type CMsgGCCStrike15V2_ClientReportValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileReport          *string         `protobuf:"bytes,1,opt,name=file_report,json=fileReport" json:"file_report,omitempty"`
	CommandLine         *string         `protobuf:"bytes,2,opt,name=command_line,json=commandLine" json:"command_line,omitempty"`
	TotalFiles          *uint32         `protobuf:"varint,3,opt,name=total_files,json=totalFiles" json:"total_files,omitempty"`
	InternalError       *uint32         `protobuf:"varint,4,opt,name=internal_error,json=internalError" json:"internal_error,omitempty"`
	TrustTime           *uint32         `protobuf:"varint,5,opt,name=trust_time,json=trustTime" json:"trust_time,omitempty"`
	CountPending        *uint32         `protobuf:"varint,6,opt,name=count_pending,json=countPending" json:"count_pending,omitempty"`
	CountCompleted      *uint32         `protobuf:"varint,7,opt,name=count_completed,json=countCompleted" json:"count_completed,omitempty"`
	ProcessId           *uint32         `protobuf:"varint,8,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	Osversion           *int32          `protobuf:"varint,9,opt,name=osversion" json:"osversion,omitempty"`
	Clientreportversion *uint32         `protobuf:"varint,10,opt,name=clientreportversion" json:"clientreportversion,omitempty"`
	StatusId            *uint32         `protobuf:"varint,11,opt,name=status_id,json=statusId" json:"status_id,omitempty"`
	Diagnostic1         *uint32         `protobuf:"varint,12,opt,name=diagnostic1" json:"diagnostic1,omitempty"`
	Diagnostic2         *uint64         `protobuf:"varint,13,opt,name=diagnostic2" json:"diagnostic2,omitempty"`
	Diagnostic3         *uint64         `protobuf:"varint,14,opt,name=diagnostic3" json:"diagnostic3,omitempty"`
	LastLaunchData      *string         `protobuf:"bytes,15,opt,name=last_launch_data,json=lastLaunchData" json:"last_launch_data,omitempty"`
	ReportCount         *uint32         `protobuf:"varint,16,opt,name=report_count,json=reportCount" json:"report_count,omitempty"`
	ClientTime          *uint64         `protobuf:"varint,17,opt,name=client_time,json=clientTime" json:"client_time,omitempty"`
	Diagnostic4         *uint64         `protobuf:"varint,18,opt,name=diagnostic4" json:"diagnostic4,omitempty"`
	Diagnostic5         *uint64         `protobuf:"varint,19,opt,name=diagnostic5" json:"diagnostic5,omitempty"`
	Diagnostics         []*CVDiagnostic `protobuf:"bytes,20,rep,name=diagnostics" json:"diagnostics,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) Reset() {
	*x = CMsgGCCStrike15V2_ClientReportValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientReportValidation) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientReportValidation) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientReportValidation.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientReportValidation) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{138}
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetFileReport() string {
	if x != nil && x.FileReport != nil {
		return *x.FileReport
	}
	return ""
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetCommandLine() string {
	if x != nil && x.CommandLine != nil {
		return *x.CommandLine
	}
	return ""
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetTotalFiles() uint32 {
	if x != nil && x.TotalFiles != nil {
		return *x.TotalFiles
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetInternalError() uint32 {
	if x != nil && x.InternalError != nil {
		return *x.InternalError
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetTrustTime() uint32 {
	if x != nil && x.TrustTime != nil {
		return *x.TrustTime
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetCountPending() uint32 {
	if x != nil && x.CountPending != nil {
		return *x.CountPending
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetCountCompleted() uint32 {
	if x != nil && x.CountCompleted != nil {
		return *x.CountCompleted
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetProcessId() uint32 {
	if x != nil && x.ProcessId != nil {
		return *x.ProcessId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetOsversion() int32 {
	if x != nil && x.Osversion != nil {
		return *x.Osversion
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetClientreportversion() uint32 {
	if x != nil && x.Clientreportversion != nil {
		return *x.Clientreportversion
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetStatusId() uint32 {
	if x != nil && x.StatusId != nil {
		return *x.StatusId
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetDiagnostic1() uint32 {
	if x != nil && x.Diagnostic1 != nil {
		return *x.Diagnostic1
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetDiagnostic2() uint64 {
	if x != nil && x.Diagnostic2 != nil {
		return *x.Diagnostic2
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetDiagnostic3() uint64 {
	if x != nil && x.Diagnostic3 != nil {
		return *x.Diagnostic3
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetLastLaunchData() string {
	if x != nil && x.LastLaunchData != nil {
		return *x.LastLaunchData
	}
	return ""
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetReportCount() uint32 {
	if x != nil && x.ReportCount != nil {
		return *x.ReportCount
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetClientTime() uint64 {
	if x != nil && x.ClientTime != nil {
		return *x.ClientTime
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetDiagnostic4() uint64 {
	if x != nil && x.Diagnostic4 != nil {
		return *x.Diagnostic4
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetDiagnostic5() uint64 {
	if x != nil && x.Diagnostic5 != nil {
		return *x.Diagnostic5
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientReportValidation) GetDiagnostics() []*CVDiagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type CMsgGCCStrike15V2_GC2ClientRefuseSecureMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileReport              *string `protobuf:"bytes,1,opt,name=file_report,json=fileReport" json:"file_report,omitempty"`
	OfferInsecureMode       *bool   `protobuf:"varint,2,opt,name=offer_insecure_mode,json=offerInsecureMode" json:"offer_insecure_mode,omitempty"`
	OfferSecureMode         *bool   `protobuf:"varint,3,opt,name=offer_secure_mode,json=offerSecureMode" json:"offer_secure_mode,omitempty"`
	ShowUnsignedUi          *bool   `protobuf:"varint,4,opt,name=show_unsigned_ui,json=showUnsignedUi" json:"show_unsigned_ui,omitempty"`
	KickUser                *bool   `protobuf:"varint,5,opt,name=kick_user,json=kickUser" json:"kick_user,omitempty"`
	ShowTrustedUi           *bool   `protobuf:"varint,6,opt,name=show_trusted_ui,json=showTrustedUi" json:"show_trusted_ui,omitempty"`
	ShowWarningNotTrusted   *bool   `protobuf:"varint,7,opt,name=show_warning_not_trusted,json=showWarningNotTrusted" json:"show_warning_not_trusted,omitempty"`
	ShowWarningNotTrusted_2 *bool   `protobuf:"varint,8,opt,name=show_warning_not_trusted_2,json=showWarningNotTrusted2" json:"show_warning_not_trusted_2,omitempty"`
	FilesPreventedTrusted   *string `protobuf:"bytes,9,opt,name=files_prevented_trusted,json=filesPreventedTrusted" json:"files_prevented_trusted,omitempty"`
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) Reset() {
	*x = CMsgGCCStrike15V2_GC2ClientRefuseSecureMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ClientRefuseSecureMode.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{139}
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetFileReport() string {
	if x != nil && x.FileReport != nil {
		return *x.FileReport
	}
	return ""
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetOfferInsecureMode() bool {
	if x != nil && x.OfferInsecureMode != nil {
		return *x.OfferInsecureMode
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetOfferSecureMode() bool {
	if x != nil && x.OfferSecureMode != nil {
		return *x.OfferSecureMode
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetShowUnsignedUi() bool {
	if x != nil && x.ShowUnsignedUi != nil {
		return *x.ShowUnsignedUi
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetKickUser() bool {
	if x != nil && x.KickUser != nil {
		return *x.KickUser
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetShowTrustedUi() bool {
	if x != nil && x.ShowTrustedUi != nil {
		return *x.ShowTrustedUi
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetShowWarningNotTrusted() bool {
	if x != nil && x.ShowWarningNotTrusted != nil {
		return *x.ShowWarningNotTrusted
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetShowWarningNotTrusted_2() bool {
	if x != nil && x.ShowWarningNotTrusted_2 != nil {
		return *x.ShowWarningNotTrusted_2
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRefuseSecureMode) GetFilesPreventedTrusted() string {
	if x != nil && x.FilesPreventedTrusted != nil {
		return *x.FilesPreventedTrusted
	}
	return ""
}

type CMsgGCCStrike15V2_GC2ClientRequestValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullReport *bool   `protobuf:"varint,1,opt,name=full_report,json=fullReport" json:"full_report,omitempty"`
	Module     *string `protobuf:"bytes,2,opt,name=module" json:"module,omitempty"`
}

func (x *CMsgGCCStrike15V2_GC2ClientRequestValidation) Reset() {
	*x = CMsgGCCStrike15V2_GC2ClientRequestValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GC2ClientRequestValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ClientRequestValidation) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ClientRequestValidation) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ClientRequestValidation.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ClientRequestValidation) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{140}
}

func (x *CMsgGCCStrike15V2_GC2ClientRequestValidation) GetFullReport() bool {
	if x != nil && x.FullReport != nil {
		return *x.FullReport
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientRequestValidation) GetModule() string {
	if x != nil && x.Module != nil {
		return *x.Module
	}
	return ""
}

type CMsgGCCStrike15V2_GC2ClientInitSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Load          *bool   `protobuf:"varint,1,opt,name=load" json:"load,omitempty"`
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Outputname    *string `protobuf:"bytes,3,opt,name=outputname" json:"outputname,omitempty"`
	KeyData       []byte  `protobuf:"bytes,4,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	ShaHash       []byte  `protobuf:"bytes,5,opt,name=sha_hash,json=shaHash" json:"sha_hash,omitempty"`
	Cookie        *int32  `protobuf:"varint,6,opt,name=cookie" json:"cookie,omitempty"`
	Manifest      *string `protobuf:"bytes,7,opt,name=manifest" json:"manifest,omitempty"`
	SystemPackage []byte  `protobuf:"bytes,8,opt,name=system_package,json=systemPackage" json:"system_package,omitempty"`
	LoadSystem    *bool   `protobuf:"varint,9,opt,name=load_system,json=loadSystem" json:"load_system,omitempty"`
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) Reset() {
	*x = CMsgGCCStrike15V2_GC2ClientInitSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ClientInitSystem) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ClientInitSystem.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ClientInitSystem) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{141}
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) GetLoad() bool {
	if x != nil && x.Load != nil {
		return *x.Load
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) GetOutputname() string {
	if x != nil && x.Outputname != nil {
		return *x.Outputname
	}
	return ""
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) GetShaHash() []byte {
	if x != nil {
		return x.ShaHash
	}
	return nil
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) GetCookie() int32 {
	if x != nil && x.Cookie != nil {
		return *x.Cookie
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) GetManifest() string {
	if x != nil && x.Manifest != nil {
		return *x.Manifest
	}
	return ""
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) GetSystemPackage() []byte {
	if x != nil {
		return x.SystemPackage
	}
	return nil
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem) GetLoadSystem() bool {
	if x != nil && x.LoadSystem != nil {
		return *x.LoadSystem
	}
	return false
}

type CMsgGCCStrike15V2_GC2ClientInitSystem_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     *bool              `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Diagnostic  *string            `protobuf:"bytes,2,opt,name=diagnostic" json:"diagnostic,omitempty"`
	ShaHash     []byte             `protobuf:"bytes,3,opt,name=sha_hash,json=shaHash" json:"sha_hash,omitempty"`
	Response    *int32             `protobuf:"varint,4,opt,name=response" json:"response,omitempty"`
	ErrorCode1  *int32             `protobuf:"varint,5,opt,name=error_code1,json=errorCode1" json:"error_code1,omitempty"`
	ErrorCode2  *int32             `protobuf:"varint,6,opt,name=error_code2,json=errorCode2" json:"error_code2,omitempty"`
	Handle      *int64             `protobuf:"varint,7,opt,name=handle" json:"handle,omitempty"`
	EinitResult *EInitSystemResult `protobuf:"varint,8,opt,name=einit_result,json=einitResult,enum=com.github.markus_wa.demoinfocs_golang.s2.EInitSystemResult,def=0" json:"einit_result,omitempty"`
	AuxSystem1  *int32             `protobuf:"varint,9,opt,name=aux_system1,json=auxSystem1" json:"aux_system1,omitempty"`
	AuxSystem2  *int32             `protobuf:"varint,10,opt,name=aux_system2,json=auxSystem2" json:"aux_system2,omitempty"`
}

// Default values for CMsgGCCStrike15V2_GC2ClientInitSystem_Response fields.
const (
	Default_CMsgGCCStrike15V2_GC2ClientInitSystem_Response_EinitResult = EInitSystemResult_k_EInitSystemResult_Invalid
)

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) Reset() {
	*x = CMsgGCCStrike15V2_GC2ClientInitSystem_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GC2ClientInitSystem_Response) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GC2ClientInitSystem_Response.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GC2ClientInitSystem_Response) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{142}
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) GetDiagnostic() string {
	if x != nil && x.Diagnostic != nil {
		return *x.Diagnostic
	}
	return ""
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) GetShaHash() []byte {
	if x != nil {
		return x.ShaHash
	}
	return nil
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) GetResponse() int32 {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) GetErrorCode1() int32 {
	if x != nil && x.ErrorCode1 != nil {
		return *x.ErrorCode1
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) GetErrorCode2() int32 {
	if x != nil && x.ErrorCode2 != nil {
		return *x.ErrorCode2
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) GetHandle() int64 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) GetEinitResult() EInitSystemResult {
	if x != nil && x.EinitResult != nil {
		return *x.EinitResult
	}
	return Default_CMsgGCCStrike15V2_GC2ClientInitSystem_Response_EinitResult
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) GetAuxSystem1() int32 {
	if x != nil && x.AuxSystem1 != nil {
		return *x.AuxSystem1
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GC2ClientInitSystem_Response) GetAuxSystem2() int32 {
	if x != nil && x.AuxSystem2 != nil {
		return *x.AuxSystem2
	}
	return 0
}

type CMsgGCCStrike15V2_SetPlayerLeaderboardSafeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardSafeName *string `protobuf:"bytes,1,opt,name=leaderboard_safe_name,json=leaderboardSafeName" json:"leaderboard_safe_name,omitempty"`
}

func (x *CMsgGCCStrike15V2_SetPlayerLeaderboardSafeName) Reset() {
	*x = CMsgGCCStrike15V2_SetPlayerLeaderboardSafeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_SetPlayerLeaderboardSafeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_SetPlayerLeaderboardSafeName) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_SetPlayerLeaderboardSafeName) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_SetPlayerLeaderboardSafeName.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_SetPlayerLeaderboardSafeName) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{143}
}

func (x *CMsgGCCStrike15V2_SetPlayerLeaderboardSafeName) GetLeaderboardSafeName() string {
	if x != nil && x.LeaderboardSafeName != nil {
		return *x.LeaderboardSafeName
	}
	return ""
}

type PlayerRankingInfo_PerMapRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId  *uint32 `protobuf:"varint,1,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	RankId *uint32 `protobuf:"varint,2,opt,name=rank_id,json=rankId" json:"rank_id,omitempty"`
	Wins   *uint32 `protobuf:"varint,3,opt,name=wins" json:"wins,omitempty"`
}

func (x *PlayerRankingInfo_PerMapRank) Reset() {
	*x = PlayerRankingInfo_PerMapRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRankingInfo_PerMapRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRankingInfo_PerMapRank) ProtoMessage() {}

func (x *PlayerRankingInfo_PerMapRank) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRankingInfo_PerMapRank.ProtoReflect.Descriptor instead.
func (*PlayerRankingInfo_PerMapRank) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{11, 0}
}

func (x *PlayerRankingInfo_PerMapRank) GetMapId() uint32 {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return 0
}

func (x *PlayerRankingInfo_PerMapRank) GetRankId() uint32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

func (x *PlayerRankingInfo_PerMapRank) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

type ScoreLeaderboardData_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag *uint32 `protobuf:"varint,1,opt,name=tag" json:"tag,omitempty"`
	Val *uint32 `protobuf:"varint,2,opt,name=val" json:"val,omitempty"`
}

func (x *ScoreLeaderboardData_Entry) Reset() {
	*x = ScoreLeaderboardData_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreLeaderboardData_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreLeaderboardData_Entry) ProtoMessage() {}

func (x *ScoreLeaderboardData_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreLeaderboardData_Entry.ProtoReflect.Descriptor instead.
func (*ScoreLeaderboardData_Entry) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{21, 0}
}

func (x *ScoreLeaderboardData_Entry) GetTag() uint32 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

func (x *ScoreLeaderboardData_Entry) GetVal() uint32 {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return 0
}

type ScoreLeaderboardData_AccountEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32                       `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Entries   []*ScoreLeaderboardData_Entry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (x *ScoreLeaderboardData_AccountEntries) Reset() {
	*x = ScoreLeaderboardData_AccountEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreLeaderboardData_AccountEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreLeaderboardData_AccountEntries) ProtoMessage() {}

func (x *ScoreLeaderboardData_AccountEntries) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreLeaderboardData_AccountEntries.ProtoReflect.Descriptor instead.
func (*ScoreLeaderboardData_AccountEntries) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{21, 1}
}

func (x *ScoreLeaderboardData_AccountEntries) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *ScoreLeaderboardData_AccountEntries) GetEntries() []*ScoreLeaderboardData_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type PlayerQuestData_QuestItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId                 *uint64 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	QuestNormalPointsEarned *int32  `protobuf:"varint,2,opt,name=quest_normal_points_earned,json=questNormalPointsEarned" json:"quest_normal_points_earned,omitempty"`
	QuestBonusPointsEarned  *int32  `protobuf:"varint,3,opt,name=quest_bonus_points_earned,json=questBonusPointsEarned" json:"quest_bonus_points_earned,omitempty"`
}

func (x *PlayerQuestData_QuestItemData) Reset() {
	*x = PlayerQuestData_QuestItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQuestData_QuestItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQuestData_QuestItemData) ProtoMessage() {}

func (x *PlayerQuestData_QuestItemData) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQuestData_QuestItemData.ProtoReflect.Descriptor instead.
func (*PlayerQuestData_QuestItemData) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{22, 0}
}

func (x *PlayerQuestData_QuestItemData) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *PlayerQuestData_QuestItemData) GetQuestNormalPointsEarned() int32 {
	if x != nil && x.QuestNormalPointsEarned != nil {
		return *x.QuestNormalPointsEarned
	}
	return 0
}

func (x *PlayerQuestData_QuestItemData) GetQuestBonusPointsEarned() int32 {
	if x != nil && x.QuestBonusPointsEarned != nil {
		return *x.QuestBonusPointsEarned
	}
	return 0
}

type CDataGCCStrike15V2_TournamentMatchDraft_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapid    *int32 `protobuf:"varint,1,opt,name=mapid" json:"mapid,omitempty"`
	TeamIdCt *int32 `protobuf:"varint,2,opt,name=team_id_ct,json=teamIdCt" json:"team_id_ct,omitempty"`
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft_Entry) Reset() {
	*x = CDataGCCStrike15V2_TournamentMatchDraft_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentMatchDraft_Entry) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentMatchDraft_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentMatchDraft_Entry.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentMatchDraft_Entry) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{33, 0}
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft_Entry) GetMapid() int32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

func (x *CDataGCCStrike15V2_TournamentMatchDraft_Entry) GetTeamIdCt() int32 {
	if x != nil && x.TeamIdCt != nil {
		return *x.TeamIdCt
	}
	return 0
}

type CPreMatchInfoData_TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchInfoIdxtxt *int32   `protobuf:"varint,1,opt,name=match_info_idxtxt,json=matchInfoIdxtxt" json:"match_info_idxtxt,omitempty"`
	MatchInfoTxt    *string  `protobuf:"bytes,2,opt,name=match_info_txt,json=matchInfoTxt" json:"match_info_txt,omitempty"`
	MatchInfoTeams  []string `protobuf:"bytes,3,rep,name=match_info_teams,json=matchInfoTeams" json:"match_info_teams,omitempty"`
}

func (x *CPreMatchInfoData_TeamStats) Reset() {
	*x = CPreMatchInfoData_TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPreMatchInfoData_TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPreMatchInfoData_TeamStats) ProtoMessage() {}

func (x *CPreMatchInfoData_TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPreMatchInfoData_TeamStats.ProtoReflect.Descriptor instead.
func (*CPreMatchInfoData_TeamStats) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{34, 0}
}

func (x *CPreMatchInfoData_TeamStats) GetMatchInfoIdxtxt() int32 {
	if x != nil && x.MatchInfoIdxtxt != nil {
		return *x.MatchInfoIdxtxt
	}
	return 0
}

func (x *CPreMatchInfoData_TeamStats) GetMatchInfoTxt() string {
	if x != nil && x.MatchInfoTxt != nil {
		return *x.MatchInfoTxt
	}
	return ""
}

func (x *CPreMatchInfoData_TeamStats) GetMatchInfoTeams() []string {
	if x != nil {
		return x.MatchInfoTeams
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountMvp *uint32 `protobuf:"varint,1,opt,name=account_mvp,json=accountMvp" json:"account_mvp,omitempty"`
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Reset() {
	*x = CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{38, 0}
}

func (x *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) GetAccountMvp() uint32 {
	if x != nil && x.AccountMvp != nil {
		return *x.AccountMvp
	}
	return 0
}

type CMsgGCCStrike15V2_AccountPrivacySettings_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingType  *uint32 `protobuf:"varint,1,opt,name=setting_type,json=settingType" json:"setting_type,omitempty"`
	SettingValue *uint32 `protobuf:"varint,2,opt,name=setting_value,json=settingValue" json:"setting_value,omitempty"`
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Reset() {
	*x = CMsgGCCStrike15V2_AccountPrivacySettings_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_AccountPrivacySettings_Setting) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_AccountPrivacySettings_Setting.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{41, 0}
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) GetSettingType() uint32 {
	if x != nil && x.SettingType != nil {
		return *x.SettingType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) GetSettingValue() uint32 {
	if x != nil && x.SettingValue != nil {
		return *x.SettingValue
	}
	return 0
}

type CMsgGCCStrike15_ClientDeepStats_DeepStatsRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin  *uint32 `protobuf:"varint,1,opt,name=begin" json:"begin,omitempty"`
	End    *uint32 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Frozen *bool   `protobuf:"varint,3,opt,name=frozen" json:"frozen,omitempty"`
}

func (x *CMsgGCCStrike15_ClientDeepStats_DeepStatsRange) Reset() {
	*x = CMsgGCCStrike15_ClientDeepStats_DeepStatsRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15_ClientDeepStats_DeepStatsRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15_ClientDeepStats_DeepStatsRange) ProtoMessage() {}

func (x *CMsgGCCStrike15_ClientDeepStats_DeepStatsRange) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15_ClientDeepStats_DeepStatsRange.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15_ClientDeepStats_DeepStatsRange) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{59, 0}
}

func (x *CMsgGCCStrike15_ClientDeepStats_DeepStatsRange) GetBegin() uint32 {
	if x != nil && x.Begin != nil {
		return *x.Begin
	}
	return 0
}

func (x *CMsgGCCStrike15_ClientDeepStats_DeepStatsRange) GetEnd() uint32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *CMsgGCCStrike15_ClientDeepStats_DeepStatsRange) GetFrozen() bool {
	if x != nil && x.Frozen != nil {
		return *x.Frozen
	}
	return false
}

type CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player *DeepPlayerStatsEntry   `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	Events []*DeepPlayerMatchEvent `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
}

func (x *CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch) Reset() {
	*x = CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch) ProtoMessage() {}

func (x *CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{59, 1}
}

func (x *CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch) GetPlayer() *DeepPlayerStatsEntry {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch) GetEvents() []*DeepPlayerMatchEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CEconItemPreviewDataBlock_Sticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot      *uint32  `protobuf:"varint,1,opt,name=slot" json:"slot,omitempty"`
	StickerId *uint32  `protobuf:"varint,2,opt,name=sticker_id,json=stickerId" json:"sticker_id,omitempty"`
	Wear      *float32 `protobuf:"fixed32,3,opt,name=wear" json:"wear,omitempty"`
	Scale     *float32 `protobuf:"fixed32,4,opt,name=scale" json:"scale,omitempty"`
	Rotation  *float32 `protobuf:"fixed32,5,opt,name=rotation" json:"rotation,omitempty"`
	TintId    *uint32  `protobuf:"varint,6,opt,name=tint_id,json=tintId" json:"tint_id,omitempty"`
	OffsetX   *float32 `protobuf:"fixed32,7,opt,name=offset_x,json=offsetX" json:"offset_x,omitempty"`
	OffsetY   *float32 `protobuf:"fixed32,8,opt,name=offset_y,json=offsetY" json:"offset_y,omitempty"`
}

func (x *CEconItemPreviewDataBlock_Sticker) Reset() {
	*x = CEconItemPreviewDataBlock_Sticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEconItemPreviewDataBlock_Sticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEconItemPreviewDataBlock_Sticker) ProtoMessage() {}

func (x *CEconItemPreviewDataBlock_Sticker) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEconItemPreviewDataBlock_Sticker.ProtoReflect.Descriptor instead.
func (*CEconItemPreviewDataBlock_Sticker) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{70, 0}
}

func (x *CEconItemPreviewDataBlock_Sticker) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetStickerId() uint32 {
	if x != nil && x.StickerId != nil {
		return *x.StickerId
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetWear() float32 {
	if x != nil && x.Wear != nil {
		return *x.Wear
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetRotation() float32 {
	if x != nil && x.Rotation != nil {
		return *x.Rotation
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetTintId() uint32 {
	if x != nil && x.TintId != nil {
		return *x.TintId
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetOffsetX() float32 {
	if x != nil && x.OffsetX != nil {
		return *x.OffsetX
	}
	return 0
}

func (x *CEconItemPreviewDataBlock_Sticker) GetOffsetY() float32 {
	if x != nil && x.OffsetY != nil {
		return *x.OffsetY
	}
	return 0
}

type CDataGCCStrike15V2_TournamentGroup_Picks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pickids []int32 `protobuf:"varint,1,rep,name=pickids" json:"pickids,omitempty"`
}

func (x *CDataGCCStrike15V2_TournamentGroup_Picks) Reset() {
	*x = CDataGCCStrike15V2_TournamentGroup_Picks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDataGCCStrike15V2_TournamentGroup_Picks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDataGCCStrike15V2_TournamentGroup_Picks) ProtoMessage() {}

func (x *CDataGCCStrike15V2_TournamentGroup_Picks) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDataGCCStrike15V2_TournamentGroup_Picks.ProtoReflect.Descriptor instead.
func (*CDataGCCStrike15V2_TournamentGroup_Picks) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{82, 0}
}

func (x *CDataGCCStrike15V2_TournamentGroup_Picks) GetPickids() []int32 {
	if x != nil {
		return x.Pickids
	}
	return nil
}

type CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sectionid *int32  `protobuf:"varint,1,opt,name=sectionid" json:"sectionid,omitempty"`
	Groupid   *int32  `protobuf:"varint,2,opt,name=groupid" json:"groupid,omitempty"`
	Index     *int32  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Teamid    *int32  `protobuf:"varint,4,opt,name=teamid" json:"teamid,omitempty"`
	Itemid    *uint64 `protobuf:"varint,5,opt,name=itemid" json:"itemid,omitempty"`
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Reset() {
	*x = CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{87, 0}
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetSectionid() int32 {
	if x != nil && x.Sectionid != nil {
		return *x.Sectionid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetGroupid() int32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetTeamid() int32 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type CMsgGCCStrike15V2_Fantasy_FantasySlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Pick   *int32  `protobuf:"varint,2,opt,name=pick" json:"pick,omitempty"`
	Itemid *uint64 `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) Reset() {
	*x = CMsgGCCStrike15V2_Fantasy_FantasySlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Fantasy_FantasySlot) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Fantasy_FantasySlot.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Fantasy_FantasySlot) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{88, 0}
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetPick() int32 {
	if x != nil && x.Pick != nil {
		return *x.Pick
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type CMsgGCCStrike15V2_Fantasy_FantasyTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sectionid *int32                                   `protobuf:"varint,1,opt,name=sectionid" json:"sectionid,omitempty"`
	Slots     []*CMsgGCCStrike15V2_Fantasy_FantasySlot `protobuf:"bytes,2,rep,name=slots" json:"slots,omitempty"`
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasyTeam) Reset() {
	*x = CMsgGCCStrike15V2_Fantasy_FantasyTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasyTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Fantasy_FantasyTeam) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Fantasy_FantasyTeam) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Fantasy_FantasyTeam.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Fantasy_FantasyTeam) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{88, 1}
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasyTeam) GetSectionid() int32 {
	if x != nil && x.Sectionid != nil {
		return *x.Sectionid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Fantasy_FantasyTeam) GetSlots() []*CMsgGCCStrike15V2_Fantasy_FantasySlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type CMsgLegacySource1ClientWelcome_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  *float32 `protobuf:"fixed32,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude *float32 `protobuf:"fixed32,2,opt,name=longitude" json:"longitude,omitempty"`
	Country   *string  `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
}

func (x *CMsgLegacySource1ClientWelcome_Location) Reset() {
	*x = CMsgLegacySource1ClientWelcome_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLegacySource1ClientWelcome_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLegacySource1ClientWelcome_Location) ProtoMessage() {}

func (x *CMsgLegacySource1ClientWelcome_Location) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLegacySource1ClientWelcome_Location.ProtoReflect.Descriptor instead.
func (*CMsgLegacySource1ClientWelcome_Location) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{90, 0}
}

func (x *CMsgLegacySource1ClientWelcome_Location) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *CMsgLegacySource1ClientWelcome_Location) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *CMsgLegacySource1ClientWelcome_Location) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

type CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Gifts     *uint32 `protobuf:"varint,2,opt,name=gifts" json:"gifts,omitempty"`
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Reset() {
	*x = CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{95, 0}
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) GetGifts() uint32 {
	if x != nil && x.Gifts != nil {
		return *x.Gifts
	}
	return 0
}

type CMsgGCCStrike15V2_Party_SearchResults_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Grp       *uint32 `protobuf:"varint,2,opt,name=grp" json:"grp,omitempty"`
	GameType  *uint32 `protobuf:"varint,3,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	Apr       *uint32 `protobuf:"varint,4,opt,name=apr" json:"apr,omitempty"`
	Ark       *uint32 `protobuf:"varint,5,opt,name=ark" json:"ark,omitempty"`
	Loc       *uint32 `protobuf:"varint,6,opt,name=loc" json:"loc,omitempty"`
	Accountid *uint32 `protobuf:"varint,7,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) Reset() {
	*x = CMsgGCCStrike15V2_Party_SearchResults_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Party_SearchResults_Entry) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Party_SearchResults_Entry.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Party_SearchResults_Entry) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{123, 0}
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetGrp() uint32 {
	if x != nil && x.Grp != nil {
		return *x.Grp
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetApr() uint32 {
	if x != nil && x.Apr != nil {
		return *x.Apr
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetArk() uint32 {
	if x != nil && x.Ark != nil {
		return *x.Ark
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetLoc() uint32 {
	if x != nil && x.Loc != nil {
		return *x.Loc
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Party_SearchResults_Entry) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_Account_RequestCoPlays_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Rtcoplay  *uint32 `protobuf:"varint,2,opt,name=rtcoplay" json:"rtcoplay,omitempty"`
	Online    *bool   `protobuf:"varint,3,opt,name=online" json:"online,omitempty"`
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) Reset() {
	*x = CMsgGCCStrike15V2_Account_RequestCoPlays_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_Account_RequestCoPlays_Player) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_Account_RequestCoPlays_Player.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_Account_RequestCoPlays_Player) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{125, 0}
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) GetRtcoplay() uint32 {
	if x != nil && x.Rtcoplay != nil {
		return *x.Rtcoplay
	}
	return 0
}

func (x *CMsgGCCStrike15V2_Account_RequestCoPlays_Player) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

type CMsgGCCStrike15V2_ClientPartyWarning_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Warntype  *uint32 `protobuf:"varint,2,opt,name=warntype" json:"warntype,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning_Entry) Reset() {
	*x = CMsgGCCStrike15V2_ClientPartyWarning_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPartyWarning_Entry) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPartyWarning_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPartyWarning_Entry.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPartyWarning_Entry) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{132, 0}
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning_Entry) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPartyWarning_Entry) GetWarntype() uint32 {
	if x != nil && x.Warntype != nil {
		return *x.Warntype
	}
	return 0
}

type CMsgGCCStrike15V2_ClientPerfReport_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perfcounter *uint32 `protobuf:"varint,1,opt,name=perfcounter" json:"perfcounter,omitempty"`
	Length      *uint32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	Reference   []byte  `protobuf:"bytes,3,opt,name=reference" json:"reference,omitempty"`
	Actual      []byte  `protobuf:"bytes,4,opt,name=actual" json:"actual,omitempty"`
	Sourceid    *uint32 `protobuf:"varint,5,opt,name=sourceid" json:"sourceid,omitempty"`
	Status      *uint32 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) Reset() {
	*x = CMsgGCCStrike15V2_ClientPerfReport_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCCStrike15V2_ClientPerfReport_Entry) ProtoMessage() {}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_s2_cstrike15_gcmessages_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCCStrike15V2_ClientPerfReport_Entry.ProtoReflect.Descriptor instead.
func (*CMsgGCCStrike15V2_ClientPerfReport_Entry) Descriptor() ([]byte, []int) {
	return file_s2_cstrike15_gcmessages_proto_rawDescGZIP(), []int{136, 0}
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetPerfcounter() uint32 {
	if x != nil && x.Perfcounter != nil {
		return *x.Perfcounter
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetReference() []byte {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetActual() []byte {
	if x != nil {
		return x.Actual
	}
	return nil
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetSourceid() uint32 {
	if x != nil && x.Sourceid != nil {
		return *x.Sourceid
	}
	return 0
}

func (x *CMsgGCCStrike15V2_ClientPerfReport_Entry) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

var File_s2_cstrike15_gcmessages_proto protoreflect.FileDescriptor

var file_s2_cstrike15_gcmessages_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x32, 0x2f, 0x63, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x67,
	0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x1a, 0x16, 0x73, 0x32, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x32, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x63,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x73, 0x32, 0x2f, 0x67, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x0e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x4a, 0x0a,
	0x0e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x22, 0xfd, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x6f, 0x62, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x22, 0xd5, 0x01, 0x0a, 0x0e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22,
	0xd7, 0x02, 0x0a, 0x0f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x24, 0x0a,
	0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xaa, 0x06, 0x0a, 0x10, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61,
	0x76, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x12, 0x6f, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x16,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x43, 0x75, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x33, 0x32, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x22, 0x4b, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x64, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x64,
	0x6b, 0x65, 0x79, 0x22, 0x4b, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x64, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xbb, 0x01, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5e,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x71,
	0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xef, 0x04, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77,
	0x69, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x76, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x76, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x66, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x66, 0x57, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x66, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x66, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x66, 0x5f, 0x74, 0x69, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x66, 0x54, 0x69, 0x65, 0x12, 0x69,
	0x0a, 0x0c, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x50, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77,
	0x69, 0x6e, 0x73, 0x22, 0x7d, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6d, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6d, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6d, 0x64, 0x54, 0x65, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6d, 0x64, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6d, 0x64, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x64,
	0x61, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x64, 0x78, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x44, 0x65, 0x66, 0x69, 0x64, 0x78, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x64, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x19, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x64, 0x78, 0x22, 0x6d, 0x0a, 0x0f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x43, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x54, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xcf, 0x05,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6c, 0x74, 0x76, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x76, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x76, 0x55, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x74, 0x76, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x76, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b,
	0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x76, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x76, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x76, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x76, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x76, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x76,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x76, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x76,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x76, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x76, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x76, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x76, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x76, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x76, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x76, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x76, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x76, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x76, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x76, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x76, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x76, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x76, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x76, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x76, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x76, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x76, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0x71, 0x0a, 0x0d, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x61, 0x12, 0x0c,
	0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x7f, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x63, 0x73, 0x67, 0x6f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65,
	0x63, 0x73, 0x67, 0x6f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x74, 0x61,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x22, 0x4e, 0x0a, 0x0e, 0x58, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x78, 0x70, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x78, 0x70, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x78, 0x70, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x78, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x69, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x44, 0x65, 0x66, 0x69, 0x64, 0x78, 0x12, 0x31,
	0x0a, 0x15, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69,
	0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x94, 0x04, 0x0a, 0x14, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x76, 0x0a, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2b, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0x8f, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x5f, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e,
	0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x73, 0x32, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x8f, 0x06, 0x0a, 0x0f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x0f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x63, 0x0a, 0x10,
	0x78, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x58, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x78, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77,
	0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x70, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x73, 0x67,
	0x6f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0xa2, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x19, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x22, 0x95, 0x08, 0x0a, 0x14, 0x44,
	0x65, 0x65, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x6d, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x61, 0x70, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x6d, 0x76, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x4d, 0x76, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x48, 0x65, 0x61, 0x64, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x32, 0x6b,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x32, 0x6b,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x33, 0x6b, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x33, 0x6b, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x34, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x34, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x31, 0x76, 0x31, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x6e, 0x67,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x31, 0x76, 0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x31, 0x76, 0x31, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x31, 0x76, 0x31, 0x57, 0x69,
	0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x31, 0x76, 0x32, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x31, 0x76,
	0x32, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x31, 0x76, 0x32, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x31, 0x76, 0x32, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6c, 0x61,
	0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x73, 0x68,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x61, 0x74, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x74,
	0x65, 0x73, 0x22, 0xc8, 0x03, 0x0a, 0x14, 0x44, 0x65, 0x65, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x62, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x74,
	0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x58, 0x12, 0x1c,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x59, 0x12, 0x1c, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x7a, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x5a, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x64, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x64, 0x78, 0x12, 0x1e, 0x0a, 0x0b, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x58, 0x12, 0x1e, 0x0a, 0x0b, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x59, 0x12, 0x1e, 0x0a, 0x0b, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x7a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x5a, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x64, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x64, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x02,
	0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x66,
	0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x6d, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x62, 0x73, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x62, 0x73, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x22, 0xf0, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x6a, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x76,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x32, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0xb4, 0x04, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x63, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x65, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x73, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x5d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x09, 0x0a, 0x2d, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x3d,
	0x0a, 0x1b, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x18, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x20, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1d, 0x6f,
	0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x0c,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x1c,
	0x66, 0x61, 0x69, 0x6c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x19, 0x66, 0x61, 0x69, 0x6c, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a,
	0x1b, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x18, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x1d,
	0x66, 0x61, 0x69, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x1a, 0x66, 0x61, 0x69, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x41, 0x0a, 0x1d, 0x76, 0x61, 0x63, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1a, 0x76, 0x61, 0x63, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x13, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x73, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x5d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x1d, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x12,
	0x3d, 0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f,
	0x0a, 0x1c, 0x76, 0x73, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x19, 0x76, 0x73, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3c, 0x0a, 0x1a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x4d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a,
	0x1c, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf0,
	0x06, 0x0a, 0x28, 0x43, 0x44, 0x61, 0x74, 0x61, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x30, 0x12, 0x1a, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x65, 0x74, 0x6f, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x56, 0x65, 0x74, 0x6f, 0x31, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x50, 0x69, 0x63,
	0x6b, 0x6e, 0x12, 0x71, 0x0a, 0x06, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43,
	0x44, 0x61, 0x74, 0x61, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f,
	0x76, 0x32, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x69, 0x64, 0x5f, 0x30, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x6f, 0x74,
	0x65, 0x4d, 0x61, 0x70, 0x69, 0x64, 0x30, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x76,
	0x6f, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x69, 0x64, 0x31, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0a, 0x76, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x69, 0x64, 0x32, 0x12, 0x20, 0x0a, 0x0c, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x5f, 0x33, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x69, 0x64, 0x33, 0x12, 0x20, 0x0a,
	0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x5f, 0x34, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x69, 0x64, 0x34, 0x12,
	0x20, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x5f, 0x35, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x69, 0x64,
	0x35, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x76,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x76, 0x6f, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x1a, 0x3b, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61,
	0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x43,
	0x74, 0x22, 0xa3, 0x03, 0x0a, 0x11, 0x43, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x63, 0x74,
	0x12, 0x69, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x44, 0x61, 0x74,
	0x61, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x52, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x5c, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77,
	0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x1a, 0x87, 0x01,
	0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x78, 0x74, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x64, 0x78, 0x74, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x78, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x92, 0x09, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x58, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x09,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x76, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x74, 0x76, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x65, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77,
	0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0f, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x43, 0x0a,
	0x1e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x76, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x76,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x43, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x62, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0xe5, 0x07, 0x0a,
	0x37, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35,
	0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x7b,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f,
	0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43,
	0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x2e, 0x0a,
	0x13, 0x67, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x67, 0x63, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x07, 0x74, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6c, 0x74, 0x76, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x74, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x64,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x36, 0x0a, 0x18, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74,
	0x74, 0x72, 0x44, 0x65, 0x66, 0x49, 0x64, 0x78, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a,
	0x1b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x3a, 0x0a, 0x19,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c,
	0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x73, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x22, 0xee, 0x03, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x64,
	0x70, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x64, 0x70, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x7b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77,
	0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x67,
	0x73, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x67, 0x73, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x24, 0x0a, 0x0e, 0x67, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x87, 0x0b, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x7b,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69,
	0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f,
	0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43,
	0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x73, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x65,
	0x6d, 0x79, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a,
	0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x48, 0x65, 0x61, 0x64, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x33, 0x6b, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x33, 0x6b, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x34, 0x6b, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x34, 0x6b, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x35, 0x6b, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x35, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x76,
	0x70, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x76, 0x70, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x76,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x76, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6e,
	0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x41, 0x67, 0x67, 0x12, 0x7f, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x72, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x62, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x32, 0x6b, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x32, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x70, 0x61, 0x77, 0x6e,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x70, 0x61, 0x77, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65,
	0x61, 0x6d, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x1a, 0x2b, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x76, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x76, 0x70, 0x22,
	0x2e, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x47, 0x43, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x22,
	0xc4, 0x0b, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x7d, 0x0a, 0x0c, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x52, 0x0c, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x5e,
	0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x61, 0x63, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x63, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x56, 0x0a,
	0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x06,
	0x6d, 0x65, 0x64, 0x61, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x65, 0x64, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x61, 0x6c,
	0x73, 0x12, 0x64, 0x0a, 0x10, 0x6d, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6d, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x16, 0x6d, 0x79, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x73, 0x32, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x13, 0x6d, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x61, 0x0a, 0x0f, 0x6d, 0x79, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0d, 0x6d, 0x79, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x71, 0x0a, 0x17, 0x6d, 0x79,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x6d, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x56,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x78, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x58, 0x70, 0x12, 0x31, 0x0a,
	0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x78, 0x70, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x58, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x58, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x69, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x78, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x51,
	0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xa4, 0x02, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65,
	0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x0e, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x43, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x59, 0x0a, 0x33,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f,
	0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x47, 0x43, 0x42, 0x6c, 0x6f, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xbd, 0x01, 0x0a, 0x33, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xe1, 0x02, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x74, 0x5f, 0x61, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x70, 0x74, 0x41, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x70, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x68, 0x61, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x70, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x68, 0x61,
	0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x70, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x68,
	0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x70, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x68, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x70, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x68, 0x61, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x70, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x68, 0x61, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x70,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x61, 0x62, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x70, 0x74, 0x54, 0x65, 0x78, 0x74, 0x61, 0x62, 0x75, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x70, 0x74, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x61, 0x62, 0x75, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x70, 0x74, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x61, 0x62, 0x75, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x6d, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x26,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f,
	0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x65, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22,
	0x8d, 0x02, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x70, 0x74,
	0x5f, 0x70, 0x6f, 0x6f, 0x72, 0x70, 0x65, 0x72, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x70, 0x74, 0x50, 0x6f, 0x6f, 0x72, 0x70, 0x65, 0x72, 0x66, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x70, 0x74, 0x5f, 0x61, 0x62, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x70, 0x74, 0x41, 0x62, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x74,
	0x5f, 0x62, 0x61, 0x64, 0x6d, 0x6f, 0x74, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x70, 0x74, 0x42, 0x61, 0x64, 0x6d, 0x6f, 0x74, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x70,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x62, 0x75, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x61, 0x62, 0x75, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x61, 0x62, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x72, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x61,
	0x62, 0x75, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22,
	0xf4, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x11, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xd3, 0x03, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x76, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x76, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x76, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x76, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x76, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x76, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6c, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x75, 0x62,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6c, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x49, 0x70, 0x70, 0x12, 0x6b, 0x0a,
	0x03, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77,
	0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x03, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0xcc, 0x02, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x6b, 0x0a, 0x03,
	0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x52, 0x03, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x6c, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x64, 0x65, 0x65,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xfd, 0x03, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x58, 0x50, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x10, 0x78, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x58, 0x70, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x78, 0x70, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x58, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x64, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x44, 0x65,
	0x66, 0x69, 0x64, 0x78, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x78, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x78,
	0x70, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x2b, 0x0a, 0x12, 0x78, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x78, 0x70, 0x5f, 0x6e,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x78, 0x70, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x58, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x78, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x78, 0x70, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x3c, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xbd, 0x04, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x65, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x44,
	0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x73, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x50, 0x0a, 0x0e, 0x44, 0x65, 0x65,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x1a, 0xc2, 0x01, 0x0a, 0x0e,
	0x44, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x57,
	0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x73, 0x32, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x81, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x71, 0x0a, 0x15, 0x77, 0x61, 0x74, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x77, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x5f, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc7, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a,
	0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0xa6, 0x02, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x73, 0x65, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x74, 0x5f,
	0x61, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x70,
	0x74, 0x41, 0x69, 0x6d, 0x62, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x70, 0x74, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x68, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x70, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x68, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x70,
	0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x68, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x70, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x68, 0x61, 0x63, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x68, 0x61, 0x72, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x70, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x68, 0x61,
	0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x90, 0x03, 0x0a, 0x30, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x61, 0x73, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x65, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x73, 0x65, 0x75, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x62, 0x0a,
	0x2c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35,
	0x5f, 0x76, 0x32, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x61, 0x73, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63,
	0x61, 0x73, 0x65, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x69,
	0x64, 0x22, 0x56, 0x0a, 0x1e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x61, 0x73, 0x65, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x23, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x49,
	0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x47, 0x43, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x29, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x78, 0x0a, 0x14,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77,
	0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xdd, 0x06, 0x0a, 0x19, 0x43, 0x45, 0x63, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x6e,
	0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x6e,
	0x74, 0x77, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x69,
	0x6e, 0x74, 0x77, 0x65, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6b, 0x69,
	0x6c, 0x6c, 0x65, 0x61, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x08,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x1a, 0xd1, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x77, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x58, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x59, 0x22, 0x96, 0x01, 0x0a, 0x32, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70,
	0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x45, 0x63, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x78, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x37, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x47, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x5f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x44,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x22, 0x9c, 0x01, 0x0a, 0x38, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x47, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e,
	0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x35, 0x0a, 0x33, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x52, 0x0a, 0x32, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x32, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x32, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd0, 0x03, 0x0a, 0x1d, 0x43, 0x44, 0x61,
	0x74, 0x61, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x77, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x7f, 0x0a, 0x0d, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x74, 0x61, 0x74, 0x73, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x74, 0x61, 0x74, 0x73, 0x61, 0x6c, 0x6c, 0x22, 0x7a, 0x0a, 0x27, 0x43,
	0x44, 0x61, 0x74, 0x61, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f,
	0x76, 0x32, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x70, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x70, 0x69, 0x63, 0x6b, 0x22, 0xa5, 0x04, 0x0a, 0x23, 0x43, 0x44, 0x61, 0x74,
	0x61, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x5f, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x69,
	0x63, 0x6b, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x68, 0x0a,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x44, 0x61, 0x74, 0x61, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x6f, 0x63, 0x6b,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x50, 0x69, 0x63, 0x6b,
	0x12, 0x6a, 0x0a, 0x05, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x44, 0x61, 0x74,
	0x61, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x50, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x05, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x1a, 0x21, 0x0a, 0x05,
	0x50, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x64, 0x73, 0x22,
	0xd5, 0x01, 0x0a, 0x25, 0x43, 0x44, 0x61, 0x74, 0x61, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x66, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x44, 0x61, 0x74,
	0x61, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x22, 0x43, 0x44, 0x61, 0x74,
	0x61, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6c,
	0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x44, 0x61,
	0x74, 0x61, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x65, 0x0a, 0x10,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x22, 0xb0, 0x03, 0x0a, 0x1c, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x73,
	0x67, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6d, 0x73, 0x67, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x44, 0x61, 0x74, 0x61, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x53, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x75, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75,
	0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x44, 0x61, 0x74, 0x61, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd0, 0x01, 0x0a,
	0x32, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35,
	0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x67, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x62, 0x0a,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x44, 0x61, 0x74, 0x61,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22,
	0xe4, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x91, 0x01,
	0x0a, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x13, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x63, 0x6b,
	0x73, 0x1a, 0x92, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0x86, 0x03, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x46, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x67, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x46,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x4d, 0x0a, 0x0b, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x69, 0x63, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x1a, 0x94, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x2e, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22,
	0x29, 0x0a, 0x11, 0x43, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93, 0x06, 0x0a, 0x1e, 0x43,
	0x4d, 0x73, 0x67, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x31,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x6f, 0x66, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77,
	0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x4f, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x52, 0x19, 0x6f, 0x75,
	0x74, 0x6f, 0x66, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x75, 0x70, 0x74, 0x6f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x4f, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x18, 0x75, 0x70, 0x74, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x6e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x31, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x32, 0x12, 0x3f,
	0x0a, 0x1c, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x67, 0x63, 0x5f, 0x77, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x47, 0x63, 0x57,
	0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x78, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x78, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x1a, 0x5e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0xb2, 0x02, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x73, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67,
	0x73, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x69, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x6f,
	0x6b, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x6f, 0x6b, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xa1,
	0x01, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x61, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x69, 0x66, 0x74, 0x73, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xa0, 0x03, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x69, 0x66, 0x74, 0x73, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x5f,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x47, 0x69, 0x66, 0x74, 0x73, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x85, 0x01, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x47, 0x69, 0x66, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x14, 0x47, 0x69, 0x66, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x69, 0x66, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x69,
	0x66, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x74,
	0x65, 0x22, 0x4a, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0x47,
	0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x97, 0x01,
	0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x73, 0x22, 0x70, 0x0a, 0x0d, 0x43, 0x53, 0x4f, 0x45, 0x63,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0x97, 0x22, 0x01, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x66, 0x69,
	0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x66, 0x69, 0x64, 0x78,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x43, 0x53,
	0x4f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x0f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0x97, 0x22, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x80, 0x01,
	0x0a, 0x10, 0x43, 0x53, 0x4f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0x97, 0x22, 0x01, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0xb7, 0x02, 0x0a, 0x1b, 0x43, 0x53, 0x4f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0x97, 0x22, 0x01, 0x52, 0x0b, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x65,
	0x72, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x69, 0x65, 0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x1f, 0x43, 0x53,
	0x4f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x22, 0xaa, 0x02, 0x0a,
	0x14, 0x43, 0x53, 0x4f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x65, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73,
	0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x78, 0x70, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x78, 0x70, 0x54, 0x72,
	0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x78, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x78, 0x70, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x35, 0x0a, 0x1b, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x22, 0x3b, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x66, 0x74, 0x22, 0x70, 0x0a,
	0x16, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x61,
	0x6d, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x73, 0x70, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x73, 0x70, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0x4b, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x22, 0xa5, 0x01, 0x0a,
	0x2f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35,
	0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x47, 0x43, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x32, 0x47, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x73, 0x22, 0x43, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a,
	0x21, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35,
	0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x56, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x54, 0x0a, 0x24, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x76, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x47, 0x6f, 0x74, 0x76, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x54, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x47, 0x6f, 0x74, 0x76, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x96, 0x03, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x65, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x70, 0x6f, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x65, 0x66,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x64, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x78, 0x44, 0x65, 0x66, 0x69, 0x64, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69,
	0x74, 0x62, 0x6f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x69, 0x74, 0x62,
	0x6f, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x9e, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x63, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x5a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f,
	0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65,
	0x63, 0x61, 0x6c, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x22, 0x3d, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x42, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x7c, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x6f, 0x6e, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x6a,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x21, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x61, 0x70, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x62, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x72, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x72, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1f, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x70,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x04, 0x67, 0x72, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xb8, 0x02, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73,
	0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x9a,
	0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x72, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x72, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x70, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x1f, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x69, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x73, 0x12, 0x75, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x5a, 0x0a, 0x06, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x74, 0x63, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x74, 0x63, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x64, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x64, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x50,
	0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x22, 0x28, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x22, 0x76, 0x0a, 0x28, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f,
	0x75, 0x76, 0x65, 0x6e, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x69, 0x64, 0x22, 0x53, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x61, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x69, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x70, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x41, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x61, 0x72, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x77, 0x61, 0x72, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x23, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x53, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22, 0x4d, 0x0a, 0x2c, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x2d, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x6e, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0xab, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72,
	0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x73, 0x0a,
	0x0c, 0x43, 0x56, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xa3, 0x06, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x73, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x33, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x33, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x35, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x35, 0x12, 0x59, 0x0a,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x73, 0x32, 0x2e, 0x43,
	0x56, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xc7, 0x03, 0x0a, 0x2c, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x69,
	0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x55, 0x69, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x1a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x32, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x22, 0x68, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xa2, 0x02, 0x0a,
	0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35,
	0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68,
	0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x22, 0xbc, 0x03, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x73, 0x68, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x7c, 0x0a, 0x0c, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x73, 0x5f, 0x77, 0x61, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x73, 0x32, 0x2e, 0x45, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x0b, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x75, 0x78, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x31, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x75, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x31, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x78, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x32, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x75, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x32,
	0x22, 0x65, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x61, 0x66, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x61, 0x66, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x8c, 0x28, 0x0a, 0x0a, 0x45, 0x43, 0x73, 0x67,
	0x6f, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x42,
	0x61, 0x73, 0x65, 0x10, 0x8c, 0x47, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10,
	0x8d, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x8e, 0x47, 0x12, 0x36, 0x0a,
	0x31, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69,
	0x6e, 0x67, 0x10, 0x8f, 0x47, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x90, 0x47, 0x12, 0x3e, 0x0a, 0x39, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35,
	0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x92, 0x47, 0x12, 0x35, 0x0a, 0x30, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35,
	0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47,
	0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x10,
	0x93, 0x47, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x47, 0x43, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x10, 0x95, 0x47, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x43, 0x32, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x10, 0x96, 0x47, 0x12, 0x35, 0x0a, 0x30,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x10, 0x98, 0x47, 0x12, 0x3a, 0x0a, 0x35, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32,
	0x47, 0x43, 0x42, 0x6c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x9d, 0x47, 0x12,
	0x3a, 0x0a, 0x35, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x10, 0x9e, 0x47, 0x12, 0x2c, 0x0a, 0x27, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35,
	0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x9f, 0x47, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x10, 0xa0, 0x47, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x10, 0xa1, 0x47, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xa2, 0x47, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0xa3, 0x47, 0x12, 0x3a, 0x0a, 0x35, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f,
	0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xa4, 0x47, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10, 0xa6, 0x47,
	0x12, 0x35, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x10, 0xa7, 0x47, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0xa8,
	0x47, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x10, 0xab, 0x47, 0x12, 0x37, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61,
	0x73, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0xac, 0x47, 0x12,
	0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0xad, 0x47, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x10, 0xae, 0x47,
	0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32,
	0x47, 0x43, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x10, 0xaf, 0x47, 0x12, 0x30, 0x0a, 0x2b,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x10, 0xb0, 0x47, 0x12, 0x39,
	0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xb1, 0x47, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x32,
	0x10, 0xb2, 0x47, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xb3, 0x47, 0x12, 0x3a, 0x0a, 0x35, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x10, 0xb4, 0x47, 0x12, 0x39, 0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x10, 0xb5, 0x47, 0x12,
	0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x10, 0xb6, 0x47, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xb8, 0x47, 0x12,
	0x39, 0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x10, 0xba, 0x47, 0x12, 0x36, 0x0a, 0x31, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f,
	0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10,
	0xbb, 0x47, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x69, 0x66, 0x74, 0x73,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0xbc, 0x47, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x69,
	0x66, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xbd, 0x47, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x10, 0xbe, 0x47, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x6f,
	0x74, 0x65, 0x10, 0xc0, 0x47, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x32, 0x47, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x10, 0xc1, 0x47, 0x12, 0x39, 0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x10, 0xc2, 0x47, 0x12, 0x3e, 0x0a, 0x39, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x32, 0x47, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0xc4, 0x47, 0x12, 0x3f, 0x0a, 0x3a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x32, 0x47, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xc5, 0x47, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x10, 0xc6, 0x47, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x53,
	0x65, 0x74, 0x4d, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x10, 0xc7, 0x47, 0x12, 0x3f, 0x0a, 0x3a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x10, 0xc8, 0x47, 0x12, 0x3e, 0x0a, 0x39, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x10, 0xc9, 0x47, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x10, 0xca, 0x47, 0x12, 0x35, 0x0a, 0x30,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x10, 0xcb, 0x47, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x10, 0xcc, 0x47, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f,
	0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4e, 0x65, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xcd, 0x47, 0x12, 0x31, 0x0a,
	0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xcf, 0x47,
	0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x10, 0xd0, 0x47, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0xd1, 0x47, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x61, 0x6d,
	0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x10, 0xd2, 0x47, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x10, 0xd3, 0x47, 0x12, 0x36, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0xd4, 0x47, 0x12,
	0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0xd5, 0x47, 0x12,
	0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x47,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0xd6, 0x47,
	0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x10, 0xd7, 0x47, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x10, 0xd8, 0x47, 0x12, 0x37, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x64,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0xd9, 0x47,
	0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x10, 0xda, 0x47, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6c, 0x65,
	0x76, 0x61, 0x74, 0x65, 0x10, 0xdb, 0x47, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x10, 0xdc, 0x47, 0x12, 0x2e, 0x0a,
	0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0xdd, 0x47, 0x12, 0x30, 0x0a,
	0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x5f, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0xde, 0x47, 0x12,
	0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x10, 0xdf, 0x47, 0x12, 0x28, 0x0a, 0x23,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x6f, 0x74, 0x76, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x10, 0xe0, 0x47, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x63, 0x61, 0x6c,
	0x53, 0x69, 0x67, 0x6e, 0x10, 0xe1, 0x47, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x46, 0x61, 0x74, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xe3, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x10, 0xe4, 0x47, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0xe5, 0x47, 0x12, 0x2a, 0x0a,
	0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0xe6, 0x47, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0xe7,
	0x47, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xe8, 0x47, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x73, 0x10, 0xe9, 0x47, 0x12, 0x2c, 0x0a, 0x27, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35,
	0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x43, 0x52, 0x61, 0x6e, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0xea, 0x47, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x10, 0xeb, 0x47, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0xec, 0x47, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x10, 0xed, 0x47, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x10, 0xee, 0x47, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x53,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x10,
	0xf0, 0x47, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0xf1, 0x47, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x10, 0xf2, 0x47, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf3, 0x47, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76,
	0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x6f, 0x75, 0x76, 0x65, 0x6e, 0x69, 0x72, 0x10, 0xf4, 0x47, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f,
	0x76, 0x32, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xf5, 0x47, 0x12, 0x33, 0x0a, 0x2e,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0xf6,
	0x47, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0xf7, 0x47, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0xf9, 0x47, 0x12, 0x26, 0x0a, 0x21,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31,
	0x35, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x10, 0xfa, 0x47, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0xfb, 0x47, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x10, 0xfc, 0x47, 0x12, 0x36, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x47, 0x43, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xfd, 0x47, 0x12,
	0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x10, 0xfe, 0x47, 0x12, 0x39, 0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x67, 0x6d, 0x74,
	0x10, 0xff, 0x47, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x42, 0x65, 0x74, 0x61,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x81, 0x48, 0x12, 0x36, 0x0a,
	0x31, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x61, 0x66, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x10, 0x82, 0x48, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x10, 0x83, 0x48, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x31, 0x35, 0x5f, 0x76, 0x32, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x10, 0x84, 0x48, 0x2a, 0x98, 0x01, 0x0a, 0x12, 0x45, 0x43, 0x73, 0x67, 0x6f,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x26, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x58, 0x70, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x43, 0x73, 0x67, 0x6f,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x57, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x43, 0x73, 0x67, 0x6f, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x53, 0x75, 0x72,
	0x76, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x10,
	0x03, 0x2a, 0xa1, 0x01, 0x0a, 0x17, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x6c, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x42, 0x65, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x02, 0x2a, 0xbe, 0x02, 0x0a, 0x11, 0x45, 0x49, 0x6e, 0x69, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x6b,
	0x5f, 0x45, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x6b,
	0x5f, 0x45, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x65,
	0x6e, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x69, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x4d, 0x61, 0x78, 0x10, 0x08,
}

var (
	file_s2_cstrike15_gcmessages_proto_rawDescOnce sync.Once
	file_s2_cstrike15_gcmessages_proto_rawDescData = file_s2_cstrike15_gcmessages_proto_rawDesc
)

func file_s2_cstrike15_gcmessages_proto_rawDescGZIP() []byte {
	file_s2_cstrike15_gcmessages_proto_rawDescOnce.Do(func() {
		file_s2_cstrike15_gcmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_s2_cstrike15_gcmessages_proto_rawDescData)
	})
	return file_s2_cstrike15_gcmessages_proto_rawDescData
}

var file_s2_cstrike15_gcmessages_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_s2_cstrike15_gcmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 165)
var file_s2_cstrike15_gcmessages_proto_goTypes = []interface{}{
	(ECsgoGCMsg)(0),                                                         // 0: com.github.markus_wa.demoinfocs_golang.s2.ECsgoGCMsg
	(ECsgoSteamUserStat)(0),                                                 // 1: com.github.markus_wa.demoinfocs_golang.s2.ECsgoSteamUserStat
	(EClientReportingVersion)(0),                                            // 2: com.github.markus_wa.demoinfocs_golang.s2.EClientReportingVersion
	(EInitSystemResult)(0),                                                  // 3: com.github.markus_wa.demoinfocs_golang.s2.EInitSystemResult
	(*GameServerPing)(nil),                                                  // 4: com.github.markus_wa.demoinfocs_golang.s2.GameServerPing
	(*DataCenterPing)(nil),                                                  // 5: com.github.markus_wa.demoinfocs_golang.s2.DataCenterPing
	(*DetailedSearchStatistic)(nil),                                         // 6: com.github.markus_wa.demoinfocs_golang.s2.DetailedSearchStatistic
	(*TournamentPlayer)(nil),                                                // 7: com.github.markus_wa.demoinfocs_golang.s2.TournamentPlayer
	(*TournamentTeam)(nil),                                                  // 8: com.github.markus_wa.demoinfocs_golang.s2.TournamentTeam
	(*TournamentEvent)(nil),                                                 // 9: com.github.markus_wa.demoinfocs_golang.s2.TournamentEvent
	(*GlobalStatistics)(nil),                                                // 10: com.github.markus_wa.demoinfocs_golang.s2.GlobalStatistics
	(*OperationalStatisticDescription)(nil),                                 // 11: com.github.markus_wa.demoinfocs_golang.s2.OperationalStatisticDescription
	(*OperationalStatisticElement)(nil),                                     // 12: com.github.markus_wa.demoinfocs_golang.s2.OperationalStatisticElement
	(*OperationalStatisticsPacket)(nil),                                     // 13: com.github.markus_wa.demoinfocs_golang.s2.OperationalStatisticsPacket
	(*OperationalVarValue)(nil),                                             // 14: com.github.markus_wa.demoinfocs_golang.s2.OperationalVarValue
	(*PlayerRankingInfo)(nil),                                               // 15: com.github.markus_wa.demoinfocs_golang.s2.PlayerRankingInfo
	(*PlayerCommendationInfo)(nil),                                          // 16: com.github.markus_wa.demoinfocs_golang.s2.PlayerCommendationInfo
	(*PlayerMedalsInfo)(nil),                                                // 17: com.github.markus_wa.demoinfocs_golang.s2.PlayerMedalsInfo
	(*AccountActivity)(nil),                                                 // 18: com.github.markus_wa.demoinfocs_golang.s2.AccountActivity
	(*TournamentMatchSetup)(nil),                                            // 19: com.github.markus_wa.demoinfocs_golang.s2.TournamentMatchSetup
	(*ServerHltvInfo)(nil),                                                  // 20: com.github.markus_wa.demoinfocs_golang.s2.ServerHltvInfo
	(*IpAddressMask)(nil),                                                   // 21: com.github.markus_wa.demoinfocs_golang.s2.IpAddressMask
	(*CMsgCsgoSteamUserStatChange)(nil),                                     // 22: com.github.markus_wa.demoinfocs_golang.s2.CMsgCsgoSteamUserStatChange
	(*XpProgressData)(nil),                                                  // 23: com.github.markus_wa.demoinfocs_golang.s2.XpProgressData
	(*MatchEndItemUpdates)(nil),                                             // 24: com.github.markus_wa.demoinfocs_golang.s2.MatchEndItemUpdates
	(*ScoreLeaderboardData)(nil),                                            // 25: com.github.markus_wa.demoinfocs_golang.s2.ScoreLeaderboardData
	(*PlayerQuestData)(nil),                                                 // 26: com.github.markus_wa.demoinfocs_golang.s2.PlayerQuestData
	(*DeepPlayerStatsEntry)(nil),                                            // 27: com.github.markus_wa.demoinfocs_golang.s2.DeepPlayerStatsEntry
	(*DeepPlayerMatchEvent)(nil),                                            // 28: com.github.markus_wa.demoinfocs_golang.s2.DeepPlayerMatchEvent
	(*CMsgGC_ServerQuestUpdateData)(nil),                                    // 29: com.github.markus_wa.demoinfocs_golang.s2.CMsgGC_ServerQuestUpdateData
	(*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm)(nil),                   // 30: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
	(*CMsgGCCStrike15V2_GC2ServerReservationUpdate)(nil),                    // 31: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GC2ServerReservationUpdate
	(*CMsgGCCStrike15V2_MatchmakingStart)(nil),                              // 32: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingStart
	(*CMsgGCCStrike15V2_MatchmakingStop)(nil),                               // 33: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingStop
	(*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note)(nil),               // 34: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note
	(*CMsgGCCStrike15V2_MatchmakingClient2ServerPing)(nil),                  // 35: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
	(*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate)(nil),                    // 36: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
	(*CDataGCCStrike15V2_TournamentMatchDraft)(nil),                         // 37: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentMatchDraft
	(*CPreMatchInfoData)(nil),                                               // 38: com.github.markus_wa.demoinfocs_golang.s2.CPreMatchInfoData
	(*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve)(nil),                   // 39: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
	(*CMsgGCCStrike15V2_MatchmakingServerReservationResponse)(nil),          // 40: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
	(*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve)(nil),                   // 41: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
	(*CMsgGCCStrike15V2_MatchmakingServerRoundStats)(nil),                   // 42: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerRoundStats
	(*CMsgGCCStrike15V2_MatchmakingClient2GCHello)(nil),                     // 43: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingClient2GCHello
	(*CMsgGCCStrike15V2_MatchmakingGC2ClientHello)(nil),                     // 44: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
	(*CMsgGCCStrike15V2_AccountPrivacySettings)(nil),                        // 45: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_AccountPrivacySettings
	(*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon)(nil),                   // 46: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
	(*CMsgGCCStrike15V2_ClientGCRankUpdate)(nil),                            // 47: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientGCRankUpdate
	(*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate)(nil),              // 48: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
	(*CMsgGCCStrike15V2_ServerNotificationForUserPenalty)(nil),              // 49: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
	(*CMsgGCCStrike15V2_ClientReportPlayer)(nil),                            // 50: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientReportPlayer
	(*CMsgGCCStrike15V2_ClientCommendPlayer)(nil),                           // 51: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientCommendPlayer
	(*CMsgGCCStrike15V2_ClientReportServer)(nil),                            // 52: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientReportServer
	(*CMsgGCCStrike15V2_ClientReportResponse)(nil),                          // 53: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientReportResponse
	(*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends)(nil),                 // 54: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
	(*WatchableMatchInfo)(nil),                                              // 55: com.github.markus_wa.demoinfocs_golang.s2.WatchableMatchInfo
	(*CMsgGCCStrike15V2_ClientRequestJoinFriendData)(nil),                   // 56: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientRequestJoinFriendData
	(*CMsgGCCStrike15V2_ClientRequestJoinServerData)(nil),                   // 57: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientRequestJoinServerData
	(*CMsgGCCstrike15V2_ClientRequestNewMission)(nil),                       // 58: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCstrike15_v2_ClientRequestNewMission
	(*CMsgGCCstrike15V2_ClientRedeemMissionReward)(nil),                     // 59: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCstrike15_v2_ClientRedeemMissionReward
	(*CMsgGCCstrike15V2_ClientRedeemFreeReward)(nil),                        // 60: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCstrike15_v2_ClientRedeemFreeReward
	(*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded)(nil),                     // 61: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
	(*CMsgGCCStrike15V2_ClientNetworkConfig)(nil),                           // 62: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientNetworkConfig
	(*CMsgGCCStrike15_ClientDeepStats)(nil),                                 // 63: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_ClientDeepStats
	(*CMsgGCCStrike15V2_WatchInfoUsers)(nil),                                // 64: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_WatchInfoUsers
	(*CMsgGCCStrike15V2_ClientRequestPlayersProfile)(nil),                   // 65: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientRequestPlayersProfile
	(*CMsgGCCStrike15V2_PlayersProfile)(nil),                                // 66: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_PlayersProfile
	(*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate)(nil),                     // 67: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
	(*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment)(nil),                 // 68: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
	(*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus)(nil),                     // 69: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
	(*CClientHeaderOverwatchEvidence)(nil),                                  // 70: com.github.markus_wa.demoinfocs_golang.s2.CClientHeaderOverwatchEvidence
	(*CMsgGCCStrike15V2_GC2ClientTextMsg)(nil),                              // 71: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GC2ClientTextMsg
	(*CMsgGCCStrike15V2_Client2GCTextMsg)(nil),                              // 72: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Client2GCTextMsg
	(*CMsgGCCStrike15V2_MatchEndRunRewardDrops)(nil),                        // 73: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchEndRunRewardDrops
	(*CEconItemPreviewDataBlock)(nil),                                       // 74: com.github.markus_wa.demoinfocs_golang.s2.CEconItemPreviewDataBlock
	(*CMsgGCCStrike15V2_MatchEndRewardDropsNotification)(nil),               // 75: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
	(*CMsgItemAcknowledged)(nil),                                            // 76: com.github.markus_wa.demoinfocs_golang.s2.CMsgItemAcknowledged
	(*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest)(nil),          // 77: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
	(*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse)(nil),         // 78: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
	(*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames)(nil),              // 79: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
	(*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser)(nil),               // 80: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
	(*CMsgGCCStrike15V2_MatchListRequestRecentUserGames)(nil),               // 81: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
	(*CMsgGCCStrike15V2_MatchListRequestTournamentGames)(nil),               // 82: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchListRequestTournamentGames
	(*CMsgGCCStrike15V2_MatchListRequestFullGameInfo)(nil),                  // 83: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
	(*CDataGCCStrike15V2_MatchInfo)(nil),                                    // 84: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_MatchInfo
	(*CDataGCCStrike15V2_TournamentGroupTeam)(nil),                          // 85: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentGroupTeam
	(*CDataGCCStrike15V2_TournamentGroup)(nil),                              // 86: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentGroup
	(*CDataGCCStrike15V2_TournamentSection)(nil),                            // 87: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentSection
	(*CDataGCCStrike15V2_TournamentInfo)(nil),                               // 88: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentInfo
	(*CMsgGCCStrike15V2_MatchList)(nil),                                     // 89: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchList
	(*CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt)(nil),               // 90: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt
	(*CMsgGCCStrike15V2_Predictions)(nil),                                   // 91: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Predictions
	(*CMsgGCCStrike15V2_Fantasy)(nil),                                       // 92: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Fantasy
	(*CAttribute_String)(nil),                                               // 93: com.github.markus_wa.demoinfocs_golang.s2.CAttribute_String
	(*CMsgLegacySource1ClientWelcome)(nil),                                  // 94: com.github.markus_wa.demoinfocs_golang.s2.CMsgLegacySource1ClientWelcome
	(*CMsgCStrike15Welcome)(nil),                                            // 95: com.github.markus_wa.demoinfocs_golang.s2.CMsgCStrike15Welcome
	(*CMsgGCCStrike15V2_ClientVarValueNotificationInfo)(nil),                // 96: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
	(*CMsgGCCStrike15V2_ServerVarValueNotificationInfo)(nil),                // 97: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
	(*CMsgGCCStrike15V2_GiftsLeaderboardRequest)(nil),                       // 98: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GiftsLeaderboardRequest
	(*CMsgGCCStrike15V2_GiftsLeaderboardResponse)(nil),                      // 99: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GiftsLeaderboardResponse
	(*CMsgGCCStrike15V2_ClientSubmitSurveyVote)(nil),                        // 100: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientSubmitSurveyVote
	(*CMsgGCCStrike15V2_Server2GCClientValidate)(nil),                       // 101: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Server2GCClientValidate
	(*CMsgGCCStrike15V2_GC2ClientTournamentInfo)(nil),                       // 102: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GC2ClientTournamentInfo
	(*CSOEconCoupon)(nil),                                                   // 103: com.github.markus_wa.demoinfocs_golang.s2.CSOEconCoupon
	(*CSOAccountItemPersonalStore)(nil),                                     // 104: com.github.markus_wa.demoinfocs_golang.s2.CSOAccountItemPersonalStore
	(*CSOQuestProgress)(nil),                                                // 105: com.github.markus_wa.demoinfocs_golang.s2.CSOQuestProgress
	(*CSOAccountSeasonalOperation)(nil),                                     // 106: com.github.markus_wa.demoinfocs_golang.s2.CSOAccountSeasonalOperation
	(*CSOAccountRecurringSubscription)(nil),                                 // 107: com.github.markus_wa.demoinfocs_golang.s2.CSOAccountRecurringSubscription
	(*CSOPersonaDataPublic)(nil),                                            // 108: com.github.markus_wa.demoinfocs_golang.s2.CSOPersonaDataPublic
	(*CMsgGC_GlobalGame_Subscribe)(nil),                                     // 109: com.github.markus_wa.demoinfocs_golang.s2.CMsgGC_GlobalGame_Subscribe
	(*CMsgGC_GlobalGame_Unsubscribe)(nil),                                   // 110: com.github.markus_wa.demoinfocs_golang.s2.CMsgGC_GlobalGame_Unsubscribe
	(*CMsgGC_GlobalGame_Play)(nil),                                          // 111: com.github.markus_wa.demoinfocs_golang.s2.CMsgGC_GlobalGame_Play
	(*CMsgGCCStrike15V2_AcknowledgePenalty)(nil),                            // 112: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_AcknowledgePenalty
	(*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin)(nil),                  // 113: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
	(*CMsgGCCStrike15V2_Client2GCStreamUnlock)(nil),                         // 114: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Client2GCStreamUnlock
	(*CMsgGCCStrike15V2_ClientToGCRequestElevate)(nil),                      // 115: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientToGCRequestElevate
	(*CMsgGCCStrike15V2_ClientToGCChat)(nil),                                // 116: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientToGCChat
	(*CMsgGCCStrike15V2_GCToClientChat)(nil),                                // 117: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GCToClientChat
	(*CMsgGCCStrike15V2_ClientAuthKeyCode)(nil),                             // 118: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientAuthKeyCode
	(*CMsgGCCStrike15_GotvSyncPacket)(nil),                                  // 119: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_GotvSyncPacket
	(*PlayerDecalDigitalSignature)(nil),                                     // 120: com.github.markus_wa.demoinfocs_golang.s2.PlayerDecalDigitalSignature
	(*CMsgGCCStrike15V2_ClientPlayerDecalSign)(nil),                         // 121: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPlayerDecalSign
	(*CMsgGCCStrike15V2_BetaEnrollment)(nil),                                // 122: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_BetaEnrollment
	(*CMsgGCCStrike15V2_ClientLogonFatalError)(nil),                         // 123: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientLogonFatalError
	(*CMsgGCCStrike15V2_ClientPollState)(nil),                               // 124: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPollState
	(*CMsgGCCStrike15V2_Party_Register)(nil),                                // 125: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Party_Register
	(*CMsgGCCStrike15V2_Party_Search)(nil),                                  // 126: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Party_Search
	(*CMsgGCCStrike15V2_Party_SearchResults)(nil),                           // 127: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Party_SearchResults
	(*CMsgGCCStrike15V2_Party_Invite)(nil),                                  // 128: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Party_Invite
	(*CMsgGCCStrike15V2_Account_RequestCoPlays)(nil),                        // 129: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Account_RequestCoPlays
	(*CMsgGCCStrike15V2_ClientToGCRequestTicket)(nil),                       // 130: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientToGCRequestTicket
	(*CMsgGCToClientSteamDatagramTicket)(nil),                               // 131: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCToClientSteamDatagramTicket
	(*CMsgGCCStrike15V2_ClientRequestOffers)(nil),                           // 132: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientRequestOffers
	(*CMsgGCCStrike15V2_ClientRequestSouvenir)(nil),                         // 133: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientRequestSouvenir
	(*CMsgGCCStrike15V2_ClientAccountBalance)(nil),                          // 134: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientAccountBalance
	(*CMsgGCCStrike15V2_ClientPartyJoinRelay)(nil),                          // 135: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPartyJoinRelay
	(*CMsgGCCStrike15V2_ClientPartyWarning)(nil),                            // 136: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPartyWarning
	(*CMsgGCCStrike15V2_SetEventFavorite)(nil),                              // 137: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_SetEventFavorite
	(*CMsgGCCStrike15V2_GetEventFavorites_Request)(nil),                     // 138: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GetEventFavorites_Request
	(*CMsgGCCStrike15V2_GetEventFavorites_Response)(nil),                    // 139: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GetEventFavorites_Response
	(*CMsgGCCStrike15V2_ClientPerfReport)(nil),                              // 140: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPerfReport
	(*CVDiagnostic)(nil),                                                    // 141: com.github.markus_wa.demoinfocs_golang.s2.CVDiagnostic
	(*CMsgGCCStrike15V2_ClientReportValidation)(nil),                        // 142: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientReportValidation
	(*CMsgGCCStrike15V2_GC2ClientRefuseSecureMode)(nil),                     // 143: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode
	(*CMsgGCCStrike15V2_GC2ClientRequestValidation)(nil),                    // 144: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GC2ClientRequestValidation
	(*CMsgGCCStrike15V2_GC2ClientInitSystem)(nil),                           // 145: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GC2ClientInitSystem
	(*CMsgGCCStrike15V2_GC2ClientInitSystem_Response)(nil),                  // 146: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GC2ClientInitSystem_Response
	(*CMsgGCCStrike15V2_SetPlayerLeaderboardSafeName)(nil),                  // 147: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName
	(*PlayerRankingInfo_PerMapRank)(nil),                                    // 148: com.github.markus_wa.demoinfocs_golang.s2.PlayerRankingInfo.PerMapRank
	(*ScoreLeaderboardData_Entry)(nil),                                      // 149: com.github.markus_wa.demoinfocs_golang.s2.ScoreLeaderboardData.Entry
	(*ScoreLeaderboardData_AccountEntries)(nil),                             // 150: com.github.markus_wa.demoinfocs_golang.s2.ScoreLeaderboardData.AccountEntries
	(*PlayerQuestData_QuestItemData)(nil),                                   // 151: com.github.markus_wa.demoinfocs_golang.s2.PlayerQuestData.QuestItemData
	(*CDataGCCStrike15V2_TournamentMatchDraft_Entry)(nil),                   // 152: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentMatchDraft.Entry
	(*CPreMatchInfoData_TeamStats)(nil),                                     // 153: com.github.markus_wa.demoinfocs_golang.s2.CPreMatchInfoData.TeamStats
	(*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo)(nil),          // 154: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
	(*CMsgGCCStrike15V2_AccountPrivacySettings_Setting)(nil),                // 155: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
	(*CMsgGCCStrike15_ClientDeepStats_DeepStatsRange)(nil),                  // 156: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_ClientDeepStats.DeepStatsRange
	(*CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch)(nil),                  // 157: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch
	(*CEconItemPreviewDataBlock_Sticker)(nil),                               // 158: com.github.markus_wa.demoinfocs_golang.s2.CEconItemPreviewDataBlock.Sticker
	(*CDataGCCStrike15V2_TournamentGroup_Picks)(nil),                        // 159: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentGroup.Picks
	(*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick)(nil),                // 160: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
	(*CMsgGCCStrike15V2_Fantasy_FantasySlot)(nil),                           // 161: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Fantasy.FantasySlot
	(*CMsgGCCStrike15V2_Fantasy_FantasyTeam)(nil),                           // 162: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Fantasy.FantasyTeam
	(*CMsgLegacySource1ClientWelcome_Location)(nil),                         // 163: com.github.markus_wa.demoinfocs_golang.s2.CMsgLegacySource1ClientWelcome.Location
	(*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry)(nil), // 164: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
	(*CMsgGCCStrike15V2_Party_SearchResults_Entry)(nil),                     // 165: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Party_SearchResults.Entry
	(*CMsgGCCStrike15V2_Account_RequestCoPlays_Player)(nil),                 // 166: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
	(*CMsgGCCStrike15V2_ClientPartyWarning_Entry)(nil),                      // 167: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPartyWarning.Entry
	(*CMsgGCCStrike15V2_ClientPerfReport_Entry)(nil),                        // 168: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPerfReport.Entry
	(*CMsgSOCacheSubscribed)(nil),                                           // 169: com.github.markus_wa.demoinfocs_golang.s2.CMsgSOCacheSubscribed
	(*CMsgSOCacheSubscriptionCheck)(nil),                                    // 170: com.github.markus_wa.demoinfocs_golang.s2.CMsgSOCacheSubscriptionCheck
	(*CEngineGotvSyncPacket)(nil),                                           // 171: com.github.markus_wa.demoinfocs_golang.s2.CEngineGotvSyncPacket
}
var file_s2_cstrike15_gcmessages_proto_depIdxs = []int32{
	7,   // 0: com.github.markus_wa.demoinfocs_golang.s2.TournamentTeam.players:type_name -> com.github.markus_wa.demoinfocs_golang.s2.TournamentPlayer
	6,   // 1: com.github.markus_wa.demoinfocs_golang.s2.GlobalStatistics.search_statistics:type_name -> com.github.markus_wa.demoinfocs_golang.s2.DetailedSearchStatistic
	12,  // 2: com.github.markus_wa.demoinfocs_golang.s2.OperationalStatisticsPacket.values:type_name -> com.github.markus_wa.demoinfocs_golang.s2.OperationalStatisticElement
	148, // 3: com.github.markus_wa.demoinfocs_golang.s2.PlayerRankingInfo.per_map_rank:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerRankingInfo.PerMapRank
	150, // 4: com.github.markus_wa.demoinfocs_golang.s2.ScoreLeaderboardData.accountentries:type_name -> com.github.markus_wa.demoinfocs_golang.s2.ScoreLeaderboardData.AccountEntries
	149, // 5: com.github.markus_wa.demoinfocs_golang.s2.ScoreLeaderboardData.matchentries:type_name -> com.github.markus_wa.demoinfocs_golang.s2.ScoreLeaderboardData.Entry
	151, // 6: com.github.markus_wa.demoinfocs_golang.s2.PlayerQuestData.quest_item_data:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerQuestData.QuestItemData
	23,  // 7: com.github.markus_wa.demoinfocs_golang.s2.PlayerQuestData.xp_progress_data:type_name -> com.github.markus_wa.demoinfocs_golang.s2.XpProgressData
	24,  // 8: com.github.markus_wa.demoinfocs_golang.s2.PlayerQuestData.item_updates:type_name -> com.github.markus_wa.demoinfocs_golang.s2.MatchEndItemUpdates
	22,  // 9: com.github.markus_wa.demoinfocs_golang.s2.PlayerQuestData.userstatchanges:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgCsgoSteamUserStatChange
	26,  // 10: com.github.markus_wa.demoinfocs_golang.s2.CMsgGC_ServerQuestUpdateData.player_quest_data:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerQuestData
	25,  // 11: com.github.markus_wa.demoinfocs_golang.s2.CMsgGC_ServerQuestUpdateData.missionlbsdata:type_name -> com.github.markus_wa.demoinfocs_golang.s2.ScoreLeaderboardData
	19,  // 12: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingStart.tournament_match:type_name -> com.github.markus_wa.demoinfocs_golang.s2.TournamentMatchSetup
	4,   // 13: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.gameserverpings:type_name -> com.github.markus_wa.demoinfocs_golang.s2.GameServerPing
	5,   // 14: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.data_center_pings:type_name -> com.github.markus_wa.demoinfocs_golang.s2.DataCenterPing
	34,  // 15: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.notes:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note
	10,  // 16: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.global_stats:type_name -> com.github.markus_wa.demoinfocs_golang.s2.GlobalStatistics
	21,  // 17: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.server_ipaddress_mask:type_name -> com.github.markus_wa.demoinfocs_golang.s2.IpAddressMask
	34,  // 18: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.notes:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note
	152, // 19: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentMatchDraft.drafts:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentMatchDraft.Entry
	37,  // 20: com.github.markus_wa.demoinfocs_golang.s2.CPreMatchInfoData.draft:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentMatchDraft
	153, // 21: com.github.markus_wa.demoinfocs_golang.s2.CPreMatchInfoData.stats:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CPreMatchInfoData.TeamStats
	15,  // 22: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.rankings:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerRankingInfo
	21,  // 23: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.whitelist:type_name -> com.github.markus_wa.demoinfocs_golang.s2.IpAddressMask
	9,   // 24: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_event:type_name -> com.github.markus_wa.demoinfocs_golang.s2.TournamentEvent
	8,   // 25: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_teams:type_name -> com.github.markus_wa.demoinfocs_golang.s2.TournamentTeam
	38,  // 26: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.pre_match_data:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CPreMatchInfoData
	14,  // 27: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.op_var_values:type_name -> com.github.markus_wa.demoinfocs_golang.s2.OperationalVarValue
	39,  // 28: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reservation:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
	20,  // 29: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tv_info:type_name -> com.github.markus_wa.demoinfocs_golang.s2.ServerHltvInfo
	39,  // 30: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.reservation:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
	5,   // 31: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.gs_ping:type_name -> com.github.markus_wa.demoinfocs_golang.s2.DataCenterPing
	39,  // 32: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservation:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
	30,  // 33: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.confirm:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
	154, // 34: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.drop_info:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
	41,  // 35: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ongoingmatch:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
	10,  // 36: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.global_stats:type_name -> com.github.markus_wa.demoinfocs_golang.s2.GlobalStatistics
	15,  // 37: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ranking:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerRankingInfo
	16,  // 38: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.commendation:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerCommendationInfo
	17,  // 39: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.medals:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerMedalsInfo
	9,   // 40: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event:type_name -> com.github.markus_wa.demoinfocs_golang.s2.TournamentEvent
	8,   // 41: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_teams:type_name -> com.github.markus_wa.demoinfocs_golang.s2.TournamentTeam
	8,   // 42: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_team:type_name -> com.github.markus_wa.demoinfocs_golang.s2.TournamentTeam
	9,   // 43: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_stages:type_name -> com.github.markus_wa.demoinfocs_golang.s2.TournamentEvent
	18,  // 44: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.activity:type_name -> com.github.markus_wa.demoinfocs_golang.s2.AccountActivity
	15,  // 45: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.rankings:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerRankingInfo
	155, // 46: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_AccountPrivacySettings.settings:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
	41,  // 47: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.abandoned_match:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
	15,  // 48: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientGCRankUpdate.rankings:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerRankingInfo
	16,  // 49: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientCommendPlayer.commendation:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerCommendationInfo
	5,   // 50: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.data_center_pings:type_name -> com.github.markus_wa.demoinfocs_golang.s2.DataCenterPing
	41,  // 51: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientRequestJoinFriendData.res:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
	41,  // 52: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientRequestJoinServerData.res:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
	23,  // 53: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.xp_progress_data:type_name -> com.github.markus_wa.demoinfocs_golang.s2.XpProgressData
	156, // 54: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_ClientDeepStats.range:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_ClientDeepStats.DeepStatsRange
	157, // 55: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_ClientDeepStats.matches:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch
	55,  // 56: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_WatchInfoUsers.watchable_match_infos:type_name -> com.github.markus_wa.demoinfocs_golang.s2.WatchableMatchInfo
	44,  // 57: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_PlayersProfile.account_profiles:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
	40,  // 58: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchEndRunRewardDrops.serverinfo:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
	29,  // 59: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchEndRunRewardDrops.match_end_quest_data:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGC_ServerQuestUpdateData
	158, // 60: com.github.markus_wa.demoinfocs_golang.s2.CEconItemPreviewDataBlock.stickers:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CEconItemPreviewDataBlock.Sticker
	74,  // 61: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.iteminfo:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CEconItemPreviewDataBlock
	74,  // 62: com.github.markus_wa.demoinfocs_golang.s2.CMsgItemAcknowledged.iteminfo:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CEconItemPreviewDataBlock
	74,  // 63: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.iteminfo:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CEconItemPreviewDataBlock
	55,  // 64: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_MatchInfo.watchablematchinfo:type_name -> com.github.markus_wa.demoinfocs_golang.s2.WatchableMatchInfo
	42,  // 65: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_MatchInfo.roundstats_legacy:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerRoundStats
	42,  // 66: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_MatchInfo.roundstatsall:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchmakingServerRoundStats
	85,  // 67: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentGroup.teams:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentGroupTeam
	159, // 68: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentGroup.picks:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentGroup.Picks
	86,  // 69: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentSection.groups:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentGroup
	87,  // 70: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentInfo.sections:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentSection
	9,   // 71: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentInfo.tournament_event:type_name -> com.github.markus_wa.demoinfocs_golang.s2.TournamentEvent
	8,   // 72: com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentInfo.tournament_teams:type_name -> com.github.markus_wa.demoinfocs_golang.s2.TournamentTeam
	84,  // 73: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchList.matches:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_MatchInfo
	8,   // 74: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchList.streams:type_name -> com.github.markus_wa.demoinfocs_golang.s2.TournamentTeam
	88,  // 75: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchList.tournamentinfo:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_TournamentInfo
	84,  // 76: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt.matches:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CDataGCCStrike15_v2_MatchInfo
	160, // 77: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Predictions.group_match_team_picks:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
	162, // 78: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Fantasy.teams:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Fantasy.FantasyTeam
	169, // 79: com.github.markus_wa.demoinfocs_golang.s2.CMsgLegacySource1ClientWelcome.outofdate_subscribed_caches:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgSOCacheSubscribed
	170, // 80: com.github.markus_wa.demoinfocs_golang.s2.CMsgLegacySource1ClientWelcome.uptodate_subscribed_caches:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgSOCacheSubscriptionCheck
	163, // 81: com.github.markus_wa.demoinfocs_golang.s2.CMsgLegacySource1ClientWelcome.location:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgLegacySource1ClientWelcome.Location
	164, // 82: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.entries:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
	16,  // 83: com.github.markus_wa.demoinfocs_golang.s2.CSOPersonaDataPublic.commendation:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerCommendationInfo
	171, // 84: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_GotvSyncPacket.data:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CEngineGotvSyncPacket
	120, // 85: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPlayerDecalSign.data:type_name -> com.github.markus_wa.demoinfocs_golang.s2.PlayerDecalDigitalSignature
	165, // 86: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Party_SearchResults.entries:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Party_SearchResults.Entry
	166, // 87: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Account_RequestCoPlays.players:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
	167, // 88: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPartyWarning.entries:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPartyWarning.Entry
	168, // 89: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPerfReport.entries:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientPerfReport.Entry
	141, // 90: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_ClientReportValidation.diagnostics:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CVDiagnostic
	3,   // 91: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_GC2ClientInitSystem_Response.einit_result:type_name -> com.github.markus_wa.demoinfocs_golang.s2.EInitSystemResult
	149, // 92: com.github.markus_wa.demoinfocs_golang.s2.ScoreLeaderboardData.AccountEntries.entries:type_name -> com.github.markus_wa.demoinfocs_golang.s2.ScoreLeaderboardData.Entry
	27,  // 93: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch.player:type_name -> com.github.markus_wa.demoinfocs_golang.s2.DeepPlayerStatsEntry
	28,  // 94: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch.events:type_name -> com.github.markus_wa.demoinfocs_golang.s2.DeepPlayerMatchEvent
	161, // 95: com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Fantasy.FantasyTeam.slots:type_name -> com.github.markus_wa.demoinfocs_golang.s2.CMsgGCCStrike15_v2_Fantasy.FantasySlot
	96,  // [96:96] is the sub-list for method output_type
	96,  // [96:96] is the sub-list for method input_type
	96,  // [96:96] is the sub-list for extension type_name
	96,  // [96:96] is the sub-list for extension extendee
	0,   // [0:96] is the sub-list for field type_name
}

func init() { file_s2_cstrike15_gcmessages_proto_init() }
func file_s2_cstrike15_gcmessages_proto_init() {
	if File_s2_cstrike15_gcmessages_proto != nil {
		return
	}
	file_s2_steammessages_proto_init()
	file_s2_engine_gcmessages_proto_init()
	file_s2_gcsdk_gcmessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_s2_cstrike15_gcmessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCenterPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedSearchStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalStatisticDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalStatisticElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalStatisticsPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalVarValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRankingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerCommendationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMedalsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentMatchSetup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerHltvInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAddressMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCsgoSteamUserStatChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XpProgressData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchEndItemUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreLeaderboardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQuestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepPlayerStatsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepPlayerMatchEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_ServerQuestUpdateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GC2ServerReservationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingClient2ServerPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDataGCCStrike15V2_TournamentMatchDraft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPreMatchInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingServerReservationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingServerRoundStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingClient2GCHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingGC2ClientHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_AccountPrivacySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientGCRankUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ServerNotificationForUserPenalty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientReportPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientCommendPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientReportServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchableMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientRequestJoinFriendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientRequestJoinServerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCstrike15V2_ClientRequestNewMission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCstrike15V2_ClientRedeemMissionReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCstrike15V2_ClientRedeemFreeReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientNetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15_ClientDeepStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_WatchInfoUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientRequestPlayersProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_PlayersProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientHeaderOverwatchEvidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GC2ClientTextMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Client2GCTextMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchEndRunRewardDrops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEconItemPreviewDataBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchEndRewardDropsNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgItemAcknowledged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchListRequestRecentUserGames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchListRequestTournamentGames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchListRequestFullGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDataGCCStrike15V2_MatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDataGCCStrike15V2_TournamentGroupTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDataGCCStrike15V2_TournamentGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDataGCCStrike15V2_TournamentSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDataGCCStrike15V2_TournamentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchListTournamentOperatorMgmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Predictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Fantasy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAttribute_String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLegacySource1ClientWelcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCStrike15Welcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientVarValueNotificationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ServerVarValueNotificationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GiftsLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GiftsLeaderboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientSubmitSurveyVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Server2GCClientValidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GC2ClientTournamentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOEconCoupon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOAccountItemPersonalStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOQuestProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOAccountSeasonalOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOAccountRecurringSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOPersonaDataPublic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GlobalGame_Subscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GlobalGame_Unsubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GlobalGame_Play); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_AcknowledgePenalty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Client2GCStreamUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientToGCRequestElevate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientToGCChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GCToClientChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientAuthKeyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15_GotvSyncPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDecalDigitalSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientPlayerDecalSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_BetaEnrollment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientLogonFatalError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientPollState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Party_Register); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Party_Search); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Party_SearchResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Party_Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Account_RequestCoPlays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientToGCRequestTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientSteamDatagramTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientRequestOffers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientRequestSouvenir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientAccountBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientPartyJoinRelay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientPartyWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_SetEventFavorite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GetEventFavorites_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GetEventFavorites_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientPerfReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVDiagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientReportValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GC2ClientRefuseSecureMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GC2ClientRequestValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GC2ClientInitSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GC2ClientInitSystem_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_SetPlayerLeaderboardSafeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRankingInfo_PerMapRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreLeaderboardData_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreLeaderboardData_AccountEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQuestData_QuestItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDataGCCStrike15V2_TournamentMatchDraft_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPreMatchInfoData_TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_AccountPrivacySettings_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15_ClientDeepStats_DeepStatsRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEconItemPreviewDataBlock_Sticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDataGCCStrike15V2_TournamentGroup_Picks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Fantasy_FantasySlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Fantasy_FantasyTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLegacySource1ClientWelcome_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Party_SearchResults_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_Account_RequestCoPlays_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientPartyWarning_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s2_cstrike15_gcmessages_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCCStrike15V2_ClientPerfReport_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s2_cstrike15_gcmessages_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   165,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_s2_cstrike15_gcmessages_proto_goTypes,
		DependencyIndexes: file_s2_cstrike15_gcmessages_proto_depIdxs,
		EnumInfos:         file_s2_cstrike15_gcmessages_proto_enumTypes,
		MessageInfos:      file_s2_cstrike15_gcmessages_proto_msgTypes,
	}.Build()
	File_s2_cstrike15_gcmessages_proto = out.File
	file_s2_cstrike15_gcmessages_proto_rawDesc = nil
	file_s2_cstrike15_gcmessages_proto_goTypes = nil
	file_s2_cstrike15_gcmessages_proto_depIdxs = nil
}
